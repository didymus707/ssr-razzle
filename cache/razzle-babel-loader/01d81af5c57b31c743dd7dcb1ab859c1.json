{"ast":null,"code":"const _excluded = [\"name\", \"onChange\"];\nvar _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/components/FileSelectButton/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useRef } from 'react';\nimport { Button } from '../Button';\nexport const FileSelectButton = props => {\n  const inputRef = useRef(null);\n\n  const {\n    name,\n    onChange\n  } = props,\n        rest = _objectWithoutProperties(props, _excluded);\n\n  const handleChange = event => {\n    props.onChange(event);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, __jsx(\"input\", {\n    ref: inputRef,\n    name: name,\n    type: \"file\",\n    style: {\n      display: 'none'\n    },\n    onChange: handleChange,\n    accept: props.accept,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }), __jsx(Button, _extends({}, rest, {\n    size: \"sm\",\n    variant: \"link\",\n    color: \"#333333\",\n    leftIcon: \"arrow-up\",\n    onClick: () => {\n      // @ts-ignore\n      inputRef.current.click();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }), \"Select File\"));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/components/FileSelectButton/index.tsx"],"names":["React","useRef","Button","FileSelectButton","props","inputRef","name","onChange","rest","handleChange","event","display","accept","current","click"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAA6BC,MAA7B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,WAAvB;AAQA,OAAO,MAAMC,gBAAgB,GAAIC,KAAD,IAAkB;AAChD,QAAMC,QAAQ,GAAGJ,MAAM,CAAC,IAAD,CAAvB;;AAEA,QAAM;AAAEK,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAA8BH,KAApC;AAAA,QAA2BI,IAA3B,4BAAoCJ,KAApC;;AAEA,QAAMK,YAAY,GAAIC,KAAD,IAA0C;AAC7DN,IAAAA,KAAK,CAACG,QAAN,CAAeG,KAAf;AACD,GAFD;;AAIA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,GAAG,EAAEL,QADP;AAEE,IAAA,IAAI,EAAEC,IAFR;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,KAAK,EAAE;AAAEK,MAAAA,OAAO,EAAE;AAAX,KAJT;AAKE,IAAA,QAAQ,EAAEF,YALZ;AAME,IAAA,MAAM,EAAEL,KAAK,CAACQ,MANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EASE,MAAC,MAAD,eACMJ,IADN;AAEE,IAAA,IAAI,EAAC,IAFP;AAGE,IAAA,OAAO,EAAC,MAHV;AAIE,IAAA,KAAK,EAAC,SAJR;AAKE,IAAA,QAAQ,EAAC,UALX;AAME,IAAA,OAAO,EAAE,MAAM;AACb;AACAH,MAAAA,QAAQ,CAACQ,OAAT,CAAiBC,KAAjB;AACD,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBATF,CADF;AAyBD,CAlCM","sourcesContent":["import React, { ChangeEvent, useRef } from 'react';\nimport { Button } from '../Button';\n\ninterface Props {\n  name: string;\n  onChange: Function;\n  accept?: string;\n}\n\nexport const FileSelectButton = (props: Props) => {\n  const inputRef = useRef(null);\n\n  const { name, onChange, ...rest } = props;\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    props.onChange(event);\n  };\n\n  return (\n    <div>\n      <input\n        ref={inputRef}\n        name={name}\n        type=\"file\"\n        style={{ display: 'none' }}\n        onChange={handleChange}\n        accept={props.accept}\n      />\n      <Button\n        {...rest}\n        size=\"sm\"\n        variant=\"link\"\n        color=\"#333333\"\n        leftIcon=\"arrow-up\"\n        onClick={() => {\n          // @ts-ignore\n          inputRef.current.click();\n        }}\n      >\n        Select File\n      </Button>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}