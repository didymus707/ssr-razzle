{"ast":null,"code":"import _extends from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nconst _excluded = [\"onSuccess\", \"onError\", \"buttonText\"];\nvar _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/components/StripeForm/index.tsx\";\nvar __jsx = React.createElement;\nimport { useToast, Box } from '@chakra-ui/core';\nimport { CardElement, useElements, useStripe } from '@stripe/react-stripe-js';\nimport React from 'react';\nimport { Button } from '../Button';\nimport { ToastBox } from '../ToastBox';\nexport const StripeForm = _ref => {\n  let {\n    onSuccess,\n    onError,\n    buttonText = 'Pay'\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  const toast = useToast();\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const cardElement = elements.getElement(CardElement);\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement\n    });\n\n    if (error) {\n      onError && onError(error);\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 34\n          }\n        })\n      });\n    } else {\n      onSuccess && onSuccess(paymentMethod);\n    }\n  };\n\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    my: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, __jsx(CardElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  })), stripe && __jsx(Button, _extends({\n    type: \"submit\",\n    variantColor: \"blue\",\n    isDisabled: !stripe\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }), buttonText));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/components/StripeForm/index.tsx"],"names":["useToast","Box","CardElement","useElements","useStripe","React","Button","ToastBox","StripeForm","onSuccess","onError","buttonText","rest","toast","stripe","elements","handleSubmit","event","preventDefault","cardElement","getElement","error","paymentMethod","createPaymentMethod","type","card","position","render","onClose","message"],"mappings":";;;;;AAAA,SAASA,QAAT,EAAgCC,GAAhC,QAA2C,iBAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,SAAnC,QAAoD,yBAApD;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,QAAT,QAAyB,aAAzB;AAQA,OAAO,MAAMC,UAAU,GAAG,QAKH;AAAA,MALI;AACzBC,IAAAA,SADyB;AAEzBC,IAAAA,OAFyB;AAGzBC,IAAAA,UAAU,GAAG;AAHY,GAKJ;AAAA,MADlBC,IACkB;;AACrB,QAAMC,KAAK,GAAGb,QAAQ,EAAtB;AACA,QAAMc,MAAM,GAAGV,SAAS,EAAxB;AACA,QAAMW,QAAQ,GAAGZ,WAAW,EAA5B;;AAEA,QAAMa,YAAY,GAAG,MAAOC,KAAP,IAAsB;AACzC;AACAA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAI,CAACJ,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACxB;AACA;AACA;AACD;;AAED,UAAMI,WAAW,GAAGJ,QAAQ,CAACK,UAAT,CAAoBlB,WAApB,CAApB;AACA,UAAM;AAAEmB,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAA2B,MAAMR,MAAM,CAACS,mBAAP,CAA2B;AAChEC,MAAAA,IAAI,EAAE,MAD0D;AAEhEC,MAAAA,IAAI,EAAEN;AAF0D,KAA3B,CAAvC;;AAKA,QAAIE,KAAJ,EAAW;AACTX,MAAAA,OAAO,IAAIA,OAAO,CAACW,KAAD,CAAlB;AACAR,MAAAA,KAAK,CAAC;AACJa,QAAAA,QAAQ,EAAE,aADN;AAEJC,QAAAA,MAAM,EAAE,CAAC;AAAEC,UAAAA;AAAF,SAAD,KAAiB,MAAC,QAAD;AAAU,UAAA,OAAO,EAAEA,OAAnB;AAA4B,UAAA,OAAO,EAAEP,KAAK,CAACQ,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFrB,OAAD,CAAL;AAID,KAND,MAMO;AACLpB,MAAAA,SAAS,IAAIA,SAAS,CAACa,aAAD,CAAtB;AACD;AACF,GAzBD;;AA2BA,SACE;AAAM,IAAA,QAAQ,EAAEN,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIGF,MAAM,IACL,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,YAAY,EAAC,MAAnC;AAA0C,IAAA,UAAU,EAAE,CAACA;AAAvD,KAAmEF,IAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGD,UADH,CALJ,CADF;AAYD,CAjDM","sourcesContent":["import { useToast, ButtonProps, Box } from '@chakra-ui/core';\nimport { CardElement, useElements, useStripe } from '@stripe/react-stripe-js';\nimport { PaymentMethod, StripeCardElement, StripeError } from '@stripe/stripe-js';\nimport React from 'react';\nimport { Button } from '../Button';\nimport { ToastBox } from '../ToastBox';\n\ntype StripeFormProps = {\n  buttonText?: string;\n  onError?: (error?: StripeError) => void;\n  onSuccess?: (paymentMethod?: PaymentMethod) => void;\n} & Omit<ButtonProps, 'children'>;\n\nexport const StripeForm = ({\n  onSuccess,\n  onError,\n  buttonText = 'Pay',\n  ...rest\n}: StripeFormProps) => {\n  const toast = useToast();\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async (event: any) => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const cardElement = elements.getElement(CardElement) as StripeCardElement;\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement,\n    });\n\n    if (error) {\n      onError && onError(error);\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error.message} />,\n      });\n    } else {\n      onSuccess && onSuccess(paymentMethod);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Box my=\"1rem\">\n        <CardElement />\n      </Box>\n      {stripe && (\n        <Button type=\"submit\" variantColor=\"blue\" isDisabled={!stripe} {...rest}>\n          {buttonText}\n        </Button>\n      )}\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}