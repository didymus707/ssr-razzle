{"ast":null,"code":"import _objectWithoutProperties from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nconst _excluded = [\"channel\"],\n      _excluded2 = [\"channel\"];\nimport { client, buildConversationUrl, loadState } from '../../../utils'; //////////////////////////////////////////////////////////////\n// Channels API Integration\n\nasync function getUserChannels() {\n  const response = await client('', {\n    url: buildConversationUrl('auth/channel-accounts')\n  });\n  return response.data.credentials;\n}\n\nasync function getUserChannelConnectedAccounts(channelName) {\n  const response = await client('', {\n    url: buildConversationUrl(`auth/channel-accounts/${channelName}`)\n  });\n  return response.data.credentials;\n}\n\nfunction getSupportedChannels(params) {\n  return client('', {\n    url: buildConversationUrl(`channels/${params.organisation_id}`)\n  });\n}\n\nasync function fetchCredentials() {\n  const response = await client('', {\n    url: buildConversationUrl(`channels`)\n  });\n  return response.data;\n}\n\nfunction unlinkChannel(params) {\n  const {\n    id,\n    disconnector_id\n  } = params;\n  return client('', {\n    url: buildConversationUrl(`auth/revoke/${id}`),\n    method: 'POST',\n    data: {\n      disconnector_id\n    }\n  });\n}\n\nfunction removeCredential(params) {\n  const {\n    credential_id\n  } = params;\n  return client('', {\n    url: buildConversationUrl(`auth/revoke/${credential_id}`),\n    method: 'PATCH'\n  });\n}\n\nfunction fetchPotentialAccts(params) {\n  const {\n    channel\n  } = params,\n        rest = _objectWithoutProperties(params, _excluded);\n\n  const query = new URLSearchParams();\n  Object.keys(rest).forEach(key => {\n    const value = rest[key];\n    value && query.append(key, key === 'phoneTypes' ? JSON.stringify(value) : value);\n  });\n  return client('', {\n    url: buildConversationUrl(`auth/potential-accounts/${channel}?${query.toString()}`)\n  });\n}\n\nfunction connectCredential(params) {\n  const {\n    channel\n  } = params,\n        data = _objectWithoutProperties(params, _excluded2);\n\n  return client('', {\n    method: 'POST',\n    data: data ? data : null,\n    url: buildConversationUrl(`auth/potential-accounts/${channel}`)\n  });\n}\n\nfunction registerToBeNotify(params) {\n  const {\n    channel,\n    email\n  } = params;\n  return client('', {\n    method: 'POST',\n    data: {\n      channel,\n      email,\n      type: 'notify-about-new-channel'\n    },\n    url: 'https://mailchimp-list-subscribe-app.herokuapp.com/subscribe'\n  });\n}\n\nfunction fetchSupportedCountries() {\n  return client('', {\n    url: buildConversationUrl('auth/phones/supported-countries')\n  });\n}\n\nfunction updateChannelName(params) {\n  const {\n    credential_id,\n    platform_name\n  } = params;\n  return client('', {\n    method: 'PATCH',\n    data: {\n      platform_name\n    },\n    url: buildConversationUrl(`auth/${credential_id}`)\n  });\n}\n\nfunction useHere(params) {\n  const {\n    credentialID\n  } = params;\n  return client('', {\n    method: 'POST',\n    url: buildConversationUrl(`auth/use-here/${credentialID}`)\n  });\n}\n\nfunction generateQRCode(id) {\n  const url = buildConversationUrl(`auth/channel/generateQrCode/${id}`);\n  const localData = loadState();\n  const headers = {};\n  const token = localData && localData.token;\n  const {\n    organisations,\n    profile\n  } = localData || {\n    organisations: null,\n    profile: null\n  };\n\n  if (token) {\n    headers.Authorization = token;\n  }\n\n  if (profile || organisations) {\n    // if no profile, use the organisationID of the last organization\n    headers.organisationID = profile ? profile.organisation_id : organisations[organisations.length - 1].id;\n  }\n\n  return fetch(url, {\n    headers,\n    method: 'POST'\n  });\n}\n\nexport { useHere, unlinkChannel, getUserChannels, fetchCredentials, removeCredential, connectCredential, updateChannelName, registerToBeNotify, fetchPotentialAccts, getSupportedChannels, fetchSupportedCountries, getUserChannelConnectedAccounts, generateQRCode };","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/channels/channel.service.ts"],"names":["client","buildConversationUrl","loadState","getUserChannels","response","url","data","credentials","getUserChannelConnectedAccounts","channelName","getSupportedChannels","params","organisation_id","fetchCredentials","unlinkChannel","id","disconnector_id","method","removeCredential","credential_id","fetchPotentialAccts","channel","rest","query","URLSearchParams","Object","keys","forEach","key","value","append","JSON","stringify","toString","connectCredential","registerToBeNotify","email","type","fetchSupportedCountries","updateChannelName","platform_name","useHere","credentialID","generateQRCode","localData","headers","token","organisations","profile","Authorization","organisationID","length","fetch"],"mappings":"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","sourcesContent":["import { AxiosRequestConfig } from 'axios';\nimport { client, buildConversationUrl, loadState } from '../../../utils';\n\n//////////////////////////////////////////////////////////////\n// Channels API Integration\nasync function getUserChannels() {\n  const response = await client('', { url: buildConversationUrl('auth/channel-accounts') });\n  return response.data.credentials;\n}\n\nasync function getUserChannelConnectedAccounts(channelName: string) {\n  const response = await client('', {\n    url: buildConversationUrl(`auth/channel-accounts/${channelName}`),\n  });\n  return response.data.credentials;\n}\n\nfunction getSupportedChannels(params?: AxiosRequestConfig['params']) {\n  return client('', { url: buildConversationUrl(`channels/${params.organisation_id}`) });\n}\n\nasync function fetchCredentials() {\n  const response = await client('', { url: buildConversationUrl(`channels`) });\n  return response.data;\n}\n\nfunction unlinkChannel(params?: AxiosRequestConfig['params']) {\n  const { id, disconnector_id } = params;\n\n  return client('', {\n    url: buildConversationUrl(`auth/revoke/${id}`),\n    method: 'POST',\n    data: { disconnector_id },\n  });\n}\n\nfunction removeCredential(params?: AxiosRequestConfig['params']) {\n  const { credential_id } = params;\n\n  return client('', {\n    url: buildConversationUrl(`auth/revoke/${credential_id}`),\n    method: 'PATCH',\n  });\n}\n\nfunction fetchPotentialAccts(params?: AxiosRequestConfig['params']) {\n  const { channel, ...rest } = params;\n  const query = new URLSearchParams();\n  Object.keys(rest).forEach(key => {\n    const value = rest[key];\n    value && query.append(key, key === 'phoneTypes' ? JSON.stringify(value) : value);\n  });\n\n  return client('', {\n    url: buildConversationUrl(`auth/potential-accounts/${channel}?${query.toString()}`),\n  });\n}\n\nfunction connectCredential(params?: AxiosRequestConfig['params']) {\n  const { channel, ...data } = params;\n\n  return client('', {\n    method: 'POST',\n    data: data ? data : null,\n    url: buildConversationUrl(`auth/potential-accounts/${channel}`),\n  });\n}\n\nfunction registerToBeNotify(params?: AxiosRequestConfig['params']) {\n  const { channel, email } = params;\n\n  return client('', {\n    method: 'POST',\n    data: { channel, email, type: 'notify-about-new-channel' },\n    url: 'https://mailchimp-list-subscribe-app.herokuapp.com/subscribe',\n  });\n}\n\nfunction fetchSupportedCountries() {\n  return client('', {\n    url: buildConversationUrl('auth/phones/supported-countries'),\n  });\n}\n\nfunction updateChannelName(params?: AxiosRequestConfig['params']) {\n  const { credential_id, platform_name } = params;\n\n  return client('', {\n    method: 'PATCH',\n    data: { platform_name },\n    url: buildConversationUrl(`auth/${credential_id}`),\n  });\n}\n\nfunction useHere(params?: AxiosRequestConfig['params']) {\n  const { credentialID } = params;\n\n  return client('', {\n    method: 'POST',\n    url: buildConversationUrl(`auth/use-here/${credentialID}`),\n  });\n}\n\nfunction generateQRCode(id: string) {\n  const url = buildConversationUrl(`auth/channel/generateQrCode/${id}`);\n\n  const localData = loadState();\n  const headers = {} as {\n    Authorization: string;\n    organisationID: string;\n  };\n  const token = localData && localData.token;\n  const { organisations, profile } = localData || { organisations: null, profile: null };\n  if (token) {\n    headers.Authorization = token;\n  }\n  if (profile || organisations) {\n    // if no profile, use the organisationID of the last organization\n    headers.organisationID = profile\n      ? profile.organisation_id\n      : organisations[organisations.length - 1].id;\n  }\n\n  return fetch(url, {\n    headers,\n    method: 'POST',\n  });\n}\n\nexport {\n  useHere,\n  unlinkChannel,\n  getUserChannels,\n  fetchCredentials,\n  removeCredential,\n  connectCredential,\n  updateChannelName,\n  registerToBeNotify,\n  fetchPotentialAccts,\n  getSupportedChannels,\n  fetchSupportedCountries,\n  getUserChannelConnectedAccounts,\n  generateQRCode,\n};\n"]},"metadata":{},"sourceType":"module"}