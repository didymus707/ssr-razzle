{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/marketing/campaigns/components/test-planner/test-planner.index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, useToast } from '@chakra-ui/core';\nimport { isEmpty } from 'lodash';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useLoading } from '../../../../../../hooks';\nimport { sendAmplitudeData } from '../../../../../../utils/amplitude';\nimport { ContentWrapper, ToastBox } from '../../../../../components';\nimport { selectOrganisationID } from '../../../../../unauthenticated-app/authentication';\nimport { FlowSteps, SectionContainer, SectionHeader } from '../planner/planner.layout';\nimport { Review } from '../planner/planner.review';\nimport { Setup } from '../planner/planner.setup';\nimport { TestPlannerDesign } from './test-planner.design';\nexport const TestPlanner = props => {\n  let {\n    lists,\n    history,\n    isSaving,\n    audiences,\n    smart_lists,\n    addCampaign,\n    lists_by_id,\n    organisations,\n    fetchTemplates,\n    audiences_by_id,\n    importBulkUpload,\n    saveCampaignDraft,\n    smart_lists_by_id,\n    templateCategories,\n    fetchSampleTemplates,\n    campaign: campaignData,\n    credit_balance,\n    updateCampaign,\n    template,\n    addAudience,\n    editTemplate,\n    user,\n    fetchWallet,\n    fetchStates,\n    fetchGenders,\n    states,\n    genders,\n    religions,\n    ethnicGroups,\n    fetchEthnicGroups,\n    fetchReligions\n  } = props;\n  const toast = useToast();\n  const {\n    dispatch,\n    loading\n  } = useLoading();\n  const [section, setSection] = React.useState(0);\n  const [campaign, setCampaign] = React.useState(campaignData);\n  const organizationID = useSelector(selectOrganisationID);\n  const currentOrganization = organisations === null || organisations === void 0 ? void 0 : organisations.find(i => i.id === organizationID);\n  const organisationName = currentOrganization === null || currentOrganization === void 0 ? void 0 : currentOrganization['name'];\n  const mappedTemplateCategories = templateCategories.map(item => item.category);\n  const sectionsHeaderProps = {\n    0: {\n      heading: 'Set up your A/B test',\n      subheading: 'Give your A/B test a name and choose who to send to.'\n    },\n    1: {\n      heading: 'Design your campaign',\n      subheading: 'Compose your message below.'\n    },\n    2: {\n      heading: 'Review your A/B test before sending',\n      subheading: 'Please review your A/B test details before sending.'\n    }\n  };\n  const listOptions = lists_by_id //@ts-ignore\n  .map(id => lists[id]).map(({\n    name,\n    id\n  }) => ({\n    label: name,\n    value: id\n  }));\n  const smartListOptions = smart_lists_by_id //@ts-ignore\n  .map(id => smart_lists[id]).map(({\n    name,\n    id\n  }) => ({\n    label: name,\n    value: `${id}-smartList`\n  }));\n  const audienceOptions = audiences_by_id //@ts-ignore\n  .map(id => audiences[id]).map(({\n    name,\n    id\n  }) => ({\n    label: name,\n    value: `${id}-audience`\n  })); // const importOptions = [{ label: 'Import a CSV/Excel file', value: 'import' }];\n\n  const newAudienceOptions = [{\n    label: 'Create a new audience',\n    value: 'new-audience'\n  }];\n  const allLists = (user === null || user === void 0 ? void 0 : user.account_type) === 9 ? [{\n    label: 'New Audience',\n    options: newAudienceOptions,\n    showBadge: false\n  }, // { label: 'Import', options: importOptions, showBadge: false },\n  {\n    label: 'Lists',\n    options: listOptions,\n    showBadge: true\n  }, {\n    label: 'Smart lists',\n    options: smartListOptions,\n    showBadge: true\n  }, {\n    label: 'Audiences',\n    options: audienceOptions,\n    showBadge: true\n  }] : [// { label: 'Import', options: importOptions, showBadge: false },\n  {\n    label: 'Lists',\n    options: listOptions,\n    showBadge: true\n  }, {\n    label: 'Smart lists',\n    options: smartListOptions,\n    showBadge: true\n  }];\n  const allStates = states.map(state => ({\n    value: state,\n    label: state\n  }));\n  const allGenders = genders.map(state => ({\n    value: state,\n    label: state\n  }));\n  const allReligions = religions.map(religion => ({\n    value: religion,\n    label: religion\n  }));\n  const allEthnicGroups = ethnicGroups.map(ethnicGroup => ({\n    value: ethnicGroup,\n    label: ethnicGroup\n  }));\n\n  const handleCancel = () => history.goBack();\n\n  const handleGoBack = () => {\n    setSection(section - 1);\n  };\n\n  const handleGoToSection = section => {\n    setSection(section);\n  };\n\n  const handleSubmit = data => {\n    setCampaign(_objectSpread(_objectSpread({}, campaign), data));\n    setSection(section + 1);\n  };\n\n  const handleEditCampaign = async payload => {\n    try {\n      dispatch({\n        type: 'LOADING_STARTED'\n      });\n      await updateCampaign(payload);\n      dispatch({\n        type: 'LOADING_RESOLVED'\n      });\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          status: \"success\",\n          onClose: onClose,\n          message: \"Campaign updated successfully\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 11\n          }\n        })\n      });\n      sendAmplitudeData('campaignUpdated', {\n        data: payload\n      });\n      history.push('/s/marketing/campaigns');\n    } catch (error) {\n      dispatch({\n        type: 'LOADING_RESOLVED'\n      });\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  };\n\n  const handleSaveDraft = async payload => {\n    try {\n      dispatch({\n        type: 'LOADING_STARTED'\n      });\n      await saveCampaignDraft(payload);\n      dispatch({\n        type: 'LOADING_RESOLVED'\n      });\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          status: \"success\",\n          onClose: onClose,\n          message: \"Campaign saved as draft\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 11\n          }\n        })\n      });\n      sendAmplitudeData('campaignSavedAsDraft', {\n        data: payload\n      });\n      history.push('/s/marketing/campaigns');\n    } catch (error) {\n      dispatch({\n        type: 'LOADING_RESOLVED'\n      });\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  };\n\n  const handleUpdateTemplate = async payload => {\n    try {\n      await editTemplate(payload);\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  };\n\n  const handleSaveAsDraft = async payload => {\n    if (campaign.state && campaign.state === 'draft') {\n      await handleEditCampaign(payload);\n    } else {\n      await handleSaveDraft(payload);\n    }\n  };\n\n  React.useEffect(() => {\n    if (!isEmpty(campaignData) && campaignData.template_id) {\n      setCampaign(_objectSpread(_objectSpread({}, campaignData), {}, {\n        content: template.template\n      }));\n    }\n  }, [campaignData, template]);\n  React.useEffect(() => {\n    const getAllStates = async () => {\n      try {\n        await fetchStates();\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    const getGenders = async () => {\n      try {\n        await fetchGenders();\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    const getReligions = async () => {\n      try {\n        await fetchReligions();\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    const getEthnicities = async () => {\n      try {\n        await fetchEthnicGroups();\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    getAllStates();\n    getGenders();\n    getReligions();\n    getEthnicities();\n  }, [fetchStates, fetchGenders, fetchEthnicGroups, fetchReligions]);\n  return __jsx(ContentWrapper, {\n    p: \"1.875rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 5\n    }\n  }, __jsx(SectionContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    pb: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }\n  }, __jsx(SectionHeader, _extends({\n    pb: \"1rem\"\n  }, sectionsHeaderProps[section], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 11\n    }\n  })), __jsx(FlowSteps, {\n    activeSection: section,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 11\n    }\n  })), section === 0 && __jsx(Setup, {\n    isAbTest: true,\n    lists: allLists,\n    states: allStates,\n    genders: allGenders,\n    onGoBack: handleCancel,\n    onSubmit: handleSubmit,\n    initialValues: campaign,\n    religions: allReligions,\n    addAudience: addAudience,\n    ethnicGroups: allEthnicGroups,\n    organisationName: organisationName,\n    importBulkUpload: importBulkUpload,\n    hasAudiences: !!audiences_by_id.length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 11\n    }\n  }), section === 1 && __jsx(TestPlannerDesign, {\n    onGoBack: handleGoBack,\n    onSubmit: handleSubmit,\n    initialValues: campaign,\n    fetchWallet: fetchWallet,\n    fetchTemplates: fetchTemplates,\n    credit_balance: credit_balance,\n    fetchSampleTemplates: fetchSampleTemplates,\n    handleUpdateTemplate: handleUpdateTemplate,\n    templateCategories: mappedTemplateCategories,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 11\n    }\n  }), section === 2 && __jsx(Review, {\n    isAbTest: true,\n    campaign: campaign,\n    isSaving: isSaving,\n    onSubmit: addCampaign,\n    onGoBack: handleGoBack,\n    credit_balance: credit_balance,\n    onSaveDraft: handleSaveAsDraft,\n    onGoToSection: handleGoToSection,\n    isSavingDraft: loading === 'pending',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 11\n    }\n  })));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/marketing/campaigns/components/test-planner/test-planner.index.tsx"],"names":["Box","useToast","isEmpty","React","useSelector","useLoading","sendAmplitudeData","ContentWrapper","ToastBox","selectOrganisationID","FlowSteps","SectionContainer","SectionHeader","Review","Setup","TestPlannerDesign","TestPlanner","props","lists","history","isSaving","audiences","smart_lists","addCampaign","lists_by_id","organisations","fetchTemplates","audiences_by_id","importBulkUpload","saveCampaignDraft","smart_lists_by_id","templateCategories","fetchSampleTemplates","campaign","campaignData","credit_balance","updateCampaign","template","addAudience","editTemplate","user","fetchWallet","fetchStates","fetchGenders","states","genders","religions","ethnicGroups","fetchEthnicGroups","fetchReligions","toast","dispatch","loading","section","setSection","useState","setCampaign","organizationID","currentOrganization","find","i","id","organisationName","mappedTemplateCategories","map","item","category","sectionsHeaderProps","heading","subheading","listOptions","name","label","value","smartListOptions","audienceOptions","newAudienceOptions","allLists","account_type","options","showBadge","allStates","state","allGenders","allReligions","religion","allEthnicGroups","ethnicGroup","handleCancel","goBack","handleGoBack","handleGoToSection","handleSubmit","data","handleEditCampaign","payload","type","position","render","onClose","push","error","handleSaveDraft","handleUpdateTemplate","handleSaveAsDraft","useEffect","template_id","content","getAllStates","console","log","getGenders","getReligions","getEthnicities","length"],"mappings":"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","sourcesContent":["import { Box, useToast } from '@chakra-ui/core';\nimport { isEmpty } from 'lodash';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useLoading } from '../../../../../../hooks';\nimport { sendAmplitudeData } from '../../../../../../utils/amplitude';\nimport { ContentWrapper, ToastBox } from '../../../../../components';\nimport { selectOrganisationID } from '../../../../../unauthenticated-app/authentication';\nimport { TemplateData } from '../../../templates';\nimport { PlannerProps } from '../../planner.types';\nimport { CampaignPayload } from '../planner';\nimport {\n  FlowSteps,\n  SectionContainer,\n  SectionHeader,\n  SectionHeaderProps,\n} from '../planner/planner.layout';\nimport { Review } from '../planner/planner.review';\nimport { Setup } from '../planner/planner.setup';\nimport { TestPlannerDesign } from './test-planner.design';\n\nexport const TestPlanner = (props: PlannerProps & { isSaving?: boolean }) => {\n  let {\n    lists,\n    history,\n    isSaving,\n    audiences,\n    smart_lists,\n    addCampaign,\n    lists_by_id,\n    organisations,\n    fetchTemplates,\n    audiences_by_id,\n    importBulkUpload,\n    saveCampaignDraft,\n    smart_lists_by_id,\n    templateCategories,\n    fetchSampleTemplates,\n    campaign: campaignData,\n    credit_balance,\n    updateCampaign,\n    template,\n    addAudience,\n    editTemplate,\n    user,\n    fetchWallet,\n    fetchStates,\n    fetchGenders,\n    states,\n    genders,\n    religions,\n    ethnicGroups,\n    fetchEthnicGroups,\n    fetchReligions,\n  } = props;\n\n  const toast = useToast();\n  const { dispatch, loading } = useLoading();\n\n  const [section, setSection] = React.useState(0);\n  const [campaign, setCampaign] = React.useState(campaignData);\n\n  const organizationID = useSelector(selectOrganisationID);\n  const currentOrganization = organisations?.find((i: any) => i.id === organizationID);\n\n  const organisationName = currentOrganization?.['name'];\n  const mappedTemplateCategories = templateCategories.map(item => item.category);\n  const sectionsHeaderProps = {\n    0: {\n      heading: 'Set up your A/B test',\n      subheading: 'Give your A/B test a name and choose who to send to.',\n    },\n    1: {\n      heading: 'Design your campaign',\n      subheading: 'Compose your message below.',\n    },\n    2: {\n      heading: 'Review your A/B test before sending',\n      subheading: 'Please review your A/B test details before sending.',\n    },\n  } as { [key: number]: SectionHeaderProps };\n\n  const listOptions = lists_by_id\n    //@ts-ignore\n    .map((id: string) => lists[id])\n    .map(({ name, id }) => ({ label: name, value: id }));\n\n  const smartListOptions = smart_lists_by_id\n    //@ts-ignore\n    .map((id: string) => smart_lists[id])\n    .map(({ name, id }) => ({ label: name, value: `${id}-smartList` }));\n\n  const audienceOptions = audiences_by_id\n    //@ts-ignore\n    .map((id: string) => audiences[id])\n    .map(({ name, id }) => ({ label: name, value: `${id}-audience` }));\n\n  // const importOptions = [{ label: 'Import a CSV/Excel file', value: 'import' }];\n\n  const newAudienceOptions = [{ label: 'Create a new audience', value: 'new-audience' }];\n\n  const allLists =\n    user?.account_type === 9\n      ? [\n          { label: 'New Audience', options: newAudienceOptions, showBadge: false },\n          // { label: 'Import', options: importOptions, showBadge: false },\n          { label: 'Lists', options: listOptions, showBadge: true },\n          { label: 'Smart lists', options: smartListOptions, showBadge: true },\n          { label: 'Audiences', options: audienceOptions, showBadge: true },\n        ]\n      : [\n          // { label: 'Import', options: importOptions, showBadge: false },\n          { label: 'Lists', options: listOptions, showBadge: true },\n          { label: 'Smart lists', options: smartListOptions, showBadge: true },\n        ];\n\n  const allStates = states.map(state => ({ value: state, label: state }));\n  const allGenders = genders.map(state => ({ value: state, label: state }));\n  const allReligions = religions.map(religion => ({ value: religion, label: religion }));\n  const allEthnicGroups = ethnicGroups.map(ethnicGroup => ({\n    value: ethnicGroup,\n    label: ethnicGroup,\n  }));\n\n  const handleCancel = () => history.goBack();\n\n  const handleGoBack = () => {\n    setSection(section - 1);\n  };\n\n  const handleGoToSection = (section: number) => {\n    setSection(section);\n  };\n\n  const handleSubmit = (data: CampaignPayload) => {\n    setCampaign({ ...campaign, ...data });\n    setSection(section + 1);\n  };\n\n  const handleEditCampaign = async (payload: Partial<CampaignPayload>) => {\n    try {\n      dispatch({ type: 'LOADING_STARTED' });\n      await updateCampaign(payload);\n      dispatch({ type: 'LOADING_RESOLVED' });\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox status=\"success\" onClose={onClose} message=\"Campaign updated successfully\" />\n        ),\n      });\n      sendAmplitudeData('campaignUpdated', { data: payload });\n      history.push('/s/marketing/campaigns');\n    } catch (error) {\n      dispatch({ type: 'LOADING_RESOLVED' });\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n  };\n\n  const handleSaveDraft = async (payload: CampaignPayload) => {\n    try {\n      dispatch({ type: 'LOADING_STARTED' });\n      await saveCampaignDraft(payload);\n      dispatch({ type: 'LOADING_RESOLVED' });\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox status=\"success\" onClose={onClose} message=\"Campaign saved as draft\" />\n        ),\n      });\n      sendAmplitudeData('campaignSavedAsDraft', { data: payload });\n      history.push('/s/marketing/campaigns');\n    } catch (error) {\n      dispatch({ type: 'LOADING_RESOLVED' });\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n  };\n\n  const handleUpdateTemplate = async (payload: TemplateData) => {\n    try {\n      await editTemplate(payload);\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n  };\n\n  const handleSaveAsDraft = async (payload: Partial<CampaignPayload>) => {\n    if (campaign.state && campaign.state === 'draft') {\n      await handleEditCampaign(payload);\n    } else {\n      await handleSaveDraft(payload);\n    }\n  };\n\n  React.useEffect(() => {\n    if (!isEmpty(campaignData) && campaignData.template_id) {\n      setCampaign({ ...campaignData, content: template.template });\n    }\n  }, [campaignData, template]);\n\n  React.useEffect(() => {\n    const getAllStates = async () => {\n      try {\n        await fetchStates();\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    const getGenders = async () => {\n      try {\n        await fetchGenders();\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    const getReligions = async () => {\n      try {\n        await fetchReligions();\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    const getEthnicities = async () => {\n      try {\n        await fetchEthnicGroups();\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    getAllStates();\n    getGenders();\n    getReligions();\n    getEthnicities();\n  }, [fetchStates, fetchGenders, fetchEthnicGroups, fetchReligions]);\n\n  return (\n    <ContentWrapper p=\"1.875rem\">\n      <SectionContainer>\n        <Box pb=\"2rem\">\n          <SectionHeader pb=\"1rem\" {...sectionsHeaderProps[section]} />\n          <FlowSteps activeSection={section} />\n        </Box>\n        {section === 0 && (\n          <Setup\n            isAbTest\n            lists={allLists}\n            states={allStates}\n            genders={allGenders}\n            onGoBack={handleCancel}\n            onSubmit={handleSubmit}\n            initialValues={campaign}\n            religions={allReligions}\n            addAudience={addAudience}\n            ethnicGroups={allEthnicGroups}\n            organisationName={organisationName}\n            importBulkUpload={importBulkUpload}\n            hasAudiences={!!audiences_by_id.length}\n          />\n        )}\n        {section === 1 && (\n          <TestPlannerDesign\n            onGoBack={handleGoBack}\n            onSubmit={handleSubmit}\n            initialValues={campaign}\n            fetchWallet={fetchWallet}\n            fetchTemplates={fetchTemplates}\n            credit_balance={credit_balance}\n            fetchSampleTemplates={fetchSampleTemplates}\n            handleUpdateTemplate={handleUpdateTemplate}\n            templateCategories={mappedTemplateCategories}\n          />\n        )}\n        {section === 2 && (\n          <Review\n            isAbTest\n            campaign={campaign}\n            isSaving={isSaving}\n            onSubmit={addCampaign}\n            onGoBack={handleGoBack}\n            credit_balance={credit_balance}\n            onSaveDraft={handleSaveAsDraft}\n            onGoToSection={handleGoToSection}\n            isSavingDraft={loading === 'pending'}\n          />\n        )}\n      </SectionContainer>\n    </ContentWrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}