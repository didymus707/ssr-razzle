{"ast":null,"code":"import _objectWithoutProperties from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nconst _excluded = [\"id\"];\nvar _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/tables/components/table/table.hooks/use-table-cell.tsx\";\nvar __jsx = React.createElement;\nimport { useToast } from '@chakra-ui/core';\nimport * as React from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { ToastBox } from '../../../../../components';\nimport { getRowApiValue } from '../../../tables.utils';\nimport { TableSelect, TableCellClickable } from '../table.components';\n/**\n * Hook to generate table cell editable element base on column type\n */\n\nexport function useColumnCell({\n  type,\n  user,\n  props,\n  columns,\n  editRow,\n  tableId,\n  editTable,\n  updateTableData,\n  loadingDispatch\n}) {\n  const {\n    data,\n    cell: {\n      value: initialValue,\n      row: {\n        index: rowIndex\n      },\n      column: {\n        id: columnIndex\n      }\n    }\n  } = props;\n  const [inputValue, setInputValue] = React.useState(initialValue && initialValue.value);\n  const [selectValue, setSelectValue] = React.useState(initialValue && initialValue.value);\n  const toast = useToast();\n\n  async function handleEditTable(columnName, options) {\n    const updatedColumns = columns.map(column => {\n      if (column.name === columnName) {\n        return _objectSpread(_objectSpread({}, column), {}, {\n          options\n        });\n      }\n\n      return column;\n    });\n    loadingDispatch({\n      type: 'GLOBAL_LOADING_STARTED'\n    });\n    await editTable({\n      id: tableId,\n      user_id: user === null || user === void 0 ? void 0 : user.id,\n      columns: updatedColumns\n    });\n    loadingDispatch({\n      type: 'GLOBAL_LOADING_RESOLVED'\n    });\n  }\n\n  async function handleEditRow(row) {\n    const {\n      id\n    } = row,\n          columns = _objectWithoutProperties(row, _excluded);\n\n    try {\n      loadingDispatch({\n        type: 'GLOBAL_LOADING_STARTED'\n      });\n      await editRow({\n        id,\n        columns\n      });\n      loadingDispatch({\n        type: 'GLOBAL_LOADING_RESOLVED'\n      });\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: \"Row updated\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 34\n          }\n        })\n      });\n    } catch (error) {\n      loadingDispatch({\n        type: 'GLOBAL_LOADING_RESOLVED'\n      });\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  }\n\n  function getMultiSelectValue() {\n    if (initialValue && initialValue.value) {\n      return Array.isArray(initialValue.value) ? initialValue.value.map(item => ({\n        value: item,\n        label: item\n      })) : [initialValue.value].map(item => ({\n        value: item,\n        label: item\n      }));\n    }\n\n    return [];\n  }\n\n  function getSelectValue() {\n    return {\n      value: initialValue && initialValue.value,\n      label: initialValue && initialValue.value\n    };\n  }\n\n  function onInputChange(e) {\n    setInputValue(e.target.value);\n  }\n\n  function onInputChange2(value) {\n    setInputValue(value);\n  }\n\n  function onSelectChange(value) {\n    if (Array.isArray(value)) {\n      setSelectValue(value.map(item => item.value));\n    } else {\n      if (value) {\n        setSelectValue(value.value);\n      } else {\n        setSelectValue(value);\n      }\n    }\n  }\n\n  function updateCellData(rowIndex, columnId, value) {\n    const currentValue = data[rowIndex][columnId].value;\n\n    if (!isEqual(value, currentValue)) {\n      const updatedRow = _objectSpread(_objectSpread({}, data[rowIndex]), {}, {\n        [columnId]: _objectSpread(_objectSpread({}, data[rowIndex][columnId]), {}, {\n          value\n        })\n      });\n\n      const newData = data.map((row, index) => {\n        if (index === rowIndex) {\n          return updatedRow;\n        }\n\n        return row;\n      });\n      updateTableData(newData); //generate API payload and make update request\n\n      const apiRow = getRowApiValue(updatedRow);\n      handleEditRow(apiRow);\n    }\n  }\n\n  function updateCellDataOptions(rowIndex, columnId, value, options) {\n    const updatedRow = _objectSpread(_objectSpread({}, data[rowIndex]), {}, {\n      [columnId]: _objectSpread(_objectSpread({}, data[rowIndex][columnId]), {}, {\n        value,\n        options\n      })\n    });\n\n    const newData = data.map((row, index) => {\n      if (index === rowIndex) {\n        return updatedRow;\n      }\n\n      return row;\n    });\n    updateTableData(newData); // generate API payload and make update request\n\n    const apiRow = getRowApiValue(updatedRow);\n    handleEditRow(apiRow); // update table columns with options in case a new option has been created by user\n\n    if (options) {\n      const formatOptions = options.map(({\n        value\n      }) => ({\n        name: value,\n        type: 'option'\n      }));\n      handleEditTable(columnId, formatOptions);\n    }\n  }\n\n  switch (type.toLowerCase()) {\n    case 'text':\n    case 'person':\n    case 'number':\n      return __jsx(\"input\", {\n        className: \"input\",\n        value: inputValue,\n        onChange: onInputChange,\n        onBlur: () => {\n          updateCellData(rowIndex, columnIndex, inputValue);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 9\n        }\n      });\n\n    case 'date':\n      return __jsx(\"input\", {\n        type: \"date\",\n        className: \"input\",\n        value: inputValue,\n        onChange: onInputChange,\n        onBlur: () => updateCellData(rowIndex, columnIndex, inputValue),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 9\n        }\n      });\n\n    case 'url':\n      return __jsx(TableCellClickable, {\n        icon: \"link\",\n        target: \"_blank\",\n        inputType: \"url\",\n        url: inputValue,\n        value: inputValue,\n        tooltipLabel: \"Open link\",\n        defaultValue: inputValue,\n        onChange: onInputChange2,\n        onBlur: () => updateCellData(rowIndex, columnIndex, inputValue),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 9\n        }\n      });\n\n    case 'email':\n      return __jsx(TableCellClickable, {\n        icon: \"at-sign\",\n        inputType: \"email\",\n        value: inputValue,\n        tooltipLabel: \"Send email\",\n        defaultValue: inputValue,\n        onChange: onInputChange2,\n        url: `mailto: ${inputValue}`,\n        onBlur: () => updateCellData(rowIndex, columnIndex, inputValue),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 9\n        }\n      });\n\n    case 'phone number':\n      return __jsx(TableCellClickable, {\n        icon: \"phone\",\n        inputType: \"tel\",\n        value: inputValue,\n        tooltipLabel: \"Call\",\n        defaultValue: inputValue,\n        onChange: onInputChange2,\n        url: `tel: ${inputValue}`,\n        onBlur: () => updateCellData(rowIndex, columnIndex, inputValue),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 9\n        }\n      });\n\n    case 'multi select':\n      return __jsx(TableSelect, {\n        isMulti: true,\n        placeholder: \"\",\n        onChange: onSelectChange,\n        value: getMultiSelectValue(),\n        defaultValue: getMultiSelectValue(),\n        options: initialValue && initialValue.options,\n        onCreateOptions: (options, value) => updateCellDataOptions(rowIndex, columnIndex, value, options),\n        onBlur: () => updateCellData(rowIndex, columnIndex, selectValue),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 9\n        }\n      });\n\n    case 'select':\n      return __jsx(TableSelect, {\n        placeholder: \"\",\n        onChange: onSelectChange,\n        value: getSelectValue(),\n        defaultValue: getSelectValue(),\n        options: initialValue && initialValue.options,\n        onCreateOptions: (options, value) => updateCellDataOptions(rowIndex, columnIndex, value, options),\n        onBlur: () => updateCellData(rowIndex, columnIndex, selectValue),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 9\n        }\n      });\n\n    default:\n      return null;\n  }\n}","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/tables/components/table/table.hooks/use-table-cell.tsx"],"names":["useToast","React","isEqual","ToastBox","getRowApiValue","TableSelect","TableCellClickable","useColumnCell","type","user","props","columns","editRow","tableId","editTable","updateTableData","loadingDispatch","data","cell","value","initialValue","row","index","rowIndex","column","id","columnIndex","inputValue","setInputValue","useState","selectValue","setSelectValue","toast","handleEditTable","columnName","options","updatedColumns","map","name","user_id","handleEditRow","position","render","onClose","error","getMultiSelectValue","Array","isArray","item","label","getSelectValue","onInputChange","e","target","onInputChange2","onSelectChange","updateCellData","columnId","currentValue","updatedRow","newData","apiRow","updateCellDataOptions","formatOptions","toLowerCase"],"mappings":"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","sourcesContent":["import { useToast } from '@chakra-ui/core';\nimport * as React from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { OptionTypeBase } from 'react-select';\nimport { Row } from 'react-table';\nimport { ToastBox } from '../../../../../components';\nimport { SelectOptions } from '../../../tables.types';\nimport { getRowApiValue } from '../../../tables.utils';\nimport { PropertySchema } from '../../property';\nimport { TableSelect, TableCellClickable } from '../table.components';\n\n/**\n * Hook to generate table cell editable element base on column type\n */\n\nexport function useColumnCell({\n  type,\n  user,\n  props,\n  columns,\n  editRow,\n  tableId,\n  editTable,\n  updateTableData,\n  loadingDispatch,\n}: any) {\n  const {\n    data,\n    cell: {\n      value: initialValue,\n      row: { index: rowIndex },\n      column: { id: columnIndex },\n    },\n  } = props;\n\n  const [inputValue, setInputValue] = React.useState(initialValue && initialValue.value);\n\n  const [selectValue, setSelectValue] = React.useState(initialValue && initialValue.value);\n\n  const toast = useToast();\n\n  async function handleEditTable(columnName: string | number, options: PropertySchema['options']) {\n    const updatedColumns = columns.map((column: PropertySchema) => {\n      if (column.name === columnName) {\n        return { ...column, options };\n      }\n      return column;\n    });\n    loadingDispatch({ type: 'GLOBAL_LOADING_STARTED' });\n    await editTable({ id: tableId, user_id: user?.id, columns: updatedColumns });\n    loadingDispatch({ type: 'GLOBAL_LOADING_RESOLVED' });\n  }\n\n  async function handleEditRow(row: OptionTypeBase) {\n    const { id, ...columns } = row;\n\n    try {\n      loadingDispatch({ type: 'GLOBAL_LOADING_STARTED' });\n      await editRow({ id, columns });\n      loadingDispatch({ type: 'GLOBAL_LOADING_RESOLVED' });\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message=\"Row updated\" />,\n      });\n    } catch (error) {\n      loadingDispatch({ type: 'GLOBAL_LOADING_RESOLVED' });\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n  }\n\n  function getMultiSelectValue() {\n    if (initialValue && initialValue.value) {\n      return Array.isArray(initialValue.value)\n        ? initialValue.value.map((item: string) => ({\n            value: item,\n            label: item,\n          }))\n        : [initialValue.value].map((item: string) => ({\n            value: item,\n            label: item,\n          }));\n    }\n    return [];\n  }\n\n  function getSelectValue() {\n    return {\n      value: initialValue && initialValue.value,\n      label: initialValue && initialValue.value,\n    };\n  }\n\n  function onInputChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setInputValue(e.target.value);\n  }\n\n  function onInputChange2(value?: string) {\n    setInputValue(value);\n  }\n\n  function onSelectChange(value: SelectOptions | SelectOptions[]) {\n    if (Array.isArray(value)) {\n      setSelectValue(value.map(item => item.value));\n    } else {\n      if (value) {\n        setSelectValue(value.value);\n      } else {\n        setSelectValue(value);\n      }\n    }\n  }\n\n  function updateCellData(rowIndex: number, columnId: string | number, value: string | string[]) {\n    const currentValue = data[rowIndex][columnId].value;\n    if (!isEqual(value, currentValue)) {\n      const updatedRow = {\n        ...data[rowIndex],\n        [columnId]: { ...data[rowIndex][columnId], value },\n      };\n      const newData = data.map((row: Row, index: number) => {\n        if (index === rowIndex) {\n          return updatedRow;\n        }\n        return row;\n      });\n      updateTableData(newData);\n\n      //generate API payload and make update request\n      const apiRow = getRowApiValue(updatedRow);\n      handleEditRow(apiRow);\n    }\n  }\n\n  function updateCellDataOptions(\n    rowIndex: number,\n    columnId: string | number,\n    value: string | string[] | undefined,\n    options: SelectOptions[],\n  ) {\n    const updatedRow = {\n      ...data[rowIndex],\n      [columnId]: {\n        ...data[rowIndex][columnId],\n        value,\n        options,\n      },\n    };\n    const newData = data.map((row: Row, index: number) => {\n      if (index === rowIndex) {\n        return updatedRow;\n      }\n      return row;\n    });\n    updateTableData(newData);\n\n    // generate API payload and make update request\n    const apiRow = getRowApiValue(updatedRow);\n    handleEditRow(apiRow);\n\n    // update table columns with options in case a new option has been created by user\n    if (options) {\n      const formatOptions = options.map(({ value }) => ({\n        name: value,\n        type: 'option',\n      }));\n      handleEditTable(columnId, formatOptions);\n    }\n  }\n\n  switch (type.toLowerCase()) {\n    case 'text':\n    case 'person':\n    case 'number':\n      return (\n        <input\n          className=\"input\"\n          value={inputValue}\n          onChange={onInputChange}\n          onBlur={() => {\n            updateCellData(rowIndex, columnIndex, inputValue);\n          }}\n        />\n      );\n    case 'date':\n      return (\n        <input\n          type=\"date\"\n          className=\"input\"\n          value={inputValue}\n          onChange={onInputChange}\n          onBlur={() => updateCellData(rowIndex, columnIndex, inputValue)}\n        />\n      );\n    case 'url':\n      return (\n        <TableCellClickable\n          icon=\"link\"\n          target=\"_blank\"\n          inputType=\"url\"\n          url={inputValue}\n          value={inputValue}\n          tooltipLabel=\"Open link\"\n          defaultValue={inputValue}\n          onChange={onInputChange2}\n          onBlur={() => updateCellData(rowIndex, columnIndex, inputValue)}\n        />\n      );\n    case 'email':\n      return (\n        <TableCellClickable\n          icon=\"at-sign\"\n          inputType=\"email\"\n          value={inputValue}\n          tooltipLabel=\"Send email\"\n          defaultValue={inputValue}\n          onChange={onInputChange2}\n          url={`mailto: ${inputValue}`}\n          onBlur={() => updateCellData(rowIndex, columnIndex, inputValue)}\n        />\n      );\n    case 'phone number':\n      return (\n        <TableCellClickable\n          icon=\"phone\"\n          inputType=\"tel\"\n          value={inputValue}\n          tooltipLabel=\"Call\"\n          defaultValue={inputValue}\n          onChange={onInputChange2}\n          url={`tel: ${inputValue}`}\n          onBlur={() => updateCellData(rowIndex, columnIndex, inputValue)}\n        />\n      );\n    case 'multi select':\n      return (\n        <TableSelect\n          isMulti\n          placeholder=\"\"\n          onChange={onSelectChange}\n          value={getMultiSelectValue()}\n          defaultValue={getMultiSelectValue()}\n          options={initialValue && initialValue.options}\n          onCreateOptions={(options, value) =>\n            updateCellDataOptions(rowIndex, columnIndex, value, options)\n          }\n          onBlur={() => updateCellData(rowIndex, columnIndex, selectValue)}\n        />\n      );\n    case 'select':\n      return (\n        <TableSelect\n          placeholder=\"\"\n          onChange={onSelectChange}\n          value={getSelectValue()}\n          defaultValue={getSelectValue()}\n          options={initialValue && initialValue.options}\n          onCreateOptions={(options, value) =>\n            updateCellDataOptions(rowIndex, columnIndex, value, options)\n          }\n          onBlur={() => updateCellData(rowIndex, columnIndex, selectValue)}\n        />\n      );\n\n    default:\n      return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}