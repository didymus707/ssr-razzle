{"ast":null,"code":"var _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/components/messages/ConversationThreadHeader.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Avatar, AvatarGroup, Box, Flex, Icon, Stack, Tooltip, useDisclosure, useToast } from '@chakra-ui/core';\nimport { Button, Subtitle, ToastBox } from 'app/components';\nimport { selectOrganisationID } from 'app/unauthenticated-app/authentication';\nimport { formatISO } from 'date-fns';\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useSelector } from 'react-redux';\nimport { channelOptions } from '../..';\nimport { addConversationNote, assignConversationThread, favoriteThread, resolveConversationThread, tagConversation, unFavoriteThread, unTagConversation } from '../../inbox.service';\nimport { CloseConversationModal, NoteModal } from '../more-info';\nimport { AssignmentMenu } from './AssignmentMenu';\nimport { MoreOptionsMenu } from './MoreOptionsMenu'; // import { SnoozeMenu } from './SnoozeMenu';\n\nimport { TagsMenu } from './TagsMenu';\nexport const ConversationThreadHeader = props => {\n  var _channelOptions$chann, _sender$name, _thread$assignees2, _thread$assignees$map, _thread$assignees3, _thread$assignees4;\n\n  const {\n    tags,\n    lastMessage,\n    thread = {}\n  } = props;\n  const {\n    uuid,\n    sender = {},\n    is_favorited\n  } = thread;\n  const channel = sender === null || sender === void 0 ? void 0 : sender.channel_name;\n  const toast = useToast();\n  const queryClient = useQueryClient();\n  const {\n    isOpen: isNoteModalOpen,\n    onOpen: onOpenNoteModal,\n    onClose: onCloseNoteModal\n  } = useDisclosure();\n  const {\n    isOpen: isCloseConversationModalOpen,\n    onOpen: onOpenCloseConversationModal,\n    onClose: onCloseCloseConversationModal\n  } = useDisclosure();\n  const organizationID = useSelector(selectOrganisationID);\n  const {\n    0: isAssignMenuOpen,\n    1: setIsAssignMenuOpen\n  } = useState(false);\n\n  const onCloseAssignMenu = () => setIsAssignMenuOpen(false);\n\n  const onOpenAssignMenu = () => setIsAssignMenuOpen(!isAssignMenuOpen);\n\n  const {\n    mutate: favoriteMutate\n  } = useMutation(thread => favoriteThread(thread), {\n    onMutate: async newThread => {\n      await queryClient.cancelQueries(['threads', newThread.uuid]);\n      const previousThread = queryClient.getQueryData(['threads', thread.uuid]);\n      queryClient.setQueryData(['threads', newThread.uuid], newThread);\n      return {\n        previousThread,\n        newThread\n      };\n    },\n    onError: (err, newThread, context) => {\n      queryClient.setQueryData(['threads', context.newThread.uuid], context.previousTodo);\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: err.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 36\n          }\n        })\n      });\n    },\n    onSettled: newThread => {\n      queryClient.invalidateQueries(['threads', newThread.uuid]);\n    }\n  });\n  const {\n    mutate: unFavoriteMutate\n  } = useMutation(thread => unFavoriteThread(thread), {\n    onMutate: async newThread => {\n      await queryClient.cancelQueries(['threads', newThread.uuid]);\n      const previousThread = queryClient.getQueryData(['threads', thread.uuid]);\n      queryClient.setQueryData(['threads', newThread.uuid], newThread);\n      return {\n        previousThread,\n        newThread\n      };\n    },\n    onError: (err, newThread, context) => {\n      queryClient.setQueryData(['threads', context.newThread.uuid], context.previousTodo);\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: err.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 36\n          }\n        })\n      });\n    },\n    onSettled: newThread => {\n      queryClient.invalidateQueries(['threads', newThread.uuid]);\n    }\n  });\n  const {\n    mutate: assignMutate\n  } = useMutation(payload => assignConversationThread(payload), {\n    onMutate: async data => {\n      const {\n        thread: newThread\n      } = data;\n      await queryClient.cancelQueries(['threads', newThread.uuid]);\n      const previousThread = queryClient.getQueryData(['threads', thread.uuid]);\n      console.log({\n        previousThread,\n        newThread,\n        data\n      });\n      queryClient.setQueryData(['threads', newThread.uuid], newThread);\n      return {\n        previousThread,\n        newThread\n      };\n    },\n    onError: (err, newThread, context) => {\n      queryClient.setQueryData(['threads', context.newThread.uuid], context.previousTodo);\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: err.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 36\n          }\n        })\n      });\n    },\n    onSettled: response => {\n      const {\n        data\n      } = response;\n      const {\n        thread\n      } = data;\n      queryClient.invalidateQueries(['threads', thread.uuid]);\n    }\n  });\n  const {\n    mutate: tagMutate\n  } = useMutation(payload => tagConversation(payload), {\n    onMutate: async data => {\n      const {\n        thread: newThread\n      } = data;\n      await queryClient.cancelQueries(['threads', newThread.uuid]);\n      const previousThread = queryClient.getQueryData(['threads', thread.uuid]);\n      queryClient.setQueryData(['threads', newThread.uuid], newThread);\n      return {\n        previousThread,\n        newThread\n      };\n    },\n    onError: (err, newThread, context) => {\n      queryClient.setQueryData(['threads', context.newThread.uuid], context.previousTodo);\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: err.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 36\n          }\n        })\n      });\n    },\n    onSettled: newThread => {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          status: \"success\",\n          onClose: onClose,\n          message: \"Conversation tagged successfully\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }\n        })\n      });\n      queryClient.invalidateQueries(['threads', newThread.uuid]);\n    }\n  });\n  const {\n    mutate: unTagMutate\n  } = useMutation(payload => unTagConversation(payload), {\n    onMutate: async data => {\n      const {\n        thread: newThread\n      } = data;\n      await queryClient.cancelQueries(['threads', newThread.uuid]);\n      const previousThread = queryClient.getQueryData(['threads', thread.uuid]);\n      queryClient.setQueryData(['threads', newThread.uuid], newThread);\n      return {\n        previousThread,\n        newThread\n      };\n    },\n    onError: (err, newThread, context) => {\n      queryClient.setQueryData(['threads', context.newThread.uuid], context.previousTodo);\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: err.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 36\n          }\n        })\n      });\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(['threads', thread.uuid]);\n    }\n  });\n  const {\n    isLoading: isAddingNote,\n    mutate: addNoteMutate\n  } = useMutation(payload => addConversationNote({\n    note: payload,\n    customer_id: sender.uuid\n  }), {\n    onMutate: async data => {\n      await queryClient.cancelQueries(['notes', sender.uuid]);\n      const previousNotes = queryClient.getQueryData(['notes', sender.uuid]);\n      queryClient.setQueryData(['notes', sender.uuid], old => {\n        return _objectSpread(_objectSpread({}, old), {}, {\n          //@ts-ignore\n          pages: old.pages.map(page => {\n            if (page.data.meta.page === 1) {\n              return _objectSpread(_objectSpread({}, page), {}, {\n                data: _objectSpread(_objectSpread({}, page.data), {}, {\n                  notes: [_objectSpread(_objectSpread({}, data), {}, {\n                    created_datetime: formatISO(new Date())\n                  }), ...page.data.notes]\n                })\n              });\n            }\n\n            return page;\n          })\n        }); // return [...oldData, data];\n      });\n      return {\n        previousNotes\n      };\n    },\n    onSuccess: () => {\n      onCloseNoteModal();\n      queryClient.invalidateQueries(['notes', sender.uuid]);\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          status: \"success\",\n          onClose: onClose,\n          message: \"Note added successfully\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }\n        })\n      });\n    },\n    onError: (error, newData, context) => {\n      queryClient.setQueryData('notes', context.previousNotes);\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 36\n          }\n        })\n      });\n    }\n  });\n  const {\n    isLoading: isClosingConversation,\n    mutate: closeMutate\n  } = useMutation(payload => resolveConversationThread(payload.thread), {\n    onMutate: async ({\n      thread: newThread,\n      notePayload\n    }) => {\n      await queryClient.cancelQueries(['threads', newThread.uuid]);\n      const previousThread = queryClient.getQueryData(['threads', thread.uuid]);\n      queryClient.setQueryData(['threads', newThread.uuid], newThread);\n      !!notePayload.content && addNoteMutate(notePayload);\n      return {\n        previousThread,\n        newThread\n      };\n    },\n    onError: (err, newThread, context) => {\n      queryClient.setQueryData(['threads', context.newThread.uuid], context.previousTodo);\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: err.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 36\n          }\n        })\n      });\n    },\n    onSettled: newThread => {\n      onCloseCloseConversationModal();\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          status: \"success\",\n          onClose: onClose,\n          message: \"Conversation closed successfully\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }\n        })\n      });\n      queryClient.invalidateQueries(['threads', newThread.uuid]);\n    }\n  }); // const handleSnooze = (date: Date) => {};\n\n  const handleAssign = assignee => {\n    var _thread$assignees;\n\n    const {\n      id: assignee_id,\n      first_name,\n      last_name\n    } = assignee;\n    assignMutate({\n      assignee_id,\n      thread_id: uuid,\n      thread: _objectSpread(_objectSpread({}, thread), {}, {\n        assignees: [...((_thread$assignees = thread === null || thread === void 0 ? void 0 : thread.assignees) !== null && _thread$assignees !== void 0 ? _thread$assignees : []), {\n          last_name,\n          first_name,\n          user_id: assignee_id,\n          organisation_id: organizationID\n        }]\n      })\n    });\n  };\n\n  const handleClose = notePayload => {\n    closeMutate({\n      thread: _objectSpread(_objectSpread({}, thread), {}, {\n        state: 'resolved'\n      }),\n      notePayload\n    });\n  };\n\n  const handleFavorite = () => {\n    favoriteMutate(_objectSpread(_objectSpread({}, thread), {}, {\n      is_favorited: true\n    }));\n  };\n\n  const handleUnFavorite = () => {\n    unFavoriteMutate(_objectSpread(_objectSpread({}, thread), {}, {\n      is_favorited: false\n    }));\n  };\n\n  const handleTag = tag => {\n    tagMutate({\n      tag,\n      thread: _objectSpread(_objectSpread({}, thread), {}, {\n        tags: [...thread.tags, tag]\n      })\n    });\n  };\n\n  const handleUnTag = tag => {\n    unTagMutate({\n      tag,\n      thread: _objectSpread(_objectSpread({}, thread), {}, {\n        tags: thread.tags.filter(item => item.uuid !== tag.uuid)\n      })\n    });\n  };\n\n  const handleTagClick = tag => {\n    const threadTagIds = thread.tags.map(item => item.uuid);\n\n    if (threadTagIds.includes(tag.uuid)) {\n      handleUnTag(tag);\n    } else {\n      handleTag(tag);\n    }\n  };\n\n  const handleFavoriteClick = () => {\n    if (is_favorited) {\n      handleUnFavorite();\n    } else {\n      handleFavorite();\n    }\n  };\n\n  const handleAddNote = values => {\n    addNoteMutate(values);\n  };\n\n  const handleOpenAssignMenu = () => {\n    onOpenAssignMenu();\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Flex, {\n    pb: \"0.875rem\",\n    width: \"100%\",\n    alignItems: \"center\",\n    borderBottomWidth: \"1px\",\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    spacing: \"0.75rem\",\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 9\n    }\n  }, __jsx(Icon, {\n    size: \"1.5rem\",\n    name: (_channelOptions$chann = channelOptions[channel]) === null || _channelOptions$chann === void 0 ? void 0 : _channelOptions$chann.icon,\n    color: \"gray.800\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 11\n    }\n  }), __jsx(Subtitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 11\n    }\n  }, sender.channel_name === 'email' ? lastMessage === null || lastMessage === void 0 ? void 0 : lastMessage.content.subject : (_sender$name = sender.name) !== null && _sender$name !== void 0 ? _sender$name : sender.platform_nick)), __jsx(Stack, {\n    isInline: true,\n    spacing: \"0.875rem\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 9\n    }\n  }, __jsx(Tooltip, {\n    placement: \"bottom\",\n    shouldWrapChildren: true,\n    label: thread === null || thread === void 0 ? void 0 : (_thread$assignees2 = thread.assignees) === null || _thread$assignees2 === void 0 ? void 0 : _thread$assignees2.map(item => `${item.first_name} ${item.last_name}`).join(', '),\n    \"aria-label\": (_thread$assignees$map = thread === null || thread === void 0 ? void 0 : (_thread$assignees3 = thread.assignees) === null || _thread$assignees3 === void 0 ? void 0 : _thread$assignees3.map(item => `${item.first_name} ${item.last_name}`).join(', ')) !== null && _thread$assignees$map !== void 0 ? _thread$assignees$map : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 11\n    }\n  }, __jsx(AvatarGroup, {\n    max: 2,\n    size: \"sm\",\n    mr: \"0.875rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 13\n    }\n  }, thread === null || thread === void 0 ? void 0 : (_thread$assignees4 = thread.assignees) === null || _thread$assignees4 === void 0 ? void 0 : _thread$assignees4.map(item => __jsx(Avatar, {\n    color: \"white\",\n    key: item.uuid,\n    name: `${item.first_name} ${item.last_name}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 17\n    }\n  })))), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 11\n    }\n  }, __jsx(Tooltip, {\n    label: is_favorited ? 'Unfavorite' : 'Favorite',\n    \"aria-label\": is_favorited ? 'Unfavorite' : 'Favorite',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    px: \"0\",\n    minW: \"unset\",\n    variant: \"unstyled\",\n    onClick: handleFavoriteClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 15\n    }\n  }, __jsx(Icon, {\n    size: \"1.5rem\",\n    name: \"inbox-favorite\",\n    color: is_favorited ? '#FFD76E' : 'gray.400',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 17\n    }\n  })))), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 11\n    }\n  }, __jsx(TagsMenu, {\n    tags: tags,\n    onItemClick: handleTagClick,\n    conversationTags: thread.tags,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 13\n    }\n  })), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 11\n    }\n  }, __jsx(MoreOptionsMenu, {\n    onAssign: handleAssign,\n    options: thread.state !== 'resolved' ? [{\n      label: 'Add Notes',\n      iconProps: {\n        color: 'blue.500',\n        name: 'inbox-add-note'\n      },\n      onItemClick: onOpenNoteModal\n    }, {\n      label: 'Close Conversation',\n      onItemClick: onOpenCloseConversationModal,\n      iconProps: {\n        color: '#5ACA75',\n        name: 'inbox-resolve-conversation'\n      }\n    }, {\n      label: 'Assign Conversation',\n      iconProps: {\n        color: '#AF78FF',\n        name: 'inbox-assign-conversation'\n      },\n      onItemClick: handleOpenAssignMenu\n    } // {\n    //   label: 'Mark Unread',\n    //   iconProps: { color: '#50D2A0', name: 'inbox-mark-unread' },\n    //   onItemClick: console.log,\n    // },\n    ] : [{\n      label: 'Add Notes',\n      iconProps: {\n        color: 'blue.500',\n        name: 'inbox-add-note'\n      },\n      onItemClick: onOpenNoteModal\n    }, {\n      label: 'Assign Conversation',\n      iconProps: {\n        color: '#AF78FF',\n        name: 'inbox-assign-conversation'\n      },\n      onItemClick: handleOpenAssignMenu\n    } // {\n    //   label: 'Mark Unread',\n    //   iconProps: { color: '#50D2A0', name: 'inbox-mark-unread' },\n    //   onItemClick: console.log,\n    // },\n    ],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 13\n    }\n  })))), __jsx(AssignmentMenu, {\n    isOpen: isAssignMenuOpen,\n    onClose: onCloseAssignMenu,\n    onItemClick: handleAssign,\n    assignments: thread.assignees,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 7\n    }\n  }), __jsx(NoteModal, {\n    isLoading: isAddingNote,\n    onSubmit: handleAddNote,\n    isOpen: isNoteModalOpen,\n    onClose: onCloseNoteModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 7\n    }\n  }), __jsx(CloseConversationModal, {\n    onSubmit: handleClose,\n    userNick: thread.sender.name,\n    isLoading: isClosingConversation,\n    isOpen: isCloseConversationModalOpen,\n    onClose: onCloseCloseConversationModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/components/messages/ConversationThreadHeader.tsx"],"names":["Avatar","AvatarGroup","Box","Flex","Icon","Stack","Tooltip","useDisclosure","useToast","Button","Subtitle","ToastBox","selectOrganisationID","formatISO","React","useState","useMutation","useQueryClient","useSelector","channelOptions","addConversationNote","assignConversationThread","favoriteThread","resolveConversationThread","tagConversation","unFavoriteThread","unTagConversation","CloseConversationModal","NoteModal","AssignmentMenu","MoreOptionsMenu","TagsMenu","ConversationThreadHeader","props","tags","lastMessage","thread","uuid","sender","is_favorited","channel","channel_name","toast","queryClient","isOpen","isNoteModalOpen","onOpen","onOpenNoteModal","onClose","onCloseNoteModal","isCloseConversationModalOpen","onOpenCloseConversationModal","onCloseCloseConversationModal","organizationID","isAssignMenuOpen","setIsAssignMenuOpen","onCloseAssignMenu","onOpenAssignMenu","mutate","favoriteMutate","onMutate","newThread","cancelQueries","previousThread","getQueryData","setQueryData","onError","err","context","previousTodo","position","render","message","onSettled","invalidateQueries","unFavoriteMutate","assignMutate","payload","data","console","log","response","tagMutate","unTagMutate","isLoading","isAddingNote","addNoteMutate","note","customer_id","previousNotes","old","pages","map","page","meta","notes","created_datetime","Date","onSuccess","error","newData","isClosingConversation","closeMutate","notePayload","content","handleAssign","assignee","id","assignee_id","first_name","last_name","thread_id","assignees","user_id","organisation_id","handleClose","state","handleFavorite","handleUnFavorite","handleTag","tag","handleUnTag","filter","item","handleTagClick","threadTagIds","includes","handleFavoriteClick","handleAddNote","values","handleOpenAssignMenu","icon","subject","name","platform_nick","join","label","iconProps","color","onItemClick"],"mappings":"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","sourcesContent":["import {\n  Avatar,\n  AvatarGroup,\n  Box,\n  Flex,\n  Icon,\n  Stack,\n  Tooltip,\n  useDisclosure,\n  useToast,\n} from '@chakra-ui/core';\nimport { TeamMember } from 'app/authenticated-app/settings/settings.types';\nimport { Button, Subtitle, ToastBox } from 'app/components';\nimport { selectOrganisationID } from 'app/unauthenticated-app/authentication';\nimport { AxiosError } from 'axios';\nimport { formatISO } from 'date-fns';\nimport React, { useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useSelector } from 'react-redux';\nimport { channelOptions } from '../..';\nimport {\n  addConversationNote,\n  assignConversationThread,\n  favoriteThread,\n  resolveConversationThread,\n  tagConversation,\n  unFavoriteThread,\n  unTagConversation,\n} from '../../inbox.service';\nimport { Channel, InboxTag, NoteSchema, ThreadSchema } from '../../inbox.types';\nimport { CloseConversationModal, NoteModal } from '../more-info';\nimport { AssignmentMenu } from './AssignmentMenu';\nimport { MoreOptionsMenu } from './MoreOptionsMenu';\n// import { SnoozeMenu } from './SnoozeMenu';\nimport { TagsMenu } from './TagsMenu';\n\nexport type ConversationThreadHeaderProps = {\n  tags?: InboxTag[];\n  thread?: ThreadSchema;\n  lastMessage?: ThreadSchema['last_message'];\n};\n\nexport const ConversationThreadHeader = (props: ConversationThreadHeaderProps) => {\n  const { tags, lastMessage, thread = {} as ThreadSchema } = props;\n  const { uuid, sender = {} as ThreadSchema['sender'], is_favorited } = thread;\n  const channel: Channel = sender?.channel_name;\n\n  const toast = useToast();\n  const queryClient = useQueryClient();\n  const {\n    isOpen: isNoteModalOpen,\n    onOpen: onOpenNoteModal,\n    onClose: onCloseNoteModal,\n  } = useDisclosure();\n  const {\n    isOpen: isCloseConversationModalOpen,\n    onOpen: onOpenCloseConversationModal,\n    onClose: onCloseCloseConversationModal,\n  } = useDisclosure();\n\n  const organizationID = useSelector(selectOrganisationID);\n\n  const [isAssignMenuOpen, setIsAssignMenuOpen] = useState(false);\n  const onCloseAssignMenu = () => setIsAssignMenuOpen(false);\n  const onOpenAssignMenu = () => setIsAssignMenuOpen(!isAssignMenuOpen);\n\n  const { mutate: favoriteMutate } = useMutation<any, AxiosError, any, any>(\n    (thread: ThreadSchema) => favoriteThread(thread),\n    {\n      onMutate: async newThread => {\n        await queryClient.cancelQueries(['threads', newThread.uuid]);\n        const previousThread = queryClient.getQueryData(['threads', thread.uuid]);\n        queryClient.setQueryData(['threads', newThread.uuid], newThread);\n        return { previousThread, newThread };\n      },\n      onError: (err, newThread, context) => {\n        queryClient.setQueryData(['threads', context.newThread.uuid], context.previousTodo);\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => <ToastBox onClose={onClose} message={err.message} />,\n        });\n      },\n      onSettled: newThread => {\n        queryClient.invalidateQueries(['threads', newThread.uuid]);\n      },\n    },\n  );\n\n  const { mutate: unFavoriteMutate } = useMutation<any, AxiosError, any, any>(\n    (thread: ThreadSchema) => unFavoriteThread(thread),\n    {\n      onMutate: async newThread => {\n        await queryClient.cancelQueries(['threads', newThread.uuid]);\n        const previousThread = queryClient.getQueryData(['threads', thread.uuid]);\n        queryClient.setQueryData(['threads', newThread.uuid], newThread);\n        return { previousThread, newThread };\n      },\n      onError: (err, newThread, context) => {\n        queryClient.setQueryData(['threads', context.newThread.uuid], context.previousTodo);\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => <ToastBox onClose={onClose} message={err.message} />,\n        });\n      },\n      onSettled: newThread => {\n        queryClient.invalidateQueries(['threads', newThread.uuid]);\n      },\n    },\n  );\n\n  const { mutate: assignMutate } = useMutation<any, AxiosError, any, any>(\n    (payload: { thread: ThreadSchema; assignee_id: string }) => assignConversationThread(payload),\n    {\n      onMutate: async data => {\n        const { thread: newThread } = data;\n        await queryClient.cancelQueries(['threads', newThread.uuid]);\n        const previousThread = queryClient.getQueryData(['threads', thread.uuid]);\n        console.log({ previousThread, newThread, data });\n        queryClient.setQueryData(['threads', newThread.uuid], newThread);\n        return { previousThread, newThread };\n      },\n      onError: (err, newThread, context) => {\n        queryClient.setQueryData(['threads', context.newThread.uuid], context.previousTodo);\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => <ToastBox onClose={onClose} message={err.message} />,\n        });\n      },\n      onSettled: response => {\n        const { data } = response;\n        const { thread } = data;\n\n        queryClient.invalidateQueries(['threads', thread.uuid]);\n      },\n    },\n  );\n\n  const { mutate: tagMutate } = useMutation<any, AxiosError, any, any>(\n    (payload: { thread: ThreadSchema; tag: InboxTag }) => tagConversation(payload),\n    {\n      onMutate: async data => {\n        const { thread: newThread } = data;\n        await queryClient.cancelQueries(['threads', newThread.uuid]);\n        const previousThread = queryClient.getQueryData(['threads', thread.uuid]);\n        queryClient.setQueryData(['threads', newThread.uuid], newThread);\n        return { previousThread, newThread };\n      },\n      onError: (err, newThread, context) => {\n        queryClient.setQueryData(['threads', context.newThread.uuid], context.previousTodo);\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => <ToastBox onClose={onClose} message={err.message} />,\n        });\n      },\n      onSettled: newThread => {\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => (\n            <ToastBox\n              status=\"success\"\n              onClose={onClose}\n              message=\"Conversation tagged successfully\"\n            />\n          ),\n        });\n        queryClient.invalidateQueries(['threads', newThread.uuid]);\n      },\n    },\n  );\n\n  const { mutate: unTagMutate } = useMutation<any, AxiosError, any, any>(\n    (payload: { thread: ThreadSchema; tag: InboxTag }) => unTagConversation(payload),\n    {\n      onMutate: async data => {\n        const { thread: newThread } = data;\n        await queryClient.cancelQueries(['threads', newThread.uuid]);\n        const previousThread = queryClient.getQueryData(['threads', thread.uuid]);\n        queryClient.setQueryData(['threads', newThread.uuid], newThread);\n        return { previousThread, newThread };\n      },\n      onError: (err, newThread, context) => {\n        queryClient.setQueryData(['threads', context.newThread.uuid], context.previousTodo);\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => <ToastBox onClose={onClose} message={err.message} />,\n        });\n      },\n      onSettled: () => {\n        queryClient.invalidateQueries(['threads', thread.uuid]);\n      },\n    },\n  );\n\n  const { isLoading: isAddingNote, mutate: addNoteMutate } = useMutation<any, AxiosError, any, any>(\n    (payload: Partial<NoteSchema>) =>\n      addConversationNote({\n        note: payload,\n        customer_id: sender.uuid,\n      }),\n    {\n      onMutate: async data => {\n        await queryClient.cancelQueries(['notes', sender.uuid]);\n        const previousNotes = queryClient.getQueryData(['notes', sender.uuid]);\n        queryClient.setQueryData(['notes', sender.uuid], old => {\n          return {\n            //@ts-ignore\n            ...old,\n            //@ts-ignore\n            pages: old.pages.map(page => {\n              if (page.data.meta.page === 1) {\n                return {\n                  ...page,\n                  data: {\n                    ...page.data,\n                    notes: [\n                      { ...data, created_datetime: formatISO(new Date()) },\n                      ...page.data.notes,\n                    ],\n                  },\n                };\n              }\n              return page;\n            }),\n          };\n          // return [...oldData, data];\n        });\n        return { previousNotes };\n      },\n      onSuccess: () => {\n        onCloseNoteModal();\n        queryClient.invalidateQueries(['notes', sender.uuid]);\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => (\n            <ToastBox status=\"success\" onClose={onClose} message=\"Note added successfully\" />\n          ),\n        });\n      },\n      onError: (error, newData, context) => {\n        queryClient.setQueryData('notes', context.previousNotes);\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => <ToastBox onClose={onClose} message={error.message} />,\n        });\n      },\n    },\n  );\n\n  const { isLoading: isClosingConversation, mutate: closeMutate } = useMutation<\n    any,\n    AxiosError,\n    any,\n    any\n  >(\n    (payload: { thread: ThreadSchema; notePayload: any }) =>\n      resolveConversationThread(payload.thread),\n    {\n      onMutate: async ({ thread: newThread, notePayload }) => {\n        await queryClient.cancelQueries(['threads', newThread.uuid]);\n        const previousThread = queryClient.getQueryData(['threads', thread.uuid]);\n        queryClient.setQueryData(['threads', newThread.uuid], newThread);\n        !!notePayload.content && addNoteMutate(notePayload);\n        return { previousThread, newThread };\n      },\n      onError: (err, newThread, context) => {\n        queryClient.setQueryData(['threads', context.newThread.uuid], context.previousTodo);\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => <ToastBox onClose={onClose} message={err.message} />,\n        });\n      },\n      onSettled: newThread => {\n        onCloseCloseConversationModal();\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => (\n            <ToastBox\n              status=\"success\"\n              onClose={onClose}\n              message=\"Conversation closed successfully\"\n            />\n          ),\n        });\n        queryClient.invalidateQueries(['threads', newThread.uuid]);\n      },\n    },\n  );\n\n  // const handleSnooze = (date: Date) => {};\n\n  const handleAssign = (assignee: Partial<TeamMember>) => {\n    const { id: assignee_id, first_name, last_name } = assignee;\n    assignMutate({\n      assignee_id,\n      thread_id: uuid,\n      thread: {\n        ...thread,\n        assignees: [\n          ...(thread?.assignees ?? []),\n          {\n            last_name,\n            first_name,\n            user_id: assignee_id,\n            organisation_id: organizationID,\n          },\n        ],\n      },\n    });\n  };\n\n  const handleClose = (notePayload: { topic: string; status: string; content: string }) => {\n    closeMutate({ thread: { ...thread, state: 'resolved' }, notePayload });\n  };\n\n  const handleFavorite = () => {\n    favoriteMutate({ ...thread, is_favorited: true });\n  };\n\n  const handleUnFavorite = () => {\n    unFavoriteMutate({ ...thread, is_favorited: false });\n  };\n\n  const handleTag = (tag: InboxTag) => {\n    tagMutate({ tag, thread: { ...thread, tags: [...thread.tags, tag] } });\n  };\n\n  const handleUnTag = (tag: InboxTag) => {\n    unTagMutate({\n      tag,\n      thread: { ...thread, tags: thread.tags.filter(item => item.uuid !== tag.uuid) },\n    });\n  };\n\n  const handleTagClick = (tag: InboxTag) => {\n    const threadTagIds = thread.tags.map(item => item.uuid);\n    if (threadTagIds.includes(tag.uuid)) {\n      handleUnTag(tag);\n    } else {\n      handleTag(tag);\n    }\n  };\n\n  const handleFavoriteClick = () => {\n    if (is_favorited) {\n      handleUnFavorite();\n    } else {\n      handleFavorite();\n    }\n  };\n\n  const handleAddNote = (values: Partial<NoteSchema>) => {\n    addNoteMutate(values);\n  };\n\n  const handleOpenAssignMenu = () => {\n    onOpenAssignMenu();\n  };\n\n  return (\n    <>\n      <Flex\n        pb=\"0.875rem\"\n        width=\"100%\"\n        alignItems=\"center\"\n        borderBottomWidth=\"1px\"\n        justifyContent=\"space-between\"\n      >\n        <Stack spacing=\"0.75rem\" isInline alignItems=\"center\">\n          <Icon size=\"1.5rem\" name={channelOptions[channel]?.icon} color=\"gray.800\" />\n          <Subtitle>\n            {sender.channel_name === 'email'\n              ? lastMessage?.content.subject\n              : sender.name ?? sender.platform_nick}\n          </Subtitle>\n        </Stack>\n        <Stack isInline spacing=\"0.875rem\" alignItems=\"center\">\n          <Tooltip\n            placement=\"bottom\"\n            shouldWrapChildren\n            label={thread?.assignees\n              ?.map(item => `${item.first_name} ${item.last_name}`)\n              .join(', ')}\n            aria-label={\n              thread?.assignees?.map(item => `${item.first_name} ${item.last_name}`).join(', ') ??\n              ''\n            }\n          >\n            <AvatarGroup max={2} size=\"sm\" mr=\"0.875rem\">\n              {thread?.assignees?.map(item => (\n                <Avatar\n                  color=\"white\"\n                  key={item.uuid}\n                  name={`${item.first_name} ${item.last_name}`}\n                />\n              ))}\n            </AvatarGroup>\n          </Tooltip>\n          {/* <Box>\n            <SnoozeMenu onSelectDate={handleSnooze} />\n          </Box> */}\n          <Box>\n            <Tooltip\n              label={is_favorited ? 'Unfavorite' : 'Favorite'}\n              aria-label={is_favorited ? 'Unfavorite' : 'Favorite'}\n            >\n              <Button px=\"0\" minW=\"unset\" variant=\"unstyled\" onClick={handleFavoriteClick}>\n                <Icon\n                  size=\"1.5rem\"\n                  name=\"inbox-favorite\"\n                  color={is_favorited ? '#FFD76E' : 'gray.400'}\n                />\n              </Button>\n            </Tooltip>\n          </Box>\n          <Box>\n            <TagsMenu tags={tags} onItemClick={handleTagClick} conversationTags={thread.tags} />\n          </Box>\n          <Box>\n            <MoreOptionsMenu\n              onAssign={handleAssign}\n              options={\n                thread.state !== 'resolved'\n                  ? [\n                      {\n                        label: 'Add Notes',\n                        iconProps: { color: 'blue.500', name: 'inbox-add-note' },\n                        onItemClick: onOpenNoteModal,\n                      },\n                      {\n                        label: 'Close Conversation',\n                        onItemClick: onOpenCloseConversationModal,\n                        iconProps: { color: '#5ACA75', name: 'inbox-resolve-conversation' },\n                      },\n                      {\n                        label: 'Assign Conversation',\n                        iconProps: { color: '#AF78FF', name: 'inbox-assign-conversation' },\n                        onItemClick: handleOpenAssignMenu,\n                      },\n                      // {\n                      //   label: 'Mark Unread',\n                      //   iconProps: { color: '#50D2A0', name: 'inbox-mark-unread' },\n                      //   onItemClick: console.log,\n                      // },\n                    ]\n                  : [\n                      {\n                        label: 'Add Notes',\n                        iconProps: { color: 'blue.500', name: 'inbox-add-note' },\n                        onItemClick: onOpenNoteModal,\n                      },\n                      {\n                        label: 'Assign Conversation',\n                        iconProps: { color: '#AF78FF', name: 'inbox-assign-conversation' },\n                        onItemClick: handleOpenAssignMenu,\n                      },\n                      // {\n                      //   label: 'Mark Unread',\n                      //   iconProps: { color: '#50D2A0', name: 'inbox-mark-unread' },\n                      //   onItemClick: console.log,\n                      // },\n                    ]\n              }\n            />\n          </Box>\n        </Stack>\n      </Flex>\n      <AssignmentMenu\n        isOpen={isAssignMenuOpen}\n        onClose={onCloseAssignMenu}\n        onItemClick={handleAssign}\n        assignments={thread.assignees}\n      />\n      <NoteModal\n        isLoading={isAddingNote}\n        onSubmit={handleAddNote}\n        isOpen={isNoteModalOpen}\n        onClose={onCloseNoteModal}\n      />\n      <CloseConversationModal\n        onSubmit={handleClose}\n        userNick={thread.sender.name}\n        isLoading={isClosingConversation}\n        isOpen={isCloseConversationModalOpen}\n        onClose={onCloseCloseConversationModal}\n      />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}