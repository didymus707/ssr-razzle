{"ast":null,"code":"import _objectSpread from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/component/lists/components/lists/create-list/stages/schema-mapping.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Box, IconButton, Input, Select, useToast } from '@chakra-ui/core';\nimport { Button } from 'app/components';\nimport { selectListResources } from '../../../../../../lists.selectors';\nimport camelCase from 'lodash/camelCase';\nimport { useProperties } from '../../../../../../../tables/components';\nimport { ToastBox } from '../../../../../../../../components';\nimport { resource_types } from '../../../../../../list.data';\nexport const CreateListSchemaMapping = props => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const resources = useSelector(selectListResources);\n  const resource = resources.find(i => i.id === props.selectedResource);\n  const resourceType = resource_types.find(i => props.importType === i.key);\n  const source = props.sources.find(i => i.id === props.selectedSource);\n  let meta = null;\n  let columns;\n\n  if ((resourceType === null || resourceType === void 0 ? void 0 : resourceType.key) === 'google-sheets') {\n    meta = props.sourceMeta.find(i => (i === null || i === void 0 ? void 0 : i.title) === props.selectedSheet);\n    columns = meta.headers.map(i => ({\n      label: i.label,\n      name: camelCase(i.label),\n      hidden: false,\n      type: 'TEXT',\n      column: i.index\n    }));\n  } else if ((resourceType === null || resourceType === void 0 ? void 0 : resourceType.type) === 'app') {\n    columns = props.sourceMeta.map(i => ({\n      label: i.label,\n      name: camelCase(i.label),\n      hidden: false,\n      type: i.type,\n      column: i.key\n    }));\n  } else {\n    columns = props.sourceMeta.map(i => ({\n      label: i.name,\n      name: camelCase(i.name),\n      hidden: false,\n      type: 'TEXT',\n      column: i.name\n    }));\n  }\n\n  const {\n    properties,\n    onPropertyUpdate,\n    onPropertyDelete\n  } = useProperties({\n    properties: columns\n  });\n  const toast = useToast();\n\n  const proceed = async () => {\n    setLoading(true);\n\n    try {\n      let list;\n\n      if ((resourceType === null || resourceType === void 0 ? void 0 : resourceType.type) === 'app') {\n        list = await props.queueAppImport({\n          name: source === null || source === void 0 ? void 0 : source.request_name,\n          resource: props.selectedResource,\n          source: props.selectedSource,\n          mapping: properties\n        }, resourceType === null || resourceType === void 0 ? void 0 : resourceType.key);\n      } else {\n        list = await props.queueResourceImport({\n          name: props.selectedSheet || props.selectedSource,\n          resource: props.selectedResource,\n          source: props.selectedSource,\n          sub_source: props.selectedSheet,\n          mapping: properties\n        }, resourceType === null || resourceType === void 0 ? void 0 : resourceType.key);\n      }\n\n      props.setImportedList(list);\n      return props.setStage('success-prompt');\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: \"Unable to import list at the moment due to an error, please try again\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 11\n          }\n        })\n      });\n    }\n\n    setLoading(false);\n  };\n\n  return __jsx(React.Fragment, null, (resourceType === null || resourceType === void 0 ? void 0 : resourceType.key) === 'google-sheets' && __jsx(React.Fragment, null, __jsx(Box, {\n    className: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, \"Set the columns from your spreadsheet as properties to create a new list\"), __jsx(Box, {\n    mt: \"20px\",\n    fontSize: \"12px\",\n    cursor: \"default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, resource.name, \" > \", (source === null || source === void 0 ? void 0 : source.name) || (source === null || source === void 0 ? void 0 : source.table_name), \" > \", props.selectedSheet)), (resourceType === null || resourceType === void 0 ? void 0 : resourceType.type) === 'app' && __jsx(React.Fragment, null, __jsx(Box, {\n    className: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, \"Set the columns from this \", resourceType.label, \" as properties to create a new list\"), __jsx(Box, {\n    mt: \"20px\",\n    fontSize: \"12px\",\n    cursor: \"default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, resource.name, \" > \", source === null || source === void 0 ? void 0 : source.request_name)), (resourceType === null || resourceType === void 0 ? void 0 : resourceType.type) === 'database' && __jsx(React.Fragment, null, __jsx(Box, {\n    className: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, \"Set the columns from your database table as properties to create a new list\"), __jsx(Box, {\n    mt: \"20px\",\n    fontSize: \"12px\",\n    cursor: \"default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, resource.name, \" > \", props.selectedSource)), __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    marginTop: \"10px\",\n    marginBottom: \"20px\",\n    maxHeight: \"calc(100vh - 470px)\",\n    overflowY: \"scroll\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, properties === null || properties === void 0 ? void 0 : properties.map((property, index) => __jsx(Box, {\n    key: index,\n    display: \"flex\",\n    flexDirection: \"row\",\n    width: \"100%\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    marginY: \"7.5px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    width: \"45%\",\n    padding: \"5px 12.5px\",\n    backgroundColor: \"#FAFAFA\",\n    size: \"sm\",\n    borderRadius: \"5px\",\n    value: property.label,\n    onChange: e => onPropertyUpdate(_objectSpread(_objectSpread({}, property), {}, {\n      label: e.target.value,\n      name: camelCase(e.target.value)\n    }), index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }), __jsx(Select, {\n    width: \"45%\",\n    padding: \"5px 10px\",\n    backgroundColor: \"#FAFAFA\",\n    borderRadius: \"5px\",\n    size: \"sm\",\n    value: property.type,\n    onChange: e => onPropertyUpdate(_objectSpread(_objectSpread({}, property), {}, {\n      type: e.target.value\n    }), index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }, __jsx(\"option\", {\n    value: \"TEXT\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 15\n    }\n  }, \"Text\"), __jsx(\"option\", {\n    value: \"NUMBER\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 15\n    }\n  }, \"Number\"), __jsx(\"option\", {\n    value: \"PHONE NUMBER\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 15\n    }\n  }, \"Phone Number\"), __jsx(\"option\", {\n    value: \"EMAIL\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 15\n    }\n  }, \"Email\"), __jsx(\"option\", {\n    value: \"DATE\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 15\n    }\n  }, \"Date\"), __jsx(\"option\", {\n    value: \"URL\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 15\n    }\n  }, \"URL\")), __jsx(IconButton, {\n    \"aria-label\": \"delete\" // @ts-ignore\n    ,\n    icon: \"trash\",\n    size: \"xs\",\n    borderRadius: \"10px\",\n    marginRight: \"1rem\",\n    isDisabled: (properties === null || properties === void 0 ? void 0 : properties.length) === 1,\n    onClick: () => onPropertyDelete(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  })))), __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"row\",\n    width: \"100%\",\n    justifyContent: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    variantColor: \"blue\",\n    variant: \"solid\",\n    size: \"sm\",\n    onClick: proceed,\n    isLoading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }\n  }, \"Proceed\")));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/component/lists/components/lists/create-list/stages/schema-mapping.tsx"],"names":["React","useState","useSelector","Box","IconButton","Input","Select","useToast","Button","selectListResources","camelCase","useProperties","ToastBox","resource_types","CreateListSchemaMapping","props","loading","setLoading","resources","resource","find","i","id","selectedResource","resourceType","importType","key","source","sources","selectedSource","meta","columns","sourceMeta","title","selectedSheet","headers","map","label","name","hidden","type","column","index","properties","onPropertyUpdate","onPropertyDelete","toast","proceed","list","queueAppImport","request_name","mapping","queueResourceImport","sub_source","setImportedList","setStage","e","position","render","onClose","table_name","property","target","value","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Box, IconButton, Input, Select, useToast } from '@chakra-ui/core';\nimport { Button } from 'app/components';\nimport { selectListResources } from '../../../../../../lists.selectors';\nimport camelCase from 'lodash/camelCase';\nimport { PropertySchema, useProperties } from '../../../../../../../tables/components';\nimport { List } from '../../../../../../lists.types';\nimport { ToastBox } from '../../../../../../../../components';\nimport { resource_types } from '../../../../../../list.data';\n\ninterface Props {\n  importType: string | null;\n  setStage: Function;\n  selectedResource: any;\n  selectedSheet: any;\n  selectedSource: any;\n  sources: any;\n  sourceMeta: any;\n  setImportedList: Function;\n  queueResourceImport: Function;\n  queueAppImport: Function;\n}\n\nexport const CreateListSchemaMapping = (props: Props) => {\n  const [loading, setLoading] = useState(false);\n\n  const resources = useSelector(selectListResources);\n  const resource = resources.find((i: any) => i.id === props.selectedResource);\n  const resourceType = resource_types.find((i: any) => props.importType === i.key);\n  const source = props.sources.find((i: any) => i.id === props.selectedSource);\n  let meta = null;\n  let columns: any[];\n\n  if (resourceType?.key === 'google-sheets') {\n    meta = props.sourceMeta.find((i: any) => i?.title === props.selectedSheet);\n    columns = meta.headers.map((i: any) => ({\n      label: i.label,\n      name: camelCase(i.label),\n      hidden: false,\n      type: 'TEXT',\n      column: i.index,\n    })) as PropertySchema[];\n  } else if (resourceType?.type === 'app') {\n    columns = props.sourceMeta.map((i: any) => ({\n      label: i.label,\n      name: camelCase(i.label),\n      hidden: false,\n      type: i.type,\n      column: i.key,\n    })) as PropertySchema[];\n  } else {\n    columns = props.sourceMeta.map((i: any) => ({\n      label: i.name,\n      name: camelCase(i.name),\n      hidden: false,\n      type: 'TEXT',\n      column: i.name,\n    })) as PropertySchema[];\n  }\n\n  const { properties, onPropertyUpdate, onPropertyDelete } = useProperties({\n    properties: columns,\n  });\n\n  const toast = useToast();\n\n  const proceed = async () => {\n    setLoading(true);\n    try {\n      let list: List;\n      if (resourceType?.type === 'app') {\n        list = await props.queueAppImport(\n          {\n            name: source?.request_name,\n            resource: props.selectedResource,\n            source: props.selectedSource,\n            mapping: properties,\n          },\n          resourceType?.key,\n        );\n      } else {\n        list = await props.queueResourceImport(\n          {\n            name: props.selectedSheet || props.selectedSource,\n            resource: props.selectedResource,\n            source: props.selectedSource,\n            sub_source: props.selectedSheet,\n            mapping: properties,\n          },\n          resourceType?.key,\n        );\n      }\n      props.setImportedList(list);\n      return props.setStage('success-prompt');\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox\n            onClose={onClose}\n            message=\"Unable to import list at the moment due to an error, please try again\"\n          />\n        ),\n      });\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <>\n      {resourceType?.key === 'google-sheets' && (\n        <>\n          <Box className=\"description\">\n            Set the columns from your spreadsheet as properties to create a new list\n          </Box>\n\n          <Box mt=\"20px\" fontSize=\"12px\" cursor=\"default\">\n            {resource.name} &gt; {source?.name || source?.table_name} &gt; {props.selectedSheet}\n          </Box>\n        </>\n      )}\n\n      {resourceType?.type === 'app' && (\n        <>\n          <Box className=\"description\">\n            Set the columns from this {resourceType.label} as properties to create a new list\n          </Box>\n\n          <Box mt=\"20px\" fontSize=\"12px\" cursor=\"default\">\n            {resource.name} &gt; {source?.request_name}\n          </Box>\n        </>\n      )}\n\n      {resourceType?.type === 'database' && (\n        <>\n          <Box className=\"description\">\n            Set the columns from your database table as properties to create a new list\n          </Box>\n          <Box mt=\"20px\" fontSize=\"12px\" cursor=\"default\">\n            {resource.name} &gt; {props.selectedSource}\n          </Box>\n        </>\n      )}\n\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        marginTop=\"10px\"\n        marginBottom=\"20px\"\n        maxHeight=\"calc(100vh - 470px)\"\n        overflowY=\"scroll\"\n      >\n        {properties?.map((property: any, index: number) => (\n          <Box\n            key={index}\n            display=\"flex\"\n            flexDirection=\"row\"\n            width=\"100%\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            marginY=\"7.5px\"\n          >\n            <Input\n              width=\"45%\"\n              padding=\"5px 12.5px\"\n              backgroundColor=\"#FAFAFA\"\n              size=\"sm\"\n              borderRadius=\"5px\"\n              value={property.label}\n              onChange={(e: any) =>\n                onPropertyUpdate(\n                  {\n                    ...property,\n                    label: e.target.value,\n                    name: camelCase(e.target.value),\n                  },\n                  index,\n                )\n              }\n            />\n            <Select\n              width=\"45%\"\n              padding=\"5px 10px\"\n              backgroundColor=\"#FAFAFA\"\n              borderRadius=\"5px\"\n              size=\"sm\"\n              value={property.type}\n              onChange={(e: any) => onPropertyUpdate({ ...property, type: e.target.value }, index)}\n            >\n              <option value=\"TEXT\">Text</option>\n              <option value=\"NUMBER\">Number</option>\n              <option value=\"PHONE NUMBER\">Phone Number</option>\n              <option value=\"EMAIL\">Email</option>\n              <option value=\"DATE\">Date</option>\n              <option value=\"URL\">URL</option>\n            </Select>\n\n            <IconButton\n              aria-label=\"delete\"\n              // @ts-ignore\n              icon=\"trash\"\n              size=\"xs\"\n              borderRadius=\"10px\"\n              marginRight=\"1rem\"\n              isDisabled={properties?.length === 1}\n              onClick={() => onPropertyDelete(index)}\n            />\n          </Box>\n        ))}\n      </Box>\n\n      <Box display=\"flex\" flexDirection=\"row\" width=\"100%\" justifyContent=\"flex-end\">\n        <Button variantColor=\"blue\" variant=\"solid\" size=\"sm\" onClick={proceed} isLoading={loading}>\n          Proceed\n        </Button>\n      </Box>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}