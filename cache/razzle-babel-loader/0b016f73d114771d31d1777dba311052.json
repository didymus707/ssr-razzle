{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/settings/component/payment/cards/card-dialog.tsx\";\nvar __jsx = React.createElement;\n// @ts-nocheck\nimport { Box, Modal, ModalBody, ModalContent, ModalOverlay, useToast } from '@chakra-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { usePaystackPayment } from 'react-paystack';\nimport { ToastBox, Button } from '../../../../../components';\nimport { DialogWrapper } from '../index.styles';\n\nconst PromptPaystack = ({\n  close,\n  profile,\n  wallet_id,\n  wallet_email\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const publicKey = process.env.REACT_APP_PAYSTACK_PUBLIC_KEY;\n  const config = {\n    amount: 50 * 100,\n    channels: ['card'],\n    email: wallet_email !== null && wallet_email !== void 0 ? wallet_email : '',\n    publicKey: publicKey || '',\n    first_name: profile === null || profile === void 0 ? void 0 : profile.first_name,\n    last_name: profile === null || profile === void 0 ? void 0 : profile.last_name,\n    metadata: {\n      wallet_id,\n      refund: true,\n      save_card: true,\n      purpose: 'card-authorization'\n    }\n  }; // @ts-ignore\n\n  const initializePayment = usePaystackPayment(config);\n\n  const handlePaymentSuccess = () => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      close();\n    }, 3000);\n  };\n\n  return __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, \"You'll be redirected to a secured page where your card details would be collected a small charge will be placed for verification. A complete refund would be processed immediately\"), __jsx(\"form\", {\n    className: \"actions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, __jsx(React.Fragment, null, __jsx(Button, {\n    variantColor: \"blue\",\n    isLoading: loading,\n    className: \"prompt-button\",\n    onClick: () => {\n      close();\n      initializePayment(handlePaymentSuccess, close);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, \"Proceed\"), __jsx(Button, {\n    className: \"prompt-button secondary\",\n    variant: \"ghost\",\n    onClick: close,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \"Cancel\"))));\n};\n\nexport const CardDialog = ({\n  isOpen,\n  onClose,\n  initializeCard,\n  isLoading,\n  profile,\n  wallet_id,\n  wallet_email\n}) => {\n  const {\n    0: stage,\n    1: setStage\n  } = useState('prompt-paystack');\n  const {\n    0: initialization,\n    1: setInitialization\n  } = useState(null);\n  useEffect(() => {\n    setStage('prompt-paystack');\n    setInitialization(null);\n  }, [isOpen]);\n  const toast = useToast();\n\n  const fetchInitialization = async provider => {\n    const _initialization = await initializeCard(provider);\n\n    if (!_initialization) {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: \"Unable to initialize card, please try again\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 11\n          }\n        })\n      });\n    }\n\n    if (provider === 'paystack') window.open(_initialization.authorization_url, '_blank');\n    if (provider === 'stripe') setStage('prompt-stripe');\n    setInitialization(_initialization);\n  };\n\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }), __jsx(ModalContent, {\n    minW: \"450px\",\n    borderRadius: \"5px\",\n    mb: \"15rem\",\n    fontSize: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, __jsx(DialogWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    className: \"heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, \"Add Card\"), stage === 'prompt-paystack' && __jsx(PromptPaystack, {\n    setStage: setStage,\n    fetchInitialization: fetchInitialization,\n    initialization: initialization,\n    isLoading: isLoading,\n    profile: profile,\n    wallet_id: wallet_id,\n    wallet_email: wallet_email,\n    close: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  })))));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/settings/component/payment/cards/card-dialog.tsx"],"names":["Box","Modal","ModalBody","ModalContent","ModalOverlay","useToast","React","useEffect","useState","usePaystackPayment","ToastBox","Button","DialogWrapper","PromptPaystack","close","profile","wallet_id","wallet_email","loading","setLoading","publicKey","process","env","REACT_APP_PAYSTACK_PUBLIC_KEY","config","amount","channels","email","first_name","last_name","metadata","refund","save_card","purpose","initializePayment","handlePaymentSuccess","setTimeout","CardDialog","isOpen","onClose","initializeCard","isLoading","stage","setStage","initialization","setInitialization","toast","fetchInitialization","provider","_initialization","position","render","window","open","authorization_url"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { Box, Modal, ModalBody, ModalContent, ModalOverlay, useToast } from '@chakra-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { usePaystackPayment } from 'react-paystack';\nimport { ToastBox, Button } from '../../../../../components';\nimport { DialogWrapper } from '../index.styles';\n\nconst PromptPaystack = ({ close, profile, wallet_id, wallet_email }) => {\n  const [loading, setLoading] = useState(false);\n\n  const publicKey = process.env.REACT_APP_PAYSTACK_PUBLIC_KEY;\n  const config = {\n    amount: 50 * 100,\n    channels: ['card'],\n    email: wallet_email ?? '',\n    publicKey: publicKey || '',\n    first_name: profile?.first_name,\n    last_name: profile?.last_name,\n    metadata: {\n      wallet_id,\n      refund: true,\n      save_card: true,\n      purpose: 'card-authorization',\n    },\n  };\n  // @ts-ignore\n  const initializePayment = usePaystackPayment(config);\n\n  const handlePaymentSuccess = () => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      close();\n    }, 3000);\n  };\n\n  return (\n    <Box>\n      <Box>\n        You'll be redirected to a secured page where your card details would be collected a small\n        charge will be placed for verification. A complete refund would be processed immediately\n      </Box>\n\n      <form className=\"actions\">\n        <>\n          <Button\n            variantColor=\"blue\"\n            isLoading={loading}\n            className=\"prompt-button\"\n            onClick={() => {\n              close();\n              initializePayment(handlePaymentSuccess, close);\n            }}\n          >\n            Proceed\n          </Button>\n          <Button className=\"prompt-button secondary\" variant=\"ghost\" onClick={close}>\n            Cancel\n          </Button>\n        </>\n      </form>\n    </Box>\n  );\n};\n\nexport const CardDialog = ({\n  isOpen,\n  onClose,\n  initializeCard,\n  isLoading,\n  profile,\n  wallet_id,\n  wallet_email,\n}) => {\n  const [stage, setStage] = useState('prompt-paystack');\n  const [initialization, setInitialization] = useState(null);\n\n  useEffect(() => {\n    setStage('prompt-paystack');\n    setInitialization(null);\n  }, [isOpen]);\n\n  const toast = useToast();\n\n  const fetchInitialization = async provider => {\n    const _initialization = await initializeCard(provider);\n    if (!_initialization) {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox onClose={onClose} message=\"Unable to initialize card, please try again\" />\n        ),\n      });\n    }\n\n    if (provider === 'paystack') window.open(_initialization.authorization_url, '_blank');\n    if (provider === 'stripe') setStage('prompt-stripe');\n\n    setInitialization(_initialization);\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent minW=\"450px\" borderRadius=\"5px\" mb=\"15rem\" fontSize=\"20px\">\n        <ModalBody>\n          <DialogWrapper>\n            <Box className=\"heading\">Add Card</Box>\n            {stage === 'prompt-paystack' && (\n              <PromptPaystack\n                setStage={setStage}\n                fetchInitialization={fetchInitialization}\n                initialization={initialization}\n                isLoading={isLoading}\n                profile={profile}\n                wallet_id={wallet_id}\n                wallet_email={wallet_email}\n                close={onClose}\n              />\n            )}\n          </DialogWrapper>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}