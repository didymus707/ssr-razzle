{"ast":null,"code":"export {};","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import { BoxProps, FlexProps, IconProps, StackProps } from '@chakra-ui/core';\nimport { FormLabelProps } from '@chakra-ui/core/dist/FormLabel';\nimport { MutableRefObject, RefObject } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { TextareaAutosizeProps } from 'react-textarea-autosize';\nimport { TableContactOptions } from '../tables';\nimport { ConversationFilterAccordionItemProps } from './components';\n\nexport type InboxStatusSchema = 'idle' | 'loading' | 'success' | 'error';\n\nexport type ThreadStateSchema = 'assigned' | 'resolved' | 'queued' | 'unknown';\n\nexport type EntityMetaSchema = {\n  count: number;\n  pageSize: number;\n  pageCount: number;\n  page: number;\n};\n\nexport type AddressBookSchema = {\n  id?: number;\n  uuid: string;\n  contact_id: string;\n  customer_id: string;\n  organisation_id: string;\n  created_datetime?: string;\n  updated_datetime?: string;\n};\n\nexport type PlatformContactSchema = {\n  id?: number;\n  uuid: string;\n  name: string;\n  meta?: any;\n  customer_id: string;\n  organisation_id: string;\n  receiver_platform_id: string;\n  created_datetime?: string;\n  updated_datetime?: string;\n};\n\nexport type ContactColumnSchema = {\n  contact_id: string;\n  [key: string]: string | number;\n};\n\nexport type ContactSchema = {\n  id: string;\n  table_id: string;\n  created_datetime?: string;\n  updated_datetime?: string;\n};\n\nexport type ThreadSchema = {\n  resolved_datetime?: string | null;\n  state: string;\n  uuid: string;\n  type: string;\n  unread_count?: number;\n  updated_datetime: string;\n  created_datetime: string;\n  receiver_id: string;\n  sender_id: string;\n  resolver_id?: string | null;\n  assignments: {\n    uuid: string;\n    assigner_id: string;\n    assignee_id: string;\n  }[];\n  assignees?: {\n    uuid?: string;\n    user_id: string;\n    last_name: string;\n    first_name: string;\n    organisation_id: string;\n    created_datetime?: string;\n    updated_datetime?: string;\n  }[];\n  is_favorited: boolean;\n  tags: InboxTag[];\n  last_message?: {\n    uuid: string;\n    content: {\n      body: string;\n      subject?: string;\n    };\n    status: string;\n    meta: {\n      urls: string[];\n      mentions: string[];\n      hash_tags: string[];\n      symbols: string[];\n      bcc?: string[];\n      cc?: string[];\n      message_type?: 'payment_request' | 'payment_received' | 'normal' | 'log';\n      payment_link_id?: string;\n    };\n    has_attachment: boolean;\n    is_read: boolean;\n  };\n  receiver: {\n    status: string;\n    uuid: string;\n    user_id: string;\n    image_url: string | null;\n    email: string | null;\n    platform_name: string;\n    platform_nick: string;\n    channel_name: Channel;\n  };\n  sender: {\n    uuid: string;\n    name: string;\n    contact_id?: string;\n    email?: string | null;\n    channel_name: Channel;\n    platform_nick?: string;\n    image_url?: string | null;\n  };\n};\n\nexport type AssignmentSchema = {\n  uuid: string;\n  thread_id: string;\n  created_datetime: string;\n  updated_datetime?: string;\n  assigner_id: string; // => TeamMember\n  assignee_id: string; // => TeamMember\n};\n\nexport type NoteSchema = {\n  uuid: string;\n  content: string;\n  assignment_id: string;\n  created_datetime: string;\n  updated_datetime?: string;\n  author_id: string; // => TeamMember\n};\n\nexport type InboxUserSchema = {\n  id?: number;\n  is_customer: boolean;\n  uuid: string; // => CustomerSchema | TeamMember\n};\n\nexport type CustomerSchema = {\n  uuid: string;\n  email?: string;\n  channel: string;\n  image_url?: string;\n  platform_name?: string;\n  platform_nick?: string;\n};\n\nexport type UnfurledUrlSchema = {\n  description?: string;\n  image?: string;\n  title?: string;\n  type?: string;\n  url?: string;\n};\n\nexport type MessageMetaSchema = {\n  type: 'normal' | 'payment_request' | 'assignment' | 'payment_received';\n  unfurledUrl?: UnfurledUrlSchema;\n  message_id: MessageSchema['uuid'];\n};\n\nexport type CommonAttachmentDataSchema = {\n  url: string;\n  attachment_id: string;\n};\n\nexport type ImageDataSchema = CommonAttachmentDataSchema & {\n  width?: string;\n  height?: string;\n  maxWidth?: string;\n  maxHeight?: string;\n  previewUrl?: string;\n  sizes?: {\n    [k: string]: {\n      w: number;\n      h: number;\n      resize: string;\n    };\n  };\n};\n\nexport type VideoDataSchema = Omit<ImageDataSchema, 'maxWidth' | 'maxHeight'> & {\n  aspectRatio?: number[];\n  variants?: {\n    bitrate: string;\n    content_type: string;\n    url: string;\n  }[];\n};\n\nexport type AttachmentDataSchema = CommonAttachmentDataSchema | ImageDataSchema | VideoDataSchema;\n\nexport type AttachmentSchema = {\n  id: string;\n  name?: string;\n  type: string;\n  size?: string;\n  message_id: string;\n  data?: AttachmentDataSchema;\n};\n\nexport type MessageSchema = {\n  uuid: string;\n  id?: number;\n  content?: string;\n  attachments?: AttachmentSchema[];\n  created_datetime: string;\n  thread_id: string;\n  updated_datetime?: string;\n  status?: string;\n  state: ThreadSchema['state'];\n  meta?: MessageMetaSchema;\n  author_id: string; // => InboxUserSchma\n  others?: {\n    hasAttachment: boolean;\n  };\n};\n\nexport type NotificationSchema = {\n  uuid: string;\n  id?: number;\n  updated_datetime?: string;\n  created_datetime?: string;\n  user_id: string; // => InboxUserSchma\n  message_id: string; // => MessageSchema\n  status: 'sent' | 'read' | 'delivered' | 'unsent';\n};\n\nexport type StartThreadPayloadSchema = {\n  sender_name: string;\n  contact?: TableContactOptions;\n  credential: any;\n  customer: Pick<CustomerSchema, 'channel' | 'platform_nick'>;\n};\n\nexport type InboxProps = RouteComponentProps<{ id: string }>;\n\ntype ToggleUserOverviewType = 'none' | 'mini' | 'full';\nexport type UserOverviewProps = {\n  toggleUserOverview: ToggleUserOverviewType;\n  onCloseMobileDrawer?(): void;\n  onUserOverViewToggled: (v?: ToggleUserOverviewType) => void;\n};\n\nexport type TwoWayPayloadSchema = {\n  contact_id?: string;\n  contactName?: string;\n  credential_id?: string;\n  senderPlatformNick: string;\n};\n\nexport type ThreadStarterProps = FlexProps & {\n  text: string;\n  channels?: any;\n  showCompose: boolean;\n  setActiveFilter?: () => void;\n  twoWayPayload: TwoWayPayloadSchema;\n  setShowCompose: (v: boolean) => void;\n  setText: (v: string, i?: boolean) => void;\n  setTwoWayPayload: React.Dispatch<React.SetStateAction<TwoWayPayloadSchema>>;\n  setActiveThread?: React.Dispatch<React.SetStateAction<ThreadSchema | undefined>>;\n};\n\nexport type MessageProps = {\n  onMobileUserOverViewOpen?(): void;\n  onCloseMobileMessageDrawer?(): void;\n  textAreaRef: React.MutableRefObject<HTMLTextAreaElement | null>;\n  onUserOverViewToggled: UserOverviewProps['onUserOverViewToggled'];\n} & FlexProps;\n\nexport type MessageHeaderProps = FlexProps & {\n  sender_id: string;\n  receiver_id: string;\n  currentThreadID: string;\n};\n\nexport interface ConversationThreadProps extends BoxProps {\n  threadRef: RefObject<HTMLDivElement>;\n}\n\nexport type MessageItemProps = {\n  previousItemID: string;\n  nextItemID: string;\n  itemID: string;\n  threadSenderID: string;\n  messageRef: React.RefObject<HTMLElement>;\n};\n\nexport type PaymentLinkMetaSchema = {\n  invoice?: string;\n  delivery?: 'delivery' | 'pickup';\n  provider: {\n    value: 'paystack' | 'onepipe';\n    text: 'Paystack' | 'SimpuPay';\n  };\n  expiry_date: { value: number; text: string };\n};\n\nexport type PaymentRequestItemSchema = {\n  uuid: string;\n  name: string;\n  description: string;\n  quantity: number;\n  amount: number;\n};\n\nexport type PaymentRequestSchema = {\n  currency?: string;\n  order_type?: 'delivery' | 'pickup';\n  provider: 'paystack' | 'onepipe';\n  expiry_date: number | string;\n  invoice_number?: string;\n  items: PaymentRequestItemSchema[];\n};\n\nexport type ComposeIconsProps = {\n  value?: string;\n  attachedFiles: File[];\n  isModalOpened: boolean;\n  isCreatingLink?: boolean;\n  paymentItems: PaymentItemSchema[];\n  paymentRequest: PaymentRequestSchema;\n  paymentLinkMeta: PaymentLinkMetaSchema;\n  setIsModalOpened: (v: boolean) => void;\n  setAttachedFiles: (v: File[]) => void;\n  textAreaRef: MessageProps['textAreaRef'];\n  onSendPaymentRequest?(payload: any): void;\n  setPaymentItems: (v: PaymentItemSchema[]) => void;\n  setPaymentRequest: (v: PaymentRequestSchema) => void;\n  setText: (v: string, i?: boolean, s?: string) => void;\n  setPaymentLinkMeta: (v: PaymentLinkMetaSchema) => void;\n  setIsTemplateMode: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport type FilePickerProps = Omit<FormLabelProps, 'children'> & {\n  channel?: CustomerSchema['channel'];\n  textAreaRef?: MessageProps['textAreaRef'];\n  files: ComposeIconsProps['attachedFiles'];\n  setFiles: ComposeIconsProps['setAttachedFiles'];\n  iconProps?: IconProps;\n};\n\nexport type EditorWithEmojiProps = TextareaAutosizeProps &\n  React.RefAttributes<HTMLTextAreaElement> & {\n    handleSubmit: any;\n    isTemplateMode?: boolean;\n    setText: (text: string) => void;\n    textAreaRef: MessageProps['textAreaRef'];\n  };\n\nexport type EditorProps = Partial<EditorWithEmojiProps>;\n\nexport type ComposeAttachments = {\n  onClick?(): void;\n  showDeleteButton?: boolean;\n  files: ComposeIconsProps['attachedFiles'];\n  onUpload?: (file: File, url: string) => void;\n  setFiles: ComposeIconsProps['setAttachedFiles'];\n};\n\nexport type ConversationProps = {\n  toggleResolve: boolean;\n  setToggleResolve: (v: boolean) => void;\n  textAreaRef: MessageProps['textAreaRef'];\n};\n\nexport type ChatProps = FlexProps & {\n  searchQuery: string;\n  searchedResult?: { threads: string[]; messages: string };\n  toggleResolve: ConversationProps['toggleResolve'];\n  setToggleResolve: ConversationProps['setToggleResolve'];\n};\n\nexport type ConversationSectionProps = BoxProps & {\n  name: string;\n  haveViewEntireControl?: boolean;\n  highlight?: string;\n};\n\nexport type ConversationListProps = {\n  list?: string[];\n  isSearch?: boolean;\n  heading?: ConversationSectionProps['name'];\n  highlight?: ConversationSectionProps['highlight'];\n};\n\nexport type ConversationItemProps = {\n  highlight?: string;\n  itemID: ThreadSchema['uuid'];\n};\n\nexport type PaymentItemSchema = {\n  id: string;\n  name: string;\n  amount: number;\n};\n\nexport type PaymentListProps = StackProps & {\n  list: PaymentItemSchema[];\n  onUpdate: (name: string, value: string, index: number) => void;\n  onDelete: (index: number) => void;\n};\n\nexport type PaymentItemProps = PaymentItemSchema &\n  FlexProps & {\n    index: number;\n    showControls: boolean;\n    onUpdate: (name: string, value: string) => void;\n    onDelete: () => void;\n  };\n\nexport type AttachmentProps = {\n  message_id?: string;\n  isOrgUser: boolean;\n  receiver: any;\n  attachments: any[];\n};\n\nexport type MessageItemViewProps = {\n  timeViewRef: MutableRefObject<HTMLParagraphElement | undefined>;\n  messageRef: MessageItemProps['messageRef'];\n  itemID: MessageItemProps['itemID'];\n  isOrgUser: boolean;\n  isChannelAcct?: boolean;\n  type?: MessageMetaSchema['type'];\n  status: string;\n  content: string;\n  attachments?: AttachmentSchema[];\n  linkMetaDatas?: any[];\n  threadReceiverUserID?: string;\n  threadSenderID: string;\n  author_id: string;\n  time: string;\n  hasAttachment?: boolean;\n  nextItemID?: string;\n  previousItemID?: string;\n};\n\nexport type FilterTypeOptions = Pick<\n  ConversationFilterAccordionItemProps,\n  'label' | 'children' | 'icon' | 'iconColor'\n>;\n\nexport type Channel = 'whatsapp' | 'messenger' | 'phone' | 'twitter' | 'whatsappWeb' | 'email';\n\nexport type InboxTag = {\n  created_datetime?: string;\n  creator_id?: string;\n  description?: string;\n  id?: number;\n  name: string;\n  organisation_id?: string;\n  updated_datetime?: string | null;\n  uuid: string;\n  color: string;\n};\n\nexport type InboxConnection = {\n  id: string;\n  table_id?: string | null;\n  table_name?: string | null;\n  data_model_id?: string | null;\n  data_model_name?: string | null;\n  variables: {\n    filters: {\n      name: string;\n      value: any;\n      operator: string;\n      channel?: Channel;\n      columnType: string;\n      columnID: string | number;\n      subOperator: string | null;\n    }[];\n    channel_id?: '';\n  };\n  created_datetime: string | null;\n  updated_datetime: string | null;\n};\n\nexport type UserChannelSchema = {\n  id: number;\n  status: string;\n  organisation_id: string;\n  uuid: string;\n  updated_datetime: string;\n  created_datetime: string;\n  user_id: string;\n  user: {\n    id: number;\n    image_url: string;\n    email?: string | null;\n    platform_name?: string | null;\n    platform_nick?: string | null;\n    uuid: string;\n    updated_datetime: string;\n    created_datetime: string;\n    channel_name: string;\n    channel_id: string;\n  };\n  connectivities?: {\n    id: number;\n    disconnected_datetime: string;\n    connected_datetime: string;\n    uuid: string;\n    updated_datetime: string;\n    created_datetime: string;\n    disconnector_id: string;\n    connector_id: string;\n    credential_id: string;\n  }[];\n};\n\nexport type QuickReplySchema = {\n  uuid: string;\n  created_datetime?: string;\n  id: number;\n  name: string;\n  attachments?: any[] | null;\n  author_id?: string;\n  table_id?: string;\n  template: {\n    content: string;\n    subject: string;\n  };\n  updated_datetime?: string | null;\n};\n\nexport type SignatureSchema = {\n  id: number;\n  uuid: string;\n  user_id: string;\n  content: string;\n  organisation_id: string;\n  created_datetime: string;\n  is_default: boolean | null;\n  updated_datetime: string | null;\n};\n\nexport type InboxMessage = {\n  uuid: string;\n  status: 'unsent' | 'sent' | 'delivered' | 'read';\n  type: 'message' | 'comment';\n  thread_id: string;\n  attachments: any[];\n  created_datetime: string;\n  updated_datetime: string;\n  author: {\n    name: string;\n    uuid: string;\n    image_url: string;\n    is_customer?: boolean;\n    platform_nick: string;\n  };\n  request: {\n    id: number;\n    uuid: string;\n    code: string;\n    amount: number;\n    order_type: null;\n    provider: string;\n    currency: string;\n    cancelled: boolean;\n    provider_code: null;\n    invoice_number: string;\n    updated_datetime: string;\n    created_datetime: string;\n  };\n  notifications: Partial<NotificationSchema>[];\n  notification_status: 'sent' | 'read' | 'delivered' | 'unsent';\n  content: {\n    body: string;\n    subject?: string;\n    content_type?: 'text' | 'html';\n  };\n  meta: {\n    urls: string[];\n    mentions: string[];\n    hash_tags: string[];\n    symbols: string[];\n    bcc?: string[];\n    cc?: string[];\n    message_type?: 'payment_request' | 'payment_received' | 'normal' | 'log';\n    payment_link_id?: string;\n  };\n};\n"]},"metadata":{},"sourceType":"module"}