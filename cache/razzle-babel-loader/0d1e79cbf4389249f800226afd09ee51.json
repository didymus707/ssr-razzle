{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/components/messages/compose/ComposeIcons.tsx\";\nvar __jsx = React.createElement;\nimport { Stack } from '@chakra-ui/core';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { INBOX_INIT } from '../../../inbox.data';\nimport { selectCustomerByID, selectThreadDetailByID } from '../../../slices';\nimport { Emoji } from './Emoji';\nimport { FilePicker } from './FilePicker';\nimport { Request } from './Request';\nimport { Template } from './Template';\nexport function ComposeIcons({\n  value,\n  setText,\n  textAreaRef,\n  paymentItems,\n  attachedFiles,\n  isModalOpened,\n  isCreatingLink,\n  paymentRequest,\n  paymentLinkMeta,\n  setPaymentItems,\n  setAttachedFiles,\n  setIsModalOpened,\n  setIsTemplateMode,\n  setPaymentRequest,\n  setPaymentLinkMeta,\n  onSendPaymentRequest\n}) {\n  const params = useParams();\n  const {\n    sender_id\n  } = useSelector(state => selectThreadDetailByID(state, params.id)) || INBOX_INIT.thread;\n  const {\n    channel\n  } = useSelector(state => selectCustomerByID(state, sender_id)) || INBOX_INIT.customer;\n\n  const onEmojiClick = (event, emojiObject) => {\n    if (textAreaRef !== null && textAreaRef !== void 0 && textAreaRef.current && emojiObject.emoji && typeof value === 'string') {\n      const {\n        selectionStart\n      } = textAreaRef.current;\n      setText && setText(`${value.substring(0, selectionStart)}${emojiObject.emoji}${value.substring(selectionStart, value.length)}`);\n    }\n  };\n\n  return __jsx(Stack, {\n    spacing: \"1rem\",\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, __jsx(Template, {\n    setText: setText,\n    sender_id: sender_id,\n    setIsTemplateMode: setIsTemplateMode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), __jsx(Emoji, {\n    onEmojiClick: onEmojiClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), __jsx(Request, {\n    paymentItems: paymentItems,\n    isModalOpened: isModalOpened,\n    paymentRequest: paymentRequest,\n    isCreatingLink: isCreatingLink,\n    setPaymentItems: setPaymentItems,\n    paymentLinkMeta: paymentLinkMeta,\n    setIsModalOpened: setIsModalOpened,\n    setPaymentRequest: setPaymentRequest,\n    setPaymentLinkMeta: setPaymentLinkMeta,\n    onSendPaymentRequest: onSendPaymentRequest,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), !['sms'].includes(channel) && __jsx(FilePicker, {\n    channel: channel,\n    files: attachedFiles,\n    textAreaRef: textAreaRef,\n    setFiles: setAttachedFiles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/components/messages/compose/ComposeIcons.tsx"],"names":["Stack","React","useSelector","useParams","INBOX_INIT","selectCustomerByID","selectThreadDetailByID","Emoji","FilePicker","Request","Template","ComposeIcons","value","setText","textAreaRef","paymentItems","attachedFiles","isModalOpened","isCreatingLink","paymentRequest","paymentLinkMeta","setPaymentItems","setAttachedFiles","setIsModalOpened","setIsTemplateMode","setPaymentRequest","setPaymentLinkMeta","onSendPaymentRequest","params","sender_id","state","id","thread","channel","customer","onEmojiClick","event","emojiObject","current","emoji","selectionStart","substring","length","includes"],"mappings":"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","sourcesContent":["import { Stack } from '@chakra-ui/core';\nimport { IEmojiData } from 'emoji-picker-react';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { RootState } from '../../../../../../root';\nimport { INBOX_INIT } from '../../../inbox.data';\nimport { ComposeIconsProps } from '../../../inbox.types';\nimport { selectCustomerByID, selectThreadDetailByID } from '../../../slices';\nimport { Emoji } from './Emoji';\nimport { FilePicker } from './FilePicker';\nimport { Request } from './Request';\nimport { Template } from './Template';\n\nexport function ComposeIcons({\n  value,\n  setText,\n  textAreaRef,\n  paymentItems,\n  attachedFiles,\n  isModalOpened,\n  isCreatingLink,\n  paymentRequest,\n  paymentLinkMeta,\n  setPaymentItems,\n  setAttachedFiles,\n  setIsModalOpened,\n  setIsTemplateMode,\n  setPaymentRequest,\n  setPaymentLinkMeta,\n  onSendPaymentRequest,\n}: ComposeIconsProps) {\n  const params = useParams<{ id: string }>();\n  const { sender_id } =\n    useSelector((state: RootState) => selectThreadDetailByID(state, params.id)) ||\n    INBOX_INIT.thread;\n  const { channel } =\n    useSelector((state: RootState) => selectCustomerByID(state, sender_id)) || INBOX_INIT.customer;\n\n  const onEmojiClick = (event: MouseEvent, emojiObject: IEmojiData) => {\n    if (textAreaRef?.current && emojiObject.emoji && typeof value === 'string') {\n      const { selectionStart } = textAreaRef.current;\n      setText &&\n        setText(\n          `${value.substring(0, selectionStart)}${emojiObject.emoji}${value.substring(\n            selectionStart,\n            value.length,\n          )}`,\n        );\n    }\n  };\n\n  return (\n    <Stack spacing=\"1rem\" isInline alignItems=\"center\">\n      <Template setText={setText} sender_id={sender_id} setIsTemplateMode={setIsTemplateMode} />\n      <Emoji onEmojiClick={onEmojiClick} />\n      <Request\n        paymentItems={paymentItems}\n        isModalOpened={isModalOpened}\n        paymentRequest={paymentRequest}\n        isCreatingLink={isCreatingLink}\n        setPaymentItems={setPaymentItems}\n        paymentLinkMeta={paymentLinkMeta}\n        setIsModalOpened={setIsModalOpened}\n        setPaymentRequest={setPaymentRequest}\n        setPaymentLinkMeta={setPaymentLinkMeta}\n        onSendPaymentRequest={onSendPaymentRequest}\n      />\n      {!['sms'].includes(channel) && (\n        <FilePicker\n          channel={channel}\n          files={attachedFiles}\n          textAreaRef={textAreaRef}\n          setFiles={setAttachedFiles}\n        />\n      )}\n    </Stack>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}