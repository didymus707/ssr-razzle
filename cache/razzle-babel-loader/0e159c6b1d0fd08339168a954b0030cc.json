{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit';\nimport { isEmpty } from 'lodash';\nimport { selectOrgMembers } from '../../settings/slices';\nimport { selectThreadAssignmentIDs } from './assignment';\nimport { assignThread, fetchThreadAssignments, fetchThreadNotes, onWebSocketAccountDisconnected, onWebSocketNewNote, sendMessage, sendThreadNote } from './global';\nimport { selectInboxEntitiesState } from './ui';\nconst notesAdapter = createEntityAdapter({\n  selectId: note => note.uuid,\n  sortComparer: (a, b) => b.created_datetime.localeCompare(a.created_datetime)\n});\n\nconst upsertManyCallback = (state, action) => {\n  const {\n    notes\n  } = action.payload;\n  !isEmpty(notes) && notesAdapter.upsertMany(state, notes);\n};\n\nexport const notesSlice = createSlice({\n  name: \"notes\",\n  initialState: notesAdapter.getInitialState({\n    metas: {}\n  }),\n  reducers: {},\n\n  extraReducers(builder) {\n    builder.addCase(assignThread.fulfilled, upsertManyCallback).addCase(sendMessage.fulfilled, upsertManyCallback).addCase(onWebSocketNewNote, upsertManyCallback).addCase(fetchThreadAssignments.fulfilled, upsertManyCallback).addCase(sendThreadNote.fulfilled, upsertManyCallback).addCase(onWebSocketAccountDisconnected, (state, action) => {\n      const {\n        noteIDs\n      } = action.payload;\n      (noteIDs === null || noteIDs === void 0 ? void 0 : noteIDs.length) > 0 && notesAdapter.removeMany(state, noteIDs);\n    }).addCase(fetchThreadNotes.fulfilled, (state, action) => {\n      const arg = action.meta.arg;\n      state.metas[arg.thread_id || ''] = action.payload.meta;\n      upsertManyCallback(state, action);\n    });\n  }\n\n});\nexport const notesReducer = notesSlice.reducer;\nexport const {\n  selectById: selectNoteById,\n  selectIds: selectNoteIds,\n  selectEntities: selectNoteEntities,\n  selectAll: selectAllNotes,\n  selectTotal: selectTotalNotes\n} = notesAdapter.getSelectors(state => state.inbox.entities.notes);\nexport const selectAssignmentNotes = createSelector((_, payload) => payload, selectAllNotes, selectOrgMembers, ({\n  assignmentIDs\n}, notes, orgMembers) => assignmentIDs.map(item => notes.filter(({\n  assignment_id\n}) => assignment_id === item).map(note => {\n  const author = orgMembers.find(({\n    id\n  }) => id === note.author_id);\n  return _objectSpread(_objectSpread({}, note), {}, {\n    author\n  });\n})));\nexport const selectThreadNoteIDs = createSelector(selectThreadAssignmentIDs, selectAllNotes, (assignmentIDs, notes) => notes.reduce((acc, note) => {\n  const {\n    assignment_id,\n    uuid\n  } = note;\n\n  if (assignmentIDs.includes(assignment_id)) {\n    acc.push(uuid);\n    return acc;\n  }\n\n  return acc;\n}, []));\nexport const selectNoteState = createSelector(selectInboxEntitiesState, state => state.notes);\nexport const selectNoteMetaByThreadID = createSelector((_, payload) => payload.thread_id, selectNoteState, (thread_id, noteState) => noteState.metas[thread_id] || {});","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/slices/note.ts"],"names":["createEntityAdapter","createSelector","createSlice","isEmpty","selectOrgMembers","selectThreadAssignmentIDs","assignThread","fetchThreadAssignments","fetchThreadNotes","onWebSocketAccountDisconnected","onWebSocketNewNote","sendMessage","sendThreadNote","selectInboxEntitiesState","notesAdapter","selectId","note","uuid","sortComparer","a","b","created_datetime","localeCompare","upsertManyCallback","state","action","notes","payload","upsertMany","notesSlice","name","initialState","getInitialState","metas","reducers","extraReducers","builder","addCase","fulfilled","noteIDs","length","removeMany","arg","meta","thread_id","notesReducer","reducer","selectById","selectNoteById","selectIds","selectNoteIds","selectEntities","selectNoteEntities","selectAll","selectAllNotes","selectTotal","selectTotalNotes","getSelectors","inbox","entities","selectAssignmentNotes","_","assignmentIDs","orgMembers","map","item","filter","assignment_id","author","find","id","author_id","selectThreadNoteIDs","reduce","acc","includes","push","selectNoteState","selectNoteMetaByThreadID","noteState"],"mappings":";;;;;;AAAA,SAASA,mBAAT,EAA8BC,cAA9B,EAA8CC,WAA9C,QAAiE,kBAAjE;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA,SAASC,gBAAT,QAAiC,uBAAjC;AAEA,SAASC,yBAAT,QAA0C,cAA1C;AACA,SACEC,YADF,EACgBC,sBADhB,EACwCC,gBADxC,EAC0DC,8BAD1D,EAEEC,kBAFF,EAEsBC,WAFtB,EAEmCC,cAFnC,QAGO,UAHP;AAIA,SAASC,wBAAT,QAAyC,MAAzC;AAEA,MAAMC,YAAY,GAAGd,mBAAmB,CAAa;AACnDe,EAAAA,QAAQ,EAAEC,IAAI,IAAIA,IAAI,CAACC,IAD4B;AAEnDC,EAAAA,YAAY,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,gBAAF,CAAmBC,aAAnB,CAAiCH,CAAC,CAACE,gBAAnC;AAF2B,CAAb,CAAxC;;AAKA,MAAME,kBAAkB,GAAG,CAACC,KAAD,EAAaC,MAAb,KAA6B;AACtD,QAAM;AAAEC,IAAAA;AAAF,MAAYD,MAAM,CAACE,OAAzB;AACA,GAACxB,OAAO,CAACuB,KAAD,CAAR,IAAmBZ,YAAY,CAACc,UAAb,CAAwBJ,KAAxB,EAA+BE,KAA/B,CAAnB;AACD,CAHD;;AAKA,OAAO,MAAMG,UAAU,GAAG3B,WAAW,CAAC;AACpC4B,EAAAA,IAAI,EAAE,OAD8B;AAEpCC,EAAAA,YAAY,EAAEjB,YAAY,CAACkB,eAAb,CAEX;AACDC,IAAAA,KAAK,EAAE;AADN,GAFW,CAFsB;AAOpCC,EAAAA,QAAQ,EAAE,EAP0B;;AAQpCC,EAAAA,aAAa,CAACC,OAAD,EAAU;AACrBA,IAAAA,OAAO,CACJC,OADH,CACW/B,YAAY,CAACgC,SADxB,EACmCf,kBADnC,EAEGc,OAFH,CAEW1B,WAAW,CAAC2B,SAFvB,EAEkCf,kBAFlC,EAGGc,OAHH,CAGW3B,kBAHX,EAG+Ba,kBAH/B,EAIGc,OAJH,CAIW9B,sBAAsB,CAAC+B,SAJlC,EAI6Cf,kBAJ7C,EAKGc,OALH,CAKWzB,cAAc,CAAC0B,SAL1B,EAKqCf,kBALrC,EAMGc,OANH,CAMW5B,8BANX,EAM2C,CAACe,KAAD,EAAQC,MAAR,KAAmB;AAC1D,YAAM;AAAEc,QAAAA;AAAF,UAAcd,MAAM,CAACE,OAA3B;AAEA,OAAAY,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEC,MAAT,IAAkB,CAAlB,IAAuB1B,YAAY,CAAC2B,UAAb,CAAwBjB,KAAxB,EAA+Be,OAA/B,CAAvB;AACD,KAVH,EAWGF,OAXH,CAWW7B,gBAAgB,CAAC8B,SAX5B,EAWuC,CAACd,KAAD,EAAQC,MAAR,KAAmB;AACtD,YAAMiB,GAAQ,GAAGjB,MAAM,CAACkB,IAAP,CAAYD,GAA7B;AACAlB,MAAAA,KAAK,CAACS,KAAN,CAAaS,GAAG,CAACE,SAAL,IAA6B,EAAzC,IAA+CnB,MAAM,CAACE,OAAP,CAAegB,IAA9D;AACApB,MAAAA,kBAAkB,CAACC,KAAD,EAAQC,MAAR,CAAlB;AACD,KAfH;AAgBD;;AAzBmC,CAAD,CAA9B;AA4BP,OAAO,MAAMoB,YAAY,GAAGhB,UAAU,CAACiB,OAAhC;AAEP,OAAO,MAAM;AACXC,EAAAA,UAAU,EAAEC,cADD;AAEXC,EAAAA,SAAS,EAAEC,aAFA;AAGXC,EAAAA,cAAc,EAAEC,kBAHL;AAIXC,EAAAA,SAAS,EAAEC,cAJA;AAKXC,EAAAA,WAAW,EAAEC;AALF,IAMT1C,YAAY,CAAC2C,YAAb,CAAsCjC,KAAD,IAAWA,KAAK,CAACkC,KAAN,CAAYC,QAAZ,CAAqBjC,KAArE,CANG;AAQP,OAAO,MAAMkC,qBAAqB,GAAG3D,cAAc,CACjD,CAAC4D,CAAD,EAAelC,OAAf,KAAwDA,OADP,EAEjD2B,cAFiD,EAGjDlD,gBAHiD,EAIjD,CAAC;AAAE0D,EAAAA;AAAF,CAAD,EAAoBpC,KAApB,EAA2BqC,UAA3B,KAA0CD,aAAa,CAACE,GAAd,CACvCC,IAAD,IAAUvC,KAAK,CAACwC,MAAN,CACR,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuBA,aAAa,KAAKF,IADjC,EAERD,GAFQ,CAEHhD,IAAD,IAAU;AACd,QAAMoD,MAAM,GAAGL,UAAU,CAACM,IAAX,CAAgB,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAYA,EAAE,KAAKtD,IAAI,CAACuD,SAAxC,CAAf;AAEA,yCAAYvD,IAAZ;AAAkBoD,IAAAA;AAAlB;AACD,CANS,CAD8B,CAJO,CAA5C;AAeP,OAAO,MAAMI,mBAAmB,GAAGvE,cAAc,CAC/CI,yBAD+C,EAE/CiD,cAF+C,EAG/C,CAACQ,aAAD,EAAgBpC,KAAhB,KAA0BA,KAAK,CAAC+C,MAAN,CAAa,CAACC,GAAD,EAAM1D,IAAN,KAAe;AACpD,QAAM;AAAEmD,IAAAA,aAAF;AAAiBlD,IAAAA;AAAjB,MAA0BD,IAAhC;;AACA,MAAI8C,aAAa,CAACa,QAAd,CAAuBR,aAAvB,CAAJ,EAA2C;AACzCO,IAAAA,GAAG,CAACE,IAAJ,CAAS3D,IAAT;AACA,WAAOyD,GAAP;AACD;;AAED,SAAOA,GAAP;AACD,CARyB,EAQtB,EARsB,CAHqB,CAA1C;AAcP,OAAO,MAAMG,eAAe,GAAG5E,cAAc,CAC3CY,wBAD2C,EAE1CW,KAAD,IAAWA,KAAK,CAACE,KAF0B,CAAtC;AAKP,OAAO,MAAMoD,wBAAwB,GAAG7E,cAAc,CACpD,CAAC4D,CAAD,EAAelC,OAAf,KAAiDA,OAAO,CAACiB,SADL,EAEpDiC,eAFoD,EAGpD,CAACjC,SAAD,EAAYmC,SAAZ,KAA0BA,SAAS,CAAC9C,KAAV,CAAgBW,SAAhB,KAA8B,EAHJ,CAA/C","sourcesContent":["import { createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit'\nimport { isEmpty } from 'lodash';\nimport { RootState } from '../../../../root'\nimport { selectOrgMembers } from '../../settings/slices';\nimport { EntityMetaSchema, NoteSchema } from '../inbox.types';\nimport { selectThreadAssignmentIDs } from './assignment';\nimport {\n  assignThread, fetchThreadAssignments, fetchThreadNotes, onWebSocketAccountDisconnected,\n  onWebSocketNewNote, sendMessage, sendThreadNote\n} from './global';\nimport { selectInboxEntitiesState } from './ui';\n\nconst notesAdapter = createEntityAdapter<NoteSchema>({\n  selectId: note => note.uuid,\n  sortComparer: (a, b) => b.created_datetime.localeCompare(a.created_datetime),\n});\n\nconst upsertManyCallback = (state: any, action: any) => {\n  const { notes } = action.payload;\n  !isEmpty(notes) && notesAdapter.upsertMany(state, notes);\n};\n\nexport const notesSlice = createSlice({\n  name: \"notes\",\n  initialState: notesAdapter.getInitialState<{\n    metas: { [k: string]: EntityMetaSchema }\n  }>({\n    metas: {}\n  }),\n  reducers: {},\n  extraReducers(builder) {\n    builder\n      .addCase(assignThread.fulfilled, upsertManyCallback)\n      .addCase(sendMessage.fulfilled, upsertManyCallback)\n      .addCase(onWebSocketNewNote, upsertManyCallback)\n      .addCase(fetchThreadAssignments.fulfilled, upsertManyCallback)\n      .addCase(sendThreadNote.fulfilled, upsertManyCallback)\n      .addCase(onWebSocketAccountDisconnected, (state, action) => {\n        const { noteIDs } = action.payload;\n        \n        noteIDs?.length > 0 && notesAdapter.removeMany(state, noteIDs);\n      })\n      .addCase(fetchThreadNotes.fulfilled, (state, action) => {\n        const arg: any = action.meta.arg;\n        state.metas[(arg.thread_id as string) || ''] = action.payload.meta;\n        upsertManyCallback(state, action);\n      })\n  },\n});\n\nexport const notesReducer = notesSlice.reducer;\n\nexport const {\n  selectById: selectNoteById,\n  selectIds: selectNoteIds,\n  selectEntities: selectNoteEntities,\n  selectAll: selectAllNotes,\n  selectTotal: selectTotalNotes,\n} = notesAdapter.getSelectors<RootState>((state) => state.inbox.entities.notes);\n\nexport const selectAssignmentNotes = createSelector(\n  (_: RootState, payload: { assignmentIDs: string[] }) => payload,\n  selectAllNotes,\n  selectOrgMembers,\n  ({ assignmentIDs }, notes, orgMembers) => assignmentIDs.map(\n    (item) => notes.filter(\n      ({ assignment_id }) => assignment_id === item\n    ).map((note) => {\n      const author = orgMembers.find(({ id }) => id === note.author_id);\n\n      return { ...note, author }\n    })\n  )\n);\n\nexport const selectThreadNoteIDs = createSelector(\n  selectThreadAssignmentIDs,\n  selectAllNotes,\n  (assignmentIDs, notes) => notes.reduce((acc, note) => {\n    const { assignment_id, uuid } = note;\n    if (assignmentIDs.includes(assignment_id)) {\n      acc.push(uuid);\n      return acc;\n    }\n\n    return acc;\n  }, ([] as string[]))\n);\n\nexport const selectNoteState = createSelector(\n  selectInboxEntitiesState,\n  (state) => state.notes,\n);\n\nexport const selectNoteMetaByThreadID = createSelector(\n  (_: RootState, payload: {thread_id: string }) => payload.thread_id,\n  selectNoteState,\n  (thread_id, noteState) => noteState.metas[thread_id] || {}\n);\n"]},"metadata":{},"sourceType":"module"}