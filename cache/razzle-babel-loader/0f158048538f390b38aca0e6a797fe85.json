{"ast":null,"code":"import _extends from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/component/lists/components/data-models/create-data-model/stages/select-resource.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectListResources } from '../../../../../../lists.selectors';\nimport { Box, Icon, SimpleGrid } from '@chakra-ui/core/dist';\nimport { useHistory } from 'react-router-dom';\nimport { Button, EmptyState } from 'app/components';\nimport noResources from '../../../../../../assets/no-resources.svg';\nimport { getListResourceIcon } from '../../../../../../lists.utils';\n\nconst ResourceItem = props => {\n  return __jsx(Box, {\n    className: \"list-item--list\",\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, __jsx(Icon, {\n    className: \"box\",\n    name: getListResourceIcon(props.provider),\n    size: \"22px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }), __jsx(Box, {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    overflow: \"hidden\" // @ts-ignore\n    ,\n    textOverflow: \"ellipsis\",\n    maxWidth: \"260px\",\n    fontWeight: \"500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }\n  }, props.name))), props.selected && __jsx(Icon, {\n    name: \"check-circle\",\n    color: \"#9c9c9c\",\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 26\n    }\n  }));\n};\n\nexport const SelectResource = props => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const resources = useSelector(selectListResources);\n  const routerHistory = useHistory();\n  const filteredResources = resources.filter(i => i.type === 'database');\n  const {\n    selectedResource,\n    setSelectedResource\n  } = props;\n  useEffect(() => {\n    if (filteredResources.length > 0 && !selectedResource) {\n      setSelectedResource(filteredResources[0].id);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n\n  const fetchSheets = async () => {};\n\n  const fetchSchema = async () => {\n    setLoading(true);\n\n    try {\n      return await props.fetchResourceSchema(selectedResource);\n    } catch (e) {}\n\n    setLoading(false);\n  };\n\n  const proceed = () => {\n    const resource = resources.find(i => i.id === selectedResource);\n    if ((resource === null || resource === void 0 ? void 0 : resource.provider) === 'google-sheets') fetchSheets();else fetchSchema();\n  };\n\n  return __jsx(React.Fragment, null, filteredResources.length === 0 && __jsx(EmptyState, {\n    image: noResources,\n    paddingY: \"15vh\",\n    heading: \"Oops, no database connections here\",\n    subheading: \"Setup a database connection to be able to create data models from different sources\",\n    subheadingProps: {\n      width: '400px'\n    },\n    children: __jsx(Button, {\n      variant: \"outline\",\n      variantColor: \"blue\",\n      size: \"sm\",\n      onClick: () => routerHistory.push('/s/lists/connections/new'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, \"Add data source\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }), filteredResources.length > 0 && __jsx(React.Fragment, null, __jsx(Box, {\n    className: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, \"Select the connection which you would like to create a data model from\"), __jsx(SimpleGrid, {\n    columns: 2,\n    spacing: \"10px\",\n    marginY: \"25px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, filteredResources.map(i => __jsx(ResourceItem, _extends({\n    key: i.id,\n    id: i.id,\n    name: i.name\n  }, i, {\n    onClick: () => setSelectedResource(i.id),\n    selected: selectedResource === i.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  })))), __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    variantColor: \"blue\",\n    variant: \"solid\",\n    onClick: proceed,\n    isLoading: loading,\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, \"Proceed\"))));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/component/lists/components/data-models/create-data-model/stages/select-resource.tsx"],"names":["React","useEffect","useState","useSelector","selectListResources","Box","Icon","SimpleGrid","useHistory","Button","EmptyState","noResources","getListResourceIcon","ResourceItem","props","onClick","provider","name","selected","SelectResource","loading","setLoading","resources","routerHistory","filteredResources","filter","i","type","selectedResource","setSelectedResource","length","id","fetchSheets","fetchSchema","fetchResourceSchema","e","proceed","resource","find","width","push","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectListResources } from '../../../../../../lists.selectors';\nimport { Box, Icon, SimpleGrid } from '@chakra-ui/core/dist';\nimport { useHistory } from 'react-router-dom';\nimport { Button, EmptyState } from 'app/components';\nimport noResources from '../../../../../../assets/no-resources.svg';\nimport { getListResourceIcon } from '../../../../../../lists.utils';\n\ninterface ItemProps {\n  id: string;\n  name: string;\n  type?: string;\n  selected?: boolean;\n  provider: string;\n  created_datetime?: string;\n  onClick: () => void;\n}\n\nconst ResourceItem = (props: ItemProps) => {\n  return (\n    <Box className=\"list-item--list\" onClick={props.onClick}>\n      <Box display=\"flex\" alignItems=\"center\">\n        <Icon className=\"box\" name={getListResourceIcon(props.provider)} size=\"22px\" />\n        <Box className=\"label\">\n          <Box\n            overflow=\"hidden\"\n            // @ts-ignore\n            textOverflow=\"ellipsis\"\n            maxWidth=\"260px\"\n            fontWeight=\"500\"\n          >\n            {props.name}\n          </Box>\n        </Box>\n      </Box>\n      {props.selected && <Icon name=\"check-circle\" color=\"#9c9c9c\" size=\"20px\" />}\n    </Box>\n  );\n};\n\ninterface Props {\n  selectedResource: string | null;\n  setSelectedResource: Function;\n  fetchResourceSchema: Function;\n}\n\nexport const SelectResource = (props: Props) => {\n  const [loading, setLoading] = useState(false);\n  const resources: any[] = useSelector(selectListResources);\n  const routerHistory = useHistory();\n\n  const filteredResources = resources.filter((i: any) => i.type === 'database');\n\n  const { selectedResource, setSelectedResource } = props;\n\n  useEffect(() => {\n    if (filteredResources.length > 0 && !selectedResource) {\n      setSelectedResource(filteredResources[0].id);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const fetchSheets = async () => {};\n  const fetchSchema = async () => {\n    setLoading(true);\n    try {\n      return await props.fetchResourceSchema(selectedResource);\n    } catch (e) {}\n    setLoading(false);\n  };\n\n  const proceed = () => {\n    const resource = resources.find((i: any) => i.id === selectedResource);\n    if (resource?.provider === 'google-sheets') fetchSheets();\n    else fetchSchema();\n  };\n\n  return (\n    <>\n      {filteredResources.length === 0 && (\n        <EmptyState\n          image={noResources}\n          paddingY=\"15vh\"\n          heading=\"Oops, no database connections here\"\n          subheading=\"Setup a database connection to be able to create data models from different sources\"\n          subheadingProps={{\n            width: '400px',\n          }}\n          children={\n            <Button\n              variant=\"outline\"\n              variantColor=\"blue\"\n              size=\"sm\"\n              onClick={() => routerHistory.push('/s/lists/connections/new')}\n            >\n              Add data source\n            </Button>\n          }\n        />\n      )}\n\n      {filteredResources.length > 0 && (\n        <>\n          <Box className=\"description\">\n            Select the connection which you would like to create a data model from\n          </Box>\n\n          <SimpleGrid columns={2} spacing=\"10px\" marginY=\"25px\">\n            {filteredResources.map((i: any) => (\n              <ResourceItem\n                key={i.id}\n                id={i.id}\n                name={i.name}\n                {...i}\n                onClick={() => setSelectedResource(i.id)}\n                selected={selectedResource === i.id}\n              />\n            ))}\n          </SimpleGrid>\n\n          <Box display=\"flex\" justifyContent=\"flex-end\">\n            <Button\n              variantColor=\"blue\"\n              variant=\"solid\"\n              onClick={proceed}\n              isLoading={loading}\n              size=\"sm\"\n            >\n              Proceed\n            </Button>\n          </Box>\n        </>\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}