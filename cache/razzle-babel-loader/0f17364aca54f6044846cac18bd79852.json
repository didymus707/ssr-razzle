{"ast":null,"code":"// @ts-nocheck\nimport { useRef, useLayoutEffect } from 'react';\nconst isBrowser = false;\n\nconst getScrollPosition = ({\n  element,\n  useWindow\n}) => {\n  if (!isBrowser) return {\n    x: 0,\n    y: 0\n  };\n  const target = element ? element.current : document.body;\n  const position = target.getBoundingClientRect();\n  return useWindow ? {\n    x: window.scrollX,\n    y: window.scrollY\n  } : {\n    x: position.left,\n    y: position.top\n  };\n};\n\nexport const useScrollPosition = (effect, deps, element, useWindow, wait) => {\n  const position = useRef(getScrollPosition({\n    useWindow\n  }));\n  let throttleTimeout = null;\n\n  const callBack = () => {\n    const currPos = getScrollPosition({\n      element,\n      useWindow\n    });\n    effect({\n      prevPos: position.current,\n      currPos\n    });\n    position.current = currPos;\n    throttleTimeout = null;\n  };\n\n  useLayoutEffect(() => {\n    const handleScroll = () => {\n      if (wait) {\n        if (throttleTimeout === null) {\n          // eslint-disable-next-line\n          throttleTimeout = setTimeout(callBack, wait);\n        }\n      } else {\n        callBack();\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, deps);\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/hooks/use-scroll-position.ts"],"names":["useRef","useLayoutEffect","isBrowser","getScrollPosition","element","useWindow","x","y","target","current","document","body","position","getBoundingClientRect","window","scrollX","scrollY","left","top","useScrollPosition","effect","deps","wait","throttleTimeout","callBack","currPos","prevPos","handleScroll","setTimeout","addEventListener","removeEventListener"],"mappings":"AAAA;AACA,SAASA,MAAT,EAAiBC,eAAjB,QAAwC,OAAxC;AAEA,MAAMC,SAAS,QAAf;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAA4B;AACpD,MAAI,CAACH,SAAL,EAAgB,OAAO;AAAEI,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAP;AAEhB,QAAMC,MAAM,GAAGJ,OAAO,GAAGA,OAAO,CAACK,OAAX,GAAqBC,QAAQ,CAACC,IAApD;AACA,QAAMC,QAAQ,GAAGJ,MAAM,CAACK,qBAAP,EAAjB;AAEA,SAAOR,SAAS,GACZ;AAAEC,IAAAA,CAAC,EAAEQ,MAAM,CAACC,OAAZ;AAAqBR,IAAAA,CAAC,EAAEO,MAAM,CAACE;AAA/B,GADY,GAEZ;AAAEV,IAAAA,CAAC,EAAEM,QAAQ,CAACK,IAAd;AAAoBV,IAAAA,CAAC,EAAEK,QAAQ,CAACM;AAAhC,GAFJ;AAGD,CATD;;AAWA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,MAAD,EAASC,IAAT,EAAejB,OAAf,EAAwBC,SAAxB,EAAmCiB,IAAnC,KAA4C;AAC3E,QAAMV,QAAQ,GAAGZ,MAAM,CAACG,iBAAiB,CAAC;AAAEE,IAAAA;AAAF,GAAD,CAAlB,CAAvB;AAEA,MAAIkB,eAAe,GAAG,IAAtB;;AAEA,QAAMC,QAAQ,GAAG,MAAM;AACrB,UAAMC,OAAO,GAAGtB,iBAAiB,CAAC;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAD,CAAjC;AACAe,IAAAA,MAAM,CAAC;AAAEM,MAAAA,OAAO,EAAEd,QAAQ,CAACH,OAApB;AAA6BgB,MAAAA;AAA7B,KAAD,CAAN;AACAb,IAAAA,QAAQ,CAACH,OAAT,GAAmBgB,OAAnB;AACAF,IAAAA,eAAe,GAAG,IAAlB;AACD,GALD;;AAOAtB,EAAAA,eAAe,CAAC,MAAM;AACpB,UAAM0B,YAAY,GAAG,MAAM;AACzB,UAAIL,IAAJ,EAAU;AACR,YAAIC,eAAe,KAAK,IAAxB,EAA8B;AAC5B;AACAA,UAAAA,eAAe,GAAGK,UAAU,CAACJ,QAAD,EAAWF,IAAX,CAA5B;AACD;AACF,OALD,MAKO;AACLE,QAAAA,QAAQ;AACT;AACF,KATD;;AAWAV,IAAAA,MAAM,CAACe,gBAAP,CAAwB,QAAxB,EAAkCF,YAAlC;AAEA,WAAO,MAAMb,MAAM,CAACgB,mBAAP,CAA2B,QAA3B,EAAqCH,YAArC,CAAb;AACD,GAfc,EAeZN,IAfY,CAAf;AAgBD,CA5BM","sourcesContent":["// @ts-nocheck\nimport { useRef, useLayoutEffect } from 'react';\n\nconst isBrowser = typeof window !== `undefined`;\n\nconst getScrollPosition = ({ element, useWindow }) => {\n  if (!isBrowser) return { x: 0, y: 0 };\n\n  const target = element ? element.current : document.body;\n  const position = target.getBoundingClientRect();\n\n  return useWindow\n    ? { x: window.scrollX, y: window.scrollY }\n    : { x: position.left, y: position.top };\n};\n\nexport const useScrollPosition = (effect, deps, element, useWindow, wait) => {\n  const position = useRef(getScrollPosition({ useWindow }));\n\n  let throttleTimeout = null;\n\n  const callBack = () => {\n    const currPos = getScrollPosition({ element, useWindow });\n    effect({ prevPos: position.current, currPos });\n    position.current = currPos;\n    throttleTimeout = null;\n  };\n\n  useLayoutEffect(() => {\n    const handleScroll = () => {\n      if (wait) {\n        if (throttleTimeout === null) {\n          // eslint-disable-next-line\n          throttleTimeout = setTimeout(callBack, wait);\n        }\n      } else {\n        callBack();\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, deps);\n};\n"]},"metadata":{},"sourceType":"module"}