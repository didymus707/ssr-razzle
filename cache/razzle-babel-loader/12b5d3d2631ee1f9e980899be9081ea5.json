{"ast":null,"code":"var _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/tables/tables.ui.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Flex, Stack, useDisclosure, useToast } from '@chakra-ui/core';\nimport React from 'react';\nimport { useLoading } from '../../../hooks';\nimport { ConfirmModal, ContentWrapper, FullPageSpinner, ToastBox } from '../../components';\nimport { GroupModal, ListTable, TableNameEditable, TableSaving } from './components';\nimport { DEFAULTTABLE } from './tables.data';\nimport { getTableInfo } from './tables.utils';\nimport { TableLoading } from './components/table/table.components/TableLoading';\nexport function TablesComponent({\n  rows,\n  user,\n  match,\n  tables,\n  history,\n  addGroup,\n  removeRow,\n  editTable,\n  rowsTable,\n  fetchRows,\n  removeTable,\n  fetchGroups,\n  fetchGroupRows\n}) {\n  const LIMIT = 1000;\n  const {\n    id: table_id\n  } = match.params;\n  const [activeGroup, setActiveGroup] = React.useState();\n  const [currentData, setCurrentData] = React.useState(DEFAULTTABLE);\n  const [rowToDelete, setRowToDelete] = React.useState(null);\n  const [rowToView, setRowToView] = React.useState(null);\n  const isNextPageLoading = false;\n  const page = 1;\n  const toast = useToast();\n  const {\n    isOpen: showGroupModal,\n    onClose: closeGroupModal\n  } = useDisclosure();\n  const {\n    dispatch,\n    loading,\n    tableLoading,\n    globalLoading,\n    actionsLoading\n  } = useLoading();\n  React.useEffect(() => {\n    setActiveGroup(undefined);\n  }, [table_id]); // Effect to fetch table rows\n\n  React.useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      if (table_id) {\n        try {\n          dispatch({\n            type: 'TABLE_LOADING_STARTED'\n          });\n          await Promise.all([fetchRows({\n            id: table_id,\n            page,\n            limit: LIMIT\n          }), fetchGroups(table_id)]); // Ignore if we started fetching something else\n\n          if (!didCancel) {\n            dispatch({\n              type: 'TABLE_LOADING_RESOLVED'\n            });\n          }\n        } catch (error) {\n          dispatch({\n            type: 'TABLE_LOADING_RESOLVED'\n          });\n        }\n      }\n    };\n\n    fetchData();\n    return () => {\n      didCancel = true;\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Effect to set the rows and properties of the activeTable\n\n  React.useEffect(() => {\n    if (rowsTable && Object.keys(rowsTable).length) {\n      const currentDataPayload = getTableInfo({\n        rows,\n        table: rowsTable\n      }); //@ts-ignore\n\n      setCurrentData(currentDataPayload);\n    }\n  }, [rows, tables, rowsTable]);\n  /**\n   * Effect to run when user switches between groups\n   * and when user switches back to default table\n   */\n\n  React.useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      if (activeGroup) {\n        const {\n          id\n        } = activeGroup;\n        fetchGroupRows({\n          id\n        });\n\n        try {\n          dispatch({\n            type: 'TABLE_LOADING_STARTED'\n          });\n          await fetchGroupRows({\n            id\n          }); // Ignore if we started fetching something else\n\n          if (!didCancel) {\n            dispatch({\n              type: 'TABLE_LOADING_RESOLVED'\n            });\n          }\n        } catch (error) {\n          dispatch({\n            type: 'TABLE_LOADING_RESOLVED'\n          });\n        }\n      } else {\n        try {\n          dispatch({\n            type: 'TABLE_LOADING_STARTED'\n          });\n          await fetchRows({\n            id: table_id,\n            page: 1,\n            limit: LIMIT\n          }); // Ignore if we started fetching something else\n\n          if (!didCancel) {\n            dispatch({\n              type: 'TABLE_LOADING_RESOLVED'\n            });\n          }\n        } catch (error) {\n          dispatch({\n            type: 'TABLE_LOADING_RESOLVED'\n          });\n        }\n      }\n    };\n\n    fetchData();\n    return () => {\n      didCancel = true;\n    };\n  }, [dispatch, activeGroup, fetchRows, fetchGroupRows, table_id]);\n  /**\n   * Effect to run when user adds new property from row details modal\n   */\n\n  React.useEffect(() => {\n    if (!!rowToView) {\n      const row = currentData.data.find(item => item.id === rowToView.id);\n      const rowIndex = currentData.data.findIndex(item => item.id === rowToView.id);\n      setRowToView(_objectSpread(_objectSpread({}, row), {}, {\n        rowIndex\n      }));\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [currentData]);\n\n  async function handleDeleteTable({\n    id,\n    callback\n  }) {\n    try {\n      dispatch({\n        type: 'LOADING_STARTED'\n      });\n      await removeTable({\n        id,\n        user_id: user === null || user === void 0 ? void 0 : user.id\n      });\n      dispatch({\n        type: 'LOADING_RESOLVED'\n      });\n      callback && callback();\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: \"Table deleted\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 34\n          }\n        })\n      });\n      const remainingTables = tables.filter(table => table.id !== id);\n\n      if (remainingTables.length) {\n        const nextTable = remainingTables[0];\n        history.push(`/s/lists/view/${nextTable.id}`);\n      } else {\n        history.push(`/s/home`);\n      }\n    } catch (error) {\n      dispatch({\n        type: 'LOADING_RESOLVED'\n      });\n      toast({\n        position: 'bottom-left',\n        render: () => __jsx(ToastBox, {\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 23\n          }\n        })\n      });\n    }\n  }\n\n  async function handleEditTableName(name) {\n    const activeTable = tables.find(table => table.id === table_id);\n\n    const payload = _objectSpread(_objectSpread({}, activeTable), {}, {\n      name\n    });\n\n    setCurrentData(_objectSpread(_objectSpread({}, currentData), {}, {\n      name\n    }));\n\n    try {\n      dispatch({\n        type: 'GLOBAL_LOADING_STARTED'\n      });\n      await editTable(payload);\n      dispatch({\n        type: 'GLOBAL_LOADING_RESOLVED'\n      });\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: \"Table name updated\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 34\n          }\n        })\n      });\n    } catch (error) {\n      dispatch({\n        type: 'GLOBAL_LOADING_RESOLVED'\n      });\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  } // async function handleEditTable(\n  //   payload: Pick<TablePropertiesOptions, 'columns' | 'id' | 'userID'>,\n  // ) {\n  //   try {\n  //     dispatch({ type: 'GLOBAL_LOADING_STARTED' });\n  //     await editTable(payload);\n  //     dispatch({ type: 'GLOBAL_LOADING_RESOLVED' });\n  //   } catch (error) {\n  //     dispatch({ type: 'GLOBAL_LOADING_RESOLVED' });\n  //     toast({\n  //       position: 'bottom-left',\n  //       render: ({onClose}) => <ToastBox onClose={onClose} message={error} />,\n  //     });\n  //   }\n  // }\n\n\n  async function handleAddGroup({\n    name\n  }, callback) {\n    const row_id = rows.map(({\n      id\n    }) => id);\n\n    try {\n      dispatch({\n        type: 'LOADING_STARTED'\n      });\n      const {\n        group\n      } = await addGroup({\n        name,\n        row_id,\n        table_id\n      });\n      dispatch({\n        type: 'LOADING_RESOLVED'\n      });\n      callback();\n      setActiveGroup(group);\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: \"Group added\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 34\n          }\n        })\n      });\n    } catch (error) {\n      dispatch({\n        type: 'LOADING_RESOLVED'\n      });\n      toast({\n        position: 'bottom-left',\n        render: () => __jsx(ToastBox, {\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 23\n          }\n        })\n      });\n    }\n  }\n\n  async function handleDeleteRow() {\n    if (rowToDelete) {\n      try {\n        dispatch({\n          type: 'LOADING_STARTED'\n        });\n        await removeRow(rowToDelete);\n        dispatch({\n          type: 'LOADING_RESOLVED'\n        });\n        setRowToDelete(null);\n        toast({\n          position: 'bottom-left',\n          render: ({\n            onClose\n          }) => __jsx(ToastBox, {\n            onClose: onClose,\n            message: \"Row deleted\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 36\n            }\n          })\n        });\n      } catch (error) {\n        dispatch({\n          type: 'LOADING_RESOLVED'\n        });\n        toast({\n          position: 'bottom-left',\n          render: () => __jsx(ToastBox, {\n            message: error,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 25\n            }\n          })\n        });\n      }\n    }\n  }\n\n  return __jsx(ContentWrapper, {\n    overflowY: \"unset\",\n    style: {\n      overscrollBehaviorX: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 5\n    }\n  }, tableLoading === 'pending' ? __jsx(FullPageSpinner, {\n    height: \"100vh\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 9\n    }\n  }) : __jsx(React.Fragment, null, __jsx(Box, {\n    padding: \"1rem\",\n    paddingLeft: \"4.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 11\n    }\n  }, __jsx(Flex, {\n    marginBottom: \"1rem\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }\n  }, __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 17\n    }\n  }, __jsx(TableNameEditable, {\n    tables: tables,\n    onDelete: handleDeleteTable,\n    onChange: handleEditTableName,\n    isLoading: loading === 'pending',\n    sheet: {\n      id: currentData === null || currentData === void 0 ? void 0 : currentData.id,\n      name: currentData === null || currentData === void 0 ? void 0 : currentData.name,\n      type: currentData === null || currentData === void 0 ? void 0 : currentData.type\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 19\n    }\n  })), globalLoading === 'pending' && __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 19\n    }\n  }, __jsx(TableSaving, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 21\n    }\n  })), isNextPageLoading && __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 19\n    }\n  }, __jsx(TableLoading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 21\n    }\n  }))))), actionsLoading === 'pending' ? __jsx(FullPageSpinner, {\n    height: \"50vh\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 13\n    }\n  }) : __jsx(ListTable, {\n    _rows: rows,\n    _columns: currentData.properties,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 13\n    }\n  }), __jsx(GroupModal, {\n    title: \"Create group\",\n    isOpen: showGroupModal,\n    onSubmit: handleAddGroup,\n    onClose: closeGroupModal,\n    isLoading: loading === 'pending',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 11\n    }\n  }), __jsx(ConfirmModal, {\n    title: \"Delete row\",\n    isOpen: !!rowToDelete,\n    onConfirm: handleDeleteRow,\n    isLoading: loading === 'pending',\n    onClose: () => setRowToDelete(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 11\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/tables/tables.ui.tsx"],"names":["Box","Flex","Stack","useDisclosure","useToast","React","useLoading","ConfirmModal","ContentWrapper","FullPageSpinner","ToastBox","GroupModal","ListTable","TableNameEditable","TableSaving","DEFAULTTABLE","getTableInfo","TableLoading","TablesComponent","rows","user","match","tables","history","addGroup","removeRow","editTable","rowsTable","fetchRows","removeTable","fetchGroups","fetchGroupRows","LIMIT","id","table_id","params","activeGroup","setActiveGroup","useState","currentData","setCurrentData","rowToDelete","setRowToDelete","rowToView","setRowToView","isNextPageLoading","page","toast","isOpen","showGroupModal","onClose","closeGroupModal","dispatch","loading","tableLoading","globalLoading","actionsLoading","useEffect","undefined","didCancel","fetchData","type","Promise","all","limit","error","Object","keys","length","currentDataPayload","table","row","data","find","item","rowIndex","findIndex","handleDeleteTable","callback","user_id","position","render","remainingTables","filter","nextTable","push","handleEditTableName","name","activeTable","payload","handleAddGroup","row_id","map","group","handleDeleteRow","overscrollBehaviorX","properties"],"mappings":"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","sourcesContent":["import { Box, Flex, Stack, useDisclosure, useToast } from '@chakra-ui/core';\nimport React from 'react';\nimport { useLoading } from '../../../hooks';\nimport { ConfirmModal, ContentWrapper, FullPageSpinner, ToastBox } from '../../components';\nimport {\n  GroupFormValues,\n  GroupModal,\n  GroupSchema,\n  ListTable,\n  TableNameEditable,\n  TableSaving,\n} from './components';\nimport { DEFAULTTABLE } from './tables.data';\nimport { DataTableSchema, TableComponentProps, TablePropertiesOptions } from './tables.types';\nimport { getTableInfo } from './tables.utils';\nimport { TableLoading } from './components/table/table.components/TableLoading';\n\nexport function TablesComponent({\n  rows,\n  user,\n  match,\n  tables,\n  history,\n  addGroup,\n  removeRow,\n  editTable,\n  rowsTable,\n  fetchRows,\n  removeTable,\n  fetchGroups,\n  fetchGroupRows,\n}: TableComponentProps) {\n  const LIMIT = 1000;\n  const { id: table_id } = match.params;\n  const [activeGroup, setActiveGroup] = React.useState<GroupSchema | undefined>();\n  const [currentData, setCurrentData] = React.useState<DataTableSchema>(DEFAULTTABLE);\n  const [rowToDelete, setRowToDelete] = React.useState<string | null>(null);\n  const [rowToView, setRowToView] = React.useState<any | null>(null);\n  const isNextPageLoading = false;\n  const page = 1;\n\n  const toast = useToast();\n\n  const { isOpen: showGroupModal, onClose: closeGroupModal } = useDisclosure();\n\n  const { dispatch, loading, tableLoading, globalLoading, actionsLoading } = useLoading();\n\n  React.useEffect(() => {\n    setActiveGroup(undefined);\n  }, [table_id]);\n\n  // Effect to fetch table rows\n  React.useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      if (table_id) {\n        try {\n          dispatch({ type: 'TABLE_LOADING_STARTED' });\n          await Promise.all([\n            fetchRows({ id: table_id, page, limit: LIMIT }),\n            fetchGroups(table_id),\n          ]);\n          // Ignore if we started fetching something else\n          if (!didCancel) {\n            dispatch({ type: 'TABLE_LOADING_RESOLVED' });\n          }\n        } catch (error) {\n          dispatch({ type: 'TABLE_LOADING_RESOLVED' });\n        }\n      }\n    };\n    fetchData();\n    return () => {\n      didCancel = true;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Effect to set the rows and properties of the activeTable\n  React.useEffect(() => {\n    if (rowsTable && Object.keys(rowsTable).length) {\n      const currentDataPayload = getTableInfo({ rows, table: rowsTable });\n      //@ts-ignore\n      setCurrentData(currentDataPayload);\n    }\n  }, [rows, tables, rowsTable]);\n\n  /**\n   * Effect to run when user switches between groups\n   * and when user switches back to default table\n   */\n  React.useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      if (activeGroup) {\n        const { id } = activeGroup;\n        fetchGroupRows({ id });\n\n        try {\n          dispatch({ type: 'TABLE_LOADING_STARTED' });\n          await fetchGroupRows({ id });\n          // Ignore if we started fetching something else\n          if (!didCancel) {\n            dispatch({ type: 'TABLE_LOADING_RESOLVED' });\n          }\n        } catch (error) {\n          dispatch({ type: 'TABLE_LOADING_RESOLVED' });\n        }\n      } else {\n        try {\n          dispatch({ type: 'TABLE_LOADING_STARTED' });\n          await fetchRows({ id: table_id, page: 1, limit: LIMIT });\n          // Ignore if we started fetching something else\n          if (!didCancel) {\n            dispatch({ type: 'TABLE_LOADING_RESOLVED' });\n          }\n        } catch (error) {\n          dispatch({ type: 'TABLE_LOADING_RESOLVED' });\n        }\n      }\n    };\n    fetchData();\n    return () => {\n      didCancel = true;\n    };\n  }, [dispatch, activeGroup, fetchRows, fetchGroupRows, table_id]);\n\n  /**\n   * Effect to run when user adds new property from row details modal\n   */\n  React.useEffect(() => {\n    if (!!rowToView) {\n      const row = currentData.data.find(item => item.id === rowToView.id);\n      const rowIndex = currentData.data.findIndex(item => item.id === rowToView.id);\n      setRowToView({ ...row, rowIndex });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentData]);\n\n  async function handleDeleteTable({\n    id,\n    callback,\n  }: {\n    id: TablePropertiesOptions['id'];\n    callback: () => void;\n  }) {\n    try {\n      dispatch({ type: 'LOADING_STARTED' });\n      await removeTable({ id, user_id: user?.id });\n      dispatch({ type: 'LOADING_RESOLVED' });\n      callback && callback();\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message=\"Table deleted\" />,\n      });\n      const remainingTables = tables.filter(table => table.id !== id);\n      if (remainingTables.length) {\n        const nextTable = remainingTables[0];\n        history.push(`/s/lists/view/${nextTable.id}`);\n      } else {\n        history.push(`/s/home`);\n      }\n    } catch (error) {\n      dispatch({ type: 'LOADING_RESOLVED' });\n      toast({\n        position: 'bottom-left',\n        render: () => <ToastBox message={error} />,\n      });\n    }\n  }\n\n  async function handleEditTableName(name: TablePropertiesOptions['name']) {\n    const activeTable = tables.find(table => table.id === table_id);\n    const payload = { ...activeTable, name } as TablePropertiesOptions;\n    setCurrentData({ ...currentData, name });\n\n    try {\n      dispatch({ type: 'GLOBAL_LOADING_STARTED' });\n      await editTable(payload);\n      dispatch({ type: 'GLOBAL_LOADING_RESOLVED' });\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message=\"Table name updated\" />,\n      });\n    } catch (error) {\n      dispatch({ type: 'GLOBAL_LOADING_RESOLVED' });\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n  }\n\n  // async function handleEditTable(\n  //   payload: Pick<TablePropertiesOptions, 'columns' | 'id' | 'userID'>,\n  // ) {\n  //   try {\n  //     dispatch({ type: 'GLOBAL_LOADING_STARTED' });\n  //     await editTable(payload);\n  //     dispatch({ type: 'GLOBAL_LOADING_RESOLVED' });\n  //   } catch (error) {\n  //     dispatch({ type: 'GLOBAL_LOADING_RESOLVED' });\n  //     toast({\n  //       position: 'bottom-left',\n  //       render: ({onClose}) => <ToastBox onClose={onClose} message={error} />,\n  //     });\n  //   }\n  // }\n\n  async function handleAddGroup({ name }: GroupFormValues, callback: () => void) {\n    const row_id = rows.map(({ id }) => id);\n\n    try {\n      dispatch({ type: 'LOADING_STARTED' });\n      const { group } = await addGroup({\n        name,\n        row_id,\n        table_id,\n      });\n      dispatch({ type: 'LOADING_RESOLVED' });\n      callback();\n      setActiveGroup(group);\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message=\"Group added\" />,\n      });\n    } catch (error) {\n      dispatch({ type: 'LOADING_RESOLVED' });\n      toast({\n        position: 'bottom-left',\n        render: () => <ToastBox message={error} />,\n      });\n    }\n  }\n\n  async function handleDeleteRow() {\n    if (rowToDelete) {\n      try {\n        dispatch({ type: 'LOADING_STARTED' });\n        await removeRow(rowToDelete);\n        dispatch({ type: 'LOADING_RESOLVED' });\n        setRowToDelete(null);\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => <ToastBox onClose={onClose} message=\"Row deleted\" />,\n        });\n      } catch (error) {\n        dispatch({ type: 'LOADING_RESOLVED' });\n        toast({\n          position: 'bottom-left',\n          render: () => <ToastBox message={error} />,\n        });\n      }\n    }\n  }\n\n  return (\n    <ContentWrapper overflowY=\"unset\" style={{ overscrollBehaviorX: 'none' }}>\n      {tableLoading === 'pending' ? (\n        <FullPageSpinner height=\"100vh\" />\n      ) : (\n        <>\n          <Box padding=\"1rem\" paddingLeft=\"4.5rem\">\n            <Flex marginBottom=\"1rem\" alignItems=\"center\" justifyContent=\"space-between\">\n              <Stack isInline alignItems=\"center\">\n                <Box>\n                  <TableNameEditable\n                    tables={tables}\n                    onDelete={handleDeleteTable}\n                    onChange={handleEditTableName}\n                    isLoading={loading === 'pending'}\n                    sheet={{\n                      id: currentData?.id,\n                      name: currentData?.name,\n                      type: currentData?.type,\n                    }}\n                  />\n                </Box>\n                {globalLoading === 'pending' && (\n                  <Box>\n                    <TableSaving />\n                  </Box>\n                )}\n                {isNextPageLoading && (\n                  <Box>\n                    <TableLoading />\n                  </Box>\n                )}\n              </Stack>\n            </Flex>\n          </Box>\n          {actionsLoading === 'pending' ? (\n            <FullPageSpinner height=\"50vh\" />\n          ) : (\n            <ListTable _rows={rows} _columns={currentData.properties} />\n          )}\n          <GroupModal\n            title=\"Create group\"\n            isOpen={showGroupModal}\n            onSubmit={handleAddGroup}\n            onClose={closeGroupModal}\n            isLoading={loading === 'pending'}\n          />\n          <ConfirmModal\n            title=\"Delete row\"\n            isOpen={!!rowToDelete}\n            onConfirm={handleDeleteRow}\n            isLoading={loading === 'pending'}\n            onClose={() => setRowToDelete(null)}\n          />\n        </>\n      )}\n    </ContentWrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}