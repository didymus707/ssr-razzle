{"ast":null,"code":"import _objectWithoutProperties from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nconst _excluded = [\"thread_id\"],\n      _excluded2 = [\"files\"],\n      _excluded3 = [\"credential_id\"],\n      _excluded4 = [\"thread_id\"],\n      _excluded5 = [\"thread_id\"];\nimport { isNil, omitBy } from 'lodash';\nimport qs from 'qs';\nimport { client, buildConversationUrl, buildPaymentURL, formUrlQueryFromObject, toFormData } from '../../../utils';\n\nasync function getConversationThreads(params) {\n  return client('', {\n    url: buildConversationUrl(`threads`),\n    params,\n    paramsSerializer: params => {\n      return qs.stringify(params, {\n        arrayFormat: 'indices'\n      });\n    }\n  });\n}\n\nasync function getThreadByID(params) {\n  const {\n    thread_id\n  } = params;\n  const response = await client('', {\n    url: buildConversationUrl(`threads/${thread_id}`)\n  });\n  return response.data.thread;\n}\n\nfunction getUnreadThreadCount(params) {\n  const {\n    user_id\n  } = params;\n  return client('', {\n    url: buildConversationUrl(`messages/unread/count/${user_id}`)\n  });\n}\n\nfunction markConversationThreadAsRead(params) {\n  const {\n    thread_id,\n    event,\n    organisation_id,\n    userId\n  } = params;\n  return client('', {\n    url: buildConversationUrl(`messages/event/${organisation_id}`),\n    method: 'PATCH',\n    data: {\n      event,\n      thread_id,\n      user_id: userId\n    }\n  });\n}\n\nfunction updateMessageNotificationStatus(params) {\n  const {\n    notification_event,\n    notificationID\n  } = params;\n  return client('', {\n    url: buildConversationUrl(`messages/notification/${notificationID}`),\n    method: 'PATCH',\n    data: {\n      notification_event\n    }\n  });\n}\n\nfunction assignConversationThread(payload) {\n  const {\n    thread,\n    assignee_id\n  } = payload;\n  return client('', {\n    url: buildConversationUrl(`threads/assign/${thread.uuid}`),\n    data: {\n      assignee_id\n    },\n    method: 'PATCH'\n  });\n}\n\nfunction resolveConversationThread(thread) {\n  return client('', {\n    url: buildConversationUrl(`threads/resolve/${thread.uuid}`),\n    method: 'PATCH'\n  });\n}\n\nfunction tagConversationThread(params) {\n  const {\n    tag_ids,\n    thread_id\n  } = params;\n  return client('', {\n    url: buildConversationUrl(`threads/tag/${thread_id}`),\n    method: 'PATCH',\n    data: {\n      tag_ids\n    }\n  });\n}\n\nfunction unTagConversationThread(params) {\n  const {\n    tag_id,\n    thread_id\n  } = params;\n  return client('', {\n    url: buildConversationUrl(`threads/${thread_id}/tag/${tag_id}`),\n    method: 'DELETE'\n  });\n}\n\nasync function getConversationMessages(params) {\n  const {\n    thread_id\n  } = params,\n        rest = _objectWithoutProperties(params, _excluded);\n\n  const response = await client('', {\n    url: buildConversationUrl(`conversations/${thread_id}`),\n    params: rest\n  });\n  return response.data;\n}\n\nfunction getConversationAssignments(params) {\n  const {\n    thread_id\n  } = params;\n  return client('', {\n    url: buildConversationUrl(`assignments/${thread_id}`)\n  });\n}\n\nfunction sendInboxTemplates(params) {\n  const {\n    channel,\n    to,\n    template_id,\n    data,\n    from,\n    thread_id,\n    author_id\n  } = params;\n  return client('', {\n    url: buildConversationUrl(`templates/send/${thread_id}`),\n    method: 'POST',\n    data: {\n      channel,\n      to,\n      template_id,\n      data,\n      from,\n      author_id\n    }\n  });\n}\n\nfunction getInboxTemplates(params) {\n  const {\n    channel\n  } = params;\n  return client('', {\n    url: buildConversationUrl(`templates/${channel}`)\n  });\n}\n\nfunction addContactToConversation(params) {\n  const {\n    contact_id,\n    customer_id\n  } = params;\n  return client('', {\n    url: buildConversationUrl(`contacts/${contact_id}`),\n    method: 'POST',\n    data: {\n      customer_id\n    }\n  });\n}\n\nfunction createFormData(obj) {\n  const {\n    files\n  } = obj,\n        rest = _objectWithoutProperties(obj, _excluded2);\n\n  const formData = new FormData();\n  Object.keys(omitBy(rest, isNil)).forEach(item => formData.append(item, rest[item]));\n\n  if (files && files.length > 0) {\n    files.forEach(file => formData.append('files', file));\n  }\n\n  return formData;\n}\n\nconst startThread = params => {\n  const {\n    credential_id\n  } = params,\n        rest = _objectWithoutProperties(params, _excluded3);\n\n  const formData = createFormData(rest);\n  return client('', {\n    url: buildConversationUrl(`conversations/start/${credential_id}`),\n    data: formData,\n    method: 'POST'\n  });\n};\n\nconst sendMessage = params => {\n  const {\n    thread_id\n  } = params,\n        rest = _objectWithoutProperties(params, _excluded4);\n\n  const formData = createFormData(rest);\n  return client('', {\n    url: buildConversationUrl(`conversations/${thread_id}`),\n    data: formData,\n    method: 'POST'\n  });\n};\n\nconst sendPaymentRequest = payload => {\n  return client('', {\n    data: payload,\n    method: 'POST',\n    url: buildConversationUrl(`conversations/sendPaymentRequest`)\n  });\n};\n\nconst retryMessage = params => {\n  const {\n    message_id\n  } = params;\n  return client('', {\n    method: 'POST',\n    url: buildConversationUrl(`messages/retry/${message_id}`)\n  });\n};\n\nconst getMessageAttachments = params => {\n  return client('', {\n    url: buildConversationUrl(`messages/media/${params.message_id}`)\n  });\n};\n\nconst searchConversations = params => {\n  const {\n    q\n  } = params;\n  return client('', {\n    url: buildConversationUrl(`search?q=${q}`)\n  });\n};\n\nconst getContactTemplates = params => {\n  return client('conversations/templates');\n};\n\nconst getContactTable = () => {\n  return client('table/type/contact');\n};\n\nfunction generatePaymentLink(params) {\n  return client('', {\n    url: buildPaymentURL('/payment_request/'),\n    method: 'POST',\n    data: params\n  });\n}\n\nfunction updatePaymentLink(params) {\n  const {\n    conversation,\n    paymentLinkID\n  } = params;\n  return client('', {\n    url: buildPaymentURL(`/payment_request/${paymentLinkID}`),\n    method: 'PATCH',\n    data: {\n      conversation\n    }\n  });\n}\n\nfunction getUrlMetaData(params) {\n  const {\n    url\n  } = params;\n  return client('', {\n    url: buildConversationUrl('url-scraps'),\n    params: {\n      url\n    }\n  });\n}\n\nfunction sendNote(params) {\n  const {\n    content,\n    thread_id\n  } = params;\n  return client('', {\n    url: buildConversationUrl(`comments/${thread_id}`),\n    method: 'POST',\n    data: {\n      content\n    }\n  });\n}\n\nfunction getNotesByThreadID(params) {\n  const {\n    thread_id\n  } = params,\n        rest = _objectWithoutProperties(params, _excluded5);\n\n  return client('', {\n    url: buildConversationUrl(`comments/${thread_id}?${formUrlQueryFromObject(rest)}`)\n  });\n}\n\nconst getTags = async () => {\n  const {\n    data\n  } = await client('', {\n    url: buildConversationUrl(`tags`)\n  });\n  return data.tags;\n};\n\nconst getTag = id => {\n  return client('', {\n    url: buildConversationUrl(`tags/${id}`)\n  });\n};\n\nconst createTag = data => {\n  return client('', {\n    url: buildConversationUrl(`tags`),\n    method: 'POST',\n    data\n  });\n};\n\nconst editTag = ({\n  id,\n  data\n}) => {\n  return client('', {\n    url: buildConversationUrl(`tags/${id}`),\n    method: 'PATCH',\n    data\n  });\n};\n\nconst deleteTag = payload => {\n  return client('', {\n    url: buildConversationUrl(`tags/${payload.uuid}`),\n    method: 'DELETE'\n  });\n};\n\nconst favoriteThread = thread => {\n  return client('', {\n    method: 'POST',\n    url: buildConversationUrl(`threads/favorite/${thread.uuid}`)\n  });\n};\n\nconst unFavoriteThread = thread => {\n  return client('', {\n    method: 'DELETE',\n    url: buildConversationUrl(`threads/favorite/${thread.uuid}`)\n  });\n};\n\nconst tagConversation = async payload => {\n  const {\n    thread,\n    tag\n  } = payload;\n  const {\n    uuid\n  } = thread;\n  const tag_ids = [tag.uuid];\n  const response = await client('', {\n    method: 'POST',\n    data: {\n      tag_ids\n    },\n    url: buildConversationUrl(`threads/tag/${uuid}`)\n  });\n  return response.data;\n};\n\nconst unTagConversation = async payload => {\n  const {\n    thread,\n    tag\n  } = payload;\n  const {\n    uuid\n  } = thread;\n  const response = await client('', {\n    method: 'DELETE',\n    url: buildConversationUrl(`threads/${uuid}/tag/${tag.uuid}`)\n  });\n  return response.data;\n};\n\nconst getConversationNotes = async payload => {\n  const {\n    customer_id,\n    page\n  } = payload;\n  return await client('', {\n    params: {\n      page\n    },\n    url: buildConversationUrl(`notes/${customer_id}`)\n  });\n};\n\nconst addConversationNote = async payload => {\n  const {\n    note,\n    customer_id\n  } = payload;\n  const {\n    content\n  } = note;\n  const response = await client('', {\n    method: 'POST',\n    data: {\n      content\n    },\n    url: buildConversationUrl(`notes/${customer_id}`)\n  });\n  return response.data;\n};\n\nconst getQuickReplies = async params => {\n  const response = await client('', {\n    params,\n    url: buildConversationUrl(`quick_replies`)\n  });\n  return response.data;\n};\n\nconst getQuickReply = async id => {\n  const response = await client('', {\n    url: buildConversationUrl(`quick_replies/${id}`)\n  });\n  return response.data.quick_reply;\n};\n\nconst createQuickReply = async payload => {\n  const data = toFormData(payload);\n  const response = await client('', {\n    data,\n    method: 'POST',\n    url: buildConversationUrl(`quick_replies`)\n  });\n  return response.data.quick_reply;\n};\n\nconst updateQuickReply = async (id, payload) => {\n  const data = toFormData(payload);\n  const response = await client('', {\n    data,\n    method: 'PATCH',\n    url: buildConversationUrl(`quick_replies/${id}`)\n  });\n  return response.data;\n};\n\nconst deleteQuickReplies = async params => {\n  const response = await client('', {\n    params,\n    method: 'DELETE',\n    url: buildConversationUrl(`quick_replies`),\n    paramsSerializer: params => {\n      return qs.stringify(params, {\n        arrayFormat: 'indices'\n      });\n    }\n  });\n  return response.data;\n};\n\nconst getSignatures = async params => {\n  const response = await client('', {\n    params,\n    url: buildConversationUrl(`signatures`)\n  });\n  return response.data;\n};\n\nconst setSignatureAsDefault = async id => {\n  const response = await client('', {\n    url: buildConversationUrl(`signatures/useAsDefault/${id}`)\n  });\n  return response.data;\n};\n\nconst getSignature = async id => {\n  const response = await client('', {\n    url: buildConversationUrl(`signatures/${id}`)\n  });\n  return response.data.signature;\n};\n\nconst createSignature = async payload => {\n  const response = await client('', {\n    data: payload,\n    method: 'POST',\n    url: buildConversationUrl(`signatures`)\n  });\n  return response.data.signature;\n};\n\nconst updateSignature = async (id, payload) => {\n  const response = await client('', {\n    data: payload,\n    method: 'PATCH',\n    url: buildConversationUrl(`signatures/${id}`)\n  });\n  return response.data.signature;\n};\n\nconst deleteSignatures = async params => {\n  const response = await client('', {\n    params,\n    method: 'DELETE',\n    url: buildConversationUrl(`signatures`),\n    paramsSerializer: params => {\n      return qs.stringify(params, {\n        arrayFormat: 'indices'\n      });\n    }\n  });\n  return response.data;\n};\n\nconst getThreadFiltersUnreadCount = async () => {\n  const response = await client('', {\n    url: buildConversationUrl(`threads/filter/count`)\n  });\n  return response.data.count;\n};\n\nconst addProfileToContact = async payload => {\n  const {\n    contactID,\n    customer_id\n  } = payload;\n  const response = await client('', {\n    method: 'POST',\n    data: {\n      customer_id\n    },\n    url: buildConversationUrl(`profiles/${contactID}`)\n  });\n  return response.data;\n};\n\nconst removeProfileFromContact = async payload => {\n  const {\n    customerID\n  } = payload;\n  return await client('', {\n    method: 'DELETE',\n    url: buildConversationUrl(`profiles/customer/${customerID}`)\n  });\n};\n\nconst getInboxConnections = async () => {\n  const response = await client('inbox/connections/all');\n  return response.data.inbox_connections;\n};\n\nconst createInboxConnection = async data => {\n  return await client('inbox/connections/create', {\n    data,\n    method: 'POST'\n  });\n};\n\nconst deleteInboxConnection = async id => {\n  return await client('inbox/connections/delete', {\n    data: {\n      id\n    },\n    method: 'DELETE'\n  });\n};\n\nfunction updateConversationNotificationStatus({\n  message_id,\n  event = 'read'\n}) {\n  return client('', {\n    url: buildConversationUrl(`conversations/notification/${message_id}`),\n    method: 'PATCH',\n    data: {\n      event\n    }\n  });\n}\n\nexport { sendNote, getThreadByID, getConversationThreads, assignConversationThread, resolveConversationThread, getConversationMessages, getConversationAssignments, getInboxTemplates, sendInboxTemplates, sendMessage, retryMessage, startThread, getMessageAttachments, searchConversations, markConversationThreadAsRead, updateMessageNotificationStatus, getContactTemplates, getContactTable, getUnreadThreadCount, addContactToConversation, generatePaymentLink, updatePaymentLink, getUrlMetaData, getNotesByThreadID, getTag, getTags, createTag, deleteTag, editTag, favoriteThread, unFavoriteThread, tagConversationThread, unTagConversationThread, tagConversation, unTagConversation, addConversationNote, getConversationNotes, getQuickReplies, getQuickReply, createQuickReply, updateQuickReply, deleteQuickReplies, getSignatures, getSignature, createSignature, updateSignature, deleteSignatures, setSignatureAsDefault, sendPaymentRequest, getThreadFiltersUnreadCount, addProfileToContact, removeProfileFromContact, getInboxConnections, createInboxConnection, deleteInboxConnection, updateConversationNotificationStatus };","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/inbox.service.ts"],"names":["isNil","omitBy","qs","client","buildConversationUrl","buildPaymentURL","formUrlQueryFromObject","toFormData","getConversationThreads","params","url","paramsSerializer","stringify","arrayFormat","getThreadByID","thread_id","response","data","thread","getUnreadThreadCount","user_id","markConversationThreadAsRead","event","organisation_id","userId","method","updateMessageNotificationStatus","notification_event","notificationID","assignConversationThread","payload","assignee_id","uuid","resolveConversationThread","tagConversationThread","tag_ids","unTagConversationThread","tag_id","getConversationMessages","rest","getConversationAssignments","sendInboxTemplates","channel","to","template_id","from","author_id","getInboxTemplates","addContactToConversation","contact_id","customer_id","createFormData","obj","files","formData","FormData","Object","keys","forEach","item","append","length","file","startThread","credential_id","sendMessage","sendPaymentRequest","retryMessage","message_id","getMessageAttachments","searchConversations","q","getContactTemplates","getContactTable","generatePaymentLink","updatePaymentLink","conversation","paymentLinkID","getUrlMetaData","sendNote","content","getNotesByThreadID","getTags","tags","getTag","id","createTag","editTag","deleteTag","favoriteThread","unFavoriteThread","tagConversation","tag","unTagConversation","getConversationNotes","page","addConversationNote","note","getQuickReplies","getQuickReply","quick_reply","createQuickReply","updateQuickReply","deleteQuickReplies","getSignatures","setSignatureAsDefault","getSignature","signature","createSignature","updateSignature","deleteSignatures","getThreadFiltersUnreadCount","count","addProfileToContact","contactID","removeProfileFromContact","customerID","getInboxConnections","inbox_connections","createInboxConnection","deleteInboxConnection","updateConversationNotificationStatus"],"mappings":"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","sourcesContent":["import { AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { isNil, omitBy } from 'lodash';\nimport qs from 'qs';\nimport {\n  client,\n  buildConversationUrl,\n  buildPaymentURL,\n  formUrlQueryFromObject,\n  toFormData,\n} from '../../../utils';\nimport {\n  InboxConnection,\n  InboxTag,\n  NoteSchema,\n  QuickReplySchema,\n  SignatureSchema,\n  ThreadSchema,\n} from './inbox.types';\n\nasync function getConversationThreads(\n  params?: AxiosRequestConfig['params'],\n): Promise<AxiosResponse<any>> {\n  return client('', {\n    url: buildConversationUrl(`threads`),\n    params,\n    paramsSerializer: params => {\n      return qs.stringify(params, { arrayFormat: 'indices' });\n    },\n  });\n}\n\nasync function getThreadByID(params?: AxiosRequestConfig['params']): Promise<ThreadSchema> {\n  const { thread_id } = params;\n\n  const response = await client('', { url: buildConversationUrl(`threads/${thread_id}`) });\n  return response.data.thread;\n}\n\nfunction getUnreadThreadCount(params?: AxiosRequestConfig['params']) {\n  const { user_id } = params;\n  return client('', { url: buildConversationUrl(`messages/unread/count/${user_id}`) });\n}\n\nfunction markConversationThreadAsRead(params?: AxiosRequestConfig['params']) {\n  const { thread_id, event, organisation_id, userId } = params;\n\n  return client('', {\n    url: buildConversationUrl(`messages/event/${organisation_id}`),\n    method: 'PATCH',\n    data: { event, thread_id, user_id: userId },\n  });\n}\n\nfunction updateMessageNotificationStatus(params?: AxiosRequestConfig['params']) {\n  const { notification_event, notificationID } = params;\n\n  return client('', {\n    url: buildConversationUrl(`messages/notification/${notificationID}`),\n    method: 'PATCH',\n    data: { notification_event },\n  });\n}\n\nfunction assignConversationThread(payload: { thread: ThreadSchema; assignee_id: string }) {\n  const { thread, assignee_id } = payload;\n\n  return client('', {\n    url: buildConversationUrl(`threads/assign/${thread.uuid}`),\n    data: { assignee_id },\n    method: 'PATCH',\n  });\n}\n\nfunction resolveConversationThread(thread: ThreadSchema) {\n  return client('', {\n    url: buildConversationUrl(`threads/resolve/${thread.uuid}`),\n    method: 'PATCH',\n  });\n}\n\nfunction tagConversationThread(params?: AxiosRequestConfig['params']) {\n  const { tag_ids, thread_id } = params;\n  return client('', {\n    url: buildConversationUrl(`threads/tag/${thread_id}`),\n    method: 'PATCH',\n    data: { tag_ids },\n  });\n}\n\nfunction unTagConversationThread(params?: AxiosRequestConfig['params']) {\n  const { tag_id, thread_id } = params;\n  return client('', {\n    url: buildConversationUrl(`threads/${thread_id}/tag/${tag_id}`),\n    method: 'DELETE',\n  });\n}\n\nasync function getConversationMessages(params?: AxiosRequestConfig['params']) {\n  const { thread_id, ...rest } = params;\n\n  const response = await client('', {\n    url: buildConversationUrl(`conversations/${thread_id}`),\n    params: rest,\n  });\n  return response.data;\n}\n\nfunction getConversationAssignments(params?: AxiosRequestConfig['params']) {\n  const { thread_id } = params;\n\n  return client('', {\n    url: buildConversationUrl(`assignments/${thread_id}`),\n  });\n}\n\nfunction sendInboxTemplates(params?: AxiosRequestConfig['params']) {\n  const { channel, to, template_id, data, from, thread_id, author_id } = params;\n\n  return client('', {\n    url: buildConversationUrl(`templates/send/${thread_id}`),\n    method: 'POST',\n    data: {\n      channel,\n      to,\n      template_id,\n      data,\n      from,\n      author_id,\n    },\n  });\n}\n\nfunction getInboxTemplates(params?: AxiosRequestConfig['params']) {\n  const { channel } = params;\n\n  return client('', {\n    url: buildConversationUrl(`templates/${channel}`),\n  });\n}\n\nfunction addContactToConversation(params?: AxiosRequestConfig['params']) {\n  const { contact_id, customer_id } = params;\n\n  return client('', {\n    url: buildConversationUrl(`contacts/${contact_id}`),\n    method: 'POST',\n    data: { customer_id },\n  });\n}\n\nfunction createFormData(obj: any) {\n  const { files, ...rest } = obj;\n  const formData = new FormData();\n  Object.keys(omitBy(rest, isNil)).forEach(item => formData.append(item, rest[item]));\n\n  if (files && files.length > 0) {\n    files.forEach((file: any) => formData.append('files', file));\n  }\n\n  return formData;\n}\n\nconst startThread = (params?: any) => {\n  const { credential_id, ...rest } = params;\n  const formData = createFormData(rest);\n\n  return client('', {\n    url: buildConversationUrl(`conversations/start/${credential_id}`),\n    data: formData,\n    method: 'POST',\n  });\n};\n\nconst sendMessage = (params?: AxiosRequestConfig['params']) => {\n  const { thread_id, ...rest } = params;\n  const formData = createFormData(rest);\n\n  return client('', {\n    url: buildConversationUrl(`conversations/${thread_id}`),\n    data: formData,\n    method: 'POST',\n  });\n};\n\nconst sendPaymentRequest = (payload?: AxiosRequestConfig['params']) => {\n  return client('', {\n    data: payload,\n    method: 'POST',\n    url: buildConversationUrl(`conversations/sendPaymentRequest`),\n  });\n};\n\nconst retryMessage = (params?: AxiosRequestConfig['params']) => {\n  const { message_id } = params;\n\n  return client('', {\n    method: 'POST',\n    url: buildConversationUrl(`messages/retry/${message_id}`),\n  });\n};\n\nconst getMessageAttachments = (params?: AxiosRequestConfig['params']) => {\n  return client('', {\n    url: buildConversationUrl(`messages/media/${params.message_id}`),\n  });\n};\n\nconst searchConversations = (params?: AxiosRequestConfig['params']) => {\n  const { q } = params;\n\n  return client('', {\n    url: buildConversationUrl(`search?q=${q}`),\n  });\n};\n\nconst getContactTemplates = (params?: AxiosRequestConfig['params']) => {\n  return client('conversations/templates');\n};\n\nconst getContactTable = () => {\n  return client('table/type/contact');\n};\n\nfunction generatePaymentLink(params?: AxiosRequestConfig['params']) {\n  return client('', {\n    url: buildPaymentURL('/payment_request/'),\n    method: 'POST',\n    data: params,\n  });\n}\n\nfunction updatePaymentLink(params?: AxiosRequestConfig['params']) {\n  const { conversation, paymentLinkID } = params;\n  return client('', {\n    url: buildPaymentURL(`/payment_request/${paymentLinkID}`),\n    method: 'PATCH',\n    data: { conversation },\n  });\n}\n\nfunction getUrlMetaData(params?: AxiosRequestConfig['params']) {\n  const { url } = params;\n\n  return client('', { url: buildConversationUrl('url-scraps'), params: { url } });\n}\n\nfunction sendNote(params?: AxiosRequestConfig['params']) {\n  const { content, thread_id } = params;\n\n  return client('', {\n    url: buildConversationUrl(`comments/${thread_id}`),\n    method: 'POST',\n    data: { content },\n  });\n}\n\nfunction getNotesByThreadID(params: AxiosRequestConfig['params']) {\n  const { thread_id, ...rest } = params;\n\n  return client('', {\n    url: buildConversationUrl(`comments/${thread_id}?${formUrlQueryFromObject(rest)}`),\n  });\n}\n\nconst getTags = async () => {\n  const { data } = await client('', {\n    url: buildConversationUrl(`tags`),\n  });\n  return data.tags;\n};\n\nconst getTag = (id: string) => {\n  return client('', {\n    url: buildConversationUrl(`tags/${id}`),\n  });\n};\n\nconst createTag = (data: Partial<InboxTag>) => {\n  return client('', {\n    url: buildConversationUrl(`tags`),\n    method: 'POST',\n    data,\n  });\n};\n\nconst editTag = ({ id, data }: { id: string; data: InboxTag }) => {\n  return client('', {\n    url: buildConversationUrl(`tags/${id}`),\n    method: 'PATCH',\n    data,\n  });\n};\n\nconst deleteTag = (payload: Partial<InboxTag>) => {\n  return client('', {\n    url: buildConversationUrl(`tags/${payload.uuid}`),\n    method: 'DELETE',\n  });\n};\n\nconst favoriteThread = (thread: any) => {\n  return client('', {\n    method: 'POST',\n    url: buildConversationUrl(`threads/favorite/${thread.uuid}`),\n  });\n};\n\nconst unFavoriteThread = (thread: any) => {\n  return client('', {\n    method: 'DELETE',\n    url: buildConversationUrl(`threads/favorite/${thread.uuid}`),\n  });\n};\n\nconst tagConversation = async (payload: { thread: ThreadSchema; tag: InboxTag }) => {\n  const { thread, tag } = payload;\n  const { uuid } = thread;\n  const tag_ids = [tag.uuid];\n  const response = await client('', {\n    method: 'POST',\n    data: { tag_ids },\n    url: buildConversationUrl(`threads/tag/${uuid}`),\n  });\n  return response.data;\n};\n\nconst unTagConversation = async (payload: { thread: ThreadSchema; tag: InboxTag }) => {\n  const { thread, tag } = payload;\n  const { uuid } = thread;\n  const response = await client('', {\n    method: 'DELETE',\n    url: buildConversationUrl(`threads/${uuid}/tag/${tag.uuid}`),\n  });\n  return response.data;\n};\n\nconst getConversationNotes = async (payload: { customer_id: string; page: number }) => {\n  const { customer_id, page } = payload;\n  return await client('', {\n    params: { page },\n    url: buildConversationUrl(`notes/${customer_id}`),\n  });\n};\n\nconst addConversationNote = async (payload: { note: Partial<NoteSchema>; customer_id: string }) => {\n  const { note, customer_id } = payload;\n  const { content } = note;\n  const response = await client('', {\n    method: 'POST',\n    data: { content },\n    url: buildConversationUrl(`notes/${customer_id}`),\n  });\n  return response.data;\n};\n\nconst getQuickReplies = async (params?: AxiosRequestConfig['params']) => {\n  const response = await client('', {\n    params,\n    url: buildConversationUrl(`quick_replies`),\n  });\n  return response.data;\n};\n\nconst getQuickReply = async (id: QuickReplySchema['uuid']) => {\n  const response = await client('', {\n    url: buildConversationUrl(`quick_replies/${id}`),\n  });\n  return response.data.quick_reply;\n};\n\nconst createQuickReply = async (payload: { name: string; subject?: string; content: string }) => {\n  const data = toFormData(payload);\n  const response = await client('', {\n    data,\n    method: 'POST',\n    url: buildConversationUrl(`quick_replies`),\n  });\n  return response.data.quick_reply;\n};\n\nconst updateQuickReply = async (\n  id: QuickReplySchema['uuid'],\n  payload: { name: string; subject?: string; content: string },\n) => {\n  const data = toFormData(payload);\n  const response = await client('', {\n    data,\n    method: 'PATCH',\n    url: buildConversationUrl(`quick_replies/${id}`),\n  });\n  return response.data;\n};\n\nconst deleteQuickReplies = async (params: { ids: QuickReplySchema['uuid'][] }) => {\n  const response = await client('', {\n    params,\n    method: 'DELETE',\n    url: buildConversationUrl(`quick_replies`),\n    paramsSerializer: params => {\n      return qs.stringify(params, { arrayFormat: 'indices' });\n    },\n  });\n  return response.data;\n};\n\nconst getSignatures = async (params: AxiosRequestConfig['params']) => {\n  const response = await client('', {\n    params,\n    url: buildConversationUrl(`signatures`),\n  });\n  return response.data;\n};\n\nconst setSignatureAsDefault = async (id: SignatureSchema['uuid']) => {\n  const response = await client('', {\n    url: buildConversationUrl(`signatures/useAsDefault/${id}`),\n  });\n  return response.data;\n};\n\nconst getSignature = async (id: SignatureSchema['uuid']) => {\n  const response = await client('', {\n    url: buildConversationUrl(`signatures/${id}`),\n  });\n  return response.data.signature;\n};\n\nconst createSignature = async (payload: { content: string }) => {\n  const response = await client('', {\n    data: payload,\n    method: 'POST',\n    url: buildConversationUrl(`signatures`),\n  });\n  return response.data.signature;\n};\n\nconst updateSignature = async (id: SignatureSchema['uuid'], payload: { content: string }) => {\n  const response = await client('', {\n    data: payload,\n    method: 'PATCH',\n    url: buildConversationUrl(`signatures/${id}`),\n  });\n  return response.data.signature;\n};\n\nconst deleteSignatures = async (params: { ids: SignatureSchema['uuid'][] }) => {\n  const response = await client('', {\n    params,\n    method: 'DELETE',\n    url: buildConversationUrl(`signatures`),\n    paramsSerializer: params => {\n      return qs.stringify(params, { arrayFormat: 'indices' });\n    },\n  });\n  return response.data;\n};\n\nconst getThreadFiltersUnreadCount = async () => {\n  const response = await client('', {\n    url: buildConversationUrl(`threads/filter/count`),\n  });\n  return response.data.count;\n};\n\nconst addProfileToContact = async (payload: { contactID: string; customer_id: string }) => {\n  const { contactID, customer_id } = payload;\n  const response = await client('', {\n    method: 'POST',\n    data: { customer_id },\n    url: buildConversationUrl(`profiles/${contactID}`),\n  });\n  return response.data;\n};\n\nconst removeProfileFromContact = async (payload: { customerID: string }) => {\n  const { customerID } = payload;\n  return await client('', {\n    method: 'DELETE',\n    url: buildConversationUrl(`profiles/customer/${customerID}`),\n  });\n};\n\nconst getInboxConnections = async () => {\n  const response = await client('inbox/connections/all');\n  return response.data.inbox_connections;\n};\n\nconst createInboxConnection = async (\n  data: {\n    table_id?: string | null;\n    segment_id?: string | null;\n  } & InboxConnection['variables'],\n) => {\n  return await client('inbox/connections/create', {\n    data,\n    method: 'POST',\n  });\n};\n\nconst deleteInboxConnection = async (id: InboxConnection['id']) => {\n  return await client('inbox/connections/delete', {\n    data: { id },\n    method: 'DELETE',\n  });\n};\n\nfunction updateConversationNotificationStatus({\n  message_id,\n  event = 'read',\n}: {\n  message_id: string;\n  event?: string;\n}) {\n  return client('', {\n    url: buildConversationUrl(`conversations/notification/${message_id}`),\n    method: 'PATCH',\n    data: { event },\n  });\n}\n\nexport {\n  sendNote,\n  getThreadByID,\n  getConversationThreads,\n  assignConversationThread,\n  resolveConversationThread,\n  getConversationMessages,\n  getConversationAssignments,\n  getInboxTemplates,\n  sendInboxTemplates,\n  sendMessage,\n  retryMessage,\n  startThread,\n  getMessageAttachments,\n  searchConversations,\n  markConversationThreadAsRead,\n  updateMessageNotificationStatus,\n  getContactTemplates,\n  getContactTable,\n  getUnreadThreadCount,\n  addContactToConversation,\n  generatePaymentLink,\n  updatePaymentLink,\n  getUrlMetaData,\n  getNotesByThreadID,\n  getTag,\n  getTags,\n  createTag,\n  deleteTag,\n  editTag,\n  favoriteThread,\n  unFavoriteThread,\n  tagConversationThread,\n  unTagConversationThread,\n  tagConversation,\n  unTagConversation,\n  addConversationNote,\n  getConversationNotes,\n  getQuickReplies,\n  getQuickReply,\n  createQuickReply,\n  updateQuickReply,\n  deleteQuickReplies,\n  getSignatures,\n  getSignature,\n  createSignature,\n  updateSignature,\n  deleteSignatures,\n  setSignatureAsDefault,\n  sendPaymentRequest,\n  getThreadFiltersUnreadCount,\n  addProfileToContact,\n  removeProfileFromContact,\n  getInboxConnections,\n  createInboxConnection,\n  deleteInboxConnection,\n  updateConversationNotificationStatus,\n};\n"]},"metadata":{},"sourceType":"module"}