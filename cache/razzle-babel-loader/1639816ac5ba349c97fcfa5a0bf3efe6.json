{"ast":null,"code":"import _objectSpread from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { useState, useEffect } from 'react';\nimport { client, buildConversationUrl, loadState, saveState } from '../../../utils';\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n\nexport default function usePushNotifications(userId, email, organizationID) {\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const isPushNotificationSupported = 'serviceWorker' in navigator && 'PushManager' in window;\n  const {\n    0: pushNotificationStatus,\n    1: setPushNotificationStatus\n  } = useState(Notification.permission);\n  const {\n    0: isSwSetUp,\n    1: setIsSwSetUp\n  } = useState(false);\n  const {\n    0: isSubcriptionReady,\n    1: setIsSubcriptionReady\n  } = useState(false);\n\n  function askPushNotificationPermission() {\n    return new Promise((resolve, reject) => {\n      const permissionResult = Notification.requestPermission(function (result) {\n        resolve(result);\n      });\n\n      if (permissionResult) {\n        permissionResult.then(resolve, reject);\n      }\n    }).then(permissionResult => {\n      if (permissionResult !== 'granted' && error !== 'Okay! But you will not receive notification for new messages') {\n        return setError('Okay! But you will not receive notification for new messages');\n      }\n\n      setPushNotificationStatus(permissionResult);\n    });\n  }\n\n  useEffect(() => {\n    if (isPushNotificationSupported && organizationID && !isSwSetUp) {\n      navigator.serviceWorker.register('/sw.js').then(a => {\n        setIsSwSetUp(true);\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [isPushNotificationSupported, organizationID]);\n  useEffect(() => {\n    const getExistingSubscription = async () => {\n      if (organizationID && isSwSetUp && pushNotificationStatus === 'granted' && !isSubcriptionReady) {\n        try {\n          var _navigator$serviceWor;\n\n          const serviceWorker = await ((_navigator$serviceWor = navigator.serviceWorker) === null || _navigator$serviceWor === void 0 ? void 0 : _navigator$serviceWor.ready);\n\n          if (serviceWorker !== null && serviceWorker !== void 0 && serviceWorker.active) {\n            let subscription = await serviceWorker.pushManager.getSubscription();\n\n            if (!subscription) {\n              subscription = await serviceWorker.pushManager.subscribe({\n                userVisibleOnly: true,\n                applicationServerKey: urlBase64ToUint8Array(process.env.REACT_APP_WEB_PUSH_VAPID_PUBLIC_KEY || '')\n              });\n            }\n\n            const result = await client('', {\n              url: buildConversationUrl(`push-notifications/${organizationID}`),\n              method: 'POST',\n              data: {\n                subscription,\n                user_id: userId\n              }\n            });\n            saveState(_objectSpread(_objectSpread({}, loadState()), {}, {\n              SWID: result.data.id\n            }));\n            setIsSubcriptionReady(true);\n          }\n        } catch (error) {\n          console.error('######### - ', error);\n          setIsSubcriptionReady(false);\n          setError(error.message);\n        }\n      }\n    };\n\n    getExistingSubscription(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  });\n  return {\n    error,\n    isPushNotificationSupported,\n    pushNotificationStatus,\n    askPushNotificationPermission\n  };\n}","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/components/PushNotificationPrompter/useNotification.ts"],"names":["useState","useEffect","client","buildConversationUrl","loadState","saveState","urlBase64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","usePushNotifications","userId","email","organizationID","error","setError","isPushNotificationSupported","navigator","pushNotificationStatus","setPushNotificationStatus","Notification","permission","isSwSetUp","setIsSwSetUp","isSubcriptionReady","setIsSubcriptionReady","askPushNotificationPermission","Promise","resolve","reject","permissionResult","requestPermission","result","then","serviceWorker","register","a","getExistingSubscription","ready","active","subscription","pushManager","getSubscription","subscribe","userVisibleOnly","applicationServerKey","process","env","REACT_APP_WEB_PUSH_VAPID_PUBLIC_KEY","url","method","data","user_id","SWID","id","console","message"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { client, buildConversationUrl, loadState, saveState } from '../../../utils'\n\nfunction urlBase64ToUint8Array (base64String: string) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4)\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/')\n\n  const rawData = window.atob(base64)\n  const outputArray = new Uint8Array(rawData.length)\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i)\n  }\n  return outputArray\n}\n\nexport default function usePushNotifications (\n  userId: string,\n  email: string,\n  organizationID: string\n) {\n  const [error, setError] = useState<string | null>(null)\n  const isPushNotificationSupported = 'serviceWorker' in navigator && 'PushManager' in window\n  const [pushNotificationStatus, setPushNotificationStatus] = useState(Notification.permission)\n  const [isSwSetUp, setIsSwSetUp] = useState(false)\n  const [isSubcriptionReady, setIsSubcriptionReady] = useState(false)\n\n  function askPushNotificationPermission () {\n    return new Promise((resolve, reject) => {\n      const permissionResult = Notification.requestPermission(function (result) {\n        resolve(result)\n      })\n\n      if (permissionResult) {\n        permissionResult.then(resolve, reject)\n      }\n    }).then(permissionResult => {\n      if (permissionResult !== 'granted' && error !== 'Okay! But you will not receive notification for new messages') {\n        return setError('Okay! But you will not receive notification for new messages');\n      }\n\n      setPushNotificationStatus((permissionResult as any));\n    })\n  }\n\n  useEffect(() => {\n    if (isPushNotificationSupported && organizationID && !isSwSetUp) {\n      navigator.serviceWorker.register('/sw.js').then(a => {\n        setIsSwSetUp(true)\n      })\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isPushNotificationSupported, organizationID])\n\n  useEffect(() => {\n    const getExistingSubscription = async () => {\n      if (\n        organizationID &&\n        isSwSetUp &&\n        pushNotificationStatus === 'granted' &&\n        !isSubcriptionReady\n      ) {\n        try {\n          const serviceWorker = await navigator.serviceWorker?.ready\n          if (serviceWorker?.active) {\n            let subscription = await serviceWorker.pushManager.getSubscription()\n\n            if (!subscription) {\n              subscription = await serviceWorker.pushManager.subscribe({\n                userVisibleOnly: true,\n                applicationServerKey: urlBase64ToUint8Array(\n                  process.env.REACT_APP_WEB_PUSH_VAPID_PUBLIC_KEY || ''\n                ),\n              })\n            }\n\n            const result = await client('', {\n              url: buildConversationUrl(`push-notifications/${organizationID}`),\n              method: 'POST',\n              data: {\n                subscription,\n                user_id: userId,\n              },\n            })\n\n            saveState({ ...loadState(), SWID: result.data.id })\n            setIsSubcriptionReady(true)\n          }\n        } catch (error) {\n          console.error('######### - ', error)\n          setIsSubcriptionReady(false)\n          setError(error.message)\n        }\n      }\n    }\n\n    getExistingSubscription()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  })\n\n  return {\n    error,\n    isPushNotificationSupported,\n    pushNotificationStatus,\n    askPushNotificationPermission,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}