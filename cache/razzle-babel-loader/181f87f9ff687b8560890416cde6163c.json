{"ast":null,"code":"import _objectSpread from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/integrations/components/Phone.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Box, Text, useDisclosure, Modal, ModalOverlay, ModalContent, ModalCloseButton, ModalBody, TabList, Tabs, Tab, TabPanels, TabPanel, Flex, Input, Stack, useToast, PseudoBox, CheckboxGroup, Checkbox, Spinner, Skeleton, Icon } from '@chakra-ui/core';\nimport { isEmpty } from 'lodash';\nimport { Dropdown } from './Dropdown';\nimport { ToastBox, Button } from 'app/components';\nimport { joinStrings } from '../integrations.utis';\nimport { getFlagEmoji } from '../../inbox/inbox.utils';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getPotentialAccts, getSupportedCountries, selectSupportedCountries } from '../../channels';\nimport { useHistory } from 'react-router-dom';\nexport function Phone() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const toast = useToast();\n  const supportedCountries = useSelector(selectSupportedCountries);\n  const {\n    isOpen: isModalOpen,\n    onClose: onModalClose,\n    onOpen: onModalOpen\n  } = useDisclosure();\n  const countries = supportedCountries.map(({\n    country: label,\n    country_code: value\n  }) => ({\n    value,\n    label\n  }));\n  const {\n    0: selectedCountry,\n    1: setSelectedCountry\n  } = useState(supportedCountries[0]);\n  const {\n    0: tabIndex,\n    1: setTabIndex\n  } = useState(0);\n  const {\n    0: modalQueries,\n    1: setModalQueries\n  } = useState({\n    pattern: '',\n    tab: '',\n    types: []\n  });\n  const {\n    0: randomPhoneLoader,\n    1: setRandomPhoneLoader\n  } = useState(false);\n  const {\n    0: pageLoader,\n    1: setPageLoader\n  } = useState(true);\n  const {\n    0: phoneListLoader,\n    1: setPhoneListLoader\n  } = useState(false);\n  const {\n    0: randomPhone,\n    1: setRandomPhone\n  } = useState();\n  const {\n    0: searchedPhones,\n    1: setSearchedPhones\n  } = useState([]);\n  const {\n    0: phoneTypes,\n    1: setPhoneTypes\n  } = useState([]);\n  const isCaOrUs = ['US', 'CA'].includes(selectedCountry === null || selectedCountry === void 0 ? void 0 : selectedCountry.country_code);\n  const {\n    friendly_name,\n    capabilities: randomPhoneCapabilities,\n    type: randomPhoneType\n  } = randomPhone || {\n    friendly_name: '',\n    capabilities: [],\n    type: ''\n  };\n\n  const continueToNext = () => {\n    history.push('/s/integrations/use-case/phone', randomPhone);\n  };\n\n  const searchForPhones = async query => {\n    const tabKeys = ['type', 'inRegion', 'areaCode'];\n    const {\n      tab,\n      pattern: contains,\n      types\n    } = query;\n    const {\n      country_code,\n      country\n    } = selectedCountry;\n\n    if (!contains || (contains === null || contains === void 0 ? void 0 : contains.length) > 1) {\n      setPhoneListLoader(true);\n\n      try {\n        var _payload;\n\n        const response = await dispatch(getPotentialAccts({\n          contains,\n          country,\n          country_code,\n          [tabKeys[tabIndex]]: tabIndex === 0 ? types : tab,\n          channel: 'phone'\n        }));\n        setSearchedPhones(((_payload = response.payload) === null || _payload === void 0 ? void 0 : _payload.list) || []);\n      } catch (error) {\n        toast({\n          position: 'bottom-left',\n          render: ({\n            onClose\n          }) => __jsx(ToastBox, {\n            onClose: onClose,\n            message: error,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 36\n            }\n          })\n        });\n      }\n\n      return setPhoneListLoader(false);\n    }\n\n    return setSearchedPhones([]);\n  };\n\n  const handleTabChange = async index => {\n    const query = _objectSpread(_objectSpread({}, modalQueries), {}, {\n      tab: '',\n      types: []\n    });\n\n    setModalQueries(query);\n    setTabIndex(index);\n\n    if (modalQueries.pattern) {\n      await searchForPhones(query);\n    }\n  };\n\n  const handleModalQueryChange = async (event, checks) => {\n    let data = {\n      name: '',\n      value: ''\n    };\n\n    if (event) {\n      data = event.target;\n    } else if (checks) {\n      data = checks;\n    }\n\n    const {\n      name,\n      value\n    } = data;\n\n    const query = _objectSpread(_objectSpread({}, modalQueries), {}, {\n      [name]: value\n    });\n\n    setModalQueries(query);\n    await searchForPhones(query);\n  };\n\n  const handleCountrySelect = async (item = {\n    value: 'US',\n    label: 'United State'\n  }) => {\n    setSelectedCountry({\n      country: item.label,\n      country_code: item.value\n    });\n\n    try {\n      setRandomPhoneLoader(true);\n      const response = await dispatch(getPotentialAccts({\n        channel: 'phone',\n        country_code: item.value\n      }));\n      const {\n        list: phones,\n        country_phone_types\n      } = response.payload;\n      setSearchedPhones(phones);\n      setRandomPhone(phones[Math.floor(Math.random() * phones.length)]);\n      setModalQueries(_objectSpread(_objectSpread({}, modalQueries), {}, {\n        types: country_phone_types\n      }));\n      setPhoneTypes(country_phone_types);\n      setRandomPhoneLoader(false);\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  };\n\n  const handleModalClose = () => {\n    onModalClose();\n    setTabIndex(0);\n    setModalQueries({\n      pattern: '',\n      tab: '',\n      types: []\n    });\n    setSearchedPhones([]);\n  };\n\n  const handlePhoneSelect = index => {\n    setRandomPhone(searchedPhones[index]);\n    handleModalClose();\n  };\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        await dispatch(getSupportedCountries());\n        await handleCountrySelect();\n        setPageLoader(false);\n      } catch (error) {\n        toast({\n          position: 'bottom-left',\n          render: ({\n            onClose\n          }) => __jsx(ToastBox, {\n            onClose: onClose,\n            message: error,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 36\n            }\n          })\n        });\n      }\n    };\n\n    fetch(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return __jsx(Box, {\n    height: \"100vh\",\n    backgroundColor: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    p: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    size: \"sm\",\n    variant: \"ghost\",\n    leftIcon: \"chevron-left\",\n    onClick: () => history.goBack(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }, \"Go back to directory\")), __jsx(Box, {\n    paddingTop: \"3.25rem\",\n    marginX: \"auto\",\n    maxWidth: \"20.125rem\",\n    color: \"brandBlack\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }\n  }, pageLoader ? __jsx(Box, {\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 11\n    }\n  }, __jsx(Spinner, {\n    color: \"blue.500\",\n    size: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }\n  })) : __jsx(React.Fragment, null, __jsx(Text, {\n    fontSize: \"1.125rem\",\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }\n  }, \"Generate preferred phone number\"), __jsx(Text, {\n    fontSize: \".875rem\",\n    color: \"rgba(46, 56, 77, 0.5)\",\n    marginTop: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }\n  }, \"You can add more multiple phone numbers later.\"), __jsx(Text, {\n    marginTop: \"3.125rem\",\n    fontSize: \".625rem\",\n    color: \"rgba(17, 17, 17, 0.5)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }\n  }, \"Choose country\"), __jsx(Dropdown, {\n    list: countries,\n    setSelected: handleCountrySelect,\n    selected: {\n      value: (selectedCountry === null || selectedCountry === void 0 ? void 0 : selectedCountry.country_code) || '',\n      label: (selectedCountry === null || selectedCountry === void 0 ? void 0 : selectedCountry.country) || ''\n    },\n    formatOptionLabel: ({\n      value,\n      label\n    }) => __jsx(Flex, {\n      alignItems: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }\n    }, __jsx(Text, {\n      fontSize: \"1.125rem\",\n      marginRight: \"0.625rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 19\n      }\n    }, __jsx(\"span\", {\n      role: \"img\",\n      \"aria-label\": \"country emoji\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 21\n      }\n    }, getFlagEmoji(value))), __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 19\n      }\n    }, label)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }\n  }), __jsx(Text, {\n    marginTop: \"1.25rem\",\n    fontSize: \".625rem\",\n    color: \"rgba(17, 17, 17, 0.5)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }\n  }, \"Area Code\"), __jsx(Dropdown, {\n    list: [{\n      value: 'Random',\n      label: 'Random'\n    }],\n    selected: {\n      value: 'Random',\n      label: 'Random'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  }), friendly_name && __jsx(Box, {\n    marginTop: \"2.5rem\",\n    paddingY: \".625rem\",\n    paddingX: \".875rem\",\n    backgroundColor: \"rgba(0, 0, 0, 0.03)\",\n    position: \"relative\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    variant: \"unstyled\",\n    minWidth: \"initial\",\n    height: \"initial\",\n    position: \"absolute\",\n    top: \"1.3125rem\",\n    right: \".875rem\",\n    onClick: () => handleCountrySelect({\n      label: selectedCountry.country,\n      value: selectedCountry.country_code\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 17\n    }\n  }, randomPhoneLoader ? __jsx(Box, {\n    size: \"1.25rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 21\n    }\n  }, __jsx(Spinner, {\n    size: \"sm\",\n    color: \"blue.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 23\n    }\n  })) : __jsx(Icon, {\n    name: \"update\",\n    size: \"1.25rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 21\n    }\n  })), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 17\n    }\n  }, randomPhone === null || randomPhone === void 0 ? void 0 : randomPhone.friendly_name), __jsx(Flex, {\n    justifyContent: \"center\",\n    color: \"rgba(17, 17, 17, 0.5)\",\n    fontSize: \".75rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 17\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 19\n    }\n  }, `(${randomPhoneType})`), __jsx(Text, {\n    marginLeft: \".5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 19\n    }\n  }, `(${joinStrings(randomPhoneCapabilities)})`))), __jsx(Button, {\n    isFullWidth: true,\n    color: \"white\",\n    fontSize: \".875rem\",\n    marginTop: \".625rem\",\n    variantColor: \"blue\",\n    onClick: () => continueToNext(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }\n  }, \"Continue\"), __jsx(Box, {\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    variant: \"unstyled\",\n    fontSize: \".875rem\",\n    marginTop: \".4375rem\",\n    onClick: onModalOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 15\n    }\n  }, \"Pick a different number?\")), __jsx(Modal, {\n    size: \"xl\",\n    isOpen: isModalOpen,\n    onClose: handleModalClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 15\n    }\n  }), __jsx(ModalContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 15\n    }\n  }, __jsx(ModalCloseButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 17\n    }\n  }), __jsx(ModalBody, {\n    paddingTop: \"3.125rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 17\n    }\n  }, __jsx(Text, {\n    fontSize: \"1.125rem\",\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 19\n    }\n  }, \"Generate preferred phone number\"), __jsx(Text, {\n    fontSize: \".875rem\",\n    color: \"rgba(46, 56, 77, 0.5)\",\n    marginTop: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 19\n    }\n  }, \"You can add more multiple phone numbers later.\"), __jsx(Tabs, {\n    marginTop: \"3.125rem\",\n    paddingTop: \"1rem\",\n    paddingBottom: \"1.5rem\",\n    backgroundColor: \"rgba(0, 0, 0, 0.02)\",\n    borderRadius: \"0.4167rem\",\n    onChange: index => handleTabChange(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 19\n    }\n  }, __jsx(TabList, {\n    borderBottom: \"none\",\n    marginX: \"2.5rem\",\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 21\n    }\n  }, ['BY TYPE', 'BY LOCATION', 'BY AREA CODE'].map((item, index) => __jsx(Tab, {\n    key: item,\n    opacity: 0.5,\n    _selected: {\n      color: '#3d50df',\n      borderBottom: '3px solid #3d50df',\n      outline: 'none',\n      opacity: 'unset',\n      paddingBottom: '.5rem'\n    },\n    fontWeight: 500,\n    paddingX: \".5rem\",\n    paddingBottom: \".625rem\",\n    disabled: index >= 1 ? !isCaOrUs : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 25\n    }\n  }, item))), __jsx(TabPanels, {\n    marginX: \"2.8125rem\",\n    marginTop: \"3.4375rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 21\n    }\n  }, ['Select phone type(s)', 'Enter a 2-letter state or province abbreviation (e.g. AR)', 'Enter an area code (e.g. 210)'].map((item, index) => __jsx(TabPanel, {\n    key: `${item}-${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 25\n    }\n  }, index === 0 ? __jsx(Box, {\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.08)\",\n    paddingBottom: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 29\n    }\n  }, __jsx(Text, {\n    color: \"rgba(17, 17, 17, 0.5)\",\n    fontSize: \".75rem\",\n    marginBottom: \".5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 31\n    }\n  }, item), __jsx(CheckboxGroup, {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    size: \"sm\",\n    variantColor: \"blue\",\n    onChange: value => handleModalQueryChange(undefined, {\n      name: 'types',\n      value\n    }),\n    value: modalQueries.types,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 31\n    }\n  }, ['Local', 'Mobile', 'Toll-free'].map(title => __jsx(Checkbox, {\n    key: title,\n    value: title.toLowerCase(),\n    isDisabled: !phoneTypes.includes(title.toLowerCase()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 35\n    }\n  }, title)))) : __jsx(Flex, {\n    alignItems: \"center\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.08)\",\n    paddingBottom: \"1.25rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 29\n    }\n  }, __jsx(Icon, {\n    name: \"marker\",\n    size: \"1.1875rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 31\n    }\n  }), __jsx(Input, {\n    fontSize: \".875rem\",\n    placeholder: item,\n    marginLeft: \".875rem\",\n    backgroundColor: \"transparent\",\n    border: \"none\",\n    name: \"tab\",\n    maxLength: tabIndex === 1 ? 2 : 3,\n    value: modalQueries.tab,\n    onChange: event => handleModalQueryChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 31\n    }\n  })), __jsx(Flex, {\n    alignItems: \"center\",\n    paddingTop: \"1.25rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 27\n    }\n  }, __jsx(Icon, {\n    name: \"dial-number-secondary\",\n    size: \"1.0625rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 29\n    }\n  }), __jsx(Input, {\n    fontSize: \".875rem\",\n    placeholder: \"Filter by digits or phrases\",\n    marginLeft: \".875rem\",\n    backgroundColor: \"transparent\",\n    border: \"none\",\n    name: \"pattern\",\n    value: modalQueries.pattern,\n    onChange: event => handleModalQueryChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 29\n    }\n  })), __jsx(Stack, {\n    spacing: \"1.875rem\",\n    marginTop: \"2.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 27\n    }\n  }, phoneListLoader ? Array(4).fill(Math.random()).map((item, index) => __jsx(Skeleton, {\n    key: `${index}-${item}`,\n    height: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 35\n    }\n  })) : !Object.values(modalQueries).every(item => isEmpty(item)) && searchedPhones.length === 0 ? __jsx(Text, {\n    fontSize: \".875rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 31\n    }\n  }, \"No matches found for the search query\") : searchedPhones.map(({\n    friendly_name,\n    locality,\n    type: phoneType,\n    capabilities: phoneCapabilities\n  }, index) => __jsx(PseudoBox, {\n    display: \"flex\",\n    alignItems: \"center\",\n    key: friendly_name,\n    cursor: \"pointer\",\n    color: \"rgba(17, 17, 17, 0.5)\",\n    fontSize: \".75rem\",\n    _hover: {\n      bg: 'rgba(119, 131, 253, 0.03)',\n      cursor: 'pointer'\n    },\n    _focus: {\n      bg: 'rgba(119, 131, 253, 0.03)',\n      outline: 'none',\n      cursor: 'pointer'\n    },\n    tabIndex: 0,\n    onClick: () => handlePhoneSelect(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 35\n    }\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    name: \"phone\",\n    value: friendly_name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 37\n    }\n  }), __jsx(Text, {\n    fontSize: \"1rem\",\n    color: \"brandBlack\",\n    marginLeft: \"1.875rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 37\n    }\n  }, friendly_name), __jsx(Text, {\n    marginLeft: \".5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 37\n    }\n  }, `(${phoneType})`), __jsx(Text, {\n    marginLeft: \".25rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 37\n    }\n  }, `(${joinStrings(phoneCapabilities)})`), locality && __jsx(Text, {\n    marginLeft: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 39\n    }\n  }, locality.length > 15 ? `${locality.substr(0, 15)}...` : locality))))))))))))));\n}","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/integrations/components/Phone.tsx"],"names":["React","useEffect","useState","Box","Text","useDisclosure","Modal","ModalOverlay","ModalContent","ModalCloseButton","ModalBody","TabList","Tabs","Tab","TabPanels","TabPanel","Flex","Input","Stack","useToast","PseudoBox","CheckboxGroup","Checkbox","Spinner","Skeleton","Icon","isEmpty","Dropdown","ToastBox","Button","joinStrings","getFlagEmoji","useDispatch","useSelector","getPotentialAccts","getSupportedCountries","selectSupportedCountries","useHistory","Phone","history","dispatch","toast","supportedCountries","isOpen","isModalOpen","onClose","onModalClose","onOpen","onModalOpen","countries","map","country","label","country_code","value","selectedCountry","setSelectedCountry","tabIndex","setTabIndex","modalQueries","setModalQueries","pattern","tab","types","randomPhoneLoader","setRandomPhoneLoader","pageLoader","setPageLoader","phoneListLoader","setPhoneListLoader","randomPhone","setRandomPhone","searchedPhones","setSearchedPhones","phoneTypes","setPhoneTypes","isCaOrUs","includes","friendly_name","capabilities","randomPhoneCapabilities","type","randomPhoneType","continueToNext","push","searchForPhones","query","tabKeys","contains","length","response","channel","payload","list","error","position","render","handleTabChange","index","handleModalQueryChange","event","checks","data","name","target","handleCountrySelect","item","phones","country_phone_types","Math","floor","random","handleModalClose","handlePhoneSelect","fetch","goBack","color","borderBottom","outline","opacity","paddingBottom","undefined","title","toLowerCase","Array","fill","Object","values","every","locality","phoneType","phoneCapabilities","bg","cursor","substr"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, ChangeEvent } from 'react';\nimport {\n  Box,\n  Text,\n  useDisclosure,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalCloseButton,\n  ModalBody,\n  TabList,\n  Tabs,\n  Tab,\n  TabPanels,\n  TabPanel,\n  Flex,\n  Input,\n  Stack,\n  useToast,\n  PseudoBox,\n  CheckboxGroup,\n  Checkbox,\n  Spinner,\n  Skeleton,\n  Icon,\n} from '@chakra-ui/core';\nimport { isEmpty } from 'lodash';\nimport { PhoneSchema } from '../integrations.type';\nimport { Dropdown, DropDownItemSchema } from './Dropdown';\nimport { ToastBox, Button } from 'app/components';\nimport { joinStrings } from '../integrations.utis';\nimport { getFlagEmoji } from '../../inbox/inbox.utils';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getPotentialAccts, getSupportedCountries, selectSupportedCountries } from '../../channels';\nimport { useHistory } from 'react-router-dom';\n\ntype PhoneQuerySchema = {\n  pattern: string;\n  tab: string;\n  types: string[];\n};\n\nexport function Phone() {\n  const history = useHistory<PhoneSchema>();\n  const dispatch = useDispatch();\n  const toast = useToast();\n  const supportedCountries = useSelector(selectSupportedCountries);\n  const { isOpen: isModalOpen, onClose: onModalClose, onOpen: onModalOpen } = useDisclosure();\n  const countries: DropDownItemSchema[] = supportedCountries.map(\n    ({ country: label, country_code: value }) => ({ value, label }),\n  );\n\n  const [selectedCountry, setSelectedCountry] = useState(supportedCountries[0]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [modalQueries, setModalQueries] = useState<PhoneQuerySchema>({\n    pattern: '',\n    tab: '',\n    types: [],\n  });\n  const [randomPhoneLoader, setRandomPhoneLoader] = useState(false);\n  const [pageLoader, setPageLoader] = useState(true);\n  const [phoneListLoader, setPhoneListLoader] = useState(false);\n  const [randomPhone, setRandomPhone] = useState<PhoneSchema | undefined>();\n  const [searchedPhones, setSearchedPhones] = useState<PhoneSchema[]>([]);\n  const [phoneTypes, setPhoneTypes] = useState<string[]>([]);\n\n  const isCaOrUs = ['US', 'CA'].includes(selectedCountry?.country_code);\n  const {\n    friendly_name,\n    capabilities: randomPhoneCapabilities,\n    type: randomPhoneType,\n  } = randomPhone || {\n    friendly_name: '',\n    capabilities: [],\n    type: '',\n  };\n\n  const continueToNext = () => {\n    history.push('/s/integrations/use-case/phone', randomPhone);\n  };\n\n  const searchForPhones = async (query: PhoneQuerySchema) => {\n    const tabKeys = ['type', 'inRegion', 'areaCode'];\n    const { tab, pattern: contains, types } = query;\n    const { country_code, country } = selectedCountry;\n\n    if (!contains || contains?.length > 1) {\n      setPhoneListLoader(true);\n\n      try {\n        const response = await dispatch(\n          getPotentialAccts({\n            contains,\n            country,\n            country_code,\n            [tabKeys[tabIndex]]: tabIndex === 0 ? types : tab,\n            channel: 'phone',\n          }),\n        );\n        setSearchedPhones((response as any).payload?.list || []);\n      } catch (error) {\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n        });\n      }\n\n      return setPhoneListLoader(false);\n    }\n\n    return setSearchedPhones([]);\n  };\n\n  const handleTabChange = async (index: number) => {\n    const query = { ...modalQueries, tab: '', types: [] };\n    setModalQueries(query);\n    setTabIndex(index);\n\n    if (modalQueries.pattern) {\n      await searchForPhones(query);\n    }\n  };\n\n  const handleModalQueryChange = async (\n    event?: ChangeEvent<HTMLInputElement>,\n    checks?: { name: string; value: (string | number | undefined)[] },\n  ) => {\n    let data: { name: string; value: any } = { name: '', value: '' };\n    if (event) {\n      data = event.target;\n    } else if (checks) {\n      data = checks;\n    }\n\n    const { name, value } = data;\n\n    const query = { ...modalQueries, [name]: value };\n    setModalQueries(query);\n\n    await searchForPhones(query);\n  };\n\n  const handleCountrySelect = async (\n    item: DropDownItemSchema = { value: 'US', label: 'United State' },\n  ) => {\n    setSelectedCountry({ country: item.label, country_code: item.value });\n\n    try {\n      setRandomPhoneLoader(true);\n\n      const response = await dispatch(\n        getPotentialAccts({\n          channel: 'phone',\n          country_code: item.value,\n        }),\n      );\n\n      const {\n        list: phones,\n        country_phone_types,\n      }: {\n        list: PhoneSchema[];\n        country_phone_types: string[];\n      } = (response as any).payload;\n      setSearchedPhones(phones);\n      setRandomPhone(phones[Math.floor(Math.random() * phones.length)]);\n      setModalQueries({ ...modalQueries, types: country_phone_types });\n      setPhoneTypes(country_phone_types);\n      setRandomPhoneLoader(false);\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n  };\n\n  const handleModalClose = () => {\n    onModalClose();\n    setTabIndex(0);\n    setModalQueries({ pattern: '', tab: '', types: [] });\n    setSearchedPhones([]);\n  };\n\n  const handlePhoneSelect = (index: number) => {\n    setRandomPhone(searchedPhones[index]);\n    handleModalClose();\n  };\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        await dispatch(getSupportedCountries());\n        await handleCountrySelect();\n        setPageLoader(false);\n      } catch (error) {\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n        });\n      }\n    };\n    fetch();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Box height=\"100vh\" backgroundColor=\"white\">\n      <Box p=\"1rem\">\n        <Button size=\"sm\" variant=\"ghost\" leftIcon=\"chevron-left\" onClick={() => history.goBack()}>\n          Go back to directory\n        </Button>\n      </Box>\n      <Box paddingTop=\"3.25rem\" marginX=\"auto\" maxWidth=\"20.125rem\" color=\"brandBlack\">\n        {pageLoader ? (\n          <Box textAlign=\"center\">\n            <Spinner color=\"blue.500\" size=\"md\" />\n          </Box>\n        ) : (\n          <>\n            <Text fontSize=\"1.125rem\" fontWeight={600}>\n              Generate preferred phone number\n            </Text>\n\n            <Text fontSize=\".875rem\" color=\"rgba(46, 56, 77, 0.5)\" marginTop=\"1rem\">\n              You can add more multiple phone numbers later.\n            </Text>\n\n            <Text marginTop=\"3.125rem\" fontSize=\".625rem\" color=\"rgba(17, 17, 17, 0.5)\">\n              Choose country\n            </Text>\n\n            <Dropdown\n              list={countries}\n              setSelected={handleCountrySelect}\n              selected={{\n                value: selectedCountry?.country_code || '',\n                label: selectedCountry?.country || '',\n              }}\n              formatOptionLabel={({ value, label }: any) => (\n                <Flex alignItems=\"center\">\n                  <Text fontSize=\"1.125rem\" marginRight=\"0.625rem\">\n                    <span role=\"img\" aria-label=\"country emoji\">\n                      {getFlagEmoji(value)}\n                    </span>\n                  </Text>\n\n                  <Text>{label}</Text>\n                </Flex>\n              )}\n            />\n\n            <Text marginTop=\"1.25rem\" fontSize=\".625rem\" color=\"rgba(17, 17, 17, 0.5)\">\n              Area Code\n            </Text>\n\n            <Dropdown\n              list={[{ value: 'Random', label: 'Random' }]}\n              selected={{ value: 'Random', label: 'Random' }}\n            />\n\n            {friendly_name && (\n              <Box\n                marginTop=\"2.5rem\"\n                paddingY=\".625rem\"\n                paddingX=\".875rem\"\n                backgroundColor=\"rgba(0, 0, 0, 0.03)\"\n                position=\"relative\"\n                textAlign=\"center\"\n              >\n                <Button\n                  variant=\"unstyled\"\n                  minWidth=\"initial\"\n                  height=\"initial\"\n                  position=\"absolute\"\n                  top=\"1.3125rem\"\n                  right=\".875rem\"\n                  onClick={() =>\n                    handleCountrySelect({\n                      label: selectedCountry.country,\n                      value: selectedCountry.country_code,\n                    })\n                  }\n                >\n                  {randomPhoneLoader ? (\n                    <Box size=\"1.25rem\">\n                      <Spinner size=\"sm\" color=\"blue.500\" />\n                    </Box>\n                  ) : (\n                    <Icon name=\"update\" size=\"1.25rem\" />\n                  )}\n                </Button>\n\n                <Text>{randomPhone?.friendly_name}</Text>\n                <Flex justifyContent=\"center\" color=\"rgba(17, 17, 17, 0.5)\" fontSize=\".75rem\">\n                  <Text>{`(${randomPhoneType})`}</Text>\n                  <Text marginLeft=\".5rem\">{`(${joinStrings(randomPhoneCapabilities)})`}</Text>\n                </Flex>\n              </Box>\n            )}\n\n            <Button\n              isFullWidth\n              color=\"white\"\n              fontSize=\".875rem\"\n              marginTop=\".625rem\"\n              variantColor=\"blue\"\n              onClick={() => continueToNext()}\n            >\n              Continue\n            </Button>\n\n            <Box textAlign=\"center\">\n              <Button\n                variant=\"unstyled\"\n                fontSize=\".875rem\"\n                marginTop=\".4375rem\"\n                onClick={onModalOpen}\n              >\n                Pick a different number?\n              </Button>\n            </Box>\n\n            <Modal size=\"xl\" isOpen={isModalOpen} onClose={handleModalClose}>\n              <ModalOverlay />\n              <ModalContent>\n                <ModalCloseButton />\n                <ModalBody paddingTop=\"3.125rem\">\n                  <Text fontSize=\"1.125rem\" fontWeight={600}>\n                    Generate preferred phone number\n                  </Text>\n\n                  <Text fontSize=\".875rem\" color=\"rgba(46, 56, 77, 0.5)\" marginTop=\"1rem\">\n                    You can add more multiple phone numbers later.\n                  </Text>\n\n                  <Tabs\n                    marginTop=\"3.125rem\"\n                    paddingTop=\"1rem\"\n                    paddingBottom=\"1.5rem\"\n                    backgroundColor=\"rgba(0, 0, 0, 0.02)\"\n                    borderRadius=\"0.4167rem\"\n                    onChange={(index: number) => handleTabChange(index)}\n                  >\n                    <TabList borderBottom=\"none\" marginX=\"2.5rem\" justifyContent=\"space-between\">\n                      {['BY TYPE', 'BY LOCATION', 'BY AREA CODE'].map((item, index) => (\n                        <Tab\n                          key={item}\n                          opacity={0.5}\n                          _selected={{\n                            color: '#3d50df',\n                            borderBottom: '3px solid #3d50df',\n                            outline: 'none',\n                            opacity: 'unset',\n                            paddingBottom: '.5rem',\n                          }}\n                          fontWeight={500}\n                          paddingX=\".5rem\"\n                          paddingBottom=\".625rem\"\n                          disabled={index >= 1 ? !isCaOrUs : false}\n                        >\n                          {item}\n                        </Tab>\n                      ))}\n                    </TabList>\n\n                    <TabPanels marginX=\"2.8125rem\" marginTop=\"3.4375rem\">\n                      {[\n                        'Select phone type(s)',\n                        'Enter a 2-letter state or province abbreviation (e.g. AR)',\n                        'Enter an area code (e.g. 210)',\n                      ].map((item, index) => (\n                        <TabPanel key={`${item}-${index}`}>\n                          {index === 0 ? (\n                            <Box\n                              borderBottom=\"1px solid rgba(0, 0, 0, 0.08)\"\n                              paddingBottom=\"0.5rem\"\n                            >\n                              <Text\n                                color=\"rgba(17, 17, 17, 0.5)\"\n                                fontSize=\".75rem\"\n                                marginBottom=\".5rem\"\n                              >\n                                {item}\n                              </Text>\n\n                              <CheckboxGroup\n                                display=\"flex\"\n                                justifyContent=\"space-between\"\n                                size=\"sm\"\n                                variantColor=\"blue\"\n                                onChange={value =>\n                                  handleModalQueryChange(undefined, { name: 'types', value })\n                                }\n                                value={modalQueries.types}\n                              >\n                                {['Local', 'Mobile', 'Toll-free'].map(title => (\n                                  <Checkbox\n                                    key={title}\n                                    value={title.toLowerCase()}\n                                    isDisabled={!phoneTypes.includes(title.toLowerCase())}\n                                  >\n                                    {title}\n                                  </Checkbox>\n                                ))}\n                              </CheckboxGroup>\n                            </Box>\n                          ) : (\n                            <Flex\n                              alignItems=\"center\"\n                              borderBottom=\"1px solid rgba(0, 0, 0, 0.08)\"\n                              paddingBottom=\"1.25rem\"\n                            >\n                              <Icon name=\"marker\" size=\"1.1875rem\" />\n\n                              <Input\n                                fontSize=\".875rem\"\n                                placeholder={item}\n                                marginLeft=\".875rem\"\n                                backgroundColor=\"transparent\"\n                                border=\"none\"\n                                name=\"tab\"\n                                maxLength={tabIndex === 1 ? 2 : 3}\n                                value={modalQueries.tab}\n                                onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                                  handleModalQueryChange(event)\n                                }\n                              />\n                            </Flex>\n                          )}\n\n                          <Flex alignItems=\"center\" paddingTop=\"1.25rem\">\n                            <Icon name=\"dial-number-secondary\" size=\"1.0625rem\" />\n\n                            <Input\n                              fontSize=\".875rem\"\n                              placeholder=\"Filter by digits or phrases\"\n                              marginLeft=\".875rem\"\n                              backgroundColor=\"transparent\"\n                              border=\"none\"\n                              name=\"pattern\"\n                              value={modalQueries.pattern}\n                              onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                                handleModalQueryChange(event)\n                              }\n                            />\n                          </Flex>\n\n                          <Stack spacing=\"1.875rem\" marginTop=\"2.5rem\">\n                            {phoneListLoader ? (\n                              Array(4)\n                                .fill(Math.random())\n                                .map((item, index) => (\n                                  <Skeleton key={`${index}-${item}`} height=\"1.5rem\" />\n                                ))\n                            ) : !Object.values(modalQueries).every(item => isEmpty(item)) &&\n                              searchedPhones.length === 0 ? (\n                              <Text fontSize=\".875rem\">No matches found for the search query</Text>\n                            ) : (\n                              searchedPhones.map(\n                                (\n                                  {\n                                    friendly_name,\n                                    locality,\n                                    type: phoneType,\n                                    capabilities: phoneCapabilities,\n                                  },\n                                  index,\n                                ) => (\n                                  <PseudoBox\n                                    display=\"flex\"\n                                    alignItems=\"center\"\n                                    key={friendly_name}\n                                    cursor=\"pointer\"\n                                    color=\"rgba(17, 17, 17, 0.5)\"\n                                    fontSize=\".75rem\"\n                                    _hover={{ bg: 'rgba(119, 131, 253, 0.03)', cursor: 'pointer' }}\n                                    _focus={{\n                                      bg: 'rgba(119, 131, 253, 0.03)',\n                                      outline: 'none',\n                                      cursor: 'pointer',\n                                    }}\n                                    tabIndex={0}\n                                    onClick={() => handlePhoneSelect(index)}\n                                  >\n                                    <input type=\"radio\" name=\"phone\" value={friendly_name} />\n                                    <Text fontSize=\"1rem\" color=\"brandBlack\" marginLeft=\"1.875rem\">\n                                      {friendly_name}\n                                    </Text>\n                                    <Text marginLeft=\".5rem\">{`(${phoneType})`}</Text>\n                                    <Text marginLeft=\".25rem\">{`(${joinStrings(\n                                      phoneCapabilities,\n                                    )})`}</Text>\n                                    {locality && (\n                                      <Text marginLeft=\"auto\">\n                                        {locality.length > 15\n                                          ? `${locality.substr(0, 15)}...`\n                                          : locality}\n                                      </Text>\n                                    )}\n                                  </PseudoBox>\n                                ),\n                              )\n                            )}\n                          </Stack>\n                        </TabPanel>\n                      ))}\n                    </TabPanels>\n                  </Tabs>\n                </ModalBody>\n              </ModalContent>\n            </Modal>\n          </>\n        )}\n      </Box>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}