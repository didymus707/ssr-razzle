{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/lists/components/cell-properties/date/field.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport { Popover, PopoverTrigger, PopoverContent, useDisclosure } from '@chakra-ui/core';\nimport { Input } from 'app/components';\nimport { parseDate } from '../../../lists.utils';\nimport { calendarOutputFormat } from '../../../list.data';\nimport { DateCellEditor } from './editor';\nimport { PopoverWrapper } from '../../../list-view.styles';\nexport const DateFieldComponent = props => {\n  var _column$customization, _column$customization2, _column$customization3;\n\n  const {\n    0: rawValue,\n    1: setRawValue\n  } = useState(props.value);\n  const {\n    isOpen,\n    onClose,\n    onOpen\n  } = useDisclosure();\n  const {\n    column = {},\n    placeholder,\n    inputProps = {},\n    isDisabled = false\n  } = props;\n  const date_format = (column === null || column === void 0 ? void 0 : (_column$customization = column.customization) === null || _column$customization === void 0 ? void 0 : _column$customization.date_format) || 'D/MM/YYYY';\n  const time_format = (column === null || column === void 0 ? void 0 : (_column$customization2 = column.customization) === null || _column$customization2 === void 0 ? void 0 : _column$customization2.time_format) || 'h:mm A';\n  const include_time = (column === null || column === void 0 ? void 0 : (_column$customization3 = column.customization) === null || _column$customization3 === void 0 ? void 0 : _column$customization3.include_time) || false;\n  const value = parseDate(rawValue);\n  let formatted_date = date_format !== 'relative' ? value.format(date_format) : value.calendar(null, calendarOutputFormat);\n\n  if (include_time) {\n    if (date_format === 'relative') formatted_date += ' at';\n    formatted_date += ` ${value.format(time_format)}`;\n  }\n\n  const handleUpdate = _value => {\n    setRawValue(_value);\n    props.updateCellValue(_value, column.uid);\n    onClose();\n  };\n\n  return __jsx(Popover, {\n    closeOnEsc: true,\n    isOpen: !isDisabled ? isOpen : false,\n    onClose: onClose,\n    placement: \"bottom-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, __jsx(PopoverTrigger, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    onClick: onOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, __jsx(Input, _extends({\n    isDisabled: true,\n    cursor: !isDisabled ? 'cursor' : 'not-allowed',\n    placeholder: placeholder,\n    value: rawValue && value.isValid() ? formatted_date : '',\n    _disabled: {\n      color: '#333333'\n    }\n  }, inputProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  })))), __jsx(PopoverContent, {\n    zIndex: 4,\n    width: \"max-content\",\n    boxShadow: \"none\",\n    _focus: {\n      boxShadow: 'none',\n      outline: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, __jsx(PopoverWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, __jsx(DateCellEditor, {\n    value: rawValue,\n    updateValue: handleUpdate,\n    customization: column === null || column === void 0 ? void 0 : column.customization,\n    close: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/lists/components/cell-properties/date/field.tsx"],"names":["React","useState","Popover","PopoverTrigger","PopoverContent","useDisclosure","Input","parseDate","calendarOutputFormat","DateCellEditor","PopoverWrapper","DateFieldComponent","props","rawValue","setRawValue","value","isOpen","onClose","onOpen","column","placeholder","inputProps","isDisabled","date_format","customization","time_format","include_time","formatted_date","format","calendar","handleUpdate","_value","updateCellValue","uid","isValid","color","boxShadow","outline"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  useDisclosure,\n} from '@chakra-ui/core';\nimport { Input } from 'app/components';\nimport { parseDate } from '../../../lists.utils';\nimport { calendarOutputFormat } from '../../../list.data';\nimport { DateCellEditor } from './editor';\nimport { PopoverWrapper } from '../../../list-view.styles';\n\nexport const DateFieldComponent = (props: any) => {\n  const [rawValue, setRawValue] = useState(props.value);\n  const { isOpen, onClose, onOpen } = useDisclosure();\n\n  const { column = {}, placeholder, inputProps = {}, isDisabled = false } = props;\n\n  const date_format = column?.customization?.date_format || 'D/MM/YYYY';\n  const time_format = column?.customization?.time_format || 'h:mm A';\n  const include_time = column?.customization?.include_time || false;\n\n  const value = parseDate(rawValue);\n\n  let formatted_date =\n    date_format !== 'relative'\n      ? value.format(date_format)\n      : value.calendar(null, calendarOutputFormat);\n\n  if (include_time) {\n    if (date_format === 'relative') formatted_date += ' at';\n    formatted_date += ` ${value.format(time_format)}`;\n  }\n\n  const handleUpdate = (_value: any) => {\n    setRawValue(_value);\n    props.updateCellValue(_value, column.uid);\n    onClose();\n  };\n\n  return (\n    <Popover\n      closeOnEsc\n      isOpen={!isDisabled ? isOpen : false}\n      onClose={onClose}\n      placement=\"bottom-start\"\n    >\n      <PopoverTrigger>\n        <div onClick={onOpen}>\n          <Input\n            isDisabled\n            cursor={!isDisabled ? 'cursor' : 'not-allowed'}\n            placeholder={placeholder}\n            value={rawValue && value.isValid() ? formatted_date : ''}\n            _disabled={{\n              color: '#333333',\n            }}\n            {...inputProps}\n          />\n        </div>\n      </PopoverTrigger>\n\n      <PopoverContent\n        zIndex={4}\n        width=\"max-content\"\n        boxShadow=\"none\"\n        _focus={{\n          boxShadow: 'none',\n          outline: 'none',\n        }}\n      >\n        <PopoverWrapper>\n          <DateCellEditor\n            value={rawValue}\n            updateValue={handleUpdate}\n            customization={column?.customization}\n            close={onClose}\n          />\n        </PopoverWrapper>\n      </PopoverContent>\n    </Popover>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}