{"ast":null,"code":"import _objectSpread from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createSelector, createSlice } from '@reduxjs/toolkit';\nimport { isEmpty } from 'lodash';\nimport { loadState, saveState } from '../../../../utils';\nimport { addContact, addTableColumn, assignThread, fetchContactTable, fetchThreadMessages, loadScrollMemory, onNewWebsocketEvent, sendMessage, subscribeToWebsocket, updateContact } from './global';\nexport const conversationTabControls = {\n  queued: 0,\n  assigned: 1,\n  resolved: 2\n};\nconst uiInitialState = {\n  conversationTabIndex: conversationTabControls.assigned,\n  websocketSubscribedOrgs: {},\n  shouldPopSound: false,\n  shouldGoInboxHome: false,\n  isAssigning: {},\n  messageStatus: {},\n  firstUnreadMessageIDs: {},\n  scrollTops: {},\n  errors: {},\n  contacTable: undefined,\n  loadingMessages: {},\n  threadMessageMeta: {}\n};\nconst uiSlice = createSlice({\n  name: 'inbox_ui',\n  initialState: uiInitialState,\n  reducers: {\n    changeConversationTabIndex(state, action) {\n      const {\n        tabIndex\n      } = action.payload;\n\n      if (tabIndex >= 0 && tabIndex <= 2) {\n        state.conversationTabIndex = tabIndex;\n      }\n    },\n\n    stopPopSound(state) {\n      state.shouldPopSound = false;\n    },\n\n    resetShouldGoHome(state) {\n      state.shouldGoInboxHome = false;\n    },\n\n    onOrganisationSwitch(state) {\n      state.shouldGoInboxHome = true;\n    },\n\n    updateScrollTop(state, action) {\n      const {\n        thread_id,\n        scrollTop\n      } = action.payload;\n\n      if (thread_id && typeof scrollTop === 'number') {\n        state.scrollTops[thread_id] = scrollTop;\n        const currentLocalState = loadState();\n        currentLocalState && saveState(_objectSpread(_objectSpread({}, currentLocalState), {}, {\n          scrollMemory: _objectSpread(_objectSpread({}, currentLocalState === null || currentLocalState === void 0 ? void 0 : currentLocalState.scrollMemory), {}, {\n            [thread_id]: scrollTop\n          })\n        }));\n      }\n    },\n\n    addLoadingMessage(state, action) {\n      const {\n        message,\n        messageMarker\n      } = action.payload;\n\n      if (message && messageMarker) {\n        if (!state.loadingMessages[messageMarker]) {\n          state.loadingMessages[messageMarker] = [];\n        }\n\n        state.loadingMessages[messageMarker].push(message);\n      }\n    }\n\n  },\n\n  extraReducers(builder) {\n    builder.addCase(subscribeToWebsocket.fulfilled, (state, action) => {\n      if (action.payload) {\n        state.websocketSubscribedOrgs[action.payload] = true;\n      }\n    }).addCase(addContact.fulfilled, (state, action) => {\n      var _action$payload;\n\n      if ((_action$payload = action.payload) !== null && _action$payload !== void 0 && _action$payload.table) {\n        state.contacTable = action.payload.table;\n      }\n    }).addCase(addTableColumn.fulfilled, (state, action) => {\n      var _action$payload2;\n\n      if ((_action$payload2 = action.payload) !== null && _action$payload2 !== void 0 && _action$payload2.table) {\n        state.contacTable = action.payload.table;\n      }\n    }).addCase(updateContact.fulfilled, (state, action) => {\n      var _action$payload3;\n\n      if ((_action$payload3 = action.payload) !== null && _action$payload3 !== void 0 && _action$payload3.table) {\n        state.contacTable = action.payload.table;\n      }\n    }).addCase(loadScrollMemory.fulfilled, (state, action) => {\n      if (!isEmpty(action.payload)) {\n        state.scrollTops = _objectSpread(_objectSpread({}, state.scrollTops), action.payload);\n      }\n    }).addCase(onNewWebsocketEvent, state => {\n      state.shouldPopSound = true;\n    }).addCase(assignThread.pending, (state, action) => {\n      state.isAssigning[action.meta.arg.thread_id] = 'pending';\n    }).addCase(assignThread.rejected, (state, action) => {\n      state.isAssigning[action.meta.arg.thread_id] = 'rejected';\n    }).addCase(assignThread.fulfilled, (state, action) => {\n      state.isAssigning[action.meta.arg.thread_id] = 'fulfilled';\n    }).addCase(fetchContactTable.fulfilled, (state, action) => {\n      if (action.payload) {\n        state.contacTable = action.payload;\n      }\n    }).addCase(fetchThreadMessages.pending, (state, action) => {\n      const {\n        thread_id\n      } = action.meta.arg;\n\n      if (thread_id && !thread_id.includes('unknown')) {\n        state.messageStatus[thread_id] = 'pending';\n        state.threadMessageMeta[thread_id] = {\n          count: 0,\n          page: 0,\n          pageSize: 0,\n          pageCount: 0\n        };\n        state.firstUnreadMessageIDs[action.meta.arg.thread_id] = null;\n      }\n    }).addCase(fetchThreadMessages.fulfilled, (state, action) => {\n      state.messageStatus[action.meta.arg.thread_id] = 'fulfilled';\n      const {\n        firstUnreadMessgeID,\n        thread_id,\n        meta\n      } = action.payload.ui || {};\n\n      if (thread_id) {\n        state.firstUnreadMessageIDs[thread_id] = firstUnreadMessgeID;\n        state.threadMessageMeta[thread_id] = meta;\n      }\n    }).addCase(sendMessage.fulfilled, (state, action) => {\n      var _state$loadingMessage;\n\n      const {\n        marker,\n        thread_id\n      } = action.meta.arg;\n      state.loadingMessages[thread_id] = (_state$loadingMessage = state.loadingMessages[thread_id]) === null || _state$loadingMessage === void 0 ? void 0 : _state$loadingMessage.filter(({\n        uuid\n      }) => uuid !== marker);\n    });\n  }\n\n});\nexport const {\n  changeConversationTabIndex,\n  stopPopSound,\n  updateScrollTop,\n  addLoadingMessage,\n  onOrganisationSwitch,\n  resetShouldGoHome\n} = uiSlice.actions;\nexport const inboxUiReducer = uiSlice.reducer;\nexport const selectInboxState = createSelector(state => state.inbox, inbo => inbo);\nexport const selectInboxEntitiesState = createSelector(selectInboxState, inbo => inbo.entities);\nexport const selectInboxUiState = createSelector(selectInboxState, inbo => inbo.inboxUi);\nexport const selectConversationTabIndex = createSelector(selectInboxUiState, inboxUi => inboxUi.conversationTabIndex);\nexport const selectContactTableID = createSelector(selectInboxUiState, inboxUi => {\n  var _inboxUi$contacTable;\n\n  return (_inboxUi$contacTable = inboxUi.contacTable) === null || _inboxUi$contacTable === void 0 ? void 0 : _inboxUi$contacTable.id;\n});\nexport const selectContactTable = createSelector(selectInboxUiState, inboxUi => inboxUi.contacTable);\nexport const selectThreadAssigningState = createSelector(selectInboxUiState, (_, thread_id) => thread_id, (inboxUi, thread_id) => inboxUi.isAssigning[thread_id]);\nexport const selectMessageMeta = createSelector((_, payload) => payload.thread_id, selectInboxUiState, (thread_id, inboxUi) => ({\n  status: inboxUi.messageStatus[thread_id],\n  meta: inboxUi.threadMessageMeta[thread_id],\n  firstUnreadMessageID: inboxUi.firstUnreadMessageIDs[thread_id]\n}));\nexport const selectScrollTop = createSelector((_, payload) => payload.thread_id, selectInboxUiState, (thread_id, inboxUi) => inboxUi.scrollTops[thread_id]);\nexport const selectFirstUnreadMessageID = createSelector((_, payload) => payload.thread_id, selectInboxUiState, (thread_id, inboxUi) => inboxUi.firstUnreadMessageIDs[thread_id]);\nexport const selectLoadingMessage = createSelector((_, payload) => payload.messageMarker, (_, payload) => payload.thread_id, selectInboxUiState, (messageMarker, thread_id, inboxUi) => inboxUi.loadingMessages[thread_id].find(({\n  uuid\n}) => uuid === messageMarker));\nexport const selectLoadingMessageIDs = createSelector((_, payload) => payload.thread_id, selectInboxUiState, (thread_id, inboxUi) => [...(inboxUi.loadingMessages[thread_id] || [])].reverse().map(({\n  uuid\n}) => uuid));\nexport const selectShouldGoHomeValue = createSelector(selectInboxUiState, uiState => uiState.shouldGoInboxHome);","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/slices/ui.ts"],"names":["createSelector","createSlice","isEmpty","loadState","saveState","addContact","addTableColumn","assignThread","fetchContactTable","fetchThreadMessages","loadScrollMemory","onNewWebsocketEvent","sendMessage","subscribeToWebsocket","updateContact","conversationTabControls","queued","assigned","resolved","uiInitialState","conversationTabIndex","websocketSubscribedOrgs","shouldPopSound","shouldGoInboxHome","isAssigning","messageStatus","firstUnreadMessageIDs","scrollTops","errors","contacTable","undefined","loadingMessages","threadMessageMeta","uiSlice","name","initialState","reducers","changeConversationTabIndex","state","action","tabIndex","payload","stopPopSound","resetShouldGoHome","onOrganisationSwitch","updateScrollTop","thread_id","scrollTop","currentLocalState","scrollMemory","addLoadingMessage","message","messageMarker","push","extraReducers","builder","addCase","fulfilled","table","pending","meta","arg","rejected","includes","count","page","pageSize","pageCount","firstUnreadMessgeID","ui","marker","filter","uuid","actions","inboxUiReducer","reducer","selectInboxState","inbox","inbo","selectInboxEntitiesState","entities","selectInboxUiState","inboxUi","selectConversationTabIndex","selectContactTableID","id","selectContactTable","selectThreadAssigningState","_","selectMessageMeta","status","firstUnreadMessageID","selectScrollTop","selectFirstUnreadMessageID","selectLoadingMessage","find","selectLoadingMessageIDs","reverse","map","selectShouldGoHomeValue","uiState"],"mappings":";AAAA,SAASA,cAAT,EAAyBC,WAAzB,QAA2D,kBAA3D;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,mBAArC;AAGA,SACEC,UADF,EACcC,cADd,EAC8BC,YAD9B,EAC4CC,iBAD5C,EAC+DC,mBAD/D,EAEEC,gBAFF,EAEoBC,mBAFpB,EAEyCC,WAFzC,EAEsDC,oBAFtD,EAE4EC,aAF5E,QAGO,UAHP;AAKA,OAAO,MAAMC,uBAAkD,GAAG;AAChEC,EAAAA,MAAM,EAAE,CADwD;AAEhEC,EAAAA,QAAQ,EAAE,CAFsD;AAGhEC,EAAAA,QAAQ,EAAE;AAHsD,CAA3D;AAMP,MAAMC,cAAc,GAAG;AACrBC,EAAAA,oBAAoB,EAAEL,uBAAuB,CAACE,QADzB;AAErBI,EAAAA,uBAAuB,EAAE,EAFJ;AAGrBC,EAAAA,cAAc,EAAE,KAHK;AAIrBC,EAAAA,iBAAiB,EAAE,KAJE;AAKrBC,EAAAA,WAAW,EAAE,EALQ;AAMrBC,EAAAA,aAAa,EAAE,EANM;AAOrBC,EAAAA,qBAAqB,EAAE,EAPF;AAQrBC,EAAAA,UAAU,EAAE,EARS;AASrBC,EAAAA,MAAM,EAAE,EATa;AAUrBC,EAAAA,WAAW,EAAEC,SAVQ;AAWrBC,EAAAA,eAAe,EAAE,EAXI;AAYrBC,EAAAA,iBAAiB,EAAE;AAZE,CAAvB;AAoBA,MAAMC,OAAO,GAAGhC,WAAW,CAAC;AAC1BiC,EAAAA,IAAI,EAAE,UADoB;AAE1BC,EAAAA,YAAY,EAAEhB,cAFY;AAG1BiB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,0BAA0B,CAACC,KAAD,EAAQC,MAAR,EAAqD;AAC7E,YAAM;AAAEC,QAAAA;AAAF,UAAeD,MAAM,CAACE,OAA5B;;AAEA,UAAID,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,IAAI,CAAjC,EAAoC;AAClCF,QAAAA,KAAK,CAAClB,oBAAN,GAA6BoB,QAA7B;AACD;AACF,KAPO;;AAQRE,IAAAA,YAAY,CAACJ,KAAD,EAAQ;AAClBA,MAAAA,KAAK,CAAChB,cAAN,GAAuB,KAAvB;AACD,KAVO;;AAWRqB,IAAAA,iBAAiB,CAACL,KAAD,EAAQ;AACvBA,MAAAA,KAAK,CAACf,iBAAN,GAA0B,KAA1B;AACD,KAbO;;AAcRqB,IAAAA,oBAAoB,CAACN,KAAD,EAAQ;AAC1BA,MAAAA,KAAK,CAACf,iBAAN,GAA0B,IAA1B;AACD,KAhBO;;AAiBRsB,IAAAA,eAAe,CAACP,KAAD,EAAQC,MAAR,EAAyE;AACtF,YAAM;AAAEO,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAA2BR,MAAM,CAACE,OAAxC;;AAEA,UAAIK,SAAS,IAAI,OAAOC,SAAP,KAAqB,QAAtC,EAAgD;AAC9CT,QAAAA,KAAK,CAACX,UAAN,CAAiBmB,SAAjB,IAA8BC,SAA9B;AAEA,cAAMC,iBAAiB,GAAG7C,SAAS,EAAnC;AACA6C,QAAAA,iBAAiB,IAAI5C,SAAS,iCACzB4C,iBADyB;AAE5BC,UAAAA,YAAY,kCACPD,iBADO,aACPA,iBADO,uBACPA,iBAAiB,CAAEC,YADZ;AAEV,aAACH,SAAD,GAAaC;AAFH;AAFgB,WAA9B;AAOD;AACF,KAhCO;;AAiCRG,IAAAA,iBAAiB,CAACZ,KAAD,EAAQC,MAAR,EAEb;AACF,YAAM;AAAEY,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAA6Bb,MAAM,CAACE,OAA1C;;AAEA,UAAIU,OAAO,IAAIC,aAAf,EAA8B;AAC5B,YAAI,CAACd,KAAK,CAACP,eAAN,CAAsBqB,aAAtB,CAAL,EAA2C;AACzCd,UAAAA,KAAK,CAACP,eAAN,CAAsBqB,aAAtB,IAAuC,EAAvC;AACD;;AACDd,QAAAA,KAAK,CAACP,eAAN,CAAsBqB,aAAtB,EAAqCC,IAArC,CAA0CF,OAA1C;AACD;AACF;;AA5CO,GAHgB;;AAiD1BG,EAAAA,aAAa,CAACC,OAAD,EAAU;AACrBA,IAAAA,OAAO,CACJC,OADH,CACW3C,oBAAoB,CAAC4C,SADhC,EAC2C,CAACnB,KAAD,EAAQC,MAAR,KAAmB;AAC1D,UAAIA,MAAM,CAACE,OAAX,EAAoB;AAClBH,QAAAA,KAAK,CAACjB,uBAAN,CAA8BkB,MAAM,CAACE,OAArC,IAAgD,IAAhD;AACD;AACF,KALH,EAMGe,OANH,CAMWnD,UAAU,CAACoD,SANtB,EAMiC,CAACnB,KAAD,EAAQC,MAAR,KAAmB;AAAA;;AAChD,6BAAIA,MAAM,CAACE,OAAX,4CAAI,gBAAgBiB,KAApB,EAA2B;AACzBpB,QAAAA,KAAK,CAACT,WAAN,GAAoBU,MAAM,CAACE,OAAP,CAAeiB,KAAnC;AACD;AACF,KAVH,EAWGF,OAXH,CAWWlD,cAAc,CAACmD,SAX1B,EAWqC,CAACnB,KAAD,EAAQC,MAAR,KAAmB;AAAA;;AACpD,8BAAIA,MAAM,CAACE,OAAX,6CAAI,iBAAgBiB,KAApB,EAA2B;AACzBpB,QAAAA,KAAK,CAACT,WAAN,GAAoBU,MAAM,CAACE,OAAP,CAAeiB,KAAnC;AACD;AACF,KAfH,EAgBGF,OAhBH,CAgBW1C,aAAa,CAAC2C,SAhBzB,EAgBoC,CAACnB,KAAD,EAAQC,MAAR,KAAmB;AAAA;;AACnD,8BAAIA,MAAM,CAACE,OAAX,6CAAI,iBAAgBiB,KAApB,EAA2B;AACzBpB,QAAAA,KAAK,CAACT,WAAN,GAAoBU,MAAM,CAACE,OAAP,CAAeiB,KAAnC;AACD;AACF,KApBH,EAqBGF,OArBH,CAqBW9C,gBAAgB,CAAC+C,SArB5B,EAqBuC,CAACnB,KAAD,EAAQC,MAAR,KAAmB;AACtD,UAAI,CAACrC,OAAO,CAACqC,MAAM,CAACE,OAAR,CAAZ,EAA8B;AAC5BH,QAAAA,KAAK,CAACX,UAAN,mCAAwBW,KAAK,CAACX,UAA9B,GAA6CY,MAAM,CAACE,OAApD;AACD;AACF,KAzBH,EA0BGe,OA1BH,CA0BW7C,mBA1BX,EA0BiC2B,KAAD,IAAW;AACvCA,MAAAA,KAAK,CAAChB,cAAN,GAAuB,IAAvB;AACD,KA5BH,EA6BGkC,OA7BH,CA6BWjD,YAAY,CAACoD,OA7BxB,EA6BiC,CAACrB,KAAD,EAAQC,MAAR,KAAmB;AAChDD,MAAAA,KAAK,CAACd,WAAN,CAAkBe,MAAM,CAACqB,IAAP,CAAYC,GAAZ,CAAgBf,SAAlC,IAA+C,SAA/C;AACD,KA/BH,EAgCGU,OAhCH,CAgCWjD,YAAY,CAACuD,QAhCxB,EAgCkC,CAACxB,KAAD,EAAQC,MAAR,KAAmB;AACjDD,MAAAA,KAAK,CAACd,WAAN,CAAkBe,MAAM,CAACqB,IAAP,CAAYC,GAAZ,CAAgBf,SAAlC,IAA+C,UAA/C;AACD,KAlCH,EAmCGU,OAnCH,CAmCWjD,YAAY,CAACkD,SAnCxB,EAmCmC,CAACnB,KAAD,EAAQC,MAAR,KAAmB;AAClDD,MAAAA,KAAK,CAACd,WAAN,CAAkBe,MAAM,CAACqB,IAAP,CAAYC,GAAZ,CAAgBf,SAAlC,IAA+C,WAA/C;AACD,KArCH,EAsCGU,OAtCH,CAsCWhD,iBAAiB,CAACiD,SAtC7B,EAsCwC,CAACnB,KAAD,EAAQC,MAAR,KAAmB;AACvD,UAAIA,MAAM,CAACE,OAAX,EAAoB;AAClBH,QAAAA,KAAK,CAACT,WAAN,GAAoBU,MAAM,CAACE,OAA3B;AACD;AACF,KA1CH,EA2CGe,OA3CH,CA2CW/C,mBAAmB,CAACkD,OA3C/B,EA2CwC,CAACrB,KAAD,EAAQC,MAAR,KAAmB;AACvD,YAAM;AAAEO,QAAAA;AAAF,UAAgBP,MAAM,CAACqB,IAAP,CAAYC,GAAlC;;AAEA,UAAIf,SAAS,IAAI,CAACA,SAAS,CAACiB,QAAV,CAAmB,SAAnB,CAAlB,EAAiD;AAC/CzB,QAAAA,KAAK,CAACb,aAAN,CAAoBqB,SAApB,IAAiC,SAAjC;AACAR,QAAAA,KAAK,CAACN,iBAAN,CAAwBc,SAAxB,IAAqC;AACnCkB,UAAAA,KAAK,EAAE,CAD4B;AAEnCC,UAAAA,IAAI,EAAE,CAF6B;AAGnCC,UAAAA,QAAQ,EAAE,CAHyB;AAInCC,UAAAA,SAAS,EAAE;AAJwB,SAArC;AAMA7B,QAAAA,KAAK,CAACZ,qBAAN,CAA4Ba,MAAM,CAACqB,IAAP,CAAYC,GAAZ,CAAgBf,SAA5C,IAAyD,IAAzD;AACD;AACF,KAxDH,EAyDGU,OAzDH,CAyDW/C,mBAAmB,CAACgD,SAzD/B,EAyD0C,CAACnB,KAAD,EAAQC,MAAR,KAAmB;AACzDD,MAAAA,KAAK,CAACb,aAAN,CAAoBc,MAAM,CAACqB,IAAP,CAAYC,GAAZ,CAAgBf,SAApC,IAAiD,WAAjD;AACA,YAAM;AAAEsB,QAAAA,mBAAF;AAAuBtB,QAAAA,SAAvB;AAAkCc,QAAAA;AAAlC,UAA2CrB,MAAM,CAACE,OAAP,CAAe4B,EAAf,IAAqB,EAAtE;;AACA,UAAIvB,SAAJ,EAAe;AACbR,QAAAA,KAAK,CAACZ,qBAAN,CAA4BoB,SAA5B,IAAyCsB,mBAAzC;AACA9B,QAAAA,KAAK,CAACN,iBAAN,CAAwBc,SAAxB,IAAqCc,IAArC;AACD;AACF,KAhEH,EAiEGJ,OAjEH,CAiEW5C,WAAW,CAAC6C,SAjEvB,EAiEkC,CAACnB,KAAD,EAAQC,MAAR,KAAmB;AAAA;;AACjD,YAAM;AAAE+B,QAAAA,MAAF;AAAUxB,QAAAA;AAAV,UAAwBP,MAAM,CAACqB,IAAP,CAAYC,GAA1C;AAEAvB,MAAAA,KAAK,CAACP,eAAN,CAAsBe,SAAtB,6BAAmCR,KAAK,CAACP,eAAN,CAAsBe,SAAtB,CAAnC,0DAAmC,sBAAkCyB,MAAlC,CACjC,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAcA,IAAI,KAAKF,MADU,CAAnC;AAGD,KAvEH;AAwED;;AA1HyB,CAAD,CAA3B;AA6HA,OAAO,MAAM;AACXjC,EAAAA,0BADW;AAEXK,EAAAA,YAFW;AAGXG,EAAAA,eAHW;AAIXK,EAAAA,iBAJW;AAKXN,EAAAA,oBALW;AAMXD,EAAAA;AANW,IAOTV,OAAO,CAACwC,OAPL;AASP,OAAO,MAAMC,cAAc,GAAGzC,OAAO,CAAC0C,OAA/B;AAEP,OAAO,MAAMC,gBAAgB,GAAG5E,cAAc,CAC3CsC,KAAD,IAAsBA,KAAK,CAACuC,KADgB,EAE3CC,IAAD,IAAUA,IAFkC,CAAvC;AAKP,OAAO,MAAMC,wBAAwB,GAAG/E,cAAc,CACpD4E,gBADoD,EACjCE,IAAD,IAAUA,IAAI,CAACE,QADmB,CAA/C;AAIP,OAAO,MAAMC,kBAAkB,GAAGjF,cAAc,CAC9C4E,gBAD8C,EAC3BE,IAAD,IAAUA,IAAI,CAACI,OADa,CAAzC;AAIP,OAAO,MAAMC,0BAA0B,GAAGnF,cAAc,CACtDiF,kBADsD,EAErDC,OAAD,IAAaA,OAAO,CAAC9D,oBAFiC,CAAjD;AAKP,OAAO,MAAMgE,oBAAoB,GAAGpF,cAAc,CAChDiF,kBADgD,EAE/CC,OAAD;AAAA;;AAAA,iCAAaA,OAAO,CAACrD,WAArB,yDAAa,qBAAqBwD,EAAlC;AAAA,CAFgD,CAA3C;AAKP,OAAO,MAAMC,kBAAkB,GAAGtF,cAAc,CAC9CiF,kBAD8C,EAE7CC,OAAD,IAAaA,OAAO,CAACrD,WAFyB,CAAzC;AAKP,OAAO,MAAM0D,0BAA0B,GAAGvF,cAAc,CACtDiF,kBADsD,EAEtD,CAACO,CAAD,EAAe1C,SAAf,KAAqCA,SAFiB,EAGtD,CAACoC,OAAD,EAAUpC,SAAV,KAAwBoC,OAAO,CAAC1D,WAAR,CAAoBsB,SAApB,CAH8B,CAAjD;AAMP,OAAO,MAAM2C,iBAAiB,GAAGzF,cAAc,CAC7C,CAACwF,CAAD,EAAe/C,OAAf,KAAkDA,OAAO,CAACK,SADb,EAE7CmC,kBAF6C,EAG7C,CAACnC,SAAD,EAAYoC,OAAZ,MAAyB;AACvBQ,EAAAA,MAAM,EAAER,OAAO,CAACzD,aAAR,CAAsBqB,SAAtB,CADe;AAEvBc,EAAAA,IAAI,EAAEsB,OAAO,CAAClD,iBAAR,CAA0Bc,SAA1B,CAFiB;AAGvB6C,EAAAA,oBAAoB,EAAET,OAAO,CAACxD,qBAAR,CAA8BoB,SAA9B;AAHC,CAAzB,CAH6C,CAAxC;AAUP,OAAO,MAAM8C,eAAe,GAAG5F,cAAc,CAC3C,CAACwF,CAAD,EAAe/C,OAAf,KAAkDA,OAAO,CAACK,SADf,EAE3CmC,kBAF2C,EAG3C,CAACnC,SAAD,EAAYoC,OAAZ,KAAwBA,OAAO,CAACvD,UAAR,CAAmBmB,SAAnB,CAHmB,CAAtC;AAMP,OAAO,MAAM+C,0BAA0B,GAAG7F,cAAc,CACtD,CAACwF,CAAD,EAAe/C,OAAf,KAAkDA,OAAO,CAACK,SADJ,EAEtDmC,kBAFsD,EAGtD,CAACnC,SAAD,EAAYoC,OAAZ,KAAwBA,OAAO,CAACxD,qBAAR,CAA8BoB,SAA9B,CAH8B,CAAjD;AAMP,OAAO,MAAMgD,oBAAoB,GAAG9F,cAAc,CAChD,CAACwF,CAAD,EAAe/C,OAAf,KAAsDA,OAAO,CAACW,aADd,EAEhD,CAACoC,CAAD,EAAe/C,OAAf,KAAkDA,OAAO,CAACK,SAFV,EAGhDmC,kBAHgD,EAIhD,CAAC7B,aAAD,EAAgBN,SAAhB,EAA2BoC,OAA3B,KAAuCA,OAAO,CAACnD,eAAR,CAAwBe,SAAxB,EAAmCiD,IAAnC,CAAwC,CAAC;AAAEvB,EAAAA;AAAF,CAAD,KAAcA,IAAI,KAAKpB,aAA/D,CAJS,CAA3C;AAOP,OAAO,MAAM4C,uBAAuB,GAAGhG,cAAc,CACnD,CAACwF,CAAD,EAAe/C,OAAf,KAAkDA,OAAO,CAACK,SADP,EAEnDmC,kBAFmD,EAGnD,CAACnC,SAAD,EAAYoC,OAAZ,KACE,CAAC,IAAIA,OAAO,CAACnD,eAAR,CAAwBe,SAAxB,KAAuC,EAA3C,CAAD,CADsB,CAEtBmD,OAFsB,GAEZC,GAFY,CAGtB,CAAC;AAAE1B,EAAAA;AAAF,CAAD,KAAcA,IAHQ,CAH2B,CAA9C;AAUP,OAAO,MAAM2B,uBAAuB,GAAGnG,cAAc,CACnDiF,kBADmD,EAEnDmB,OAAO,IAAIA,OAAO,CAAC7E,iBAFgC,CAA9C","sourcesContent":["import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { isEmpty } from 'lodash';\nimport { RootState } from '../../../../root';\nimport { loadState, saveState } from '../../../../utils';\nimport { TablePropertiesOptions } from '../../tables';\nimport { MessageSchema } from '../inbox.types';\nimport {\n  addContact, addTableColumn, assignThread, fetchContactTable, fetchThreadMessages,\n  loadScrollMemory, onNewWebsocketEvent, sendMessage, subscribeToWebsocket, updateContact\n} from './global';\n\nexport const conversationTabControls: { [key: string]: number } = {\n  queued: 0,\n  assigned: 1,\n  resolved: 2\n};\n\nconst uiInitialState = {\n  conversationTabIndex: conversationTabControls.assigned,\n  websocketSubscribedOrgs: {} as ({ [k: string]: boolean }),\n  shouldPopSound: false,\n  shouldGoInboxHome: false,\n  isAssigning: {} as ({ [k: string]: 'pending' | 'fulfilled' | 'rejected' }),\n  messageStatus: {} as ({ [k: string]: 'pending' | 'fulfilled' | 'rejected' }),\n  firstUnreadMessageIDs: {} as ({ [k: string]: string | null }),\n  scrollTops: {} as ({ [k: string]: number }), \n  errors: {} as ({ [k: string]: string }),\n  contacTable: undefined as (TablePropertiesOptions | undefined),\n  loadingMessages: {} as { [k: string]: MessageSchema[] },\n  threadMessageMeta: {} as { [k: string]: ({\n    count: number;\n    pageSize: number;\n    pageCount: number;\n    page: number;\n  })},\n};\n\nconst uiSlice = createSlice({\n  name: 'inbox_ui',\n  initialState: uiInitialState,\n  reducers: {\n    changeConversationTabIndex(state, action: PayloadAction<{ tabIndex: number }>) {\n      const { tabIndex } = action.payload;\n\n      if (tabIndex >= 0 && tabIndex <= 2) {\n        state.conversationTabIndex = tabIndex;\n      }\n    },\n    stopPopSound(state) {\n      state.shouldPopSound = false;\n    },\n    resetShouldGoHome(state) {\n      state.shouldGoInboxHome = false;\n    },\n    onOrganisationSwitch(state) {\n      state.shouldGoInboxHome = true;\n    },\n    updateScrollTop(state, action: PayloadAction<{ thread_id: string, scrollTop: number }>) {\n      const { thread_id, scrollTop } = action.payload;\n\n      if (thread_id && typeof scrollTop === 'number') {\n        state.scrollTops[thread_id] = scrollTop;\n\n        const currentLocalState = loadState();\n        currentLocalState && saveState({\n          ...currentLocalState,\n          scrollMemory: {\n            ...currentLocalState?.scrollMemory,\n            [thread_id]: scrollTop\n          }\n        });\n      }\n    },\n    addLoadingMessage(state, action: PayloadAction<{\n      message: MessageSchema, messageMarker: string\n    }>) {\n      const { message, messageMarker } = action.payload;\n\n      if (message && messageMarker) {\n        if (!state.loadingMessages[messageMarker]) {\n          state.loadingMessages[messageMarker] = [];\n        }\n        state.loadingMessages[messageMarker].push(message);\n      }\n    },\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(subscribeToWebsocket.fulfilled, (state, action) => {\n        if (action.payload) {\n          state.websocketSubscribedOrgs[action.payload] = true;\n        }\n      })\n      .addCase(addContact.fulfilled, (state, action) => {\n        if (action.payload?.table) {\n          state.contacTable = action.payload.table;\n        }\n      })\n      .addCase(addTableColumn.fulfilled, (state, action) => {\n        if (action.payload?.table) {\n          state.contacTable = action.payload.table;\n        }\n      })\n      .addCase(updateContact.fulfilled, (state, action) => {\n        if (action.payload?.table) {\n          state.contacTable = action.payload.table;\n        }\n      })\n      .addCase(loadScrollMemory.fulfilled, (state, action) => {\n        if (!isEmpty(action.payload)) {\n          state.scrollTops = { ...state.scrollTops, ...action.payload };\n        }\n      })\n      .addCase(onNewWebsocketEvent, (state) => {\n        state.shouldPopSound = true;\n      })\n      .addCase(assignThread.pending, (state, action) => {\n        state.isAssigning[action.meta.arg.thread_id] = 'pending';\n      })\n      .addCase(assignThread.rejected, (state, action) => {\n        state.isAssigning[action.meta.arg.thread_id] = 'rejected';\n      })\n      .addCase(assignThread.fulfilled, (state, action) => {\n        state.isAssigning[action.meta.arg.thread_id] = 'fulfilled';\n      })\n      .addCase(fetchContactTable.fulfilled, (state, action) => {\n        if (action.payload) {\n          state.contacTable = action.payload;\n        }\n      })\n      .addCase(fetchThreadMessages.pending, (state, action) => {\n        const { thread_id } = action.meta.arg;\n\n        if (thread_id && !thread_id.includes('unknown')) {\n          state.messageStatus[thread_id] = 'pending';\n          state.threadMessageMeta[thread_id] = {\n            count: 0,\n            page: 0,\n            pageSize: 0,\n            pageCount: 0,\n          };\n          state.firstUnreadMessageIDs[action.meta.arg.thread_id] = null;\n        }\n      })\n      .addCase(fetchThreadMessages.fulfilled, (state, action) => {\n        state.messageStatus[action.meta.arg.thread_id] = 'fulfilled';\n        const { firstUnreadMessgeID, thread_id, meta } = action.payload.ui || {};\n        if (thread_id) {\n          state.firstUnreadMessageIDs[thread_id] = firstUnreadMessgeID;\n          state.threadMessageMeta[thread_id] = meta;\n        }\n      })\n      .addCase(sendMessage.fulfilled, (state, action) => {\n        const { marker, thread_id } = action.meta.arg;\n        \n        state.loadingMessages[thread_id] = state.loadingMessages[thread_id]?.filter(\n          ({ uuid }) => uuid !== marker\n        );\n      });\n  },\n});\n\nexport const {\n  changeConversationTabIndex,\n  stopPopSound,\n  updateScrollTop,\n  addLoadingMessage,\n  onOrganisationSwitch,\n  resetShouldGoHome,\n} = uiSlice.actions;\n\nexport const inboxUiReducer = uiSlice.reducer;\n\nexport const selectInboxState = createSelector(\n  (state: RootState) => state.inbox,\n  (inbo) => inbo\n);\n\nexport const selectInboxEntitiesState = createSelector(\n  selectInboxState, (inbo) => inbo.entities\n);\n\nexport const selectInboxUiState = createSelector(\n  selectInboxState, (inbo) => inbo.inboxUi\n);\n\nexport const selectConversationTabIndex = createSelector(\n  selectInboxUiState,\n  (inboxUi) => inboxUi.conversationTabIndex\n);\n\nexport const selectContactTableID = createSelector(\n  selectInboxUiState,\n  (inboxUi) => inboxUi.contacTable?.id\n);\n\nexport const selectContactTable = createSelector(\n  selectInboxUiState,\n  (inboxUi) => inboxUi.contacTable\n);\n\nexport const selectThreadAssigningState = createSelector(\n  selectInboxUiState,\n  (_: RootState, thread_id: string) => thread_id,\n  (inboxUi, thread_id) => inboxUi.isAssigning[thread_id]\n);\n\nexport const selectMessageMeta = createSelector(\n  (_: RootState, payload: { thread_id: string }) => payload.thread_id,\n  selectInboxUiState,\n  (thread_id, inboxUi) => ({\n    status: inboxUi.messageStatus[thread_id],\n    meta: inboxUi.threadMessageMeta[thread_id],\n    firstUnreadMessageID: inboxUi.firstUnreadMessageIDs[thread_id],\n  })\n);\n\nexport const selectScrollTop = createSelector(\n  (_: RootState, payload: { thread_id: string }) => payload.thread_id,\n  selectInboxUiState,\n  (thread_id, inboxUi) => inboxUi.scrollTops[thread_id]\n);\n\nexport const selectFirstUnreadMessageID = createSelector(\n  (_: RootState, payload: { thread_id: string }) => payload.thread_id,\n  selectInboxUiState,\n  (thread_id, inboxUi) => inboxUi.firstUnreadMessageIDs[thread_id]\n)\n\nexport const selectLoadingMessage = createSelector(\n  (_: RootState, payload: { messageMarker: string }) => payload.messageMarker,\n  (_: RootState, payload: { thread_id: string }) => payload.thread_id,\n  selectInboxUiState,\n  (messageMarker, thread_id, inboxUi) => inboxUi.loadingMessages[thread_id].find(({ uuid }) => uuid === messageMarker)\n);\n\nexport const selectLoadingMessageIDs = createSelector(\n  (_: RootState, payload: { thread_id: string }) => payload.thread_id,\n  selectInboxUiState,\n  (thread_id, inboxUi) => (\n    [...(inboxUi.loadingMessages[thread_id] || ([] as MessageSchema[]))]\n  ).reverse().map(\n    ({ uuid }) => uuid\n  )\n);\n\nexport const selectShouldGoHomeValue = createSelector(\n  selectInboxUiState,\n  uiState => uiState.shouldGoInboxHome\n);\n"]},"metadata":{},"sourceType":"module"}