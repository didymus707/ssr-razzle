{"ast":null,"code":"var _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/marketing/campaigns/analytics.ui.tsx\";\nvar __jsx = React.createElement;\nimport { Box, Icon, Progress, Stack, Text, useDisclosure } from '@chakra-ui/core';\nimport { format } from 'date-fns';\nimport * as React from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useLoading } from '../../../../hooks';\nimport { ContentWrapper, EmptyState, Button, Subtitle } from 'app/components';\nimport { BottomCard, CampaignMetaModal } from './components';\nimport { Line } from 'react-chartjs-2';\nimport emailSent from './assets/email-sent.svg';\nimport { numberWithCommas } from '../../../../utils';\nexport const CampaginAnalyticsUI = props => {\n  const {\n    history,\n    campaign,\n    fetchCampaign\n  } = props;\n  const {\n    id: routeID\n  } = useParams();\n  const {\n    name,\n    clicks,\n    reports,\n    total_sent,\n    total_dnd,\n    total_delivered,\n    created_datetime\n  } = campaign;\n  const createdTime = created_datetime && format(new Date(created_datetime), 'MMMM dd yyyy');\n  const conversionRate = clicks !== null && clicks !== void 0 && clicks.total_clicks && total_sent ? Math.ceil((clicks === null || clicks === void 0 ? void 0 : clicks.total_clicks) / total_sent * 100) : 0;\n  const {\n    dispatch\n  } = useLoading();\n  const {\n    isOpen: isCreateCampaignModalOpen,\n    onClose: onCloseCreateCampaignModal,\n    onOpen: onOpenCreateCampaignModal\n  } = useDisclosure();\n  React.useEffect(() => {\n    let mounted = true;\n\n    if (routeID) {\n      const fetchData = async () => {\n        try {\n          dispatch({\n            type: 'GLOBAL_LOADING_STARTED'\n          });\n          await fetchCampaign(routeID, true);\n\n          if (mounted) {\n            dispatch({\n              type: 'GLOBAL_LOADING_RESOLVED'\n            });\n          }\n        } catch (error) {\n          dispatch({\n            type: 'GLOBAL_LOADING_RESOLVED'\n          });\n        }\n      };\n\n      fetchData();\n    }\n\n    return () => {\n      mounted = false;\n    };\n  }, [routeID, fetchCampaign, dispatch]);\n  React.useEffect(() => {\n    let mounted = true;\n\n    if (routeID) {\n      const fetchStatsData = async () => {\n        try {\n          dispatch({\n            type: 'GLOBAL_LOADING_STARTED'\n          });\n\n          if (mounted) {\n            dispatch({\n              type: 'GLOBAL_LOADING_RESOLVED'\n            });\n          }\n        } catch (error) {\n          dispatch({\n            type: 'GLOBAL_LOADING_RESOLVED'\n          });\n        }\n      };\n\n      fetchStatsData();\n    }\n\n    return () => {\n      mounted = false;\n    };\n  }, [dispatch, routeID]);\n\n  function handleCreateOneTimeCampaign() {\n    history.push('/s/marketing/campaigns/new/one-time-campaign');\n  }\n\n  function handleABTestCampaign() {\n    history.push('/s/marketing/campaigns/new/ab-test-campaign');\n  }\n\n  return __jsx(ContentWrapper, {\n    paddingBottom: ['12rem', '12rem', '8rem'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    paddingX: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    isInline: true,\n    spacing: \"1rem\",\n    alignItems: \"center\",\n    pt: \"0.8rem\",\n    pb: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, __jsx(Link, {\n    to: \"/s/marketing/campaigns\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, __jsx(Icon, {\n    name: \"arrow-back\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }))), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, __jsx(Subtitle, {\n    color: \"blue.500\",\n    fontSize: \"1.25rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, name)), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    color: \"#595e8a\",\n    fontSize: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, createdTime))), reports && __jsx(BottomCard, {\n    label: \"Engagement Details\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, __jsx(Line, {\n    height: 80,\n    data: {\n      labels: Object.keys(reports).sort((a, b) => {\n        const dateA = a && new Date(a).getTime();\n        const dateB = b && new Date(b).getTime();\n\n        if (dateA && dateB) {\n          return dateA - dateB;\n        }\n\n        return 0;\n      }).map(i => format(new Date(i), 'dd/MM')),\n      datasets: [{\n        fill: false,\n        label: 'No. of clicks',\n        backgroundColor: 'rgb(255, 99, 132)',\n        borderColor: 'rgba(255, 99, 132, 0.2)',\n        data: Object.keys(reports).sort((a, b) => {\n          const dateA = a && new Date(a).getTime();\n          const dateB = b && new Date(b).getTime();\n\n          if (dateA && dateB) {\n            return dateA - dateB;\n          }\n\n          return 0;\n        }).map(i => reports[i].total_click | 0)\n      }]\n    },\n    options: {\n      scales: {\n        yAxes: [{\n          ticks: {\n            beginAtZero: true\n          }\n        }]\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  })), __jsx(Stack, {\n    isInline: true,\n    pb: \"80px\",\n    height: \"400px\",\n    flexWrap: \"wrap\",\n    spacing: ['0', '0', '0', '1rem'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, __jsx(BottomCard, {\n    label: \"Conversion Details\",\n    width: ['100%', '100%', '100%', 'calc(50% - 0.5rem)'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, __jsx(Stack, {\n    pt: \"1rem\",\n    spacing: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 15\n    }\n  }, __jsx(Text, {\n    width: \"25%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }\n  }, \"SMS Sent\"), __jsx(Progress, {\n    flex: 1,\n    size: \"sm\",\n    width: \"100%\",\n    rounded: \"100px\",\n    value: total_sent ? total_sent / total_sent * 100 : 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }\n  }), __jsx(Text, {\n    width: \"25%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  }, total_sent ? total_sent / total_sent * 100 : 0, \"% (\", numberWithCommas(total_sent), \")\")), __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 15\n    }\n  }, __jsx(Text, {\n    width: \"25%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }, \"SMS Delivered\"), __jsx(Progress, {\n    flex: 1,\n    size: \"sm\",\n    width: \"100%\",\n    rounded: \"100px\",\n    value: total_delivered && total_sent ? total_delivered / total_sent * 100 : 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 17\n    }\n  }), __jsx(Text, {\n    width: \"25%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }, Math.ceil(total_delivered && total_sent ? total_delivered / total_sent * 100 : 0), \"% (\", numberWithCommas(total_delivered), \")\")), __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 15\n    }\n  }, __jsx(Text, {\n    width: \"25%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 17\n    }\n  }, \"SMS DND\"), __jsx(Progress, {\n    flex: 1,\n    size: \"sm\",\n    width: \"100%\",\n    rounded: \"100px\",\n    value: total_dnd && total_sent ? total_dnd / total_sent * 100 : 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 17\n    }\n  }), __jsx(Text, {\n    width: \"25%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }\n  }, Math.ceil(total_dnd && total_sent ? total_dnd / total_sent * 100 : 0), \"% (\", numberWithCommas(total_dnd), \")\")), __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 15\n    }\n  }, __jsx(Text, {\n    width: \"25%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 17\n    }\n  }, \"Links Opened\"), __jsx(Progress, {\n    flex: 1,\n    size: \"sm\",\n    width: \"100%\",\n    rounded: \"100px\",\n    value: clicks !== null && clicks !== void 0 && clicks.total_clicks && total_sent ? (clicks === null || clicks === void 0 ? void 0 : clicks.total_clicks) / total_sent * 100 : 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }\n  }), __jsx(Text, {\n    width: \"25%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 17\n    }\n  }, Math.ceil(clicks !== null && clicks !== void 0 && clicks.total_clicks && total_sent ? (clicks === null || clicks === void 0 ? void 0 : clicks.total_clicks) / total_sent * 100 : 0), \"% (\", numberWithCommas(clicks === null || clicks === void 0 ? void 0 : clicks.total_clicks), \")\")), __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 15\n    }\n  }, __jsx(Text, {\n    width: \"25%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 17\n    }\n  }, \"Conversion\"), __jsx(Progress, {\n    flex: 1,\n    size: \"sm\",\n    width: \"100%\",\n    rounded: \"100px\",\n    value: conversionRate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 17\n    }\n  }), __jsx(Text, {\n    width: \"25%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 17\n    }\n  }, conversionRate, \"%\")), __jsx(Text, {\n    fontWeight: \"normal\",\n    fontSize: \"0.7rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 15\n    }\n  }, \"Conversion = links opened % sent\"))), __jsx(BottomCard, {\n    width: ['100%', '100%', '100%', 'calc(50% - 0.5rem)'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 11\n    }\n  }, __jsx(EmptyState, {\n    width: \"400px\",\n    imageSize: \"100px\",\n    image: emailSent,\n    heading: \"Ready to send your next campaign?\",\n    subheading: \"Send campaigns to your lists, segments or new audiences.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    variantColor: \"blue\",\n    onClick: onOpenCreateCampaignModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 15\n    }\n  }, \"Create campaign\"))))), __jsx(CampaignMetaModal, {\n    title: \"Create a campaign\",\n    isOpen: isCreateCampaignModalOpen,\n    onClose: onCloseCreateCampaignModal,\n    options: [{\n      icon: 'single-campaign',\n      title: 'One-time message',\n      caption: 'Keep subscribers engaged and drive revenue by sharing your latest news or promoting a product or sale.',\n      onSelect: handleCreateOneTimeCampaign,\n      showButton: false\n    }, {\n      icon: 'multi-campaign',\n      title: 'A/B test',\n      caption: 'Send up to four variants of a single message, testing text or images to determine which perform best.',\n      onSelect: handleABTestCampaign,\n      showButton: false\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/marketing/campaigns/analytics.ui.tsx"],"names":["Box","Icon","Progress","Stack","Text","useDisclosure","format","React","Link","useParams","useLoading","ContentWrapper","EmptyState","Button","Subtitle","BottomCard","CampaignMetaModal","Line","emailSent","numberWithCommas","CampaginAnalyticsUI","props","history","campaign","fetchCampaign","id","routeID","name","clicks","reports","total_sent","total_dnd","total_delivered","created_datetime","createdTime","Date","conversionRate","total_clicks","Math","ceil","dispatch","isOpen","isCreateCampaignModalOpen","onClose","onCloseCreateCampaignModal","onOpen","onOpenCreateCampaignModal","useEffect","mounted","fetchData","type","error","fetchStatsData","handleCreateOneTimeCampaign","push","handleABTestCampaign","labels","Object","keys","sort","a","b","dateA","getTime","dateB","map","i","datasets","fill","label","backgroundColor","borderColor","data","total_click","scales","yAxes","ticks","beginAtZero","icon","title","caption","onSelect","showButton"],"mappings":"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","sourcesContent":["import { Box, Icon, Progress, Stack, Text, useDisclosure } from '@chakra-ui/core';\nimport { format } from 'date-fns';\nimport * as React from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useLoading } from '../../../../hooks';\nimport { ContentWrapper, EmptyState, Button, Subtitle } from 'app/components';\nimport { CampaignAnalyticsUIProps } from './analytics.types';\nimport { BottomCard, CampaignMetaModal } from './components';\nimport { Line } from 'react-chartjs-2';\nimport emailSent from './assets/email-sent.svg';\nimport { numberWithCommas } from '../../../../utils';\n\nexport const CampaginAnalyticsUI = (props: CampaignAnalyticsUIProps) => {\n  const { history, campaign, fetchCampaign } = props;\n  const { id: routeID } = useParams<{ id: string }>();\n\n  const {\n    name,\n    clicks,\n    reports,\n    total_sent,\n    total_dnd,\n    total_delivered,\n    created_datetime,\n  } = campaign;\n\n  const createdTime = created_datetime && format(new Date(created_datetime), 'MMMM dd yyyy');\n  const conversionRate =\n    clicks?.total_clicks && total_sent ? Math.ceil((clicks?.total_clicks / total_sent) * 100) : 0;\n\n  const { dispatch } = useLoading();\n  const {\n    isOpen: isCreateCampaignModalOpen,\n    onClose: onCloseCreateCampaignModal,\n    onOpen: onOpenCreateCampaignModal,\n  } = useDisclosure();\n\n  React.useEffect(() => {\n    let mounted = true;\n\n    if (routeID) {\n      const fetchData = async () => {\n        try {\n          dispatch({ type: 'GLOBAL_LOADING_STARTED' });\n          await fetchCampaign(routeID, true);\n          if (mounted) {\n            dispatch({ type: 'GLOBAL_LOADING_RESOLVED' });\n          }\n        } catch (error) {\n          dispatch({ type: 'GLOBAL_LOADING_RESOLVED' });\n        }\n      };\n      fetchData();\n    }\n    return () => {\n      mounted = false;\n    };\n  }, [routeID, fetchCampaign, dispatch]);\n\n  React.useEffect(() => {\n    let mounted = true;\n\n    if (routeID) {\n      const fetchStatsData = async () => {\n        try {\n          dispatch({ type: 'GLOBAL_LOADING_STARTED' });\n\n          if (mounted) {\n            dispatch({ type: 'GLOBAL_LOADING_RESOLVED' });\n          }\n        } catch (error) {\n          dispatch({ type: 'GLOBAL_LOADING_RESOLVED' });\n        }\n      };\n      fetchStatsData();\n    }\n\n    return () => {\n      mounted = false;\n    };\n  }, [dispatch, routeID]);\n\n  function handleCreateOneTimeCampaign() {\n    history.push('/s/marketing/campaigns/new/one-time-campaign');\n  }\n\n  function handleABTestCampaign() {\n    history.push('/s/marketing/campaigns/new/ab-test-campaign');\n  }\n\n  return (\n    <ContentWrapper paddingBottom={['12rem', '12rem', '8rem']}>\n      <Box paddingX=\"1.5rem\">\n        <Stack isInline spacing=\"1rem\" alignItems=\"center\" pt=\"0.8rem\" pb=\"2rem\">\n          <Box>\n            <Link to=\"/s/marketing/campaigns\">\n              <Icon name=\"arrow-back\" />\n            </Link>\n          </Box>\n          <Box>\n            <Subtitle color=\"blue.500\" fontSize=\"1.25rem\">\n              {name}\n            </Subtitle>\n          </Box>\n          <Box>\n            <Text color=\"#595e8a\" fontSize=\"1rem\">\n              {createdTime}\n            </Text>\n          </Box>\n        </Stack>\n\n        {reports && (\n          <BottomCard label=\"Engagement Details\">\n            <Line\n              height={80}\n              data={{\n                labels: Object.keys(reports)\n                  .sort((a, b) => {\n                    const dateA = a && new Date(a).getTime();\n                    const dateB = b && new Date(b).getTime();\n                    if (dateA && dateB) {\n                      return dateA - dateB;\n                    }\n                    return 0;\n                  })\n                  .map((i: any) => format(new Date(i), 'dd/MM')),\n                datasets: [\n                  {\n                    fill: false,\n                    label: 'No. of clicks',\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    borderColor: 'rgba(255, 99, 132, 0.2)',\n                    data: Object.keys(reports)\n                      .sort((a, b) => {\n                        const dateA = a && new Date(a).getTime();\n                        const dateB = b && new Date(b).getTime();\n                        if (dateA && dateB) {\n                          return dateA - dateB;\n                        }\n                        return 0;\n                      })\n                      .map((i: any) => reports[i].total_click | 0),\n                  },\n                ],\n              }}\n              options={{\n                scales: {\n                  yAxes: [\n                    {\n                      ticks: {\n                        beginAtZero: true,\n                      },\n                    },\n                  ],\n                },\n              }}\n            />\n          </BottomCard>\n        )}\n        <Stack isInline pb=\"80px\" height=\"400px\" flexWrap=\"wrap\" spacing={['0', '0', '0', '1rem']}>\n          <BottomCard\n            label=\"Conversion Details\"\n            width={['100%', '100%', '100%', 'calc(50% - 0.5rem)']}\n          >\n            <Stack pt=\"1rem\" spacing=\"1.5rem\">\n              {/* <Stack isInline alignItems=\"center\">\n                <Text width=\"25%\">Audience</Text>\n                <Text fontWeight=\"700\">{numberWithCommas(audience?.count ?? 0)}</Text>\n              </Stack> */}\n              <Stack isInline alignItems=\"center\">\n                <Text width=\"25%\">SMS Sent</Text>\n                <Progress\n                  flex={1}\n                  size=\"sm\"\n                  width=\"100%\"\n                  rounded=\"100px\"\n                  value={total_sent ? (total_sent / total_sent) * 100 : 0}\n                />\n                <Text width=\"25%\">\n                  {total_sent ? (total_sent / total_sent) * 100 : 0}% (\n                  {numberWithCommas(total_sent)})\n                </Text>\n              </Stack>\n              <Stack isInline alignItems=\"center\">\n                <Text width=\"25%\">SMS Delivered</Text>\n                <Progress\n                  flex={1}\n                  size=\"sm\"\n                  width=\"100%\"\n                  rounded=\"100px\"\n                  value={total_delivered && total_sent ? (total_delivered / total_sent) * 100 : 0}\n                />\n                <Text width=\"25%\">\n                  {Math.ceil(\n                    total_delivered && total_sent ? (total_delivered / total_sent) * 100 : 0,\n                  )}\n                  % ({numberWithCommas(total_delivered)})\n                </Text>\n              </Stack>\n              <Stack isInline alignItems=\"center\">\n                <Text width=\"25%\">SMS DND</Text>\n                <Progress\n                  flex={1}\n                  size=\"sm\"\n                  width=\"100%\"\n                  rounded=\"100px\"\n                  value={total_dnd && total_sent ? (total_dnd / total_sent) * 100 : 0}\n                />\n                <Text width=\"25%\">\n                  {Math.ceil(total_dnd && total_sent ? (total_dnd / total_sent) * 100 : 0)}% (\n                  {numberWithCommas(total_dnd)})\n                </Text>\n              </Stack>\n              <Stack isInline alignItems=\"center\">\n                <Text width=\"25%\">Links Opened</Text>\n                <Progress\n                  flex={1}\n                  size=\"sm\"\n                  width=\"100%\"\n                  rounded=\"100px\"\n                  value={\n                    clicks?.total_clicks && total_sent\n                      ? (clicks?.total_clicks / total_sent) * 100\n                      : 0\n                  }\n                />\n                <Text width=\"25%\">\n                  {Math.ceil(\n                    clicks?.total_clicks && total_sent\n                      ? (clicks?.total_clicks / total_sent) * 100\n                      : 0,\n                  )}\n                  % ({numberWithCommas(clicks?.total_clicks)})\n                </Text>\n              </Stack>\n              <Stack isInline alignItems=\"center\">\n                <Text width=\"25%\">Conversion</Text>\n                <Progress flex={1} size=\"sm\" width=\"100%\" rounded=\"100px\" value={conversionRate} />\n                <Text width=\"25%\">{conversionRate}%</Text>\n              </Stack>\n              <Text fontWeight=\"normal\" fontSize=\"0.7rem\">\n                Conversion = links opened % sent\n              </Text>\n            </Stack>\n          </BottomCard>\n          <BottomCard width={['100%', '100%', '100%', 'calc(50% - 0.5rem)']}>\n            <EmptyState\n              width=\"400px\"\n              imageSize=\"100px\"\n              image={emailSent}\n              heading=\"Ready to send your next campaign?\"\n              subheading=\"Send campaigns to your lists, segments or new audiences.\"\n            >\n              <Button variantColor=\"blue\" onClick={onOpenCreateCampaignModal}>\n                Create campaign\n              </Button>\n            </EmptyState>\n          </BottomCard>\n        </Stack>\n      </Box>\n      <CampaignMetaModal\n        title=\"Create a campaign\"\n        isOpen={isCreateCampaignModalOpen}\n        onClose={onCloseCreateCampaignModal}\n        options={[\n          {\n            icon: 'single-campaign',\n            title: 'One-time message',\n            caption:\n              'Keep subscribers engaged and drive revenue by sharing your latest news or promoting a product or sale.',\n            onSelect: handleCreateOneTimeCampaign,\n            showButton: false,\n          },\n          {\n            icon: 'multi-campaign',\n            title: 'A/B test',\n            caption:\n              'Send up to four variants of a single message, testing text or images to determine which perform best.',\n            onSelect: handleABTestCampaign,\n            showButton: false,\n          },\n        ]}\n      />\n    </ContentWrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}