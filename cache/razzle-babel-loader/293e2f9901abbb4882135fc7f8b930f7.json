{"ast":null,"code":"var _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/component/lists/components/data-models/create-data-model/stages/schema-summary.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Box, Divider, Input, useToast } from '@chakra-ui/core/dist';\nimport { Select, Input as Input2, Button, ToastBox } from 'app/components';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router';\nconst validationSchema = yup.object().shape({\n  name: yup.string().required('Connection name is required')\n});\n\nconst estimateDataType = dataType => {\n  if (dataType.toLowerCase().includes('var')) return 'TEXT';\n  if (['int', 'float', 'decimal'].includes(dataType.toLowerCase())) return 'NUMBER';\n  if (dataType.toLowerCase().includes('time')) return 'DATE';\n  return 'TEXT';\n};\n\nexport const SchemaSummary = props => {\n  const {\n    0: columns,\n    1: setColumns\n  } = useState([]);\n  const {\n    addedColumns,\n    selectedResource\n  } = props;\n  const toast = useToast();\n  const routerHistory = useHistory();\n\n  const proceed = async values => {\n    setSubmitting(true);\n    const relationships = [];\n    Object.values(addedColumns).forEach(i => {\n      if (i.relationship) {\n        relationships.push(i.relationship);\n      }\n    });\n\n    const payload = _objectSpread(_objectSpread({}, values), {}, {\n      resource: selectedResource,\n      columns,\n      relationships\n    });\n\n    try {\n      await props.createDataModel(payload);\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          status: \"success\",\n          onClose: onClose,\n          message: \"Data model created successfully\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 11\n          }\n        })\n      });\n      routerHistory.push('/s/lists/data-models');\n      setSubmitting(false);\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          status: \"error\",\n          onClose: onClose,\n          message: e,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 34\n          }\n        })\n      });\n      setSubmitting(false);\n    }\n  };\n\n  useEffect(() => {\n    let _columns = [];\n    Object.values(addedColumns).forEach(i => {\n      _columns.push(...i.columns.map(j => ({\n        source: i.table_name,\n        code: j.value,\n        key: `${i.table_name}.${j.value}`,\n        name: j.value,\n        kind: 'plain',\n        data_type: estimateDataType(j.data_type)\n      })));\n    });\n    setColumns(_columns);\n  }, [addedColumns]);\n  const formik = useFormik({\n    validationSchema: validationSchema,\n    initialValues: {\n      name: '',\n      description: ''\n    },\n    onSubmit: proceed\n  });\n  const {\n    values,\n    errors,\n    handleChange,\n    handleBlur,\n    handleReset,\n    isSubmitting,\n    setSubmitting\n  } = formik;\n  return __jsx(React.Fragment, null, __jsx(Box, {\n    className: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, \"Review the summary of your data model schema and make any changes you might need to\"), __jsx(Box, {\n    my: \"2rem\",\n    color: \"#333333\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, __jsx(Input2, {\n    label: \"Name\",\n    name: \"name\",\n    mb: \"1.5rem\",\n    placeholder: \"A distinct name for your data model\",\n    value: values.name,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    onReset: handleReset,\n    errorMessage: errors.name,\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }), __jsx(Input2, {\n    label: \"Description\",\n    placeholder: \"Brief description of your data model\",\n    name: \"description\",\n    value: values.description,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    onReset: handleReset,\n    errorMessage: errors.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  })), __jsx(Box, {\n    my: \"0.5rem\",\n    fontWeight: \"500\",\n    color: \"#333333\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, \"Mapping\"), __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    my: \"0.5rem\",\n    maxH: \"60vh\",\n    overflowY: \"scroll\",\n    color: \"#333333\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, Object.values(addedColumns).map((i, index_i) => __jsx(Box, {\n    key: index_i,\n    mb: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    color: \"#737373\",\n    fontWeight: \"500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    marginRight: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 15\n    }\n  }, i.table_name), __jsx(Divider, {\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 15\n    }\n  }), index_i === 0 && __jsx(Box, {\n    marginLeft: \"20px\",\n    fontSize: \"10px\",\n    color: \"#32a852\",\n    textAlign: \"center\",\n    alignSelf: \"center\",\n    backgroundColor: \"rgba(50, 168, 82, 0.2)\",\n    borderRadius: \"5px\",\n    padding: \"2px 5px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  }, \"base\"), index_i > 0 && __jsx(Box, {\n    marginLeft: \"20px\",\n    fontSize: \"10px\",\n    color: \"#0f0f0fcc\",\n    textAlign: \"center\",\n    alignSelf: \"center\",\n    backgroundColor: \"#0f0f0f1a\",\n    minWidth: \"max-content\",\n    borderRadius: \"5px\",\n    padding: \"2px 5px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  }, `${i.relationship.target.split('.')[1]} = ${i.relationship.base} `)), i.columns.map((j, index_j) => {\n    var _columns$find;\n\n    return __jsx(Box, {\n      key: `${index_i}-${index_j}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 15\n      }\n    }, __jsx(Box, {\n      display: \"flex\",\n      flexDirection: \"row\",\n      width: \"100%\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      marginY: \"1rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }\n    }, __jsx(Input, {\n      isDisabled: true,\n      size: \"sm\",\n      value: j.value,\n      _disabled: {\n        color: '#333333'\n      },\n      borderRadius: \"8px\",\n      mr: \"1rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 19\n      }\n    }), __jsx(Box, {\n      width: \"95%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 19\n      }\n    }, __jsx(Select, {\n      label: \"Type\",\n      size: \"sm\",\n      value: (_columns$find = columns.find(k => k.key === i.table_name + '.' + j.value)) === null || _columns$find === void 0 ? void 0 : _columns$find.data_type,\n      onChange: event => {\n        const column = columns.find(k => k.key === i.table_name + '.' + j.value);\n        const columnIndex = columns.findIndex(k => k.key === i.table_name + '.' + j.value);\n\n        const updatedColumn = _objectSpread(_objectSpread({}, column), {}, {\n          data_type: event.target.value\n        });\n\n        const updatedColumns = [...columns];\n        updatedColumns[columnIndex] = updatedColumn;\n        setColumns(updatedColumns);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 21\n      }\n    }, __jsx(\"option\", {\n      value: \"TEXT\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 23\n      }\n    }, \"Text\"), __jsx(\"option\", {\n      value: \"NUMBER\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 23\n      }\n    }, \"Number\"), __jsx(\"option\", {\n      value: \"PHONE NUMBER\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 23\n      }\n    }, \"Phone Number\"), __jsx(\"option\", {\n      value: \"EMAIL\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 23\n      }\n    }, \"Email\"), __jsx(\"option\", {\n      value: \"DATE\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 23\n      }\n    }, \"Date\"), __jsx(\"option\", {\n      value: \"URL\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 23\n      }\n    }, \"URL\")))));\n  })))), __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    mt: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    variantColor: \"blue\",\n    variant: \"solid\",\n    onClick: formik.handleSubmit,\n    isLoading: isSubmitting,\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }\n  }, \"Create data model\")));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/component/lists/components/data-models/create-data-model/stages/schema-summary.tsx"],"names":["React","useEffect","useState","Box","Divider","Input","useToast","Select","Input2","Button","ToastBox","useFormik","yup","useHistory","validationSchema","object","shape","name","string","required","estimateDataType","dataType","toLowerCase","includes","SchemaSummary","props","columns","setColumns","addedColumns","selectedResource","toast","routerHistory","proceed","values","setSubmitting","relationships","Object","forEach","i","relationship","push","payload","resource","createDataModel","position","render","onClose","e","_columns","map","j","source","table_name","code","value","key","kind","data_type","formik","initialValues","description","onSubmit","errors","handleChange","handleBlur","handleReset","isSubmitting","index_i","target","split","base","index_j","color","find","k","event","column","columnIndex","findIndex","updatedColumn","updatedColumns","handleSubmit"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,GAAT,EAAcC,OAAd,EAAuBC,KAAvB,EAA8BC,QAA9B,QAA8C,sBAA9C;AACA,SAASC,MAAT,EAAiBF,KAAK,IAAIG,MAA1B,EAAkCC,MAAlC,EAA0CC,QAA1C,QAA0D,gBAA1D;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,UAAT,QAA2B,cAA3B;AAcA,MAAMC,gBAAgB,GAAGF,GAAG,CAACG,MAAJ,GAAaC,KAAb,CAAmB;AAC1CC,EAAAA,IAAI,EAAEL,GAAG,CAACM,MAAJ,GAAaC,QAAb,CAAsB,6BAAtB;AADoC,CAAnB,CAAzB;;AAIA,MAAMC,gBAAgB,GAAIC,QAAD,IAAsB;AAC7C,MAAIA,QAAQ,CAACC,WAAT,GAAuBC,QAAvB,CAAgC,KAAhC,CAAJ,EAA4C,OAAO,MAAP;AAC5C,MAAI,CAAC,KAAD,EAAQ,OAAR,EAAiB,SAAjB,EAA4BA,QAA5B,CAAqCF,QAAQ,CAACC,WAAT,EAArC,CAAJ,EAAkE,OAAO,QAAP;AAClE,MAAID,QAAQ,CAACC,WAAT,GAAuBC,QAAvB,CAAgC,MAAhC,CAAJ,EAA6C,OAAO,MAAP;AAC7C,SAAO,MAAP;AACD,CALD;;AAOA,OAAO,MAAMC,aAAa,GAAIC,KAAD,IAAkB;AAC7C,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBzB,QAAQ,CAAQ,EAAR,CAAtC;AACA,QAAM;AAAE0B,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAqCJ,KAA3C;AAEA,QAAMK,KAAK,GAAGxB,QAAQ,EAAtB;AACA,QAAMyB,aAAa,GAAGlB,UAAU,EAAhC;;AAEA,QAAMmB,OAAO,GAAG,MAAOC,MAAP,IAAuB;AACrCC,IAAAA,aAAa,CAAC,IAAD,CAAb;AACA,UAAMC,aAAkB,GAAG,EAA3B;AAEAC,IAAAA,MAAM,CAACH,MAAP,CAAcL,YAAd,EAA4BS,OAA5B,CAAqCC,CAAD,IAAY;AAC9C,UAAIA,CAAC,CAACC,YAAN,EAAoB;AAClBJ,QAAAA,aAAa,CAACK,IAAd,CAAmBF,CAAC,CAACC,YAArB;AACD;AACF,KAJD;;AAKA,UAAME,OAAO,mCACRR,MADQ;AAEXS,MAAAA,QAAQ,EAAEb,gBAFC;AAGXH,MAAAA,OAHW;AAIXS,MAAAA;AAJW,MAAb;;AAOA,QAAI;AACF,YAAMV,KAAK,CAACkB,eAAN,CAAsBF,OAAtB,CAAN;AACAX,MAAAA,KAAK,CAAC;AACJc,QAAAA,QAAQ,EAAE,aADN;AAEJC,QAAAA,MAAM,EAAE,CAAC;AAAEC,UAAAA;AAAF,SAAD,KACN,MAAC,QAAD;AAAU,UAAA,MAAM,EAAC,SAAjB;AAA2B,UAAA,OAAO,EAAEA,OAApC;AAA6C,UAAA,OAAO,EAAC,iCAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHE,OAAD,CAAL;AAOAf,MAAAA,aAAa,CAACS,IAAd,CAAmB,sBAAnB;AACAN,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KAXD,CAWE,OAAOa,CAAP,EAAU;AACVjB,MAAAA,KAAK,CAAC;AACJc,QAAAA,QAAQ,EAAE,aADN;AAEJC,QAAAA,MAAM,EAAE,CAAC;AAAEC,UAAAA;AAAF,SAAD,KAAiB,MAAC,QAAD;AAAU,UAAA,MAAM,EAAC,OAAjB;AAAyB,UAAA,OAAO,EAAEA,OAAlC;AAA2C,UAAA,OAAO,EAAEC,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFrB,OAAD,CAAL;AAIAb,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,GAlCD;;AAoCAjC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI+C,QAAe,GAAG,EAAtB;AAEAZ,IAAAA,MAAM,CAACH,MAAP,CAAcL,YAAd,EAA4BS,OAA5B,CAAqCC,CAAD,IAAY;AAC9CU,MAAAA,QAAQ,CAACR,IAAT,CACE,GAAGF,CAAC,CAACZ,OAAF,CAAUuB,GAAV,CAAeC,CAAD,KAAa;AAC5BC,QAAAA,MAAM,EAAEb,CAAC,CAACc,UADkB;AAE5BC,QAAAA,IAAI,EAAEH,CAAC,CAACI,KAFoB;AAG5BC,QAAAA,GAAG,EAAG,GAAEjB,CAAC,CAACc,UAAW,IAAGF,CAAC,CAACI,KAAM,EAHJ;AAI5BrC,QAAAA,IAAI,EAAEiC,CAAC,CAACI,KAJoB;AAK5BE,QAAAA,IAAI,EAAE,OALsB;AAM5BC,QAAAA,SAAS,EAAErC,gBAAgB,CAAC8B,CAAC,CAACO,SAAH;AANC,OAAb,CAAd,CADL;AAUD,KAXD;AAaA9B,IAAAA,UAAU,CAACqB,QAAD,CAAV;AACD,GAjBQ,EAiBN,CAACpB,YAAD,CAjBM,CAAT;AAmBA,QAAM8B,MAAM,GAAG/C,SAAS,CAAC;AACvBG,IAAAA,gBAAgB,EAAEA,gBADK;AAEvB6C,IAAAA,aAAa,EAAE;AAAE1C,MAAAA,IAAI,EAAE,EAAR;AAAY2C,MAAAA,WAAW,EAAE;AAAzB,KAFQ;AAGvBC,IAAAA,QAAQ,EAAE7B;AAHa,GAAD,CAAxB;AAMA,QAAM;AACJC,IAAAA,MADI;AAEJ6B,IAAAA,MAFI;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,UAJI;AAKJC,IAAAA,WALI;AAMJC,IAAAA,YANI;AAOJhC,IAAAA;AAPI,MAQFwB,MARJ;AAUA,SACE,4BACE,MAAC,GAAD;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2FADF,EAKE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAC,MAAR;AAAe,IAAA,KAAK,EAAC,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,KAAK,EAAC,MADR;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,EAAE,EAAC,QAHL;AAIE,IAAA,WAAW,EAAC,qCAJd;AAKE,IAAA,KAAK,EAAEzB,MAAM,CAAChB,IALhB;AAME,IAAA,QAAQ,EAAE8C,YANZ;AAOE,IAAA,MAAM,EAAEC,UAPV;AAQE,IAAA,OAAO,EAAEC,WARX;AASE,IAAA,YAAY,EAAEH,MAAM,CAAC7C,IATvB;AAUE,IAAA,SAAS,MAVX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAaE,MAAC,MAAD;AACE,IAAA,KAAK,EAAC,aADR;AAEE,IAAA,WAAW,EAAC,sCAFd;AAGE,IAAA,IAAI,EAAC,aAHP;AAIE,IAAA,KAAK,EAAEgB,MAAM,CAAC2B,WAJhB;AAKE,IAAA,QAAQ,EAAEG,YALZ;AAME,IAAA,MAAM,EAAEC,UANV;AAOE,IAAA,OAAO,EAAEC,WAPX;AAQE,IAAA,YAAY,EAAEH,MAAM,CAACF,WARvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,CALF,EA6BE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAC,QAAR;AAAiB,IAAA,UAAU,EAAC,KAA5B;AAAkC,IAAA,KAAK,EAAC,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA7BF,EAgCE,MAAC,GAAD;AACE,IAAA,OAAO,EAAC,MADV;AAEE,IAAA,aAAa,EAAC,QAFhB;AAGE,IAAA,EAAE,EAAC,QAHL;AAIE,IAAA,IAAI,EAAC,MAJP;AAKE,IAAA,SAAS,EAAC,QALZ;AAME,IAAA,KAAK,EAAC,SANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGxB,MAAM,CAACH,MAAP,CAAcL,YAAd,EAA4BqB,GAA5B,CAAgC,CAACX,CAAD,EAAS6B,OAAT,KAC/B,MAAC,GAAD;AAAK,IAAA,GAAG,EAAEA,OAAV;AAAmB,IAAA,EAAE,EAAC,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AACE,IAAA,OAAO,EAAC,MADV;AAEE,IAAA,aAAa,EAAC,KAFhB;AAGE,IAAA,cAAc,EAAC,eAHjB;AAIE,IAAA,UAAU,EAAC,QAJb;AAKE,IAAA,KAAK,EAAC,SALR;AAME,IAAA,UAAU,EAAC,KANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,MAAC,GAAD;AAAK,IAAA,WAAW,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyB7B,CAAC,CAACc,UAA3B,CARF,EASE,MAAC,OAAD;AAAS,IAAA,KAAK,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,EAUGe,OAAO,KAAK,CAAZ,IACC,MAAC,GAAD;AACE,IAAA,UAAU,EAAC,MADb;AAEE,IAAA,QAAQ,EAAC,MAFX;AAGE,IAAA,KAAK,EAAC,SAHR;AAIE,IAAA,SAAS,EAAC,QAJZ;AAKE,IAAA,SAAS,EAAC,QALZ;AAME,IAAA,eAAe,EAAC,wBANlB;AAOE,IAAA,YAAY,EAAC,KAPf;AAQE,IAAA,OAAO,EAAC,SARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXJ,EAwBGA,OAAO,GAAG,CAAV,IACC,MAAC,GAAD;AACE,IAAA,UAAU,EAAC,MADb;AAEE,IAAA,QAAQ,EAAC,MAFX;AAGE,IAAA,KAAK,EAAC,WAHR;AAIE,IAAA,SAAS,EAAC,QAJZ;AAKE,IAAA,SAAS,EAAC,QALZ;AAME,IAAA,eAAe,EAAC,WANlB;AAOE,IAAA,QAAQ,EAAC,aAPX;AAQE,IAAA,YAAY,EAAC,KARf;AASE,IAAA,OAAO,EAAC,SATV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWI,GAAE7B,CAAC,CAACC,YAAF,CAAe6B,MAAf,CAAsBC,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,CAAoC,MAAK/B,CAAC,CAACC,YAAF,CAAe+B,IAAK,GAXnE,CAzBJ,CADF,EAyCGhC,CAAC,CAACZ,OAAF,CAAUuB,GAAV,CAAc,CAACC,CAAD,EAASqB,OAAT;AAAA;;AAAA,WACb,MAAC,GAAD;AAAK,MAAA,GAAG,EAAG,GAAEJ,OAAQ,IAAGI,OAAQ,EAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AACE,MAAA,OAAO,EAAC,MADV;AAEE,MAAA,aAAa,EAAC,KAFhB;AAGE,MAAA,KAAK,EAAC,MAHR;AAIE,MAAA,cAAc,EAAC,eAJjB;AAKE,MAAA,UAAU,EAAC,QALb;AAME,MAAA,OAAO,EAAC,MANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQE,MAAC,KAAD;AACE,MAAA,UAAU,MADZ;AAEE,MAAA,IAAI,EAAC,IAFP;AAGE,MAAA,KAAK,EAAErB,CAAC,CAACI,KAHX;AAIE,MAAA,SAAS,EAAE;AACTkB,QAAAA,KAAK,EAAE;AADE,OAJb;AAOE,MAAA,YAAY,EAAC,KAPf;AAQE,MAAA,EAAE,EAAC,MARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,EAkBE,MAAC,GAAD;AAAK,MAAA,KAAK,EAAC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,MAAD;AACE,MAAA,KAAK,EAAC,MADR;AAEE,MAAA,IAAI,EAAC,IAFP;AAGE,MAAA,KAAK,mBACH9C,OAAO,CAAC+C,IAAR,CAAcC,CAAD,IAAYA,CAAC,CAACnB,GAAF,KAAUjB,CAAC,CAACc,UAAF,GAAe,GAAf,GAAqBF,CAAC,CAACI,KAA1D,CADG,kDACH,cAAkEG,SAJtE;AAME,MAAA,QAAQ,EAAEkB,KAAK,IAAI;AACjB,cAAMC,MAAM,GAAGlD,OAAO,CAAC+C,IAAR,CACZC,CAAD,IAAYA,CAAC,CAACnB,GAAF,KAAUjB,CAAC,CAACc,UAAF,GAAe,GAAf,GAAqBF,CAAC,CAACI,KADhC,CAAf;AAIA,cAAMuB,WAAW,GAAGnD,OAAO,CAACoD,SAAR,CACjBJ,CAAD,IAAYA,CAAC,CAACnB,GAAF,KAAUjB,CAAC,CAACc,UAAF,GAAe,GAAf,GAAqBF,CAAC,CAACI,KAD3B,CAApB;;AAIA,cAAMyB,aAAa,mCAAQH,MAAR;AAAgBnB,UAAAA,SAAS,EAAEkB,KAAK,CAACP,MAAN,CAAad;AAAxC,UAAnB;;AACA,cAAM0B,cAAc,GAAG,CAAC,GAAGtD,OAAJ,CAAvB;AACAsD,QAAAA,cAAc,CAACH,WAAD,CAAd,GAA8BE,aAA9B;AACApD,QAAAA,UAAU,CAACqD,cAAD,CAAV;AACD,OAnBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAqBE;AAAQ,MAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArBF,EAsBE;AAAQ,MAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAtBF,EAuBE;AAAQ,MAAA,KAAK,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAvBF,EAwBE;AAAQ,MAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAxBF,EAyBE;AAAQ,MAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzBF,EA0BE;AAAQ,MAAA,KAAK,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA1BF,CADF,CAlBF,CADF,CADa;AAAA,GAAd,CAzCH,CADD,CARH,CAhCF,EA2IE,MAAC,GAAD;AAAK,IAAA,OAAO,EAAC,MAAb;AAAoB,IAAA,cAAc,EAAC,UAAnC;AAA8C,IAAA,EAAE,EAAC,MAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,YAAY,EAAC,MADf;AAEE,IAAA,OAAO,EAAC,OAFV;AAGE,IAAA,OAAO,EAAEtB,MAAM,CAACuB,YAHlB;AAIE,IAAA,SAAS,EAAEf,YAJb;AAKE,IAAA,IAAI,EAAC,IALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,CA3IF,CADF;AAyJD,CAvOM","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Box, Divider, Input, useToast } from '@chakra-ui/core/dist';\nimport { Select, Input as Input2, Button, ToastBox } from 'app/components';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router';\n\ninterface Props {\n  addedColumns: {\n    [key: string]: {\n      table_name: string;\n      columns: { value: string; data_type: string }[];\n      relationship: any;\n    };\n  };\n  selectedResource: string | null;\n  createDataModel: Function;\n}\n\nconst validationSchema = yup.object().shape({\n  name: yup.string().required('Connection name is required'),\n});\n\nconst estimateDataType = (dataType: string) => {\n  if (dataType.toLowerCase().includes('var')) return 'TEXT';\n  if (['int', 'float', 'decimal'].includes(dataType.toLowerCase())) return 'NUMBER';\n  if (dataType.toLowerCase().includes('time')) return 'DATE';\n  return 'TEXT';\n};\n\nexport const SchemaSummary = (props: Props) => {\n  const [columns, setColumns] = useState<any[]>([]);\n  const { addedColumns, selectedResource } = props;\n\n  const toast = useToast();\n  const routerHistory = useHistory();\n\n  const proceed = async (values: any) => {\n    setSubmitting(true);\n    const relationships: any = [];\n\n    Object.values(addedColumns).forEach((i: any) => {\n      if (i.relationship) {\n        relationships.push(i.relationship);\n      }\n    });\n    const payload = {\n      ...values,\n      resource: selectedResource,\n      columns,\n      relationships,\n    };\n\n    try {\n      await props.createDataModel(payload);\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox status=\"success\" onClose={onClose} message=\"Data model created successfully\" />\n        ),\n      });\n\n      routerHistory.push('/s/lists/data-models');\n      setSubmitting(false);\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox status=\"error\" onClose={onClose} message={e} />,\n      });\n      setSubmitting(false);\n    }\n  };\n\n  useEffect(() => {\n    let _columns: any[] = [];\n\n    Object.values(addedColumns).forEach((i: any) => {\n      _columns.push(\n        ...i.columns.map((j: any) => ({\n          source: i.table_name,\n          code: j.value,\n          key: `${i.table_name}.${j.value}`,\n          name: j.value,\n          kind: 'plain',\n          data_type: estimateDataType(j.data_type),\n        })),\n      );\n    });\n\n    setColumns(_columns);\n  }, [addedColumns]);\n\n  const formik = useFormik({\n    validationSchema: validationSchema,\n    initialValues: { name: '', description: '' },\n    onSubmit: proceed,\n  });\n\n  const {\n    values,\n    errors,\n    handleChange,\n    handleBlur,\n    handleReset,\n    isSubmitting,\n    setSubmitting,\n  } = formik;\n\n  return (\n    <>\n      <Box className=\"description\">\n        Review the summary of your data model schema and make any changes you might need to\n      </Box>\n\n      <Box my=\"2rem\" color=\"#333333\">\n        <Input2\n          label=\"Name\"\n          name=\"name\"\n          mb=\"1.5rem\"\n          placeholder=\"A distinct name for your data model\"\n          value={values.name}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onReset={handleReset}\n          errorMessage={errors.name}\n          autoFocus\n        />\n        <Input2\n          label=\"Description\"\n          placeholder=\"Brief description of your data model\"\n          name=\"description\"\n          value={values.description}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onReset={handleReset}\n          errorMessage={errors.description}\n        />\n      </Box>\n      <Box my=\"0.5rem\" fontWeight=\"500\" color=\"#333333\">\n        Mapping\n      </Box>\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        my=\"0.5rem\"\n        maxH=\"60vh\"\n        overflowY=\"scroll\"\n        color=\"#333333\"\n      >\n        {Object.values(addedColumns).map((i: any, index_i) => (\n          <Box key={index_i} mb=\"1rem\">\n            <Box\n              display=\"flex\"\n              flexDirection=\"row\"\n              justifyContent=\"space-between\"\n              alignItems=\"center\"\n              color=\"#737373\"\n              fontWeight=\"500\"\n            >\n              <Box marginRight=\"1rem\">{i.table_name}</Box>\n              <Divider width=\"100%\" />\n              {index_i === 0 && (\n                <Box\n                  marginLeft=\"20px\"\n                  fontSize=\"10px\"\n                  color=\"#32a852\"\n                  textAlign=\"center\"\n                  alignSelf=\"center\"\n                  backgroundColor=\"rgba(50, 168, 82, 0.2)\"\n                  borderRadius=\"5px\"\n                  padding=\"2px 5px\"\n                >\n                  base\n                </Box>\n              )}\n              {index_i > 0 && (\n                <Box\n                  marginLeft=\"20px\"\n                  fontSize=\"10px\"\n                  color=\"#0f0f0fcc\"\n                  textAlign=\"center\"\n                  alignSelf=\"center\"\n                  backgroundColor=\"#0f0f0f1a\"\n                  minWidth=\"max-content\"\n                  borderRadius=\"5px\"\n                  padding=\"2px 5px\"\n                >\n                  {`${i.relationship.target.split('.')[1]} = ${i.relationship.base} `}\n                </Box>\n              )}\n            </Box>\n            {i.columns.map((j: any, index_j: number) => (\n              <Box key={`${index_i}-${index_j}`}>\n                <Box\n                  display=\"flex\"\n                  flexDirection=\"row\"\n                  width=\"100%\"\n                  justifyContent=\"space-between\"\n                  alignItems=\"center\"\n                  marginY=\"1rem\"\n                >\n                  <Input\n                    isDisabled\n                    size=\"sm\"\n                    value={j.value}\n                    _disabled={{\n                      color: '#333333',\n                    }}\n                    borderRadius=\"8px\"\n                    mr=\"1rem\"\n                  />\n                  <Box width=\"95%\">\n                    <Select\n                      label=\"Type\"\n                      size=\"sm\"\n                      value={\n                        columns.find((k: any) => k.key === i.table_name + '.' + j.value)?.data_type\n                      }\n                      onChange={event => {\n                        const column = columns.find(\n                          (k: any) => k.key === i.table_name + '.' + j.value,\n                        );\n\n                        const columnIndex = columns.findIndex(\n                          (k: any) => k.key === i.table_name + '.' + j.value,\n                        );\n\n                        const updatedColumn = { ...column, data_type: event.target.value };\n                        const updatedColumns = [...columns];\n                        updatedColumns[columnIndex] = updatedColumn;\n                        setColumns(updatedColumns);\n                      }}\n                    >\n                      <option value=\"TEXT\">Text</option>\n                      <option value=\"NUMBER\">Number</option>\n                      <option value=\"PHONE NUMBER\">Phone Number</option>\n                      <option value=\"EMAIL\">Email</option>\n                      <option value=\"DATE\">Date</option>\n                      <option value=\"URL\">URL</option>\n                    </Select>\n                  </Box>\n                </Box>\n              </Box>\n            ))}\n          </Box>\n        ))}\n      </Box>\n\n      <Box display=\"flex\" justifyContent=\"flex-end\" mt=\"1rem\">\n        <Button\n          variantColor=\"blue\"\n          variant=\"solid\"\n          onClick={formik.handleSubmit}\n          isLoading={isSubmitting}\n          size=\"sm\"\n        >\n          Create data model\n        </Button>\n      </Box>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}