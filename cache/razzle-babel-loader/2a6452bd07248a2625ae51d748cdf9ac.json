{"ast":null,"code":"import _objectSpread from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/components/list-item-menu/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Icon, Input, SimpleGrid, Box, useToast } from '@chakra-ui/core';\nimport { ListItemMenuWrapper as Wrapper } from './index.styles';\nimport { list_option_colors } from '../../list.data';\nimport { ConfirmModal, ToastBox } from '../../../../components';\nimport { useSelector } from 'react-redux';\nimport { selectActiveSubscription } from '../../../settings';\nimport { selectListCount } from '../../lists.selectors';\nimport { icons } from 'feather-icons';\nexport const icon_options = Object.keys(icons).reduce((acc, i) => _objectSpread(_objectSpread({}, acc), {}, {\n  [i]: `${icons[i].toSvg()}`\n}), {});\n\nconst IconSelect = props => {\n  return __jsx(SimpleGrid, {\n    minChildWidth: \"18px\",\n    spacing: \"5px\",\n    className: \"icon-select-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, Object.keys(icon_options).map(i => {\n    const icon_color = i === props.selected_icon ? 'white' : 'grey';\n    const icon_src = `data:image/svg+xml;utf8,${icon_options[i].replace('currentColor', icon_color)}`;\n    return __jsx(Box, {\n      key: i,\n      onClick: () => props.handleIconChange(i),\n      className: \"icon\",\n      bg: i === props.selected_icon ? props.selected_color : 'initial',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }\n    }, __jsx(\"img\", {\n      alt: \"\",\n      src: icon_src,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }));\n  }));\n};\n\nexport const ListItemMenu = props => {\n  var _active_subscription$, _active_subscription$2;\n\n  const {\n    0: tempData,\n    1: setTempData\n  } = useState(null);\n  const {\n    0: showDeleteDialog,\n    1: setShowDeleteDialog\n  } = useState(false);\n  const {\n    0: showRestoreDialog,\n    1: setShowShowRestoreDialog\n  } = useState(false);\n  const {\n    0: showPermanentlyDeleteDialog,\n    1: setShowPermanentlyDeleteDialog\n  } = useState(false);\n  const containerRef = useRef(null);\n  const active_subscription = useSelector(selectActiveSubscription);\n  const lists_count = useSelector(selectListCount);\n  let allow_restore = false;\n  if (!(active_subscription !== null && active_subscription !== void 0 && (_active_subscription$ = active_subscription.details) !== null && _active_subscription$ !== void 0 && (_active_subscription$2 = _active_subscription$.lists) !== null && _active_subscription$2 !== void 0 && _active_subscription$2.lists)) allow_restore = true;else if (active_subscription.details.lists.lists > lists_count) allow_restore = true;\n\n  const handleRestoreOptionClicked = () => {\n    if (allow_restore) setShowShowRestoreDialog(true);else props.openNoSubscriptionModal({\n      heading: \"Oops, looks like you've run out of available lists on your subscription\",\n      subHeading: 'Upgrade to our business plan to restore deleted lists and create unlimited lists'\n    });\n  };\n\n  const toast = useToast();\n\n  const onInputLabelEnterPressed = event => {\n    if (event.key !== 'Enter') return;\n    const updated_label = event.target.value;\n    props.updateList(tempData === null || tempData === void 0 ? void 0 : tempData.id, {\n      name: updated_label\n    });\n    props.close();\n  };\n\n  const handleInputChange = event => {\n    const updated_label = event.target.value; // @ts-ignore\n\n    setTempData(_objectSpread(_objectSpread({}, tempData), {}, {\n      name: updated_label\n    }));\n  };\n\n  const handleColorChange = color => {\n    // @ts-ignore\n    setTempData(_objectSpread(_objectSpread({}, tempData), {}, {\n      color\n    }));\n    props.updateList(tempData === null || tempData === void 0 ? void 0 : tempData.id, {\n      color\n    });\n  };\n\n  const handleIconChange = icon => {\n    // @ts-ignore\n    setTempData(_objectSpread(_objectSpread({}, tempData), {}, {\n      icon\n    }));\n    props.updateList(tempData === null || tempData === void 0 ? void 0 : tempData.id, {\n      icon\n    });\n  };\n\n  const handleClick = e => {\n    var _props$initialData;\n\n    if (!(containerRef !== null && containerRef !== void 0 && containerRef.current)) return; // @ts-ignore\n\n    if (containerRef.current.contains(e.target) || !props.show) return;\n\n    if ((tempData === null || tempData === void 0 ? void 0 : tempData.name) !== ((_props$initialData = props.initialData) === null || _props$initialData === void 0 ? void 0 : _props$initialData.name)) {\n      props.updateList(tempData === null || tempData === void 0 ? void 0 : tempData.id, {\n        name: tempData === null || tempData === void 0 ? void 0 : tempData.name\n      });\n    }\n\n    props.close();\n  };\n\n  const attachOutsideClickListener = () => {\n    if (showDeleteDialog) return;\n    if (showRestoreDialog) return;\n    if (showPermanentlyDeleteDialog) return;\n    document.addEventListener('mousedown', handleClick);\n  };\n\n  const detachOutsideClickListener = () => {\n    document.removeEventListener('mousedown', handleClick);\n  };\n\n  const tempName = tempData === null || tempData === void 0 ? void 0 : tempData.name;\n  useEffect(() => {\n    attachOutsideClickListener();\n    return detachOutsideClickListener; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.show, tempName, showDeleteDialog, showPermanentlyDeleteDialog, showRestoreDialog]); // @ts-ignore\n\n  const selected_icon = icon_options[(tempData === null || tempData === void 0 ? void 0 : tempData.icon) || ''] ? (tempData === null || tempData === void 0 ? void 0 : tempData.icon) || 'database' : 'database';\n  const selected_color = (tempData === null || tempData === void 0 ? void 0 : tempData.color) || 'rgba(15,15,15, 0.8)';\n  const {\n    targetPosition\n  } = props;\n  useEffect(() => {\n    if (props.initialData) {\n      setTempData(props.initialData);\n    }\n  }, [props.initialData]);\n\n  const handleDeleteList = () => {\n    setShowDeleteDialog(false);\n    if (!tempData) return;\n    const list_id = tempData['id'];\n    props.deleteList(list_id);\n    toast({\n      position: 'bottom-left',\n      render: ({\n        onClose\n      }) => __jsx(ToastBox, {\n        status: \"success\",\n        onClose: onClose,\n        message: props.is_smart_list ? `${tempData['name']} smart list deleted` : `${tempData['name']} list moved to trash`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 9\n        }\n      })\n    });\n    props.close();\n  };\n\n  const handleDeleteListPermanently = () => {\n    setShowPermanentlyDeleteDialog(false);\n    if (!tempData) return;\n    const list_id = tempData['id'];\n    props.deleteListPermanently(list_id);\n    toast({\n      position: 'bottom-left',\n      render: ({\n        onClose\n      }) => __jsx(ToastBox, {\n        status: \"success\",\n        onClose: onClose,\n        message: `${tempData['name']} list deleted permanently`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 9\n        }\n      })\n    });\n    props.close();\n  };\n\n  const handleRestoreList = () => {\n    setShowShowRestoreDialog(false);\n    if (!tempData) return;\n    const list_id = tempData['id'];\n    props.restoreList(list_id);\n    toast({\n      position: 'bottom-left',\n      render: ({\n        onClose\n      }) => __jsx(ToastBox, {\n        status: \"success\",\n        onClose: onClose,\n        message: `${tempData['name']} list restored from trash`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 9\n        }\n      })\n    });\n    props.close();\n  };\n\n  const handleMarkFavorite = () => {\n    if (!tempData) return;\n    const list_id = tempData['id'];\n    props.markListFavorite(list_id);\n    toast({\n      position: 'bottom-left',\n      render: ({\n        onClose\n      }) => __jsx(ToastBox, {\n        status: \"success\",\n        onClose: onClose,\n        message: `${tempData['name']} list marked as favorite`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 9\n        }\n      })\n    });\n    props.close();\n  };\n\n  const handleUnmarkFavorite = () => {\n    if (!tempData) return;\n    const list_id = tempData['id'];\n    props.unMarkListFavorite(list_id);\n    toast({\n      position: 'bottom-left',\n      render: ({\n        onClose\n      }) => __jsx(ToastBox, {\n        status: \"success\",\n        onClose: onClose,\n        message: `${tempData['name']} list unmarked as favorite`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 9\n        }\n      })\n    });\n    props.close();\n  };\n\n  useEffect(() => {\n    if (!props.show) {\n      setShowDeleteDialog(false);\n      setShowPermanentlyDeleteDialog(false);\n      setShowShowRestoreDialog(false);\n    }\n  }, [props.show]);\n  const left_overflow = window.innerWidth - (targetPosition.left - 100 + 265);\n  const top_overflow = window.innerHeight - (targetPosition.top - 50 + 400);\n  if (props.show && tempData) return __jsx(React.Fragment, null, __jsx(Wrapper, {\n    style: {\n      left: targetPosition.left - 100 + Math.min(left_overflow, 5),\n      top: targetPosition.bottom - 50 + Math.min(top_overflow, 0)\n    },\n    ref: containerRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }\n  }, !props.is_trash && __jsx(React.Fragment, null, __jsx(Input, {\n    className: \"label-input\",\n    variant: \"filled\",\n    _focus: {\n      boxShadow: 'none',\n      outline: 'none'\n    },\n    value: tempData === null || tempData === void 0 ? void 0 : tempData.name,\n    onChange: handleInputChange,\n    onKeyPress: onInputLabelEnterPressed,\n    autoFocus: true,\n    style: {\n      marginBottom: props.is_smart_list ? '0px' : '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 15\n    }\n  }), !props.is_smart_list && __jsx(SimpleGrid, {\n    columns: 9,\n    spacing: \"3px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 17\n    }\n  }, list_option_colors.map(i => __jsx(Box, {\n    key: i,\n    bg: i,\n    onClick: () => handleColorChange(i),\n    className: \"color-option\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 21\n    }\n  }, (tempData === null || tempData === void 0 ? void 0 : tempData.color) === i && __jsx(Icon, {\n    name: \"check\",\n    size: \"10px\",\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 49\n    }\n  })))), __jsx(IconSelect, {\n    selected_icon: selected_icon,\n    selected_color: selected_color,\n    handleIconChange: icon => {\n      handleIconChange(icon);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 15\n    }\n  }), __jsx(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 15\n    }\n  }), !props.is_smart_list && __jsx(React.Fragment, null, !props.is_favorite ? __jsx(\"div\", {\n    className: \"action-item\",\n    onClick: () => handleMarkFavorite(),\n    style: {\n      color: '#333333'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 21\n    }\n  }, __jsx(Icon, {\n    name: \"star\",\n    marginRight: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 23\n    }\n  }), \"Mark favorite\") : __jsx(\"div\", {\n    className: \"action-item\",\n    onClick: () => handleUnmarkFavorite(),\n    style: {\n      color: '#333333'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 21\n    }\n  }, __jsx(Icon, {\n    name: \"star\",\n    marginRight: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 23\n    }\n  }), \"Unmark favorite\")), __jsx(\"div\", {\n    className: \"action-item\",\n    onClick: () => setShowDeleteDialog(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 15\n    }\n  }, __jsx(Icon, {\n    name: \"trash\",\n    marginRight: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 17\n    }\n  }), \"Delete\", props.is_smart_list ? ' smart list' : ' list')), props.is_trash && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"action-item\",\n    onClick: handleRestoreOptionClicked,\n    style: {\n      color: '#333333',\n      fontSize: 12,\n      paddingTop: 3,\n      paddingBottom: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 15\n    }\n  }, __jsx(Icon, {\n    name: \"repeat-clock\",\n    marginRight: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 17\n    }\n  }), \"Restore list\"), __jsx(\"div\", {\n    className: \"action-item\",\n    onClick: () => setShowPermanentlyDeleteDialog(true),\n    style: {\n      fontSize: 12,\n      paddingTop: 3,\n      paddingBottom: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 15\n    }\n  }, __jsx(Icon, {\n    name: \"trash\",\n    marginRight: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 17\n    }\n  }), \"Delete permanently\"))), __jsx(ConfirmModal, {\n    isOpen: showDeleteDialog,\n    onClose: () => setShowDeleteDialog(false),\n    title: `Delete ${props.is_smart_list ? 'smart' : ''} list`,\n    description: !props.is_smart_list ? `We'll move this list to your trash for 30days` : `This smart list would be permanently deleted and this action is irreversible`,\n    onConfirm: handleDeleteList,\n    hidePrompt: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 9\n    }\n  }), __jsx(ConfirmModal, {\n    isOpen: showPermanentlyDeleteDialog,\n    onClose: () => setShowPermanentlyDeleteDialog(false),\n    title: \"Delete list permanently\",\n    description: \"This list can't be retrieved and all data would be lost after permanent deletion\",\n    onConfirm: handleDeleteListPermanently,\n    hidePrompt: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 9\n    }\n  }), __jsx(ConfirmModal, {\n    isOpen: showRestoreDialog,\n    onClose: () => setShowShowRestoreDialog(false),\n    title: \"Restore deleted list\",\n    description: \"All information in this list would be made accessible and would count towards your current subscription list allowance\",\n    onConfirm: handleRestoreList,\n    hidePrompt: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 9\n    }\n  }));\n  return __jsx(React.Fragment, null);\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/components/list-item-menu/index.tsx"],"names":["React","useEffect","useRef","useState","Icon","Input","SimpleGrid","Box","useToast","ListItemMenuWrapper","Wrapper","list_option_colors","ConfirmModal","ToastBox","useSelector","selectActiveSubscription","selectListCount","icons","icon_options","Object","keys","reduce","acc","i","toSvg","IconSelect","props","map","icon_color","selected_icon","icon_src","replace","handleIconChange","selected_color","ListItemMenu","tempData","setTempData","showDeleteDialog","setShowDeleteDialog","showRestoreDialog","setShowShowRestoreDialog","showPermanentlyDeleteDialog","setShowPermanentlyDeleteDialog","containerRef","active_subscription","lists_count","allow_restore","details","lists","handleRestoreOptionClicked","openNoSubscriptionModal","heading","subHeading","toast","onInputLabelEnterPressed","event","key","updated_label","target","value","updateList","id","name","close","handleInputChange","handleColorChange","color","icon","handleClick","e","current","contains","show","initialData","attachOutsideClickListener","document","addEventListener","detachOutsideClickListener","removeEventListener","tempName","targetPosition","handleDeleteList","list_id","deleteList","position","render","onClose","is_smart_list","handleDeleteListPermanently","deleteListPermanently","handleRestoreList","restoreList","handleMarkFavorite","markListFavorite","handleUnmarkFavorite","unMarkListFavorite","left_overflow","window","innerWidth","left","top_overflow","innerHeight","top","Math","min","bottom","is_trash","boxShadow","outline","marginBottom","is_favorite","fontSize","paddingTop","paddingBottom"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, useEffect, useRef, useState } from 'react';\nimport { Icon, Input, SimpleGrid, Box, useToast } from '@chakra-ui/core';\nimport { ListItemMenuWrapper as Wrapper } from './index.styles';\nimport { list_option_colors } from '../../list.data';\nimport { List, Position, SmartList } from '../../lists.types';\nimport { ConfirmModal, ToastBox } from '../../../../components';\nimport { useSelector } from 'react-redux';\nimport { selectActiveSubscription } from '../../../settings';\nimport { selectListCount } from '../../lists.selectors';\nimport { icons } from 'feather-icons';\n\nexport const icon_options: { [index: string]: any } = Object.keys(icons).reduce(\n  (acc, i) => ({\n    ...acc,\n    [i]: `${icons[i].toSvg()}`,\n  }),\n  {},\n);\n\ninterface IconSelectProps {\n  handleIconChange: Function;\n  selected_icon: string;\n  selected_color: string;\n}\n\nconst IconSelect = (props: IconSelectProps) => {\n  return (\n    <SimpleGrid minChildWidth=\"18px\" spacing=\"5px\" className=\"icon-select-section\">\n      {Object.keys(icon_options).map((i: string) => {\n        const icon_color = i === props.selected_icon ? 'white' : 'grey';\n        const icon_src = `data:image/svg+xml;utf8,${icon_options[i].replace(\n          'currentColor',\n          icon_color,\n        )}`;\n\n        return (\n          <Box\n            key={i}\n            onClick={() => props.handleIconChange(i)}\n            className=\"icon\"\n            bg={i === props.selected_icon ? props.selected_color : 'initial'}\n          >\n            <img alt=\"\" src={icon_src} />\n          </Box>\n        );\n      })}\n    </SimpleGrid>\n  );\n};\n\ninterface Props {\n  close: Function;\n  updateList: Function;\n  deleteList: Function;\n  restoreList: Function;\n  deleteListPermanently: Function;\n  markListFavorite: Function;\n  unMarkListFavorite: Function;\n  targetPosition: Position;\n  initialData: List | SmartList | null;\n  is_smart_list: boolean;\n  is_initial_list: boolean;\n  is_favorite: boolean;\n  is_trash: boolean;\n  show: boolean;\n  openNoSubscriptionModal: Function;\n}\n\nexport const ListItemMenu = (props: Props) => {\n  const [tempData, setTempData] = useState<List | SmartList | null>(null);\n  const [showDeleteDialog, setShowDeleteDialog] = useState<boolean>(false);\n  const [showRestoreDialog, setShowShowRestoreDialog] = useState<boolean>(false);\n  const [showPermanentlyDeleteDialog, setShowPermanentlyDeleteDialog] = useState<boolean>(false);\n\n  const containerRef = useRef(null);\n\n  const active_subscription: any = useSelector(selectActiveSubscription);\n  const lists_count = useSelector(selectListCount);\n\n  let allow_restore: boolean = false;\n  if (!active_subscription?.details?.lists?.lists) allow_restore = true;\n  else if (active_subscription.details.lists.lists > lists_count) allow_restore = true;\n\n  const handleRestoreOptionClicked = () => {\n    if (allow_restore) setShowShowRestoreDialog(true);\n    else\n      props.openNoSubscriptionModal({\n        heading: \"Oops, looks like you've run out of available lists on your subscription\",\n        subHeading:\n          'Upgrade to our business plan to restore deleted lists and create unlimited lists',\n      });\n  };\n\n  const toast = useToast();\n\n  const onInputLabelEnterPressed = (event: any) => {\n    if (event.key !== 'Enter') return;\n    const updated_label = event.target.value;\n    props.updateList(tempData?.id, {\n      name: updated_label,\n    });\n    props.close();\n  };\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const updated_label = event.target.value;\n    // @ts-ignore\n    setTempData({\n      ...tempData,\n      name: updated_label,\n    });\n  };\n\n  const handleColorChange = (color: string) => {\n    // @ts-ignore\n    setTempData({\n      ...tempData,\n      color,\n    });\n    props.updateList(tempData?.id, {\n      color,\n    });\n  };\n\n  const handleIconChange = (icon: string) => {\n    // @ts-ignore\n    setTempData({\n      ...tempData,\n      icon,\n    });\n    props.updateList(tempData?.id, {\n      icon,\n    });\n  };\n\n  const handleClick = (e: MouseEvent) => {\n    if (!containerRef?.current) return;\n    // @ts-ignore\n    if (containerRef.current.contains(e.target) || !props.show) return;\n    if (tempData?.name !== props.initialData?.name) {\n      props.updateList(tempData?.id, { name: tempData?.name });\n    }\n    props.close();\n  };\n\n  const attachOutsideClickListener = () => {\n    if (showDeleteDialog) return;\n    if (showRestoreDialog) return;\n    if (showPermanentlyDeleteDialog) return;\n    document.addEventListener('mousedown', handleClick);\n  };\n  const detachOutsideClickListener = () => {\n    document.removeEventListener('mousedown', handleClick);\n  };\n\n  const tempName = tempData?.name;\n\n  useEffect(() => {\n    attachOutsideClickListener();\n    return detachOutsideClickListener;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.show, tempName, showDeleteDialog, showPermanentlyDeleteDialog, showRestoreDialog]);\n\n  // @ts-ignore\n  const selected_icon = icon_options[tempData?.icon || '']\n    ? tempData?.icon || 'database'\n    : 'database';\n  const selected_color = tempData?.color || 'rgba(15,15,15, 0.8)';\n\n  const { targetPosition } = props;\n\n  useEffect(() => {\n    if (props.initialData) {\n      setTempData(props.initialData);\n    }\n  }, [props.initialData]);\n\n  const handleDeleteList = () => {\n    setShowDeleteDialog(false);\n    if (!tempData) return;\n    const list_id = tempData['id'];\n    props.deleteList(list_id);\n    toast({\n      position: 'bottom-left',\n      render: ({ onClose }) => (\n        <ToastBox\n          status=\"success\"\n          onClose={onClose}\n          message={\n            props.is_smart_list\n              ? `${tempData['name']} smart list deleted`\n              : `${tempData['name']} list moved to trash`\n          }\n        />\n      ),\n    });\n    props.close();\n  };\n\n  const handleDeleteListPermanently = () => {\n    setShowPermanentlyDeleteDialog(false);\n    if (!tempData) return;\n    const list_id = tempData['id'];\n    props.deleteListPermanently(list_id);\n    toast({\n      position: 'bottom-left',\n      render: ({ onClose }) => (\n        <ToastBox\n          status=\"success\"\n          onClose={onClose}\n          message={`${tempData['name']} list deleted permanently`}\n        />\n      ),\n    });\n    props.close();\n  };\n\n  const handleRestoreList = () => {\n    setShowShowRestoreDialog(false);\n    if (!tempData) return;\n    const list_id = tempData['id'];\n    props.restoreList(list_id);\n    toast({\n      position: 'bottom-left',\n      render: ({ onClose }) => (\n        <ToastBox\n          status=\"success\"\n          onClose={onClose}\n          message={`${tempData['name']} list restored from trash`}\n        />\n      ),\n    });\n    props.close();\n  };\n\n  const handleMarkFavorite = () => {\n    if (!tempData) return;\n    const list_id = tempData['id'];\n    props.markListFavorite(list_id);\n    toast({\n      position: 'bottom-left',\n      render: ({ onClose }) => (\n        <ToastBox\n          status=\"success\"\n          onClose={onClose}\n          message={`${tempData['name']} list marked as favorite`}\n        />\n      ),\n    });\n    props.close();\n  };\n\n  const handleUnmarkFavorite = () => {\n    if (!tempData) return;\n    const list_id = tempData['id'];\n    props.unMarkListFavorite(list_id);\n    toast({\n      position: 'bottom-left',\n      render: ({ onClose }) => (\n        <ToastBox\n          status=\"success\"\n          onClose={onClose}\n          message={`${tempData['name']} list unmarked as favorite`}\n        />\n      ),\n    });\n    props.close();\n  };\n\n  useEffect(() => {\n    if (!props.show) {\n      setShowDeleteDialog(false);\n      setShowPermanentlyDeleteDialog(false);\n      setShowShowRestoreDialog(false);\n    }\n  }, [props.show]);\n\n  const left_overflow = window.innerWidth - (targetPosition.left - 100 + 265);\n  const top_overflow = window.innerHeight - (targetPosition.top - 50 + 400);\n\n  if (props.show && tempData)\n    return (\n      <>\n        <Wrapper\n          style={{\n            left: targetPosition.left - 100 + Math.min(left_overflow, 5),\n            top: targetPosition.bottom - 50 + Math.min(top_overflow, 0),\n          }}\n          ref={containerRef}\n        >\n          {!props.is_trash && (\n            <>\n              <Input\n                className=\"label-input\"\n                variant=\"filled\"\n                _focus={{\n                  boxShadow: 'none',\n                  outline: 'none',\n                }}\n                value={tempData?.name}\n                onChange={handleInputChange}\n                onKeyPress={onInputLabelEnterPressed}\n                autoFocus\n                style={{\n                  marginBottom: props.is_smart_list ? '0px' : '10px',\n                }}\n              />\n\n              {!props.is_smart_list && (\n                <SimpleGrid columns={9} spacing=\"3px\">\n                  {list_option_colors.map((i: string) => (\n                    <Box\n                      key={i}\n                      bg={i}\n                      onClick={() => handleColorChange(i)}\n                      className=\"color-option\"\n                      display=\"flex\"\n                      flexDirection=\"row\"\n                      justifyContent=\"center\"\n                      alignItems=\"center\"\n                    >\n                      {tempData?.color === i && <Icon name=\"check\" size=\"10px\" color=\"white\" />}\n                    </Box>\n                  ))}\n                </SimpleGrid>\n              )}\n\n              <IconSelect\n                selected_icon={selected_icon}\n                selected_color={selected_color}\n                handleIconChange={(icon: string) => {\n                  handleIconChange(icon);\n                }}\n              />\n\n              <hr />\n\n              {!props.is_smart_list && (\n                <>\n                  {!props.is_favorite ? (\n                    <div\n                      className=\"action-item\"\n                      onClick={() => handleMarkFavorite()}\n                      style={{ color: '#333333' }}\n                    >\n                      <Icon name=\"star\" marginRight=\"10px\" />\n                      Mark favorite\n                    </div>\n                  ) : (\n                    <div\n                      className=\"action-item\"\n                      onClick={() => handleUnmarkFavorite()}\n                      style={{ color: '#333333' }}\n                    >\n                      <Icon name=\"star\" marginRight=\"10px\" />\n                      Unmark favorite\n                    </div>\n                  )}\n                </>\n              )}\n\n              <div className=\"action-item\" onClick={() => setShowDeleteDialog(true)}>\n                <Icon name=\"trash\" marginRight=\"10px\" />\n                Delete{props.is_smart_list ? ' smart list' : ' list'}\n              </div>\n            </>\n          )}\n\n          {props.is_trash && (\n            <>\n              <div\n                className=\"action-item\"\n                onClick={handleRestoreOptionClicked}\n                style={{\n                  color: '#333333',\n                  fontSize: 12,\n                  paddingTop: 3,\n                  paddingBottom: 3,\n                }}\n              >\n                <Icon name=\"repeat-clock\" marginRight=\"10px\" />\n                Restore list\n              </div>\n              <div\n                className=\"action-item\"\n                onClick={() => setShowPermanentlyDeleteDialog(true)}\n                style={{\n                  fontSize: 12,\n                  paddingTop: 3,\n                  paddingBottom: 3,\n                }}\n              >\n                <Icon name=\"trash\" marginRight=\"10px\" />\n                Delete permanently\n              </div>\n            </>\n          )}\n        </Wrapper>\n        <ConfirmModal\n          isOpen={showDeleteDialog}\n          onClose={() => setShowDeleteDialog(false)}\n          title={`Delete ${props.is_smart_list ? 'smart' : ''} list`}\n          description={\n            !props.is_smart_list\n              ? `We'll move this list to your trash for 30days`\n              : `This smart list would be permanently deleted and this action is irreversible`\n          }\n          onConfirm={handleDeleteList}\n          hidePrompt\n        />\n        <ConfirmModal\n          isOpen={showPermanentlyDeleteDialog}\n          onClose={() => setShowPermanentlyDeleteDialog(false)}\n          title=\"Delete list permanently\"\n          description=\"This list can't be retrieved and all data would be lost after permanent deletion\"\n          onConfirm={handleDeleteListPermanently}\n          hidePrompt\n        />\n        <ConfirmModal\n          isOpen={showRestoreDialog}\n          onClose={() => setShowShowRestoreDialog(false)}\n          title=\"Restore deleted list\"\n          description=\"All information in this list would be made accessible and would count towards your current subscription list allowance\"\n          onConfirm={handleRestoreList}\n          hidePrompt\n        />\n      </>\n    );\n  return <></>;\n};\n"]},"metadata":{},"sourceType":"module"}