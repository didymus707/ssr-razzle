{"ast":null,"code":"import _objectSpread from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nconst _excluded = [\"template_type\", \"campaign_id\"];\nvar _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/marketing/campaigns/components/planner/planner.review.tsx\";\nvar __jsx = React.createElement;\nimport { Box, Heading, Icon, Stack, Text, Tooltip, useDisclosure, useToast } from '@chakra-ui/core';\nimport React from 'react';\nimport { useLoading } from '../../../../../../hooks';\nimport { numberWithCommas } from '../../../../../../utils';\nimport { sendAmplitudeData } from '../../../../../../utils/amplitude';\nimport { ToastBox, Button } from 'app/components';\nimport { html2Text } from '../../../templates/templates.utils';\nimport { sendTestCampaignMessage } from '../../campaigns.service';\nimport { SectionFooter } from './planner.layout';\nimport { SendCampaignModal } from './send-campaign-modal';\nimport { TestMessageModal } from './test-message-modal';\nexport const Review = ({\n  isAbTest,\n  onGoBack,\n  campaign,\n  isSaving,\n  onSubmit,\n  onSaveDraft,\n  isSavingDraft,\n  onGoToSection,\n  credit_balance\n}) => {\n  const {\n    count,\n    state,\n    content,\n    sender_id,\n    is_smart_send,\n    contents\n  } = campaign;\n  const {\n    isOpen: testMessageIsOpen,\n    onOpen: onOpenTestMessage,\n    onClose: onCloseTestMessage\n  } = useDisclosure();\n  const {\n    isOpen: sendCampaignIsOpen,\n    onOpen: onOpenSendCampaignModal,\n    onClose: onCloseSendCampaignModal\n  } = useDisclosure();\n  const toast = useToast();\n  const {\n    dispatch,\n    loading\n  } = useLoading();\n\n  const handleSaveDraft = () => {\n    const {\n      template_type,\n      campaign_id\n    } = campaign,\n          rest = _objectWithoutProperties(campaign, _excluded);\n\n    onSaveDraft(_objectSpread(_objectSpread({}, rest), {}, {\n      template_id: template_type === 'built-in' ? null : campaign.template_id,\n      content: campaign.template_id && template_type !== 'built-in' ? null : campaign.content\n    }));\n  };\n\n  const handleSendTestMessage = async ({\n    recipients\n  }, {\n    resetForm\n  }) => {\n    if (content) {\n      var _contents$0$content;\n\n      const payload = {\n        recipients,\n        sender_id,\n        content: isAbTest ? (_contents$0$content = contents === null || contents === void 0 ? void 0 : contents[0].content) !== null && _contents$0$content !== void 0 ? _contents$0$content : '' : content\n      };\n\n      try {\n        dispatch({\n          type: 'LOADING_STARTED'\n        });\n        await sendTestCampaignMessage(payload);\n        dispatch({\n          type: 'LOADING_RESOLVED'\n        });\n        onCloseTestMessage();\n        resetForm();\n        toast({\n          position: 'bottom-left',\n          render: ({\n            onClose\n          }) => __jsx(ToastBox, {\n            status: \"success\",\n            onClose: onClose,\n            message: \"Test message sent successfully\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 13\n            }\n          })\n        });\n        sendAmplitudeData('campaignTestMessageSent');\n      } catch (error) {\n        dispatch({\n          type: 'LOADING_RESOLVED'\n        });\n        toast({\n          position: 'bottom-left',\n          render: ({\n            onClose\n          }) => __jsx(ToastBox, {\n            onClose: onClose,\n            message: error,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 36\n            }\n          })\n        });\n      }\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Box, {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    className: \"left-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, __jsx(Stack, {\n    py: \"1rem\",\n    isInline: true,\n    spacing: \"0.2rem\",\n    borderBottomWidth: \"1px\",\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 15\n    }\n  }, __jsx(Heading, {\n    fontSize: \"0.875rem\",\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }, \"Estimated recipients\"), __jsx(Text, {\n    fontSize: \"0.75rem\",\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, numberWithCommas(count)), __jsx(Text, {\n    fontSize: \"0.75rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, \"This campaign will be sent to all subscribers.\"), __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, __jsx(Text, {\n    fontSize: \"0.75rem\",\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 19\n    }\n  }, \"Smart Sending \", is_smart_send ? 'ON' : 'OFF'), __jsx(Tooltip, {\n    zIndex: 10000,\n    placement: \"right\",\n    \"aria-label\": \"Campaign sender id\",\n    label: \"A Sender ID is a quick way to let recipients of your campaign know exactly who it is from.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 19\n    }\n  }, __jsx(Icon, {\n    size: \"0.75rem\",\n    name: \"info\",\n    color: \"gray.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }\n  })))), __jsx(Button, {\n    size: \"sm\",\n    variant: \"outline\",\n    variantColor: \"blue\",\n    onClick: () => onGoToSection && onGoToSection(0),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 15\n    }\n  }, \"Edit recipients\")), __jsx(Stack, {\n    py: \"1rem\",\n    isInline: true,\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  }, __jsx(Heading, {\n    pb: \"0.5rem\",\n    fontSize: \"0.875rem\",\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }, \"Campaign design\"), isAbTest ? contents === null || contents === void 0 ? void 0 : contents.map(item => __jsx(ReviewContentBox, {\n    content: item.content,\n    onClick: onOpenTestMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 21\n    }\n  })) : __jsx(ReviewContentBox, {\n    content: content,\n    onClick: onOpenTestMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 19\n    }\n  })), __jsx(Button, {\n    size: \"sm\",\n    onClick: onGoBack,\n    variant: \"outline\",\n    variantColor: \"blue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  }, \"Edit design\")), (!state || state === 'pristine' || state === 'draft') && __jsx(Button, {\n    size: \"sm\",\n    variant: \"link\",\n    variantColor: \"blue\",\n    isLoading: isSavingDraft,\n    onClick: handleSaveDraft,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 15\n    }\n  }, \"Save campaign as draft\")), __jsx(SectionFooter, {\n    onGoBack: onGoBack,\n    goBackLabel: \"Back\",\n    onContinue: onOpenSendCampaignModal,\n    continueLabel: \"Schedule or Send Now\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }))), __jsx(SendCampaignModal, {\n    campaign: campaign,\n    isLoading: isSaving,\n    isOpen: sendCampaignIsOpen,\n    onCreateCampaign: onSubmit,\n    credit_balance: credit_balance,\n    onClose: onCloseSendCampaignModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }), __jsx(TestMessageModal, {\n    isOpen: testMessageIsOpen,\n    onClose: onCloseTestMessage,\n    credit_balance: credit_balance,\n    isLoading: loading === 'pending',\n    onSubmit: handleSendTestMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst ReviewContentBox = ({\n  content,\n  onClick\n}) => {\n  return __jsx(Box, {\n    p: \"1rem\",\n    mb: \"1rem\",\n    width: \"340px\",\n    borderWidth: \"1px\",\n    borderRadius: \"4px\",\n    borderLeftWidth: \"4px\",\n    borderLeftColor: \"blue.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 5\n    }\n  }, content && __jsx(Text, {\n    maxH: \"150px\",\n    pb: \"0.5rem\",\n    overflowY: \"auto\",\n    fontSize: \"0.75rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }, html2Text(content)), __jsx(Button, {\n    size: \"sm\",\n    isFullWidth: true,\n    variant: \"outline\",\n    variantColor: \"blue\",\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }\n  }, \"Send test message\"));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/marketing/campaigns/components/planner/planner.review.tsx"],"names":["Box","Heading","Icon","Stack","Text","Tooltip","useDisclosure","useToast","React","useLoading","numberWithCommas","sendAmplitudeData","ToastBox","Button","html2Text","sendTestCampaignMessage","SectionFooter","SendCampaignModal","TestMessageModal","Review","isAbTest","onGoBack","campaign","isSaving","onSubmit","onSaveDraft","isSavingDraft","onGoToSection","credit_balance","count","state","content","sender_id","is_smart_send","contents","isOpen","testMessageIsOpen","onOpen","onOpenTestMessage","onClose","onCloseTestMessage","sendCampaignIsOpen","onOpenSendCampaignModal","onCloseSendCampaignModal","toast","dispatch","loading","handleSaveDraft","template_type","campaign_id","rest","template_id","handleSendTestMessage","recipients","resetForm","payload","type","position","render","error","map","item","ReviewContentBox","onClick"],"mappings":"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","sourcesContent":["import { Box, Heading, Icon, Stack, Text, Tooltip, useDisclosure, useToast } from '@chakra-ui/core';\nimport { FormikHelpers } from 'formik';\nimport React from 'react';\nimport { useLoading } from '../../../../../../hooks';\nimport { numberWithCommas } from '../../../../../../utils';\nimport { sendAmplitudeData } from '../../../../../../utils/amplitude';\nimport { ToastBox, Button } from 'app/components';\nimport { html2Text } from '../../../templates/templates.utils';\nimport { sendTestCampaignMessage } from '../../campaigns.service';\nimport { CampaignPayload } from './planner.index';\nimport { SectionFooter, SectionFooterProps } from './planner.layout';\nimport { SendCampaignModal } from './send-campaign-modal';\nimport { TestMessageModal } from './test-message-modal';\n\ninterface ReviewProps {\n  isAbTest?: boolean;\n  isSaving?: boolean;\n  credit_balance: number;\n  isSavingDraft?: boolean;\n  campaign: CampaignPayload;\n  onGoToSection?(section: number): void;\n  onGoBack: SectionFooterProps['onGoBack'];\n  onSubmit: (payload: Partial<CampaignPayload>) => Promise<void>;\n  onSaveDraft: (payload: Partial<CampaignPayload>) => Promise<void>;\n}\n\nexport const Review = ({\n  isAbTest,\n  onGoBack,\n  campaign,\n  isSaving,\n  onSubmit,\n  onSaveDraft,\n  isSavingDraft,\n  onGoToSection,\n  credit_balance,\n}: ReviewProps) => {\n  const { count, state, content, sender_id, is_smart_send, contents } = campaign;\n  const {\n    isOpen: testMessageIsOpen,\n    onOpen: onOpenTestMessage,\n    onClose: onCloseTestMessage,\n  } = useDisclosure();\n  const {\n    isOpen: sendCampaignIsOpen,\n    onOpen: onOpenSendCampaignModal,\n    onClose: onCloseSendCampaignModal,\n  } = useDisclosure();\n\n  const toast = useToast();\n  const { dispatch, loading } = useLoading();\n\n  const handleSaveDraft = () => {\n    const { template_type, campaign_id, ...rest } = campaign;\n    onSaveDraft({\n      ...rest,\n      template_id: template_type === 'built-in' ? null : campaign.template_id,\n      content: campaign.template_id && template_type !== 'built-in' ? null : campaign.content,\n    });\n  };\n\n  const handleSendTestMessage = async (\n    { recipients }: { recipients: string },\n    { resetForm }: FormikHelpers<{ recipients: string }>,\n  ) => {\n    if (content) {\n      const payload = {\n        recipients,\n        sender_id,\n        content: isAbTest ? contents?.[0].content ?? '' : content,\n      };\n      try {\n        dispatch({ type: 'LOADING_STARTED' });\n        await sendTestCampaignMessage(payload);\n        dispatch({ type: 'LOADING_RESOLVED' });\n        onCloseTestMessage();\n        resetForm();\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => (\n            <ToastBox status=\"success\" onClose={onClose} message=\"Test message sent successfully\" />\n          ),\n        });\n        sendAmplitudeData('campaignTestMessageSent');\n      } catch (error) {\n        dispatch({ type: 'LOADING_RESOLVED' });\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n        });\n      }\n    }\n  };\n\n  return (\n    <>\n      <Box className=\"content\">\n        <Box className=\"left-section\">\n          <Box>\n            <Stack\n              py=\"1rem\"\n              isInline\n              spacing=\"0.2rem\"\n              borderBottomWidth=\"1px\"\n              justifyContent=\"space-between\"\n            >\n              <Stack>\n                <Heading fontSize=\"0.875rem\" fontWeight={600}>\n                  Estimated recipients\n                </Heading>\n                <Text fontSize=\"0.75rem\" fontWeight={600}>\n                  {numberWithCommas(count)}\n                </Text>\n                <Text fontSize=\"0.75rem\">This campaign will be sent to all subscribers.</Text>\n                <Stack isInline alignItems=\"center\">\n                  <Text fontSize=\"0.75rem\" fontWeight={600}>\n                    Smart Sending {is_smart_send ? 'ON' : 'OFF'}\n                  </Text>\n                  <Tooltip\n                    zIndex={10000}\n                    placement=\"right\"\n                    aria-label=\"Campaign sender id\"\n                    label=\"A Sender ID is a quick way to let recipients of your campaign know exactly who it is from.\"\n                  >\n                    <Icon size=\"0.75rem\" name=\"info\" color=\"gray.500\" />\n                  </Tooltip>\n                </Stack>\n              </Stack>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                variantColor=\"blue\"\n                onClick={() => onGoToSection && onGoToSection(0)}\n              >\n                Edit recipients\n              </Button>\n            </Stack>\n            <Stack py=\"1rem\" isInline justifyContent=\"space-between\">\n              <Box>\n                <Heading pb=\"0.5rem\" fontSize=\"0.875rem\" fontWeight={600}>\n                  Campaign design\n                </Heading>\n                {isAbTest ? (\n                  contents?.map(item => (\n                    <ReviewContentBox content={item.content} onClick={onOpenTestMessage} />\n                  ))\n                ) : (\n                  <ReviewContentBox content={content} onClick={onOpenTestMessage} />\n                )}\n              </Box>\n              <Button size=\"sm\" onClick={onGoBack} variant=\"outline\" variantColor=\"blue\">\n                Edit design\n              </Button>\n            </Stack>\n            {(!state || state === 'pristine' || state === 'draft') && (\n              <Button\n                size=\"sm\"\n                variant=\"link\"\n                variantColor=\"blue\"\n                isLoading={isSavingDraft}\n                onClick={handleSaveDraft}\n              >\n                Save campaign as draft\n              </Button>\n            )}\n          </Box>\n          <SectionFooter\n            onGoBack={onGoBack}\n            goBackLabel=\"Back\"\n            onContinue={onOpenSendCampaignModal}\n            continueLabel=\"Schedule or Send Now\"\n          />\n        </Box>\n      </Box>\n      <SendCampaignModal\n        campaign={campaign}\n        isLoading={isSaving}\n        isOpen={sendCampaignIsOpen}\n        onCreateCampaign={onSubmit}\n        credit_balance={credit_balance}\n        onClose={onCloseSendCampaignModal}\n      />\n      <TestMessageModal\n        isOpen={testMessageIsOpen}\n        onClose={onCloseTestMessage}\n        credit_balance={credit_balance}\n        isLoading={loading === 'pending'}\n        onSubmit={handleSendTestMessage}\n      />\n    </>\n  );\n};\n\nconst ReviewContentBox = ({ content, onClick }: { content?: string | null; onClick(): void }) => {\n  return (\n    <Box\n      p=\"1rem\"\n      mb=\"1rem\"\n      width=\"340px\"\n      borderWidth=\"1px\"\n      borderRadius=\"4px\"\n      borderLeftWidth=\"4px\"\n      borderLeftColor=\"blue.500\"\n    >\n      {content && (\n        <Text maxH=\"150px\" pb=\"0.5rem\" overflowY=\"auto\" fontSize=\"0.75rem\">\n          {html2Text(content)}\n        </Text>\n      )}\n      <Button size=\"sm\" isFullWidth variant=\"outline\" variantColor=\"blue\" onClick={onClick}>\n        Send test message\n      </Button>\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}