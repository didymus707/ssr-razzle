{"ast":null,"code":"import { client } from '../../../utils';\n\n//////////////////////////////////////////////////////////////\n// Tables API Integration\nfunction getTables(params) {\n  return client('tables', {\n    params\n  });\n}\n\nfunction createTable(payload) {\n  return client('tables/create', {\n    data: payload,\n    method: 'POST'\n  });\n}\n\nfunction createTableTemplate(payload) {\n  return client('tables/create_template', {\n    data: payload,\n    method: 'POST'\n  });\n}\n\nfunction updateTable(payload) {\n  return client('tables/update', {\n    data: payload,\n    method: 'PATCH'\n  });\n}\n\nfunction deleteTable(payload) {\n  return client('tables/delete', {\n    data: payload,\n    method: 'DELETE'\n  });\n} //////////////////////////////////////////////////////////////\n// Rows API Integration\n\n\nfunction getRows(data) {\n  const {\n    id,\n    page,\n    limit\n  } = data;\n  const url = `rows/${id}`;\n  return client(url, {\n    params: {\n      page,\n      limit\n    }\n  });\n}\n\nasync function getRow(id) {\n  const response = await client(`row/${id}`);\n  return response.data.row;\n}\n\nfunction createRow(payload) {\n  return client('rows/create', {\n    data: payload,\n    method: 'POST'\n  });\n}\n\nasync function filterRows(payload) {\n  const response = await client('rows/filter', {\n    data: payload,\n    method: 'POST'\n  });\n  return response.data.rows;\n}\n\nfunction sortRows(payload) {\n  return client('rows/sort', {\n    data: payload,\n    method: 'POST'\n  });\n}\n\nfunction searchRows({\n  query,\n  table_id\n}) {\n  return client(`rows/${table_id}/search`, {\n    params: {\n      query\n    }\n  });\n}\n\nfunction updateRow(payload) {\n  return client('rows/update', {\n    data: payload,\n    method: 'PATCH'\n  });\n}\n\nfunction deleteRow(id) {\n  return client('rows/delete', {\n    data: {\n      id\n    },\n    method: 'DELETE'\n  });\n}\n\nfunction deleteRowGroup(payload) {\n  return client('rows/delete', {\n    data: payload,\n    method: 'DELETE'\n  });\n}\n\nfunction importRows(payload) {\n  return client('rows/import', {\n    data: payload,\n    method: 'POST'\n  });\n}\n\nfunction importMapping(payload) {\n  return client('rows/import-mapping', {\n    data: payload,\n    method: 'PATCH'\n  });\n} //////////////////////////////////////////////////////////////\n// Groups API Integration\n\n\nfunction getGroups(table_id) {\n  return client(`groups/${table_id}`);\n}\n\nfunction getGroupRows(params) {\n  const {\n    id\n  } = params;\n  return client(`groups/${id}/rows`);\n}\n\nfunction createGroup(payload) {\n  return client('groups/create', {\n    data: payload,\n    method: 'POST'\n  });\n}\n\nfunction addRowToGroup(payload) {\n  const {\n    id,\n    row_id\n  } = payload;\n  return client(`groups/${id}/rows/add`, {\n    data: {\n      row_id\n    },\n    method: 'POST'\n  });\n}\n\nfunction deleteRowsFromGroup(payload) {\n  const {\n    id,\n    row_id\n  } = payload;\n  return client(`groups/${id}/rows/remove`, {\n    data: {\n      row_id\n    },\n    method: 'DELETE'\n  });\n}\n\nfunction updateGroup(payload) {\n  return client('groups/update', {\n    data: payload,\n    method: 'PATCH'\n  });\n}\n\nfunction deleteGroup(payload) {\n  return client('groups/delete', {\n    data: payload,\n    method: 'DELETE'\n  });\n} //////////////////////////////////////////////////////////////\n// Import API Integration\n\n\nfunction getImportList() {\n  return client('imports');\n}\n\nexport { getRow, getRows, sortRows, createRow, updateRow, getTables, getGroups, deleteRow, searchRows, importRows, filterRows, updateGroup, createGroup, deleteGroup, updateTable, deleteTable, createTable, getGroupRows, addRowToGroup, importMapping, getImportList, deleteRowGroup, deleteRowsFromGroup, createTableTemplate };","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/tables/tables.service.ts"],"names":["client","getTables","params","createTable","payload","data","method","createTableTemplate","updateTable","deleteTable","getRows","id","page","limit","url","getRow","response","row","createRow","filterRows","rows","sortRows","searchRows","query","table_id","updateRow","deleteRow","deleteRowGroup","importRows","importMapping","getGroups","getGroupRows","createGroup","addRowToGroup","row_id","deleteRowsFromGroup","updateGroup","deleteGroup","getImportList"],"mappings":"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","sourcesContent":["import { AxiosRequestConfig } from 'axios';\nimport { OptionTypeBase } from 'react-select';\nimport { client } from '../../../utils';\nimport { GroupSchema } from './components';\nimport {\n  TablePropertiesOptions,\n  ImportRowsMappingOptions,\n  TableTemplateTypes,\n} from './tables.types';\n\n//////////////////////////////////////////////////////////////\n// Tables API Integration\n\nfunction getTables(params?: AxiosRequestConfig['params']) {\n  return client('tables', { params });\n}\n\nfunction createTable(payload: Pick<TablePropertiesOptions, 'user_id' | 'columns'>) {\n  return client('tables/create', { data: payload, method: 'POST' });\n}\n\nfunction createTableTemplate(payload: TableTemplateTypes) {\n  return client('tables/create_template', { data: payload, method: 'POST' });\n}\n\nfunction updateTable(\n  payload: Partial<Omit<TablePropertiesOptions, 'created_datetime' | 'updated_datetime'>>,\n) {\n  return client('tables/update', { data: payload, method: 'PATCH' });\n}\n\nfunction deleteTable(payload: Pick<TablePropertiesOptions, 'user_id' | 'id'>) {\n  return client('tables/delete', { data: payload, method: 'DELETE' });\n}\n\n//////////////////////////////////////////////////////////////\n// Rows API Integration\n\nfunction getRows(data: { id?: string; page?: number; limit?: number }) {\n  const { id, page, limit } = data;\n  const url = `rows/${id}`;\n  return client(url, {\n    params: { page, limit },\n  });\n}\n\nasync function getRow(id: string) {\n  const response = await client(`row/${id}`);\n  return response.data.row;\n}\n\nfunction createRow(payload: OptionTypeBase) {\n  return client('rows/create', { data: payload, method: 'POST' });\n}\n\nasync function filterRows(payload: OptionTypeBase) {\n  const response = await client('rows/filter', { data: payload, method: 'POST' });\n  return response.data.rows;\n}\n\nfunction sortRows(payload: OptionTypeBase) {\n  return client('rows/sort', { data: payload, method: 'POST' });\n}\n\nfunction searchRows({\n  query,\n  table_id,\n}: {\n  table_id: TablePropertiesOptions['id'];\n  query: string;\n}) {\n  return client(`rows/${table_id}/search`, { params: { query } });\n}\n\nfunction updateRow(payload: { id: string; columns: OptionTypeBase }) {\n  return client('rows/update', { data: payload, method: 'PATCH' });\n}\n\nfunction deleteRow(id: string) {\n  return client('rows/delete', { data: { id }, method: 'DELETE' });\n}\n\nfunction deleteRowGroup(payload: { id: string[] }) {\n  return client('rows/delete', { data: payload, method: 'DELETE' });\n}\n\nfunction importRows(payload: FormData) {\n  return client('rows/import', { data: payload, method: 'POST' });\n}\n\nfunction importMapping(payload: ImportRowsMappingOptions) {\n  return client('rows/import-mapping', { data: payload, method: 'PATCH' });\n}\n\n//////////////////////////////////////////////////////////////\n// Groups API Integration\n\nfunction getGroups(table_id?: string) {\n  return client(`groups/${table_id}`);\n}\n\nfunction getGroupRows(params: { id: GroupSchema['id'] }) {\n  const { id } = params;\n  return client(`groups/${id}/rows`);\n}\n\nfunction createGroup(payload: {\n  table_id?: string;\n  name: GroupSchema['name'];\n  row_id?: (string | undefined)[];\n}) {\n  return client('groups/create', { data: payload, method: 'POST' });\n}\n\nfunction addRowToGroup(payload: { id: GroupSchema['id']; row_id: (string | undefined)[] }) {\n  const { id, row_id } = payload;\n  return client(`groups/${id}/rows/add`, { data: { row_id }, method: 'POST' });\n}\n\nfunction deleteRowsFromGroup(payload: { row_id: string[]; id: GroupSchema['id'] }) {\n  const { id, row_id } = payload;\n  return client(`groups/${id}/rows/remove`, {\n    data: { row_id },\n    method: 'DELETE',\n  });\n}\n\nfunction updateGroup(payload: GroupSchema) {\n  return client('groups/update', { data: payload, method: 'PATCH' });\n}\n\nfunction deleteGroup(payload: { id: GroupSchema['id'] }) {\n  return client('groups/delete', { data: payload, method: 'DELETE' });\n}\n\n//////////////////////////////////////////////////////////////\n// Import API Integration\n\nfunction getImportList() {\n  return client('imports');\n}\n\nexport {\n  getRow,\n  getRows,\n  sortRows,\n  createRow,\n  updateRow,\n  getTables,\n  getGroups,\n  deleteRow,\n  searchRows,\n  importRows,\n  filterRows,\n  updateGroup,\n  createGroup,\n  deleteGroup,\n  updateTable,\n  deleteTable,\n  createTable,\n  getGroupRows,\n  addRowToGroup,\n  importMapping,\n  getImportList,\n  deleteRowGroup,\n  deleteRowsFromGroup,\n  createTableTemplate,\n};\n"]},"metadata":{},"sourceType":"module"}