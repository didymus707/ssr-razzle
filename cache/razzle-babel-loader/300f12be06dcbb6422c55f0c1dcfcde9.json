{"ast":null,"code":"import _objectSpread from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/marketing/campaigns/components/planner/new-audience-modal.tsx\";\nvar __jsx = React.createElement;\nimport { Alert, AlertIcon, Box, Flex, FormControl, FormErrorMessage, FormLabel, Heading, Icon, Input, Stack, Text, Tooltip, useToast } from '@chakra-ui/core';\nimport { useFormik } from 'formik';\nimport React from 'react';\nimport * as yup from 'yup';\nimport { numberWithCommas } from '../../../../../../utils';\nimport { AdvancedSelect, ModalContainer, ToastBox, Button } from 'app/components';\nimport image from '../../assets/search-user.svg';\nimport { identityGraphDependentValues, identityGraphNumberFilter } from '../../campaigns.service';\nexport const NewAudienceModal = ({\n  states,\n  isOpen,\n  onClose,\n  genders,\n  onSubmit,\n  isLoading,\n  religions,\n  ethnicGroups,\n  hasAudiences\n}) => {\n  const [section, setSection] = React.useState(hasAudiences ? 1 : 0);\n\n  const handleClose = () => {\n    setSection(0);\n    onClose === null || onClose === void 0 ? void 0 : onClose();\n  };\n\n  return __jsx(ModalContainer, {\n    size: \"3xl\",\n    closeOnOverlayClick: false,\n    isOpen: isOpen,\n    onClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, section === 0 && __jsx(WelcomeSection, {\n    onContinue: () => setSection(1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }\n  }), section === 1 && __jsx(FormSection, {\n    states: states,\n    genders: genders,\n    onSubmit: onSubmit,\n    religions: religions,\n    isLoading: isLoading,\n    onCancel: handleClose,\n    ethnicGroups: ethnicGroups,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst WelcomeSection = ({\n  onContinue\n}) => {\n  return __jsx(Stack, {\n    isInline: true,\n    spacing: \"0\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    width: ['100%', '60%', '60%'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    height: \"400px\",\n    position: \"relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    p: \"1rem\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    mb: \"1rem\",\n    px: \"1rem\",\n    bg: \"#80d086\",\n    color: \"white\",\n    rounded: \"100px\",\n    fontSize: \"0.875rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, \"Beta\"), __jsx(Heading, {\n    fontSize: \"1.4rem\",\n    mb: \"0.2rem\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, \"Welcome to new audiences\", ' ', __jsx(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"hand wave\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  }, \"\\uD83D\\uDC4B\\uD83C\\uDFFE\")), __jsx(Text, {\n    pb: \"4rem\",\n    fontSize: \"0.875rem\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, \"New audience is a way to reach new people who are likely to be interested in your business because they're similar to your best existing customers.\")), __jsx(Flex, {\n    p: \"1rem\",\n    bottom: \"0\",\n    width: \"100%\",\n    position: \"absolute\",\n    borderTopWidth: \"1px\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    size: \"sm\",\n    variantColor: \"blue\",\n    onClick: onContinue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, \"Continue\")))), __jsx(Box, {\n    width: \"40%\",\n    bgSize: \"120%\",\n    bgPos: \"center\",\n    roundedTopRight: \"5px\",\n    roundedBottomRight: \"5px\",\n    bgImage: `url(${image})`,\n    backgroundRepeat: \"no-repeat\",\n    display: ['none', 'block', 'block'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst FormSection = ({\n  states,\n  genders,\n  religions,\n  ethnicGroups,\n  onSubmit,\n  onCancel,\n  isLoading\n}) => {\n  const toast = useToast();\n  const {\n    values,\n    errors,\n    touched,\n    handleChange,\n    setFieldValue,\n    handleSubmit\n  } = useFormik({\n    onSubmit: values => {\n      const {\n        state,\n        lga,\n        gender,\n        count,\n        name,\n        predicted_religion,\n        predicted_ethnicity\n      } = values;\n      onSubmit({\n        name,\n        count: Math.ceil(count),\n        lga: lga ? lga : undefined,\n        state: state ? state : undefined,\n        gender: gender ? gender : undefined,\n        predicted_religion: predicted_religion ? predicted_religion : undefined,\n        predicted_ethnicity: predicted_ethnicity ? predicted_ethnicity : undefined\n      });\n    },\n    initialValues: {\n      name: '',\n      percentage: 100,\n      state: undefined,\n      lga: undefined,\n      gender: undefined,\n      count: 0,\n      predicted_religion: undefined,\n      predicted_ethnicity: undefined\n    },\n    validationSchema: yup.object().shape({\n      name: yup.string().required('Audience name is required')\n    })\n  });\n  const inputRef = React.useRef(null);\n  const [areas, setAreas] = React.useState([]);\n  const [audienceCount, setAudienceCount] = React.useState(0);\n\n  const handleFetchCount = async data => {\n    const {\n      state,\n      lga,\n      gender,\n      predicted_religion,\n      predicted_ethnicity\n    } = data;\n    const requiredFields = {\n      state,\n      lga,\n      gender,\n      predicted_religion,\n      predicted_ethnicity\n    };\n\n    if (Object.values(requiredFields).every(item => !item)) {\n      setFieldValue('count', 0);\n      setAudienceCount(0);\n      return;\n    }\n\n    try {\n      const audienceCount = await identityGraphNumberFilter({\n        lga: lga ? lga : undefined,\n        state: state ? state : undefined,\n        gender: gender ? gender : undefined,\n        predicted_religion: predicted_religion ? predicted_religion : undefined,\n        predicted_ethnicity: predicted_ethnicity ? predicted_ethnicity : undefined\n      });\n      setFieldValue('count', audienceCount);\n      setAudienceCount(audienceCount);\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  };\n\n  const handleFetchLgas = async states => {\n    try {\n      const data = await identityGraphDependentValues({\n        attribute: 'state',\n        dependent: 'lga',\n        attribute_values: states\n      });\n      const areas = Object.keys(data).map(item => ({\n        label: item,\n        showBadge: true,\n        options: data[item].map(item => ({\n          label: item,\n          value: item\n        }))\n      }));\n      setAreas(areas);\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  };\n\n  React.useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n  return __jsx(Stack, {\n    isInline: true,\n    spacing: \"0\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    width: ['100%', '60%', '60%'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    height: \"100%\",\n    position: \"relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    p: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 11\n    }\n  }, __jsx(Heading, {\n    fontSize: \"1.4rem\",\n    mb: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }\n  }, \"Create a new audience\"), __jsx(Box, {\n    pb: \"3rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }\n  }, __jsx(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 15\n    }\n  }, __jsx(FormControl, {\n    mb: \"1rem\",\n    isInvalid: !!touched.name && !!errors.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 17\n    }\n  }, __jsx(FormLabel, {\n    fontSize: \"0.875rem\",\n    marginBottom: \"0.2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 19\n    }\n  }, \"Audience name\"), __jsx(Input, {\n    size: \"sm\",\n    type: \"text\",\n    name: \"name\",\n    ref: inputRef,\n    value: values.name,\n    onChange: handleChange,\n    placeholder: \"Give your audience a name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 19\n    }\n  }), __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 19\n    }\n  }, errors.name)), __jsx(FormControl, {\n    mb: \"1rem\",\n    isInvalid: !!touched.state && !!errors.state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 17\n    }\n  }, __jsx(FormLabel, {\n    fontSize: \"0.85rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 19\n    }\n  }, __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 23\n    }\n  }, \"State\"), __jsx(Tooltip, {\n    zIndex: 10000,\n    placement: \"right\",\n    \"aria-label\": \"State\",\n    label: \"Select a state\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 23\n    }\n  }, __jsx(Icon, {\n    size: \"0.75rem\",\n    name: \"info\",\n    color: \"gray.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 25\n    }\n  })))), __jsx(AdvancedSelect, {\n    isMulti: true,\n    size: \"sm\",\n    isSearchable: true,\n    isClearable: false,\n    placeholder: \"Search & Select a state\",\n    isInvalid: !!touched.state && !!errors.state,\n    onChange: data => {\n      const state = data === null || data === void 0 ? void 0 : data.map(item => item.value);\n      state && state.length && handleFetchLgas(state);\n      setFieldValue('state', state);\n      setFieldValue('lga', '');\n      setFieldValue('percentage', 100);\n      handleFetchCount(_objectSpread(_objectSpread({}, values), {}, {\n        state: !!state && state.length ? state : undefined\n      }));\n    },\n    options: states,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 19\n    }\n  }), __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 19\n    }\n  }, errors.state)), values.state && __jsx(FormControl, {\n    mb: \"1rem\",\n    isInvalid: !!touched.lga && !!errors.lga,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 19\n    }\n  }, __jsx(FormLabel, {\n    fontSize: \"0.875rem\",\n    marginBottom: \"0.2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 21\n    }\n  }, __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 23\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 25\n    }\n  }, \"Area\"), __jsx(Tooltip, {\n    zIndex: 10000,\n    placement: \"right\",\n    \"aria-label\": \"Area\",\n    label: \"Select an area to be very specific\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 25\n    }\n  }, __jsx(Icon, {\n    size: \"0.75rem\",\n    name: \"info\",\n    color: \"gray.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 27\n    }\n  })))), __jsx(AdvancedSelect, {\n    isMulti: true,\n    isGroup: true,\n    size: \"sm\",\n    isSearchable: true,\n    isClearable: false,\n    placeholder: \"Search & Select an area\",\n    isInvalid: !!touched.lga && !!errors.lga,\n    onChange: data => {\n      const lga = data === null || data === void 0 ? void 0 : data.map(item => item.value);\n      setFieldValue('lga', lga);\n      setFieldValue('percentage', 100);\n      handleFetchCount(_objectSpread(_objectSpread({}, values), {}, {\n        lga: !!lga && lga.length ? lga : undefined\n      }));\n    },\n    options: areas,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 21\n    }\n  }), __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 21\n    }\n  }, errors.lga)), __jsx(FormControl, {\n    mb: \"1rem\",\n    isInvalid: !!touched.gender && !!errors.gender,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 17\n    }\n  }, __jsx(FormLabel, {\n    fontSize: \"0.85rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 19\n    }\n  }, \"Gender\"), __jsx(AdvancedSelect, {\n    isMulti: true,\n    size: \"sm\",\n    isSearchable: true,\n    isClearable: false,\n    placeholder: \"Select gender\",\n    isInvalid: !!touched.gender && !!errors.gender,\n    onChange: data => {\n      const gender = data === null || data === void 0 ? void 0 : data.map(item => item.value);\n      setFieldValue('gender', gender);\n      setFieldValue('percentage', 100);\n      handleFetchCount(_objectSpread(_objectSpread({}, values), {}, {\n        gender: !!gender && gender.length ? gender : undefined\n      }));\n    },\n    options: genders,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 19\n    }\n  }), __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 19\n    }\n  }, errors.gender)), __jsx(FormControl, {\n    mb: \"1rem\",\n    isInvalid: !!touched.predicted_ethnicity && !!errors.predicted_ethnicity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 17\n    }\n  }, __jsx(FormLabel, {\n    fontSize: \"0.85rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 19\n    }\n  }, \"Ethnicity\"), __jsx(AdvancedSelect, {\n    isMulti: true,\n    size: \"sm\",\n    isSearchable: true,\n    isClearable: false,\n    placeholder: \"Select ethnicity\",\n    isInvalid: !!touched.predicted_ethnicity && !!errors.predicted_ethnicity,\n    onChange: data => {\n      const predicted_ethnicity = data === null || data === void 0 ? void 0 : data.map(item => item.value);\n      setFieldValue('predicted_ethnicity', predicted_ethnicity);\n      setFieldValue('percentage', 100);\n      handleFetchCount(_objectSpread(_objectSpread({}, values), {}, {\n        predicted_ethnicity: !!predicted_ethnicity && predicted_ethnicity.length ? predicted_ethnicity : undefined\n      }));\n    },\n    options: ethnicGroups,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 19\n    }\n  }), __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 19\n    }\n  }, errors.predicted_ethnicity)), __jsx(FormControl, {\n    mb: \"1rem\",\n    isInvalid: !!touched.predicted_religion && !!errors.predicted_religion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 17\n    }\n  }, __jsx(FormLabel, {\n    fontSize: \"0.85rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 19\n    }\n  }, \"Religion\"), __jsx(AdvancedSelect, {\n    isMulti: true,\n    size: \"sm\",\n    isSearchable: true,\n    isClearable: false,\n    placeholder: \"Select religion\",\n    isInvalid: !!touched.predicted_religion && !!errors.predicted_religion,\n    onChange: data => {\n      const predicted_religion = data === null || data === void 0 ? void 0 : data.map(item => item.value);\n      setFieldValue('predicted_religion', predicted_religion);\n      setFieldValue('percentage', 100);\n      handleFetchCount(_objectSpread(_objectSpread({}, values), {}, {\n        predicted_religion: !!predicted_religion && predicted_religion.length ? predicted_religion : undefined\n      }));\n    },\n    options: religions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 19\n    }\n  }), __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 19\n    }\n  }, errors.predicted_ethnicity)), !!audienceCount && __jsx(React.Fragment, null, __jsx(FormControl, {\n    mb: \"1rem\",\n    isInvalid: !!touched.percentage && !!errors.percentage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    fontSize: \"0.85rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 23\n    }\n  }, \"Target by percentage\"), __jsx(Input, {\n    max: 100,\n    step: 0.1,\n    type: \"number\",\n    value: values.percentage,\n    placeholder: \"Enter a percentage\",\n    onChange: e => {\n      const value = e.target.value ? parseFloat(e.target.value) : 0;\n\n      if (value <= 100) {\n        const count = parseFloat((value / 100 * (audienceCount !== null && audienceCount !== void 0 ? audienceCount : 0)).toFixed(2));\n        setFieldValue('percentage', value);\n        setFieldValue('count', count);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 23\n    }\n  }), __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 23\n    }\n  }, errors.percentage)), __jsx(Alert, {\n    mb: \"2.5rem\",\n    status: \"info\",\n    borderRadius: \"0.125rem\",\n    backgroundColor: \"rgb(198, 246, 213)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 21\n    }\n  }, __jsx(AlertIcon, {\n    size: \"1rem\",\n    color: \"rgb(56, 161, 105)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 23\n    }\n  }), __jsx(Text, {\n    fontSize: \"0.875rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 23\n    }\n  }, \"You won't be billed for messages sent to numbers on DND.\")))))), __jsx(Stack, {\n    p: \"1rem\",\n    isInline: true,\n    bottom: \"0\",\n    width: \"100%\",\n    position: \"absolute\",\n    borderTopWidth: \"1px\",\n    justifyContent: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    size: \"sm\",\n    onClick: onCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 13\n    }\n  }, \"Cancel\"), __jsx(Button, {\n    size: \"sm\",\n    variantColor: \"blue\",\n    isLoading: isLoading,\n    onClick: handleSubmit,\n    isDisabled: !values.count || !audienceCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 13\n    }\n  }, \"Create audience\")))), __jsx(Box, {\n    p: \"1rem\",\n    width: \"40%\",\n    alignItems: \"center\",\n    roundedTopRight: \"5px\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    roundedBottomRight: \"5px\",\n    backgroundColor: \"#fbfbfb\",\n    display: ['none', 'flex', 'flex'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 7\n    }\n  }, __jsx(Heading, {\n    pb: \"0.5rem\",\n    fontSize: \"1rem\",\n    color: \"blue.500\",\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 9\n    }\n  }, \"Estimated Audience\"), __jsx(Text, {\n    color: \"blue.500\",\n    fontSize: \"3rem\",\n    fontWeight: 700,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 9\n    }\n  }, numberWithCommas(Math.ceil(values.count || audienceCount)))));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/marketing/campaigns/components/planner/new-audience-modal.tsx"],"names":["Alert","AlertIcon","Box","Flex","FormControl","FormErrorMessage","FormLabel","Heading","Icon","Input","Stack","Text","Tooltip","useToast","useFormik","React","yup","numberWithCommas","AdvancedSelect","ModalContainer","ToastBox","Button","image","identityGraphDependentValues","identityGraphNumberFilter","NewAudienceModal","states","isOpen","onClose","genders","onSubmit","isLoading","religions","ethnicGroups","hasAudiences","section","setSection","useState","handleClose","WelcomeSection","onContinue","FormSection","onCancel","toast","values","errors","touched","handleChange","setFieldValue","handleSubmit","state","lga","gender","count","name","predicted_religion","predicted_ethnicity","Math","ceil","undefined","initialValues","percentage","validationSchema","object","shape","string","required","inputRef","useRef","areas","setAreas","audienceCount","setAudienceCount","handleFetchCount","data","requiredFields","Object","every","item","error","position","render","handleFetchLgas","attribute","dependent","attribute_values","keys","map","label","showBadge","options","value","useEffect","current","focus","length","e","target","parseFloat","toFixed"],"mappings":"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","sourcesContent":["import {\n  Alert,\n  AlertIcon,\n  Box,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Heading,\n  Icon,\n  Input,\n  Stack,\n  Text,\n  Tooltip,\n  useToast,\n} from '@chakra-ui/core';\nimport { useFormik } from 'formik';\nimport React from 'react';\nimport * as yup from 'yup';\nimport { numberWithCommas } from '../../../../../../utils';\nimport {\n  AdvancedSelect,\n  ModalContainer,\n  ModalContainerOptions,\n  ToastBox,\n  Button,\n} from 'app/components';\nimport image from '../../assets/search-user.svg';\nimport { identityGraphDependentValues, identityGraphNumberFilter } from '../../campaigns.service';\n\nexport interface NewAudiencePayload {\n  name: string;\n  lga?: string[];\n  count?: number;\n  state?: string[];\n  gender?: string[];\n  percentage?: number;\n  predicted_religion?: string[];\n  predicted_ethnicity?: string[];\n}\n\ntype NewAudienceModalProps = ModalContainerOptions & {\n  states?: any[];\n  genders?: any[];\n  religions?: any[];\n  isLoading?: boolean;\n  ethnicGroups?: any[];\n  hasAudiences?: boolean;\n  onSubmit: (payload: {\n    name: string;\n    count: number;\n    lga?: string[];\n    state?: string[];\n    gender?: string[];\n  }) => void;\n};\n\nexport const NewAudienceModal = ({\n  states,\n  isOpen,\n  onClose,\n  genders,\n  onSubmit,\n  isLoading,\n  religions,\n  ethnicGroups,\n  hasAudiences,\n}: NewAudienceModalProps) => {\n  const [section, setSection] = React.useState(hasAudiences ? 1 : 0);\n  const handleClose = () => {\n    setSection(0);\n    onClose?.();\n  };\n\n  return (\n    <ModalContainer size=\"3xl\" closeOnOverlayClick={false} isOpen={isOpen} onClose={handleClose}>\n      {section === 0 && <WelcomeSection onContinue={() => setSection(1)} />}\n      {section === 1 && (\n        <FormSection\n          states={states}\n          genders={genders}\n          onSubmit={onSubmit}\n          religions={religions}\n          isLoading={isLoading}\n          onCancel={handleClose}\n          ethnicGroups={ethnicGroups}\n        />\n      )}\n    </ModalContainer>\n  );\n};\n\nconst WelcomeSection = ({ onContinue }: { onContinue(): void }) => {\n  return (\n    <Stack isInline spacing=\"0\" width=\"100%\">\n      <Box width={['100%', '60%', '60%']}>\n        <Box height=\"400px\" position=\"relative\">\n          <Box\n            p=\"1rem\"\n            height=\"100%\"\n            display=\"flex\"\n            alignItems=\"center\"\n            flexDirection=\"column\"\n            justifyContent=\"center\"\n          >\n            <Box mb=\"1rem\" px=\"1rem\" bg=\"#80d086\" color=\"white\" rounded=\"100px\" fontSize=\"0.875rem\">\n              Beta\n            </Box>\n            <Heading fontSize=\"1.4rem\" mb=\"0.2rem\" textAlign=\"center\">\n              Welcome to new audiences{' '}\n              <span role=\"img\" aria-label=\"hand wave\">\n                👋🏾\n              </span>\n            </Heading>\n            <Text pb=\"4rem\" fontSize=\"0.875rem\" textAlign=\"center\">\n              New audience is a way to reach new people who are likely to be interested in your\n              business because they're similar to your best existing customers.\n            </Text>\n          </Box>\n          <Flex\n            p=\"1rem\"\n            bottom=\"0\"\n            width=\"100%\"\n            position=\"absolute\"\n            borderTopWidth=\"1px\"\n            justifyContent=\"center\"\n          >\n            <Button size=\"sm\" variantColor=\"blue\" onClick={onContinue}>\n              Continue\n            </Button>\n          </Flex>\n        </Box>\n      </Box>\n      <Box\n        width=\"40%\"\n        bgSize=\"120%\"\n        bgPos=\"center\"\n        roundedTopRight=\"5px\"\n        roundedBottomRight=\"5px\"\n        bgImage={`url(${image})`}\n        backgroundRepeat=\"no-repeat\"\n        display={['none', 'block', 'block']}\n      />\n    </Stack>\n  );\n};\n\ntype FormSectionProps = {\n  onCancel(): void;\n  isLoading?: boolean;\n  onSubmit: (payload: {\n    name: string;\n    count: number;\n    lga?: string[];\n    state?: string[];\n    gender?: string[];\n    predicted_religion?: string[];\n    predicted_ethnicity?: string[];\n  }) => void;\n  states: NewAudienceModalProps['states'];\n  genders: NewAudienceModalProps['genders'];\n  religions: NewAudienceModalProps['religions'];\n  ethnicGroups: NewAudienceModalProps['ethnicGroups'];\n};\n\nconst FormSection = ({\n  states,\n  genders,\n  religions,\n  ethnicGroups,\n  onSubmit,\n  onCancel,\n  isLoading,\n}: FormSectionProps) => {\n  const toast = useToast();\n  const { values, errors, touched, handleChange, setFieldValue, handleSubmit } = useFormik<{\n    name: string;\n    count: number;\n    lga?: string[];\n    state?: string[];\n    gender?: string[];\n    percentage?: number;\n    predicted_religion?: string[];\n    predicted_ethnicity?: string[];\n  }>({\n    onSubmit: values => {\n      const { state, lga, gender, count, name, predicted_religion, predicted_ethnicity } = values;\n      onSubmit({\n        name,\n        count: Math.ceil(count),\n        lga: lga ? lga : undefined,\n        state: state ? state : undefined,\n        gender: gender ? gender : undefined,\n        predicted_religion: predicted_religion ? predicted_religion : undefined,\n        predicted_ethnicity: predicted_ethnicity ? predicted_ethnicity : undefined,\n      });\n    },\n    initialValues: {\n      name: '',\n      percentage: 100,\n      state: undefined,\n      lga: undefined,\n      gender: undefined,\n      count: 0,\n      predicted_religion: undefined,\n      predicted_ethnicity: undefined,\n    },\n    validationSchema: yup\n      .object()\n      .shape({ name: yup.string().required('Audience name is required') }),\n  });\n\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const [areas, setAreas] = React.useState<\n    {\n      label: string;\n      options: any;\n      showBadge: boolean;\n    }[]\n  >([]);\n  const [audienceCount, setAudienceCount] = React.useState(0);\n\n  const handleFetchCount = async (data: Partial<NewAudiencePayload>) => {\n    const { state, lga, gender, predicted_religion, predicted_ethnicity } = data;\n    const requiredFields = { state, lga, gender, predicted_religion, predicted_ethnicity };\n\n    if (Object.values(requiredFields).every(item => !item)) {\n      setFieldValue('count', 0);\n      setAudienceCount(0);\n      return;\n    }\n\n    try {\n      const audienceCount = await identityGraphNumberFilter({\n        lga: lga ? lga : undefined,\n        state: state ? state : undefined,\n        gender: gender ? gender : undefined,\n        predicted_religion: predicted_religion ? predicted_religion : undefined,\n        predicted_ethnicity: predicted_ethnicity ? predicted_ethnicity : undefined,\n      });\n      setFieldValue('count', audienceCount);\n      setAudienceCount(audienceCount);\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n  };\n\n  const handleFetchLgas = async (states: string[]) => {\n    try {\n      const data = await identityGraphDependentValues({\n        attribute: 'state',\n        dependent: 'lga',\n        attribute_values: states,\n      });\n      const areas = Object.keys(data).map(item => ({\n        label: item,\n        showBadge: true,\n        options: data[item].map((item: string) => ({ label: item, value: item })),\n      }));\n      setAreas(areas);\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n  };\n\n  React.useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  return (\n    <Stack isInline spacing=\"0\" width=\"100%\">\n      <Box width={['100%', '60%', '60%']}>\n        <Box height=\"100%\" position=\"relative\">\n          <Box p=\"1rem\">\n            <Heading fontSize=\"1.4rem\" mb=\"1rem\">\n              Create a new audience\n            </Heading>\n            <Box pb=\"3rem\">\n              <form>\n                <FormControl mb=\"1rem\" isInvalid={!!touched.name && !!errors.name}>\n                  <FormLabel fontSize=\"0.875rem\" marginBottom=\"0.2rem\">\n                    Audience name\n                  </FormLabel>\n                  <Input\n                    size=\"sm\"\n                    type=\"text\"\n                    name=\"name\"\n                    ref={inputRef}\n                    value={values.name}\n                    onChange={handleChange}\n                    placeholder=\"Give your audience a name\"\n                  />\n                  <FormErrorMessage>{errors.name}</FormErrorMessage>\n                </FormControl>\n                <FormControl mb=\"1rem\" isInvalid={!!touched.state && !!errors.state}>\n                  <FormLabel fontSize=\"0.85rem\">\n                    <Stack isInline alignItems=\"center\">\n                      <Text>State</Text>\n                      <Tooltip\n                        zIndex={10000}\n                        placement=\"right\"\n                        aria-label=\"State\"\n                        label=\"Select a state\"\n                      >\n                        <Icon size=\"0.75rem\" name=\"info\" color=\"gray.500\" />\n                      </Tooltip>\n                    </Stack>\n                  </FormLabel>\n                  <AdvancedSelect\n                    isMulti\n                    size=\"sm\"\n                    isSearchable\n                    isClearable={false}\n                    placeholder=\"Search & Select a state\"\n                    isInvalid={!!touched.state && !!errors.state}\n                    onChange={data => {\n                      const state = data?.map((item: any) => item.value);\n                      state && state.length && handleFetchLgas(state);\n                      setFieldValue('state', state);\n                      setFieldValue('lga', '');\n                      setFieldValue('percentage', 100);\n                      handleFetchCount({\n                        ...values,\n                        state: !!state && state.length ? state : undefined,\n                      });\n                    }}\n                    options={states}\n                  />\n                  <FormErrorMessage>{errors.state}</FormErrorMessage>\n                </FormControl>\n                {values.state && (\n                  <FormControl mb=\"1rem\" isInvalid={!!touched.lga && !!errors.lga}>\n                    <FormLabel fontSize=\"0.875rem\" marginBottom=\"0.2rem\">\n                      <Stack isInline alignItems=\"center\">\n                        <Text>Area</Text>\n                        <Tooltip\n                          zIndex={10000}\n                          placement=\"right\"\n                          aria-label=\"Area\"\n                          label=\"Select an area to be very specific\"\n                        >\n                          <Icon size=\"0.75rem\" name=\"info\" color=\"gray.500\" />\n                        </Tooltip>\n                      </Stack>\n                    </FormLabel>\n                    <AdvancedSelect\n                      isMulti\n                      isGroup\n                      size=\"sm\"\n                      isSearchable\n                      isClearable={false}\n                      placeholder=\"Search & Select an area\"\n                      isInvalid={!!touched.lga && !!errors.lga}\n                      onChange={data => {\n                        const lga = data?.map((item: any) => item.value);\n                        setFieldValue('lga', lga);\n                        setFieldValue('percentage', 100);\n                        handleFetchCount({ ...values, lga: !!lga && lga.length ? lga : undefined });\n                      }}\n                      options={areas}\n                    />\n                    <FormErrorMessage>{errors.lga}</FormErrorMessage>\n                  </FormControl>\n                )}\n                <FormControl mb=\"1rem\" isInvalid={!!touched.gender && !!errors.gender}>\n                  <FormLabel fontSize=\"0.85rem\">Gender</FormLabel>\n                  <AdvancedSelect\n                    isMulti\n                    size=\"sm\"\n                    isSearchable\n                    isClearable={false}\n                    placeholder=\"Select gender\"\n                    isInvalid={!!touched.gender && !!errors.gender}\n                    onChange={data => {\n                      const gender = data?.map((item: any) => item.value);\n                      setFieldValue('gender', gender);\n                      setFieldValue('percentage', 100);\n                      handleFetchCount({\n                        ...values,\n                        gender: !!gender && gender.length ? gender : undefined,\n                      });\n                    }}\n                    options={genders}\n                  />\n                  <FormErrorMessage>{errors.gender}</FormErrorMessage>\n                </FormControl>\n                <FormControl\n                  mb=\"1rem\"\n                  isInvalid={!!touched.predicted_ethnicity && !!errors.predicted_ethnicity}\n                >\n                  <FormLabel fontSize=\"0.85rem\">Ethnicity</FormLabel>\n                  <AdvancedSelect\n                    isMulti\n                    size=\"sm\"\n                    isSearchable\n                    isClearable={false}\n                    placeholder=\"Select ethnicity\"\n                    isInvalid={!!touched.predicted_ethnicity && !!errors.predicted_ethnicity}\n                    onChange={data => {\n                      const predicted_ethnicity = data?.map((item: any) => item.value);\n                      setFieldValue('predicted_ethnicity', predicted_ethnicity);\n                      setFieldValue('percentage', 100);\n                      handleFetchCount({\n                        ...values,\n                        predicted_ethnicity:\n                          !!predicted_ethnicity && predicted_ethnicity.length\n                            ? predicted_ethnicity\n                            : undefined,\n                      });\n                    }}\n                    options={ethnicGroups}\n                  />\n                  <FormErrorMessage>{errors.predicted_ethnicity}</FormErrorMessage>\n                </FormControl>\n                <FormControl\n                  mb=\"1rem\"\n                  isInvalid={!!touched.predicted_religion && !!errors.predicted_religion}\n                >\n                  <FormLabel fontSize=\"0.85rem\">Religion</FormLabel>\n                  <AdvancedSelect\n                    isMulti\n                    size=\"sm\"\n                    isSearchable\n                    isClearable={false}\n                    placeholder=\"Select religion\"\n                    isInvalid={!!touched.predicted_religion && !!errors.predicted_religion}\n                    onChange={data => {\n                      const predicted_religion = data?.map((item: any) => item.value);\n                      setFieldValue('predicted_religion', predicted_religion);\n                      setFieldValue('percentage', 100);\n                      handleFetchCount({\n                        ...values,\n                        predicted_religion:\n                          !!predicted_religion && predicted_religion.length\n                            ? predicted_religion\n                            : undefined,\n                      });\n                    }}\n                    options={religions}\n                  />\n                  <FormErrorMessage>{errors.predicted_ethnicity}</FormErrorMessage>\n                </FormControl>\n                {!!audienceCount && (\n                  <>\n                    <FormControl mb=\"1rem\" isInvalid={!!touched.percentage && !!errors.percentage}>\n                      <FormLabel fontSize=\"0.85rem\">Target by percentage</FormLabel>\n                      <Input\n                        max={100}\n                        step={0.1}\n                        type=\"number\"\n                        value={values.percentage}\n                        placeholder=\"Enter a percentage\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          const value = e.target.value ? parseFloat(e.target.value) : 0;\n                          if (value <= 100) {\n                            const count = parseFloat(\n                              ((value / 100) * (audienceCount ?? 0)).toFixed(2),\n                            );\n                            setFieldValue('percentage', value);\n                            setFieldValue('count', count);\n                          }\n                        }}\n                      />\n                      <FormErrorMessage>{errors.percentage}</FormErrorMessage>\n                    </FormControl>\n                    <Alert\n                      mb=\"2.5rem\"\n                      status=\"info\"\n                      borderRadius=\"0.125rem\"\n                      backgroundColor=\"rgb(198, 246, 213)\"\n                    >\n                      <AlertIcon size=\"1rem\" color=\"rgb(56, 161, 105)\" />\n                      <Text fontSize=\"0.875rem\">\n                        You won't be billed for messages sent to numbers on DND.\n                      </Text>\n                    </Alert>\n                  </>\n                )}\n              </form>\n            </Box>\n          </Box>\n          <Stack\n            p=\"1rem\"\n            isInline\n            bottom=\"0\"\n            width=\"100%\"\n            position=\"absolute\"\n            borderTopWidth=\"1px\"\n            justifyContent=\"flex-end\"\n          >\n            <Button size=\"sm\" onClick={onCancel}>\n              Cancel\n            </Button>\n            <Button\n              size=\"sm\"\n              variantColor=\"blue\"\n              isLoading={isLoading}\n              onClick={handleSubmit}\n              isDisabled={!values.count || !audienceCount}\n            >\n              Create audience\n            </Button>\n          </Stack>\n        </Box>\n      </Box>\n      <Box\n        p=\"1rem\"\n        width=\"40%\"\n        alignItems=\"center\"\n        roundedTopRight=\"5px\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n        roundedBottomRight=\"5px\"\n        backgroundColor=\"#fbfbfb\"\n        display={['none', 'flex', 'flex']}\n      >\n        <Heading pb=\"0.5rem\" fontSize=\"1rem\" color=\"blue.500\" fontWeight={500}>\n          Estimated Audience\n        </Heading>\n        <Text color=\"blue.500\" fontSize=\"3rem\" fontWeight={700}>\n          {numberWithCommas(Math.ceil(values.count || audienceCount))}\n        </Text>\n      </Box>\n    </Stack>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}