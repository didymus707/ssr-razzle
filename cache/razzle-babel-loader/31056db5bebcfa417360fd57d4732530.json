{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/lists/components/cell-properties/number/field.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Input } from '@chakra-ui/core';\nexport const NumberFieldComponent = props => {\n  const {\n    0: dummyValue,\n    1: setDummyValue\n  } = useState('');\n  const {\n    0: pristine,\n    1: setPristine\n  } = useState(true);\n  const inputRef = useRef(null);\n  const {\n    column,\n    placeholder\n  } = props;\n  const regexp = /^[0-9\\b]+$/;\n\n  const handleDummyValueChanged = event => {\n    const updated_value = event.target.value;\n    if (updated_value === '' || regexp.test(updated_value)) setDummyValue(updated_value);\n    setPristine(false);\n  };\n\n  const handleOnEnterPressed = event => {\n    event.stopPropagation();\n    if (event.key !== 'Enter') return;\n    if (pristine) return;\n    props.updateCellValue(dummyValue, column.uid);\n    event.target.blur();\n    setPristine(true);\n  };\n\n  const handleOnBlur = () => {\n    if (pristine) return;\n    props.updateCellValue(dummyValue, column.uid);\n    setPristine(true);\n  };\n\n  useEffect(() => {\n    setDummyValue(props.value || '');\n  }, [props.value]);\n  const {\n    field_props = {}\n  } = props;\n  return __jsx(Input, _extends({\n    ref: inputRef,\n    value: dummyValue,\n    onBlur: handleOnBlur,\n    onChange: handleDummyValueChanged,\n    onKeyPress: handleOnEnterPressed,\n    placeholder: placeholder\n  }, field_props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/lists/components/cell-properties/number/field.tsx"],"names":["React","useEffect","useRef","useState","Input","NumberFieldComponent","props","dummyValue","setDummyValue","pristine","setPristine","inputRef","column","placeholder","regexp","handleDummyValueChanged","event","updated_value","target","value","test","handleOnEnterPressed","stopPropagation","key","updateCellValue","uid","blur","handleOnBlur","field_props"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,KAAT,QAAsB,iBAAtB;AAEA,OAAO,MAAMC,oBAAoB,GAAIC,KAAD,IAAgB;AAClD,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BL,QAAQ,CAAS,EAAT,CAA5C;AACA,QAAM;AAAA,OAACM,QAAD;AAAA,OAAWC;AAAX,MAA0BP,QAAQ,CAAU,IAAV,CAAxC;AACA,QAAMQ,QAAQ,GAAGT,MAAM,CAAC,IAAD,CAAvB;AAEA,QAAM;AAAEU,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAA0BP,KAAhC;AAEA,QAAMQ,MAAM,GAAG,YAAf;;AAEA,QAAMC,uBAAuB,GAAIC,KAAD,IAAgB;AAC9C,UAAMC,aAAa,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAnC;AACA,QAAIF,aAAa,KAAK,EAAlB,IAAwBH,MAAM,CAACM,IAAP,CAAYH,aAAZ,CAA5B,EAAwDT,aAAa,CAACS,aAAD,CAAb;AACxDP,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GAJD;;AAMA,QAAMW,oBAAoB,GAAIL,KAAD,IAAgB;AAC3CA,IAAAA,KAAK,CAACM,eAAN;AACA,QAAIN,KAAK,CAACO,GAAN,KAAc,OAAlB,EAA2B;AAC3B,QAAId,QAAJ,EAAc;AACdH,IAAAA,KAAK,CAACkB,eAAN,CAAsBjB,UAAtB,EAAkCK,MAAM,CAACa,GAAzC;AACAT,IAAAA,KAAK,CAACE,MAAN,CAAaQ,IAAb;AACAhB,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAPD;;AASA,QAAMiB,YAAY,GAAG,MAAM;AACzB,QAAIlB,QAAJ,EAAc;AACdH,IAAAA,KAAK,CAACkB,eAAN,CAAsBjB,UAAtB,EAAkCK,MAAM,CAACa,GAAzC;AACAf,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAJD;;AAMAT,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,aAAa,CAACF,KAAK,CAACa,KAAN,IAAe,EAAhB,CAAb;AACD,GAFQ,EAEN,CAACb,KAAK,CAACa,KAAP,CAFM,CAAT;AAIA,QAAM;AAAES,IAAAA,WAAW,GAAG;AAAhB,MAAuBtB,KAA7B;AAEA,SACE,MAAC,KAAD;AACE,IAAA,GAAG,EAAEK,QADP;AAEE,IAAA,KAAK,EAAEJ,UAFT;AAGE,IAAA,MAAM,EAAEoB,YAHV;AAIE,IAAA,QAAQ,EAAEZ,uBAJZ;AAKE,IAAA,UAAU,EAAEM,oBALd;AAME,IAAA,WAAW,EAAER;AANf,KAOMe,WAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAWD,CA/CM","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Input } from '@chakra-ui/core';\n\nexport const NumberFieldComponent = (props: any) => {\n  const [dummyValue, setDummyValue] = useState<string>('');\n  const [pristine, setPristine] = useState<boolean>(true);\n  const inputRef = useRef(null);\n\n  const { column, placeholder } = props;\n\n  const regexp = /^[0-9\\b]+$/;\n\n  const handleDummyValueChanged = (event: any) => {\n    const updated_value = event.target.value;\n    if (updated_value === '' || regexp.test(updated_value)) setDummyValue(updated_value);\n    setPristine(false);\n  };\n\n  const handleOnEnterPressed = (event: any) => {\n    event.stopPropagation();\n    if (event.key !== 'Enter') return;\n    if (pristine) return;\n    props.updateCellValue(dummyValue, column.uid);\n    event.target.blur();\n    setPristine(true);\n  };\n\n  const handleOnBlur = () => {\n    if (pristine) return;\n    props.updateCellValue(dummyValue, column.uid);\n    setPristine(true);\n  };\n\n  useEffect(() => {\n    setDummyValue(props.value || '');\n  }, [props.value]);\n\n  const { field_props = {} } = props;\n\n  return (\n    <Input\n      ref={inputRef}\n      value={dummyValue}\n      onBlur={handleOnBlur}\n      onChange={handleDummyValueChanged}\n      onKeyPress={handleOnEnterPressed}\n      placeholder={placeholder}\n      {...field_props}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}