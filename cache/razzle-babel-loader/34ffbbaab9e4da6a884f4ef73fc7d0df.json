{"ast":null,"code":"import _objectSpread from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { buildPaymentURL, client } from '../../../../utils';\nimport { setPaymentRequestsData, setPaymentRequestsLoading } from '../reducers';\nimport { sendAmplitudeData } from '../../../../utils/amplitude';\nconst initial_meta = {\n  page: 0,\n  per_page: 10,\n  count_total: 0,\n  page_total: 1,\n  prev_page: false,\n  next_page: true\n};\nexport const fetchPaymentRequests = (page = 1, status = 'all', search_query = '', date_range = {\n  from: null,\n  to: null,\n  on: null\n}) => async dispatch => {\n  dispatch(setPaymentRequestsLoading({\n    loading: true\n  }));\n  dispatch(resetPaymentRequestsData());\n\n  try {\n    const params = {\n      page,\n      per_page: 15,\n      query: search_query,\n      status\n    };\n    if (date_range['from']) params['date_from'] = date_range['from'];\n    if (date_range['to']) params['date_to'] = date_range['to'];\n    if (date_range['on']) params['date_on'] = date_range['on'];\n    const response = await client('', {\n      url: buildPaymentURL(`/payment_request/`),\n      method: 'GET',\n      params\n    });\n    const {\n      meta\n    } = response;\n    const data = {};\n    const by_id = [];\n    response.data.forEach(i => {\n      data[i.id] = i;\n      if (!by_id.includes(i.id)) by_id.push(i.id);\n    });\n    dispatch(setPaymentRequestsData({\n      data,\n      by_id,\n      meta\n    }));\n    dispatch(setPaymentRequestsLoading({\n      loading: false\n    }));\n    return response['data'];\n  } catch (e) {\n    dispatch(setPaymentRequestsLoading({\n      loading: false\n    }));\n    return null;\n  }\n};\nexport const cancelPaymentRequest = (request_id, notify = false) => async (dispatch, getState) => {\n  sendAmplitudeData('cancelPaymentRequest');\n  const {\n    payments: {\n      payment_requests: {\n        data,\n        by_id,\n        meta\n      }\n    }\n  } = getState();\n\n  try {\n    const response = await client('', {\n      url: buildPaymentURL(`/payment_request/${request_id}`),\n      method: 'DELETE',\n      params: {\n        notify\n      }\n    }); // @ts-ignore\n\n    const updated_data = _objectSpread(_objectSpread({}, data), {}, {\n      [request_id]: _objectSpread(_objectSpread({}, data[request_id]), response['data'])\n    });\n\n    dispatch(setPaymentRequestsData({\n      data: updated_data,\n      by_id,\n      meta\n    }));\n    return response['data'];\n  } catch (e) {\n    return null;\n  }\n};\nexport const markPaymentRequestPaid = request_id => async (dispatch, getState) => {\n  sendAmplitudeData('markPaymentRequestPaid');\n  const {\n    payments: {\n      payment_requests: {\n        data,\n        by_id,\n        meta\n      }\n    }\n  } = getState();\n\n  try {\n    const response = await client('', {\n      url: buildPaymentURL(`/payment_request/${request_id}`),\n      method: 'PUT'\n    }); // @ts-ignore\n\n    const updated_data = _objectSpread(_objectSpread({}, data), {}, {\n      [request_id]: _objectSpread(_objectSpread({}, data[request_id]), response['data'])\n    });\n\n    dispatch(setPaymentRequestsData({\n      data: updated_data,\n      by_id,\n      meta\n    }));\n    return response['data'];\n  } catch (e) {\n    return null;\n  }\n};\nexport const resetPaymentRequestsData = () => async dispatch => {\n  dispatch(setPaymentRequestsData({\n    data: {},\n    by_id: [],\n    meta: initial_meta\n  }));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/payments/thunks/payment_requests.ts"],"names":["buildPaymentURL","client","setPaymentRequestsData","setPaymentRequestsLoading","sendAmplitudeData","initial_meta","page","per_page","count_total","page_total","prev_page","next_page","fetchPaymentRequests","status","search_query","date_range","from","to","on","dispatch","loading","resetPaymentRequestsData","params","query","response","url","method","meta","data","by_id","forEach","i","id","includes","push","e","cancelPaymentRequest","request_id","notify","getState","payments","payment_requests","updated_data","markPaymentRequestPaid"],"mappings":"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","sourcesContent":["import { buildPaymentURL, client } from '../../../../utils';\nimport { setPaymentRequestsData, setPaymentRequestsLoading } from '../reducers';\nimport { AppThunk } from '../../../../root';\nimport { Meta, PaymentRequest } from '../payments.types';\nimport { sendAmplitudeData } from '../../../../utils/amplitude';\n\nconst initial_meta: Meta = {\n  page: 0,\n  per_page: 10,\n  count_total: 0,\n  page_total: 1,\n  prev_page: false,\n  next_page: true,\n};\n\nexport const fetchPaymentRequests = (\n  page = 1,\n  status = 'all',\n  search_query = '',\n  date_range = { from: null, to: null, on: null },\n): AppThunk => async dispatch => {\n  dispatch(setPaymentRequestsLoading({ loading: true }));\n  dispatch(resetPaymentRequestsData());\n\n  try {\n    const params: { [key: string]: any } = {\n      page,\n      per_page: 15,\n      query: search_query,\n      status,\n    };\n\n    if (date_range['from']) params['date_from'] = date_range['from'];\n    if (date_range['to']) params['date_to'] = date_range['to'];\n    if (date_range['on']) params['date_on'] = date_range['on'];\n\n    const response = await client('', {\n      url: buildPaymentURL(`/payment_request/`),\n      method: 'GET',\n      params,\n    });\n\n    const { meta } = response;\n    const data: { [key: string]: PaymentRequest } = {};\n    const by_id: string[] = [];\n\n    response.data.forEach((i: PaymentRequest) => {\n      data[i.id] = i;\n      if (!by_id.includes(i.id)) by_id.push(i.id);\n    });\n\n    dispatch(setPaymentRequestsData({ data, by_id, meta }));\n    dispatch(setPaymentRequestsLoading({ loading: false }));\n    return response['data'];\n  } catch (e) {\n    dispatch(setPaymentRequestsLoading({ loading: false }));\n    return null;\n  }\n};\n\nexport const cancelPaymentRequest = (request_id: string, notify = false): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  sendAmplitudeData('cancelPaymentRequest');\n  const {\n    payments: {\n      payment_requests: { data, by_id, meta },\n    },\n  } = getState();\n\n  try {\n    const response = await client('', {\n      url: buildPaymentURL(`/payment_request/${request_id}`),\n      method: 'DELETE',\n      params: {\n        notify,\n      },\n    });\n    // @ts-ignore\n    const updated_data = { ...data, [request_id]: { ...data[request_id], ...response['data'] } };\n    dispatch(setPaymentRequestsData({ data: updated_data, by_id, meta }));\n    return response['data'];\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const markPaymentRequestPaid = (request_id: string): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  sendAmplitudeData('markPaymentRequestPaid');\n  const {\n    payments: {\n      payment_requests: { data, by_id, meta },\n    },\n  } = getState();\n\n  try {\n    const response = await client('', {\n      url: buildPaymentURL(`/payment_request/${request_id}`),\n      method: 'PUT',\n    });\n    // @ts-ignore\n    const updated_data = { ...data, [request_id]: { ...data[request_id], ...response['data'] } };\n    dispatch(setPaymentRequestsData({ data: updated_data, by_id, meta }));\n    return response['data'];\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const resetPaymentRequestsData = (): AppThunk => async dispatch => {\n  dispatch(\n    setPaymentRequestsData({\n      data: {},\n      by_id: [],\n      meta: initial_meta,\n    }),\n  );\n};\n"]},"metadata":{},"sourceType":"module"}