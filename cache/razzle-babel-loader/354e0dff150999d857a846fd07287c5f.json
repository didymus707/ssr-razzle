{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/lists/component/lists/components/segments/create-segment/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Box, Divider, IconButton, Spinner, useToast } from '@chakra-ui/core/dist';\nimport { useHistory } from 'react-router';\nimport { useSelector } from 'react-redux';\nimport { selectDataModels } from '../../../../../lists.selectors';\nimport { Button, Input, Select, Textarea, ToastBox } from 'app/components';\nimport { v4 as uuid } from 'uuid';\nimport { FilterItem } from '../../../../../components/filter/filter-item';\nimport { available_operators } from '../../../../../list.data';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nconst validationSchema = yup.object().shape({\n  name: yup.string().required('Segment name is required')\n});\nexport const CreateSegment = props => {\n  const {\n    0: selectedDataModel,\n    1: setSelectedDataModel\n  } = useState(null);\n  const {\n    0: dataModelColumns,\n    1: setDataModelColumns\n  } = useState(null);\n  const {\n    0: dataModelLoading,\n    1: setDataModelLoading\n  } = useState(false);\n  const {\n    0: filters,\n    1: setFilters\n  } = useState([]);\n  const {\n    0: proceedAttempted,\n    1: setProceedAttempted\n  } = useState(false);\n\n  const handleCreateSegment = async values => {\n    setSubmitting(true);\n\n    const payload = _objectSpread(_objectSpread({}, values), {}, {\n      data_model: selectedDataModel,\n      filters: filters.map(i => {\n        const filterItem = _objectSpread(_objectSpread({}, i), {}, {\n          column: i.columnID\n        });\n\n        const {\n          subOperator\n        } = filterItem;\n        if (!subOperator) return filterItem;\n        if (subOperator === 'today') filterItem['value'] = {\n          diff: '0',\n          period: 'day'\n        };\n        if (subOperator === 'tomorrow') filterItem['value'] = {\n          diff: '+1',\n          period: 'day'\n        };\n        if (subOperator === 'yesterday') filterItem['value'] = {\n          diff: '-1',\n          period: 'day'\n        };\n        if (subOperator === 'one week ago') filterItem['value'] = {\n          diff: '-7',\n          period: 'day'\n        };\n        if (subOperator === 'one week from now') filterItem['value'] = {\n          diff: '+7',\n          period: 'day'\n        };\n        if (subOperator === 'one month ago') filterItem['value'] = {\n          diff: '-1',\n          period: 'month'\n        };\n        if (subOperator === 'one month from now') filterItem['value'] = {\n          diff: '+1',\n          period: 'month'\n        };\n\n        if (subOperator === 'number of days from now') {\n          filterItem['value'] = {\n            diff: filterItem['value'] ? `+${filterItem['value']}` : '0',\n            period: 'day'\n          };\n        }\n\n        if (subOperator !== 'exact date') {\n          filterItem['value'] = JSON.stringify(filterItem['value']);\n        }\n\n        return filterItem;\n      })\n    });\n\n    try {\n      await props.createSegment(payload);\n      toast({\n        position: 'bottom-left',\n        render: () => __jsx(ToastBox, {\n          status: \"success\",\n          message: \"Segment created successfully\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 23\n          }\n        })\n      });\n      setSubmitting(false);\n      return routerHistory.push('/s/lists/segments');\n    } catch (e) {\n      setSubmitting(false);\n      toast({\n        position: 'bottom-left',\n        render: () => __jsx(ToastBox, {\n          status: \"error\",\n          message: \"Unable to create segment, please try again\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 11\n          }\n        })\n      });\n    }\n  };\n\n  const formik = useFormik({\n    validationSchema: validationSchema,\n    initialValues: {\n      name: '',\n      description: ''\n    },\n    onSubmit: handleCreateSegment\n  });\n  const {\n    values,\n    errors,\n    handleChange,\n    handleBlur,\n    handleReset,\n    isSubmitting,\n    setSubmitting\n  } = formik;\n  const dataModels = useSelector(selectDataModels);\n  const routerHistory = useHistory();\n  const toast = useToast();\n\n  const handleDataModelChange = async dataModelID => {\n    setDataModelLoading(true);\n\n    try {\n      const dataModel = await props.fetchDataModel(dataModelID);\n      setDataModelColumns(dataModel.columns.map(i => _objectSpread(_objectSpread({}, i), {}, {\n        type: i.data_type\n      })));\n    } catch (e) {\n      setDataModelColumns(null);\n      toast({\n        position: 'bottom-left',\n        render: () => __jsx(ToastBox, {\n          status: \"error\",\n          message: \"Unable to fetch columns, please try again\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 11\n          }\n        })\n      });\n    }\n\n    setFilters([]);\n    setDataModelLoading(false);\n  };\n\n  const addFilter = () => {\n    if (!dataModelColumns || dataModelColumns.length === 0) return;\n    const firstColumn = dataModelColumns[0];\n    const filterUID = uuid();\n    let operator = 'contains';\n    let subOperator = null;\n\n    if (firstColumn.data_type === 'DATE') {\n      operator = 'dateEqual';\n      subOperator = 'exact date';\n    }\n\n    if (firstColumn.data_type === 'NUMBER') {\n      operator = 'equals';\n    }\n\n    const filterItem = {\n      uid: filterUID,\n      columnID: firstColumn['id'],\n      operator,\n      subOperator,\n      value: '',\n      name: firstColumn['name'],\n      conjunction: null\n    };\n\n    if (filters.length > 0) {\n      filterItem['conjunction'] = 'and';\n    }\n\n    const updatedFilters = [...filters, filterItem];\n    setFilters(updatedFilters);\n  };\n\n  const updateFilter = (filterIndex, payload) => {\n    const filter = filters[filterIndex];\n\n    const updatedFilter = _objectSpread(_objectSpread({}, filter), payload);\n\n    if (filter.columnID !== updatedFilter.columnID) {\n      const column = columns[updatedFilter.columnID];\n      const allowedOperator = Object.values(available_operators).find(i => i.column_types.includes(column.type));\n      updatedFilter['operator'] = allowedOperator === null || allowedOperator === void 0 ? void 0 : allowedOperator['key'];\n      if (column.type === 'DATE') updatedFilter['subOperator'] = 'exact date';else updatedFilter['subOperator'] = null;\n      updatedFilter['operator'] = allowedOperator === null || allowedOperator === void 0 ? void 0 : allowedOperator['key'];\n      if (column.type === 'DND') updatedFilter['value'] = true;\n    }\n\n    const updatedFilters = [...filters];\n    updatedFilters[filterIndex] = updatedFilter;\n\n    if (filter.conjunction !== updatedFilter.conjunction) {\n      updatedFilters.forEach((i, index) => {\n        if (index > 0) {\n          updatedFilters[index]['conjunction'] = updatedFilter['conjunction'];\n        }\n      });\n    }\n\n    setFilters(updatedFilters);\n  };\n\n  const deleteFilter = filterIndex => {\n    const updatedFilters = filters.filter((i, index) => index !== filterIndex);\n    if (filterIndex === 0 && updatedFilters.length > 0) updatedFilters[0].conjunction = null;\n    setFilters(updatedFilters);\n  };\n\n  useEffect(() => {\n    if (selectedDataModel !== null) {\n      handleDataModelChange(selectedDataModel);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [selectedDataModel]);\n  const columns = {};\n  const columns_by_id = [];\n\n  if (dataModelColumns) {\n    dataModelColumns.forEach(i => {\n      columns_by_id.push(i.id);\n      columns[i.id] = _objectSpread(_objectSpread({}, i), {}, {\n        label: i.key\n      });\n    });\n  }\n\n  return __jsx(Box, {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }\n  }, __jsx(IconButton, {\n    icon: \"arrow-back\",\n    size: \"xs\",\n    borderRadius: \"10px\",\n    \"aria-label\": \"back\",\n    mr: \"10px\",\n    mb: \"5px\",\n    onClick: () => routerHistory.goBack(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }\n  }), \"Create Segment\")), __jsx(Box, {\n    className: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }\n  }, \"Select your base data model, and then specify filters to segment your data\"), __jsx(Box, {\n    mt: \"2rem\",\n    mb: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    mb: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    label: \"Name\",\n    name: \"name\",\n    placeholder: \"Short and unique name for this segment\",\n    color: \"#333333\",\n    value: values.name,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    onReset: handleReset,\n    errorMessage: errors.name,\n    isInvalid: !!errors.name,\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  })), __jsx(Textarea, {\n    label: \"Description\",\n    name: \"description\",\n    placeholder: \"Brief description on what this segment was created for\",\n    mb: \"1.5rem\",\n    color: \"#333333\",\n    value: values.description,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    onReset: handleReset,\n    errorMessage: errors.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }\n  }), __jsx(Select, {\n    label: \"Data Model\",\n    width: \"100%\",\n    mb: \"1rem\",\n    color: \"#333333\",\n    isInvalid: !selectedDataModel && proceedAttempted,\n    errorMessage: \"Segment data model is required\",\n    onChange: event => {\n      const value = event.target.value;\n\n      if (value !== 'null') {\n        setSelectedDataModel(value);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }\n  }, __jsx(\"option\", {\n    value: \"null\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 11\n    }\n  }, \"Select data model\"), dataModels.map(i => __jsx(\"option\", {\n    key: i.id,\n    value: i.id,\n    label: i.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }\n  }, i.name)))), dataModelLoading && __jsx(Spinner, {\n    thickness: \"4px\",\n    speed: \"0.65s\",\n    emptyColor: \"gray.200\",\n    color: \"blue.500\",\n    size: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 9\n    }\n  }), dataModelColumns && __jsx(Box, {\n    mt: \"1rem\",\n    mb: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    color: \"#737373\",\n    fontWeight: \"500\",\n    mb: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    mr: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 13\n    }\n  }, \"Filters\"), __jsx(Divider, {\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 13\n    }\n  })), __jsx(Box, {\n    color: \"#333333\",\n    maxW: \"700px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 11\n    }\n  }, filters.map((filter, index) => __jsx(FilterItem, _extends({}, _objectSpread(_objectSpread({}, filter), {}, {\n    index,\n    key: index,\n    uid: index,\n    columns,\n    columns_by_id,\n    allow_conjunction_select: index !== 0,\n    updateFilter,\n    deleteFilter,\n    debounceUpdate: false\n  }), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 15\n    }\n  })))), filters.length === 0 && __jsx(Box, {\n    color: \"#333333\",\n    fontSize: \"14px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 13\n    }\n  }, \"You haven't added any filters here yet\"), __jsx(Button, {\n    size: \"sm\",\n    variant: \"link\",\n    variantColor: \"blue\",\n    mt: \"1rem\",\n    onClick: addFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 11\n    }\n  }, \"Add a filter\")), __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    mt: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    variantColor: \"blue\",\n    variant: \"solid\",\n    onClick: event => {\n      setProceedAttempted(true);\n      if (!selectedDataModel) return;\n      formik.handleSubmit(event);\n    },\n    isLoading: isSubmitting,\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 9\n    }\n  }, \"Create segment\")));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/lists/component/lists/components/segments/create-segment/index.tsx"],"names":["React","useEffect","useState","Box","Divider","IconButton","Spinner","useToast","useHistory","useSelector","selectDataModels","Button","Input","Select","Textarea","ToastBox","v4","uuid","FilterItem","available_operators","useFormik","yup","validationSchema","object","shape","name","string","required","CreateSegment","props","selectedDataModel","setSelectedDataModel","dataModelColumns","setDataModelColumns","dataModelLoading","setDataModelLoading","filters","setFilters","proceedAttempted","setProceedAttempted","handleCreateSegment","values","setSubmitting","payload","data_model","map","i","filterItem","column","columnID","subOperator","diff","period","JSON","stringify","createSegment","toast","position","render","routerHistory","push","e","formik","initialValues","description","onSubmit","errors","handleChange","handleBlur","handleReset","isSubmitting","dataModels","handleDataModelChange","dataModelID","dataModel","fetchDataModel","columns","type","data_type","addFilter","length","firstColumn","filterUID","operator","uid","value","conjunction","updatedFilters","updateFilter","filterIndex","filter","updatedFilter","allowedOperator","Object","find","column_types","includes","forEach","index","deleteFilter","columns_by_id","id","label","key","goBack","event","target","allow_conjunction_select","debounceUpdate","handleSubmit"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Box, Divider, IconButton, Spinner, useToast } from '@chakra-ui/core/dist';\nimport { useHistory } from 'react-router';\nimport { useSelector } from 'react-redux';\nimport { selectDataModels } from '../../../../../lists.selectors';\nimport { Button, Input, Select, Textarea, ToastBox } from 'app/components';\nimport { v4 as uuid } from 'uuid';\nimport { FilterItem } from '../../../../../components/filter/filter-item';\nimport { available_operators } from '../../../../../list.data';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\ninterface Props {\n  createSegment: Function;\n  fetchDataModel: Function;\n}\n\nconst validationSchema = yup.object().shape({\n  name: yup.string().required('Segment name is required'),\n});\n\nexport const CreateSegment = (props: Props) => {\n  const [selectedDataModel, setSelectedDataModel] = useState<string | null>(null);\n  const [dataModelColumns, setDataModelColumns] = useState<any[] | null>(null);\n  const [dataModelLoading, setDataModelLoading] = useState<boolean>(false);\n  const [filters, setFilters] = useState<any[]>([]);\n  const [proceedAttempted, setProceedAttempted] = useState<boolean>(false);\n\n  const handleCreateSegment = async (values: any) => {\n    setSubmitting(true);\n    const payload = {\n      ...values,\n      data_model: selectedDataModel,\n      filters: filters.map((i: any) => {\n        const filterItem = { ...i, column: i.columnID };\n\n        const { subOperator } = filterItem;\n        if (!subOperator) return filterItem;\n\n        if (subOperator === 'today') filterItem['value'] = { diff: '0', period: 'day' };\n        if (subOperator === 'tomorrow') filterItem['value'] = { diff: '+1', period: 'day' };\n        if (subOperator === 'yesterday') filterItem['value'] = { diff: '-1', period: 'day' };\n        if (subOperator === 'one week ago') filterItem['value'] = { diff: '-7', period: 'day' };\n        if (subOperator === 'one week from now')\n          filterItem['value'] = { diff: '+7', period: 'day' };\n        if (subOperator === 'one month ago') filterItem['value'] = { diff: '-1', period: 'month' };\n        if (subOperator === 'one month from now')\n          filterItem['value'] = { diff: '+1', period: 'month' };\n        if (subOperator === 'number of days from now') {\n          filterItem['value'] = {\n            diff: filterItem['value'] ? `+${filterItem['value']}` : '0',\n            period: 'day',\n          };\n        }\n        if (subOperator !== 'exact date') {\n          filterItem['value'] = JSON.stringify(filterItem['value']);\n        }\n\n        return filterItem;\n      }),\n    };\n\n    try {\n      await props.createSegment(payload);\n      toast({\n        position: 'bottom-left',\n        render: () => <ToastBox status=\"success\" message=\"Segment created successfully\" />,\n      });\n      setSubmitting(false);\n      return routerHistory.push('/s/lists/segments');\n    } catch (e) {\n      setSubmitting(false);\n      toast({\n        position: 'bottom-left',\n        render: () => (\n          <ToastBox status=\"error\" message=\"Unable to create segment, please try again\" />\n        ),\n      });\n    }\n  };\n\n  const formik = useFormik({\n    validationSchema: validationSchema,\n    initialValues: { name: '', description: '' },\n    onSubmit: handleCreateSegment,\n  });\n\n  const {\n    values,\n    errors,\n    handleChange,\n    handleBlur,\n    handleReset,\n    isSubmitting,\n    setSubmitting,\n  } = formik;\n\n  const dataModels = useSelector(selectDataModels);\n  const routerHistory = useHistory();\n  const toast = useToast();\n\n  const handleDataModelChange = async (dataModelID: string) => {\n    setDataModelLoading(true);\n    try {\n      const dataModel = await props.fetchDataModel(dataModelID);\n      setDataModelColumns(dataModel.columns.map((i: any) => ({ ...i, type: i.data_type })));\n    } catch (e) {\n      setDataModelColumns(null);\n      toast({\n        position: 'bottom-left',\n        render: () => (\n          <ToastBox status=\"error\" message=\"Unable to fetch columns, please try again\" />\n        ),\n      });\n    }\n    setFilters([]);\n    setDataModelLoading(false);\n  };\n\n  const addFilter = () => {\n    if (!dataModelColumns || dataModelColumns.length === 0) return;\n    const firstColumn = dataModelColumns[0];\n    const filterUID = uuid();\n\n    let operator = 'contains';\n    let subOperator = null;\n\n    if (firstColumn.data_type === 'DATE') {\n      operator = 'dateEqual';\n      subOperator = 'exact date';\n    }\n\n    if (firstColumn.data_type === 'NUMBER') {\n      operator = 'equals';\n    }\n\n    const filterItem: { [key: string]: any } = {\n      uid: filterUID,\n      columnID: firstColumn['id'],\n      operator,\n      subOperator,\n      value: '',\n      name: firstColumn['name'],\n      conjunction: null,\n    };\n\n    if (filters.length > 0) {\n      filterItem['conjunction'] = 'and';\n    }\n\n    const updatedFilters = [...filters, filterItem];\n    setFilters(updatedFilters);\n  };\n  const updateFilter = (filterIndex: number, payload: {}) => {\n    const filter = filters[filterIndex];\n    const updatedFilter = { ...filter, ...payload };\n\n    if (filter.columnID !== updatedFilter.columnID) {\n      const column = columns[updatedFilter.columnID];\n      const allowedOperator = Object.values(available_operators).find((i: any) =>\n        i.column_types.includes(column.type),\n      );\n\n      updatedFilter['operator'] = allowedOperator?.['key'];\n      if (column.type === 'DATE') updatedFilter['subOperator'] = 'exact date';\n      else updatedFilter['subOperator'] = null;\n\n      updatedFilter['operator'] = allowedOperator?.['key'];\n      if (column.type === 'DND') updatedFilter['value'] = true;\n    }\n\n    const updatedFilters = [...filters];\n    updatedFilters[filterIndex] = updatedFilter;\n\n    if (filter.conjunction !== updatedFilter.conjunction) {\n      updatedFilters.forEach((i: any, index: number) => {\n        if (index > 0) {\n          updatedFilters[index]['conjunction'] = updatedFilter['conjunction'];\n        }\n      });\n    }\n    setFilters(updatedFilters);\n  };\n  const deleteFilter = (filterIndex: number) => {\n    const updatedFilters = filters.filter((i: any, index: number) => index !== filterIndex);\n    if (filterIndex === 0 && updatedFilters.length > 0) updatedFilters[0].conjunction = null;\n\n    setFilters(updatedFilters);\n  };\n\n  useEffect(() => {\n    if (selectedDataModel !== null) {\n      handleDataModelChange(selectedDataModel);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedDataModel]);\n\n  const columns: { [key: string]: any } = {};\n  const columns_by_id: string[] = [];\n\n  if (dataModelColumns) {\n    dataModelColumns.forEach((i: any) => {\n      columns_by_id.push(i.id);\n      columns[i.id] = { ...i, label: i.key };\n    });\n  }\n\n  return (\n    <Box className=\"content\">\n      <Box className=\"section-title\">\n        <Box className=\"title\">\n          <IconButton\n            icon=\"arrow-back\"\n            size=\"xs\"\n            borderRadius=\"10px\"\n            aria-label=\"back\"\n            mr=\"10px\"\n            mb=\"5px\"\n            onClick={() => routerHistory.goBack()}\n          />\n          Create Segment\n        </Box>\n      </Box>\n\n      <Box className=\"description\">\n        Select your base data model, and then specify filters to segment your data\n      </Box>\n\n      <Box mt=\"2rem\" mb=\"1rem\">\n        <Box mb=\"1.5rem\">\n          <Input\n            label=\"Name\"\n            name=\"name\"\n            placeholder=\"Short and unique name for this segment\"\n            color=\"#333333\"\n            value={values.name}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            onReset={handleReset}\n            errorMessage={errors.name}\n            isInvalid={!!errors.name}\n            autoFocus\n          />\n        </Box>\n\n        <Textarea\n          label=\"Description\"\n          name=\"description\"\n          placeholder=\"Brief description on what this segment was created for\"\n          mb=\"1.5rem\"\n          color=\"#333333\"\n          value={values.description}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onReset={handleReset}\n          errorMessage={errors.description}\n        />\n        <Select\n          label=\"Data Model\"\n          width=\"100%\"\n          mb=\"1rem\"\n          color=\"#333333\"\n          isInvalid={!selectedDataModel && proceedAttempted}\n          errorMessage=\"Segment data model is required\"\n          onChange={event => {\n            const value = event.target.value;\n            if (value !== 'null') {\n              setSelectedDataModel(value);\n            }\n          }}\n        >\n          <option value=\"null\">Select data model</option>\n          {dataModels.map((i: any) => (\n            <option key={i.id} value={i.id} label={i.name}>\n              {i.name}\n            </option>\n          ))}\n        </Select>\n      </Box>\n\n      {dataModelLoading && (\n        <Spinner thickness=\"4px\" speed=\"0.65s\" emptyColor=\"gray.200\" color=\"blue.500\" size=\"md\" />\n      )}\n\n      {dataModelColumns && (\n        <Box mt=\"1rem\" mb=\"0.5rem\">\n          <Box\n            display=\"flex\"\n            flexDirection=\"row\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            color=\"#737373\"\n            fontWeight=\"500\"\n            mb=\"1rem\"\n          >\n            <Box mr=\"1rem\">Filters</Box>\n            <Divider width=\"100%\" />\n          </Box>\n\n          <Box color=\"#333333\" maxW=\"700px\">\n            {filters.map((filter: any, index: number) => (\n              <FilterItem\n                {...{\n                  ...filter,\n                  index,\n                  key: index,\n                  uid: index,\n                  columns,\n                  columns_by_id,\n                  allow_conjunction_select: index !== 0,\n                  updateFilter,\n                  deleteFilter,\n                  debounceUpdate: false,\n                }}\n              />\n            ))}\n          </Box>\n\n          {filters.length === 0 && (\n            <Box color=\"#333333\" fontSize=\"14px\">\n              You haven't added any filters here yet\n            </Box>\n          )}\n\n          <Button size=\"sm\" variant=\"link\" variantColor=\"blue\" mt=\"1rem\" onClick={addFilter}>\n            Add a filter\n          </Button>\n        </Box>\n      )}\n\n      <Box display=\"flex\" justifyContent=\"flex-end\" mt=\"1rem\">\n        <Button\n          variantColor=\"blue\"\n          variant=\"solid\"\n          onClick={event => {\n            setProceedAttempted(true);\n            if (!selectedDataModel) return;\n            formik.handleSubmit(event);\n          }}\n          isLoading={isSubmitting}\n          size=\"sm\"\n        >\n          Create segment\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}