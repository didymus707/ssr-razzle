{"ast":null,"code":"import { buildPaymentURL, client } from '../../../../utils';\nimport { setWalletData, setWalletLoading } from '../reducers';\nimport { fetchManagedAccount } from './managed_account';\nexport const fetchWallet = organization_id => async dispatch => {\n  dispatch(setWalletLoading({\n    loading: true\n  }));\n\n  try {\n    const response = await client('', {\n      url: buildPaymentURL(`/wallet/${organization_id}`),\n      method: 'GET'\n    });\n    if (response.data.managed_bank_account_id) dispatch(fetchManagedAccount());\n    dispatch(setWalletData(response.data));\n    dispatch(setWalletLoading({\n      loading: false\n    }));\n    return response.data;\n  } catch (e) {\n    dispatch(setWalletLoading({\n      loading: false\n    }));\n    return null;\n  }\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/payments/thunks/wallet.ts"],"names":["buildPaymentURL","client","setWalletData","setWalletLoading","fetchManagedAccount","fetchWallet","organization_id","dispatch","loading","response","url","method","data","managed_bank_account_id","e"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,MAA1B,QAAwC,mBAAxC;AACA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,aAAhD;AAEA,SAASC,mBAAT,QAAoC,mBAApC;AAEA,OAAO,MAAMC,WAAW,GAAIC,eAAD,IAAuC,MAAMC,QAAN,IAAkB;AAClFA,EAAAA,QAAQ,CAACJ,gBAAgB,CAAC;AAAEK,IAAAA,OAAO,EAAE;AAAX,GAAD,CAAjB,CAAR;;AACA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMR,MAAM,CAAC,EAAD,EAAK;AAChCS,MAAAA,GAAG,EAAEV,eAAe,CAAE,WAAUM,eAAgB,EAA5B,CADY;AAEhCK,MAAAA,MAAM,EAAE;AAFwB,KAAL,CAA7B;AAKA,QAAIF,QAAQ,CAACG,IAAT,CAAcC,uBAAlB,EAA2CN,QAAQ,CAACH,mBAAmB,EAApB,CAAR;AAC3CG,IAAAA,QAAQ,CAACL,aAAa,CAACO,QAAQ,CAACG,IAAV,CAAd,CAAR;AACAL,IAAAA,QAAQ,CAACJ,gBAAgB,CAAC;AAAEK,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAjB,CAAR;AACA,WAAOC,QAAQ,CAACG,IAAhB;AACD,GAVD,CAUE,OAAOE,CAAP,EAAU;AACVP,IAAAA,QAAQ,CAACJ,gBAAgB,CAAC;AAAEK,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAjB,CAAR;AACA,WAAO,IAAP;AACD;AACF,CAhBM","sourcesContent":["import { buildPaymentURL, client } from '../../../../utils';\nimport { setWalletData, setWalletLoading } from '../reducers';\nimport { AppThunk } from '../../../../root';\nimport { fetchManagedAccount } from './managed_account';\n\nexport const fetchWallet = (organization_id: string): AppThunk => async dispatch => {\n  dispatch(setWalletLoading({ loading: true }));\n  try {\n    const response = await client('', {\n      url: buildPaymentURL(`/wallet/${organization_id}`),\n      method: 'GET',\n    });\n\n    if (response.data.managed_bank_account_id) dispatch(fetchManagedAccount());\n    dispatch(setWalletData(response.data));\n    dispatch(setWalletLoading({ loading: false }));\n    return response.data;\n  } catch (e) {\n    dispatch(setWalletLoading({ loading: false }));\n    return null;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}