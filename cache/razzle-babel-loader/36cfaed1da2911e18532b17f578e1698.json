{"ast":null,"code":"var _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/components/messages/compose/FilePicker.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Icon, useToast } from '@chakra-ui/core';\nimport { getChannelComposeRules } from 'app/authenticated-app/inbox/inbox.utils';\nimport { Button, ToastBox } from 'app/components';\nimport React from 'react';\nimport { useDropzone } from 'react-dropzone';\nexport function FilePicker({\n  files,\n  channel,\n  setFiles,\n  textAreaRef,\n  iconProps = {\n    size: '24px',\n    name: 'inbox-compose-attachment'\n  }\n}) {\n  var _composeRule$meta$def, _composeRule$meta$def2;\n\n  const toast = useToast();\n  const composeRule = getChannelComposeRules(channel) || {\n    multiple: false,\n    meta: {\n      default: {\n        size: Infinity,\n        duration: Infinity\n      }\n    }\n  };\n\n  const handleChange = acceptedFiles => {\n    if (acceptedFiles.length > 0) {\n      var _textAreaRef$current;\n\n      const filesToBeAttached = [];\n      const {\n        multiple,\n        meta\n      } = composeRule;\n      Array.from(acceptedFiles).forEach(async file => {\n        if (!files.some(({\n          name,\n          size,\n          type\n        }) => name === file.name && size === file.size && type === file.type)) {\n          const fileType = file.type.split('/')[0];\n          const validationRule = meta[fileType] || meta.default;\n\n          if (validationRule) {\n            const {\n              size,\n              duration = Infinity\n            } = validationRule;\n\n            switch (fileType) {\n              case 'video':\n                {\n                  const video = document.createElement('video');\n\n                  video.onloadedmetadata = () => {\n                    window.URL.revokeObjectURL(video.src);\n                    const isValid = file.size <= size && video.duration <= duration;\n\n                    if (channel === 'whatsapp') {\n                      toast({\n                        position: 'bottom-left',\n                        render: ({\n                          onClose\n                        }) => __jsx(ToastBox, {\n                          onClose: onClose,\n                          message: \"Cannot send video on WhatsApp channel\",\n                          __self: this,\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 58,\n                            columnNumber: 25\n                          }\n                        })\n                      });\n                    } else if (isValid) {\n                      if (multiple) {\n                        setFiles([...files, file]);\n                      } else {\n                        setFiles([file]);\n                      }\n                    } else {\n                      let errorMessage = 'Video format not supported';\n\n                      if (file.size > size) {\n                        errorMessage = 'Video duration is too long';\n                      }\n\n                      if (file.size > size) {\n                        errorMessage = 'Video is too large';\n                      }\n\n                      toast({\n                        position: 'bottom-left',\n                        render: ({\n                          onClose\n                        }) => __jsx(ToastBox, {\n                          onClose: onClose,\n                          message: errorMessage,\n                          __self: this,\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 84,\n                            columnNumber: 25\n                          }\n                        })\n                      });\n                    }\n                  };\n\n                  video.src = URL.createObjectURL(file);\n                  break;\n                }\n\n              case 'image':\n                {\n                  if (file.type === 'image/gif' && channel === 'whatsapp') {\n                    toast({\n                      position: 'bottom-left',\n                      render: ({\n                        onClose\n                      }) => __jsx(ToastBox, {\n                        onClose: onClose,\n                        message: \"Cannot send gif on WhatsApp channel\",\n                        __self: this,\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 99,\n                          columnNumber: 23\n                        }\n                      })\n                    });\n                    break;\n                  }\n                }\n              // eslint-disable-next-line no-fallthrough\n\n              default:\n                {\n                  if (file.size <= size) {\n                    filesToBeAttached.push(file);\n                  } else {\n                    toast({\n                      position: 'bottom-left',\n                      render: ({\n                        onClose\n                      }) => __jsx(ToastBox, {\n                        onClose: onClose,\n                        message: `${fileType === 'image' ? 'Image' : 'File'} is too large`,\n                        __self: this,\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 113,\n                          columnNumber: 23\n                        }\n                      })\n                    });\n                  }\n\n                  break;\n                }\n            }\n          }\n        }\n      });\n\n      if (multiple) {\n        setFiles([...files, ...filesToBeAttached]);\n      } else {\n        setFiles(filesToBeAttached);\n      }\n\n      textAreaRef === null || textAreaRef === void 0 ? void 0 : (_textAreaRef$current = textAreaRef.current) === null || _textAreaRef$current === void 0 ? void 0 : _textAreaRef$current.focus();\n    }\n  };\n\n  const {\n    getInputProps,\n    open\n  } = useDropzone({\n    onDrop: handleChange,\n    accept: composeRule.fileType,\n    multiple: composeRule.multiple,\n    maxSize: (_composeRule$meta$def = (_composeRule$meta$def2 = composeRule.meta.default) === null || _composeRule$meta$def2 === void 0 ? void 0 : _composeRule$meta$def2.size) !== null && _composeRule$meta$def !== void 0 ? _composeRule$meta$def : Infinity\n  });\n  return __jsx(React.Fragment, null, __jsx(\"input\", _extends({}, getInputProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  })), __jsx(Button, {\n    size: \"xs\",\n    variant: \"ghost\",\n    onClick: open,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, __jsx(Icon, _extends({}, iconProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/components/messages/compose/FilePicker.tsx"],"names":["Icon","useToast","getChannelComposeRules","Button","ToastBox","React","useDropzone","FilePicker","files","channel","setFiles","textAreaRef","iconProps","size","name","toast","composeRule","multiple","meta","default","Infinity","duration","handleChange","acceptedFiles","length","filesToBeAttached","Array","from","forEach","file","some","type","fileType","split","validationRule","video","document","createElement","onloadedmetadata","window","URL","revokeObjectURL","src","isValid","position","render","onClose","errorMessage","createObjectURL","push","current","focus","getInputProps","open","onDrop","accept","maxSize"],"mappings":"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","sourcesContent":["import { Icon, useToast } from '@chakra-ui/core';\nimport { FilePickerProps } from 'app/authenticated-app/inbox/inbox.types';\nimport { getChannelComposeRules } from 'app/authenticated-app/inbox/inbox.utils';\nimport { Button, ToastBox } from 'app/components';\nimport React from 'react';\nimport { useDropzone } from 'react-dropzone';\n\nexport function FilePicker({\n  files,\n  channel,\n  setFiles,\n  textAreaRef,\n  iconProps = {\n    size: '24px',\n    name: 'inbox-compose-attachment',\n  },\n}: FilePickerProps) {\n  const toast = useToast();\n  const composeRule = getChannelComposeRules(channel) || {\n    multiple: false,\n    meta: {\n      default: {\n        size: Infinity,\n        duration: Infinity,\n      },\n    },\n  };\n\n  const handleChange = (acceptedFiles: File[]) => {\n    if (acceptedFiles.length > 0) {\n      const filesToBeAttached: File[] = [];\n      const { multiple, meta } = composeRule;\n\n      Array.from(acceptedFiles).forEach(async file => {\n        if (\n          !files.some(\n            ({ name, size, type }: { name: string; size: number; type: string }) =>\n              name === file.name && size === file.size && type === file.type,\n          )\n        ) {\n          const fileType = file.type.split('/')[0];\n          const validationRule = meta[fileType] || meta.default;\n\n          if (validationRule) {\n            const { size, duration = Infinity } = validationRule;\n\n            switch (fileType) {\n              case 'video': {\n                const video = document.createElement('video');\n                video.onloadedmetadata = () => {\n                  window.URL.revokeObjectURL(video.src);\n                  const isValid = file.size <= size && video.duration <= duration;\n\n                  if (channel === 'whatsapp') {\n                    toast({\n                      position: 'bottom-left',\n                      render: ({ onClose }) => (\n                        <ToastBox\n                          onClose={onClose}\n                          message=\"Cannot send video on WhatsApp channel\"\n                        />\n                      ),\n                    });\n                  } else if (isValid) {\n                    if (multiple) {\n                      setFiles([...files, file]);\n                    } else {\n                      setFiles([file]);\n                    }\n                  } else {\n                    let errorMessage = 'Video format not supported';\n\n                    if (file.size > size) {\n                      errorMessage = 'Video duration is too long';\n                    }\n\n                    if (file.size > size) {\n                      errorMessage = 'Video is too large';\n                    }\n\n                    toast({\n                      position: 'bottom-left',\n                      render: ({ onClose }) => (\n                        <ToastBox onClose={onClose} message={errorMessage} />\n                      ),\n                    });\n                  }\n                };\n\n                video.src = URL.createObjectURL(file);\n                break;\n              }\n\n              case 'image': {\n                if (file.type === 'image/gif' && channel === 'whatsapp') {\n                  toast({\n                    position: 'bottom-left',\n                    render: ({ onClose }) => (\n                      <ToastBox onClose={onClose} message=\"Cannot send gif on WhatsApp channel\" />\n                    ),\n                  });\n                  break;\n                }\n              }\n              // eslint-disable-next-line no-fallthrough\n              default: {\n                if (file.size <= size) {\n                  filesToBeAttached.push(file);\n                } else {\n                  toast({\n                    position: 'bottom-left',\n                    render: ({ onClose }) => (\n                      <ToastBox\n                        onClose={onClose}\n                        message={`${fileType === 'image' ? 'Image' : 'File'} is too large`}\n                      />\n                    ),\n                  });\n                }\n\n                break;\n              }\n            }\n          }\n        }\n      });\n\n      if (multiple) {\n        setFiles([...files, ...filesToBeAttached]);\n      } else {\n        setFiles(filesToBeAttached);\n      }\n\n      textAreaRef?.current?.focus();\n    }\n  };\n\n  const { getInputProps, open } = useDropzone({\n    onDrop: handleChange,\n    accept: composeRule.fileType,\n    multiple: composeRule.multiple,\n    maxSize: composeRule.meta.default?.size ?? Infinity,\n  });\n\n  return (\n    <>\n      <input {...getInputProps()} />\n\n      <Button size=\"xs\" variant=\"ghost\" onClick={open}>\n        <Icon {...iconProps} />\n      </Button>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}