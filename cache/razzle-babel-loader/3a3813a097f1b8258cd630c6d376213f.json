{"ast":null,"code":"const _excluded = [\"defaultIsOpen\", \"onBlur\", \"onChange\", \"value\", \"date_format\"];\nvar _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/tables/components/table/table.components/table.datepicker/table.datepicker.ui.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Box, Button, Divider, Flex, Input, Popover, PopoverBody, PopoverContent, PopoverTrigger } from '@chakra-ui/core';\nimport { getMonth, getYear } from 'date-fns';\nimport format from 'date-fns/format';\nimport * as React from 'react';\nimport DayPicker, { DateUtils } from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport { TableDatePickerStyles } from './table.datepicker.styles';\nimport { debounce } from 'lodash';\n\nconst parseDate = str => {\n  const parsed = new Date(str);\n\n  if (DateUtils.isDate(parsed)) {\n    return parsed;\n  } else {\n    if (str.split('-').length === 3) {\n      const [day, month, year] = str.split('-');\n      const dayInNumber = parseInt(day, 10);\n      const monthInNumber = parseInt(month, 10);\n      const yearInNumber = parseInt(year, 10);\n      return new Date(yearInNumber, monthInNumber - 1, dayInNumber);\n    }\n\n    return new Date();\n  }\n};\n\nexport const TableDatePicker = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    defaultIsOpen,\n    onBlur,\n    onChange,\n    value: initialValue,\n    date_format = 'dd-MM-yyyy'\n  } = props,\n        rest = _objectWithoutProperties(props, _excluded);\n\n  const initialFocusRef = React.useRef();\n  React.useEffect(() => {\n    if (initialValue && parseDate(initialValue) && parseDate(initialValue).toString() !== 'Invalid Date') {\n      const date = parseDate(initialValue);\n      setSelectedDays(date);\n      setDummyValue(format(date, date_format));\n      setInputValue(format(date, date_format));\n    } else {\n      setSelectedDays(new Date());\n      setDummyValue('');\n      setInputValue('');\n    }\n  }, [date_format, initialValue]);\n  const [selectedDays, setSelectedDays] = React.useState(initialValue && parseDate(initialValue) ? parseDate(initialValue) : new Date());\n  const [dummyValue, setDummyValue] = React.useState(initialValue && parseDate(initialValue).toString() !== 'Invalid Date' ? format(selectedDays, date_format) : '');\n  const [inputValue, setInputValue] = React.useState(selectedDays && parseDate(selectedDays).toString() !== 'Invalid Date' ? format(selectedDays, date_format) : '');\n\n  const handleDaysSelect = day => {\n    const formattedDate = format(day, date_format);\n    setSelectedDays(day);\n    setInputValue(formattedDate);\n    setDummyValue(formattedDate);\n    onChange && onChange(formattedDate);\n  };\n\n  const handleDaysClear = () => {\n    const date = new Date();\n    const formattedDate = format(date, date_format);\n    setDummyValue('');\n    setSelectedDays(date);\n    setInputValue(formattedDate);\n    onChange && onChange('');\n  };\n\n  const debouncedApiCall = React.useCallback(debounce(value => {\n    onChange && onChange(value);\n  }, 1500), []);\n\n  const handleInputChange = e => {\n    const value = e.target.value;\n    const selectedDate = parseDate(value);\n    setInputValue(value);\n    setDummyValue(value);\n\n    if (selectedDate.toString().toLowerCase() !== 'invalid date') {\n      const formattedDate = format(selectedDate, date_format);\n      setSelectedDays(selectedDate);\n      debouncedApiCall(formattedDate);\n    }\n  };\n\n  return __jsx(TableDatePickerStyles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, __jsx(Popover, {\n    initialFocusRef: initialFocusRef,\n    defaultIsOpen: defaultIsOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, __jsx(PopoverTrigger, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, __jsx(Flex, _extends({\n    role: \"button\",\n    tabIndex: 0,\n    height: \"100%\",\n    cursor: \"pointer\",\n    paddingX: \"0.5rem\",\n    borderRadius: \"5px\",\n    alignItems: \"center\",\n    transition: \"all 0.2s\",\n    _focus: {\n      boxShadow: 'none',\n      borderColor: '#2034c5'\n    }\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }), dummyValue)), __jsx(PopoverContent, {\n    zIndex: 99999,\n    overflow: \"hidden\",\n    borderRadius: \"5px\",\n    position: \"absolute\",\n    boxShadow: \"10px 10px 40px rgba(0,0,0,0.2)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, __jsx(PopoverBody, {\n    padding: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    padding: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 15\n    }\n  }, __jsx(Input, _extends({\n    ref: initialFocusRef,\n    size: \"sm\",\n    value: inputValue,\n    onChange: handleInputChange\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }\n  }))), __jsx(Box, {\n    paddingBottom: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 15\n    }\n  }, __jsx(DayPicker, {\n    showOutsideDays: true,\n    selectedDays: selectedDays,\n    onDayClick: handleDaysSelect,\n    month: new Date(getYear(selectedDays), getMonth(selectedDays)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }\n  })), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 15\n    }\n  }, __jsx(Divider, {\n    marginTop: \"0\",\n    marginBottom: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 17\n    }\n  }), __jsx(Button, {\n    size: \"sm\",\n    isFullWidth: true,\n    borderRadius: \"0\",\n    variant: \"unstyled\",\n    _hover: {\n      bg: 'gray.50'\n    },\n    onClick: handleDaysClear,\n    paddingX: \"0.875rem!important\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }\n  }, \"Clear\"))))));\n});","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/tables/components/table/table.components/table.datepicker/table.datepicker.ui.tsx"],"names":["Box","Button","Divider","Flex","Input","Popover","PopoverBody","PopoverContent","PopoverTrigger","getMonth","getYear","format","React","DayPicker","DateUtils","TableDatePickerStyles","debounce","parseDate","str","parsed","Date","isDate","split","length","day","month","year","dayInNumber","parseInt","monthInNumber","yearInNumber","TableDatePicker","forwardRef","props","ref","defaultIsOpen","onBlur","onChange","value","initialValue","date_format","rest","initialFocusRef","useRef","useEffect","toString","date","setSelectedDays","setDummyValue","setInputValue","selectedDays","useState","dummyValue","inputValue","handleDaysSelect","formattedDate","handleDaysClear","debouncedApiCall","useCallback","handleInputChange","e","target","selectedDate","toLowerCase","boxShadow","borderColor","bg"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Button,\n  Divider,\n  Flex,\n  Input,\n  InputProps,\n  Popover,\n  PopoverBody,\n  PopoverContent,\n  PopoverTrigger,\n} from '@chakra-ui/core';\nimport { getMonth, getYear } from 'date-fns';\nimport format from 'date-fns/format';\nimport * as React from 'react';\nimport DayPicker, { DateUtils } from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport { TableDatePickerStyles } from './table.datepicker.styles';\nimport { debounce } from 'lodash';\n\ntype TableDatePickerProps = {\n  value: string;\n  date_format?: string;\n  defaultIsOpen?: boolean;\n  onBlur?: (value: string) => void;\n  onChange?: (value: string) => void;\n} & Omit<InputProps, 'onChange' | 'onBlur'>;\n\nconst parseDate = (str: string) => {\n  const parsed = new Date(str);\n  if (DateUtils.isDate(parsed)) {\n    return parsed;\n  } else {\n    if (str.split('-').length === 3) {\n      const [day, month, year] = str.split('-');\n      const dayInNumber = parseInt(day, 10);\n      const monthInNumber = parseInt(month, 10);\n      const yearInNumber = parseInt(year, 10);\n\n      return new Date(yearInNumber, monthInNumber - 1, dayInNumber);\n    }\n    return new Date();\n  }\n};\n\nexport const TableDatePicker = React.forwardRef(\n  (props: TableDatePickerProps, ref: React.Ref<HTMLInputElement>) => {\n    const { defaultIsOpen, onBlur, onChange, value: initialValue, date_format = 'dd-MM-yyyy', ...rest } = props;\n\n    const initialFocusRef = React.useRef<any>();\n\n    React.useEffect(() => {\n      if (\n        initialValue &&\n        parseDate(initialValue) &&\n        parseDate(initialValue).toString() !== 'Invalid Date'\n      ) {\n        const date = parseDate(initialValue);\n        setSelectedDays(date);\n        setDummyValue(format(date, date_format));\n        setInputValue(format(date, date_format));\n      } else {\n        setSelectedDays(new Date());\n        setDummyValue('');\n        setInputValue('');\n      }\n    }, [date_format, initialValue]);\n\n    const [selectedDays, setSelectedDays] = React.useState<any>(\n      initialValue && parseDate(initialValue) ? parseDate(initialValue) : new Date()\n    );\n    const [dummyValue, setDummyValue] = React.useState(\n      initialValue && parseDate(initialValue).toString() !== 'Invalid Date'\n        ? format(selectedDays, date_format)\n        : ''\n    );\n    const [inputValue, setInputValue] = React.useState(\n      selectedDays && parseDate(selectedDays).toString() !== 'Invalid Date'\n        ? format(selectedDays, date_format)\n        : ''\n    );\n\n    const handleDaysSelect = (day: Date) => {\n      const formattedDate = format(day, date_format);\n      setSelectedDays(day);\n      setInputValue(formattedDate);\n      setDummyValue(formattedDate);\n      onChange && onChange(formattedDate);\n    };\n\n    const handleDaysClear = () => {\n      const date = new Date();\n      const formattedDate = format(date, date_format);\n\n      setDummyValue('');\n      setSelectedDays(date);\n      setInputValue(formattedDate);\n\n      onChange && onChange('');\n    };\n\n    const debouncedApiCall = React.useCallback(\n      debounce((value: string) => {\n        onChange && onChange(value);\n      }, 1500),\n      []\n    );\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const value = e.target.value;\n      const selectedDate = parseDate(value);\n      setInputValue(value);\n      setDummyValue(value);\n\n      if (selectedDate.toString().toLowerCase() !== 'invalid date') {\n        const formattedDate = format(selectedDate, date_format);\n        setSelectedDays(selectedDate);\n        debouncedApiCall(formattedDate);\n      }\n    };\n\n    return (\n      <TableDatePickerStyles>\n        <Popover initialFocusRef={initialFocusRef} defaultIsOpen={defaultIsOpen}>\n          <PopoverTrigger>\n            <Flex\n              role=\"button\"\n              tabIndex={0}\n              height=\"100%\"\n              cursor=\"pointer\"\n              paddingX=\"0.5rem\"\n              borderRadius=\"5px\"\n              alignItems=\"center\"\n              transition=\"all 0.2s\"\n              _focus={{\n                boxShadow: 'none',\n                borderColor: '#2034c5',\n              }}\n              {...rest}\n            >\n              {dummyValue}\n            </Flex>\n          </PopoverTrigger>\n          <PopoverContent\n            zIndex={99999}\n            overflow=\"hidden\"\n            borderRadius=\"5px\"\n            position=\"absolute\"\n            boxShadow=\"10px 10px 40px rgba(0,0,0,0.2)\"\n          >\n            <PopoverBody padding=\"0\">\n              <Box padding=\"0.5rem\">\n                <Input\n                  ref={initialFocusRef}\n                  size=\"sm\"\n                  value={inputValue}\n                  onChange={handleInputChange}\n                  {...rest}\n                />\n              </Box>\n              <Box paddingBottom=\"0.5rem\">\n                <DayPicker\n                  showOutsideDays\n                  selectedDays={selectedDays}\n                  onDayClick={handleDaysSelect}\n                  month={new Date(getYear(selectedDays), getMonth(selectedDays))}\n                />\n              </Box>\n              <Box>\n                <Divider marginTop=\"0\" marginBottom=\"0\" />\n                <Button\n                  size=\"sm\"\n                  isFullWidth\n                  borderRadius=\"0\"\n                  variant=\"unstyled\"\n                  _hover={{ bg: 'gray.50' }}\n                  onClick={handleDaysClear}\n                  paddingX=\"0.875rem!important\"\n                >\n                  Clear\n                </Button>\n              </Box>\n            </PopoverBody>\n          </PopoverContent>\n        </Popover>\n      </TableDatePickerStyles>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}