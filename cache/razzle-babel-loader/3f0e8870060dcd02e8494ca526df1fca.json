{"ast":null,"code":"import { createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit';\nimport { selectOrganisationID } from '../../../unauthenticated-app/authentication';\nimport { fetchThreadsByState, selectCustomerEntities, selectThreadById, fetchThreadByID, onWebSocketWhatsAppAccountStatusChange, searchInbox, onWebSocketAccountDisconnected, onWebSocketAccountStatusChanged } from '../../inbox';\nimport { connectChannelAcct, disconnectCredential, fetchSupportedChannels, useChannelInstance } from '../channel.thunks';\nconst credentialsAdapter = createEntityAdapter({\n  selectId: credential => credential.uuid,\n  sortComparer: (a, b) => (b.updated_datetime || '').localeCompare(a.updated_datetime || '')\n});\n\nconst upsertCallback = (state, action) => {\n  const {\n    credentials\n  } = action.payload;\n  credentials && credentialsAdapter.upsertMany(state, credentials);\n};\n\nexport const credentialsSlice = createSlice({\n  name: 'credentials',\n  initialState: credentialsAdapter.getInitialState(),\n  reducers: {},\n\n  extraReducers(builder) {\n    builder.addCase(fetchSupportedChannels.fulfilled, upsertCallback).addCase(disconnectCredential.fulfilled, upsertCallback).addCase(connectChannelAcct.fulfilled, upsertCallback).addCase(fetchThreadsByState.fulfilled, upsertCallback).addCase(searchInbox.fulfilled, upsertCallback).addCase(fetchThreadByID.fulfilled, upsertCallback).addCase(useChannelInstance.fulfilled, upsertCallback).addCase(onWebSocketAccountDisconnected, upsertCallback).addCase(onWebSocketAccountStatusChanged, upsertCallback).addCase(onWebSocketWhatsAppAccountStatusChange, upsertCallback);\n  }\n\n});\nexport const credentialsReducer = credentialsSlice.reducer;\nexport const {\n  selectById: selectCredentialById,\n  selectIds: selectCredentialIds,\n  selectEntities: selectCredentialEntities,\n  selectAll: selectAllCredentials,\n  selectTotal: selectTotalCredentials\n} = credentialsAdapter.getSelectors(state => state.channel.entities.credentials);\nexport const selectActiveOrgCredentials = createSelector(selectOrganisationID, selectAllCredentials, (orgID, credentials) => credentials.filter(({\n  organisation_id,\n  status\n}) => organisation_id === orgID && status !== 'disconnected'));\nexport const selectActiveOrgChannelCredentials = createSelector((_, channel) => channel, selectActiveOrgCredentials, selectCustomerEntities, (channel, orgCredentials, customerObj) => orgCredentials.filter(({\n  user_id\n}) => {\n  var _customerObj$user_id;\n\n  let credentialChannel = (_customerObj$user_id = customerObj[user_id]) === null || _customerObj$user_id === void 0 ? void 0 : _customerObj$user_id.channel;\n\n  if (credentialChannel === 'whatsappWeb') {\n    credentialChannel = 'whatsapp';\n  }\n\n  return credentialChannel === channel;\n}));\nexport const selectActiveOrgChannelCredentialIDs = createSelector(selectActiveOrgChannelCredentials, credentials => credentials.map(({\n  uuid: credential_id,\n  user_id\n}) => ({\n  credential_id,\n  user_id\n})));\nexport const selectIsCredentialConnected = createSelector(selectActiveOrgChannelCredentials, orgChannelCredentials => orgChannelCredentials.length > 0);\nexport const selectThreadReceiverPlatformID = createSelector(selectThreadById, selectCredentialEntities, (thread, credentials) => {\n  var _credentials;\n\n  return (_credentials = credentials[(thread === null || thread === void 0 ? void 0 : thread.receiver_id) || '']) === null || _credentials === void 0 ? void 0 : _credentials.user_id;\n});\nexport const selectOrgCredentials = createSelector(selectOrganisationID, selectAllCredentials, (orgID, credentials) => credentials.filter(({\n  organisation_id\n}) => orgID === organisation_id));\nexport const selectCredentialsWithIssue = createSelector(selectOrgCredentials, orgCredentials => orgCredentials.filter(({\n  status\n}) => !['active', 'disconnected'].includes(status)));","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/channels/slices/credential.ts"],"names":["createEntityAdapter","createSelector","createSlice","selectOrganisationID","fetchThreadsByState","selectCustomerEntities","selectThreadById","fetchThreadByID","onWebSocketWhatsAppAccountStatusChange","searchInbox","onWebSocketAccountDisconnected","onWebSocketAccountStatusChanged","connectChannelAcct","disconnectCredential","fetchSupportedChannels","useChannelInstance","credentialsAdapter","selectId","credential","uuid","sortComparer","a","b","updated_datetime","localeCompare","upsertCallback","state","action","credentials","payload","upsertMany","credentialsSlice","name","initialState","getInitialState","reducers","extraReducers","builder","addCase","fulfilled","credentialsReducer","reducer","selectById","selectCredentialById","selectIds","selectCredentialIds","selectEntities","selectCredentialEntities","selectAll","selectAllCredentials","selectTotal","selectTotalCredentials","getSelectors","channel","entities","selectActiveOrgCredentials","orgID","filter","organisation_id","status","selectActiveOrgChannelCredentials","_","orgCredentials","customerObj","user_id","credentialChannel","selectActiveOrgChannelCredentialIDs","map","credential_id","selectIsCredentialConnected","orgChannelCredentials","length","selectThreadReceiverPlatformID","thread","receiver_id","selectOrgCredentials","selectCredentialsWithIssue","includes"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,cAA9B,EAA8CC,WAA9C,QAAiE,kBAAjE;AAEA,SAASC,oBAAT,QAAqC,6CAArC;AACA,SACEC,mBADF,EACuBC,sBADvB,EAC+CC,gBAD/C,EACiEC,eADjE,EAEEC,sCAFF,EAE0CC,WAF1C,EAEuDC,8BAFvD,EAGEC,+BAHF,QAIO,aAJP;AAKA,SACEC,kBADF,EACsBC,oBADtB,EAC4CC,sBAD5C,EACoEC,kBADpE,QAEO,mBAFP;AAKA,MAAMC,kBAAkB,GAAGhB,mBAAmB,CAAmB;AAC/DiB,EAAAA,QAAQ,EAAEC,UAAU,IAAIA,UAAU,CAACC,IAD4B;AAE/DC,EAAAA,YAAY,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAU,CAACA,CAAC,CAACC,gBAAF,IAAsB,EAAvB,EAA2BC,aAA3B,CAAyCH,CAAC,CAACE,gBAAF,IAAsB,EAA/D;AAFuC,CAAnB,CAA9C;;AAKA,MAAME,cAAc,GAAG,CAACC,KAAD,EAAaC,MAAb,KAA6B;AAClD,QAAM;AAAEC,IAAAA;AAAF,MAAkBD,MAAM,CAACE,OAA/B;AACAD,EAAAA,WAAW,IAAIZ,kBAAkB,CAACc,UAAnB,CAA8BJ,KAA9B,EAAqCE,WAArC,CAAf;AACD,CAHD;;AAKA,OAAO,MAAMG,gBAAgB,GAAG7B,WAAW,CAAC;AAC1C8B,EAAAA,IAAI,EAAE,aADoC;AAE1CC,EAAAA,YAAY,EAAEjB,kBAAkB,CAACkB,eAAnB,EAF4B;AAG1CC,EAAAA,QAAQ,EAAE,EAHgC;;AAI1CC,EAAAA,aAAa,CAACC,OAAD,EAAU;AACrBA,IAAAA,OAAO,CACNC,OADD,CACSxB,sBAAsB,CAACyB,SADhC,EAC2Cd,cAD3C,EAECa,OAFD,CAESzB,oBAAoB,CAAC0B,SAF9B,EAEyCd,cAFzC,EAGCa,OAHD,CAGS1B,kBAAkB,CAAC2B,SAH5B,EAGuCd,cAHvC,EAICa,OAJD,CAISlC,mBAAmB,CAACmC,SAJ7B,EAIwCd,cAJxC,EAKCa,OALD,CAKS7B,WAAW,CAAC8B,SALrB,EAKgCd,cALhC,EAMCa,OAND,CAMS/B,eAAe,CAACgC,SANzB,EAMoCd,cANpC,EAOCa,OAPD,CAOSvB,kBAAkB,CAACwB,SAP5B,EAOuCd,cAPvC,EAQCa,OARD,CAQS5B,8BART,EAQyCe,cARzC,EASCa,OATD,CASS3B,+BATT,EAS0Cc,cAT1C,EAUCa,OAVD,CAUS9B,sCAVT,EAUiDiB,cAVjD;AAWD;;AAhByC,CAAD,CAApC;AAmBP,OAAO,MAAMe,kBAAkB,GAAGT,gBAAgB,CAACU,OAA5C;AAEP,OAAO,MAAM;AACXC,EAAAA,UAAU,EAAEC,oBADD;AAEXC,EAAAA,SAAS,EAAEC,mBAFA;AAGXC,EAAAA,cAAc,EAAEC,wBAHL;AAIXC,EAAAA,SAAS,EAAEC,oBAJA;AAKXC,EAAAA,WAAW,EAAEC;AALF,IAMTnC,kBAAkB,CAACoC,YAAnB,CAA4C1B,KAAD,IAAWA,KAAK,CAAC2B,OAAN,CAAcC,QAAd,CAAuB1B,WAA7E,CANG;AAQP,OAAO,MAAM2B,0BAA0B,GAAGtD,cAAc,CACtDE,oBADsD,EAEtD8C,oBAFsD,EAGtD,CAACO,KAAD,EAAQ5B,WAAR,KAAwBA,WAAW,CAAC6B,MAAZ,CACtB,CAAC;AAAEC,EAAAA,eAAF;AAAmBC,EAAAA;AAAnB,CAAD,KAAkCD,eAAe,KAAKF,KAApB,IAA6BG,MAAM,KAAK,cADpD,CAH8B,CAAjD;AAQP,OAAO,MAAMC,iCAAiC,GAAG3D,cAAc,CAC7D,CAAC4D,CAAD,EAAeR,OAAf,KAAmCA,OAD0B,EAE7DE,0BAF6D,EAG7DlD,sBAH6D,EAI7D,CAACgD,OAAD,EAAUS,cAAV,EAA0BC,WAA1B,KAA0CD,cAAc,CAACL,MAAf,CACxC,CAAC;AAAEO,EAAAA;AAAF,CAAD,KAAiB;AAAA;;AACf,MAAIC,iBAAiB,2BAAGF,WAAW,CAACC,OAAD,CAAd,yDAAG,qBAAsBX,OAA9C;;AACA,MAAIY,iBAAiB,KAAK,aAA1B,EAAyC;AACvCA,IAAAA,iBAAiB,GAAG,UAApB;AACD;;AAED,SAAOA,iBAAiB,KAAKZ,OAA7B;AACD,CARuC,CAJmB,CAAxD;AAgBP,OAAO,MAAMa,mCAAmC,GAAGjE,cAAc,CAC/D2D,iCAD+D,EAE9DhC,WAAD,IAAiBA,WAAW,CAACuC,GAAZ,CACf,CAAC;AAAEhD,EAAAA,IAAI,EAAEiD,aAAR;AAAuBJ,EAAAA;AAAvB,CAAD,MAAuC;AAAEI,EAAAA,aAAF;AAAiBJ,EAAAA;AAAjB,CAAvC,CADe,CAF8C,CAA1D;AAOP,OAAO,MAAMK,2BAA2B,GAAGpE,cAAc,CACvD2D,iCADuD,EAEtDU,qBAAD,IAA2BA,qBAAqB,CAACC,MAAtB,GAA+B,CAFH,CAAlD;AAKP,OAAO,MAAMC,8BAA8B,GAAGvE,cAAc,CAC1DK,gBAD0D,EAE1DyC,wBAF0D,EAG1D,CAAC0B,MAAD,EAAS7C,WAAT;AAAA;;AAAA,yBAAyBA,WAAW,CAAC,CAAA6C,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEC,WAAR,KAAuB,EAAxB,CAApC,iDAAyB,aAAwCV,OAAjE;AAAA,CAH0D,CAArD;AAMP,OAAO,MAAMW,oBAAoB,GAAG1E,cAAc,CAChDE,oBADgD,EAEhD8C,oBAFgD,EAGhD,CAACO,KAAD,EAAQ5B,WAAR,KAAwBA,WAAW,CAAC6B,MAAZ,CACtB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAyBF,KAAK,KAAKE,eADb,CAHwB,CAA3C;AAQP,OAAO,MAAMkB,0BAA0B,GAAG3E,cAAc,CACtD0E,oBADsD,EAEtDb,cAAc,IAAIA,cAAc,CAACL,MAAf,CAChB,CAAC;AAAEE,EAAAA;AAAF,CAAD,KAAgB,CAAC,CAAC,QAAD,EAAW,cAAX,EAA2BkB,QAA3B,CAAoClB,MAApC,CADD,CAFoC,CAAjD","sourcesContent":["import { createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../../../root';\nimport { selectOrganisationID } from '../../../unauthenticated-app/authentication';\nimport {\n  fetchThreadsByState, selectCustomerEntities, selectThreadById, fetchThreadByID,\n  onWebSocketWhatsAppAccountStatusChange, searchInbox, onWebSocketAccountDisconnected,\n  onWebSocketAccountStatusChanged\n} from '../../inbox';\nimport {\n  connectChannelAcct, disconnectCredential, fetchSupportedChannels, useChannelInstance\n} from '../channel.thunks';\nimport { CredentialSchema } from '../channels.types';\n\nconst credentialsAdapter = createEntityAdapter<CredentialSchema>({\n  selectId: credential => credential.uuid,\n  sortComparer: (a, b) => (b.updated_datetime || '').localeCompare(a.updated_datetime || ''),\n});\n\nconst upsertCallback = (state: any, action: any) => {\n  const { credentials } = action.payload;\n  credentials && credentialsAdapter.upsertMany(state, credentials);\n};\n\nexport const credentialsSlice = createSlice({\n  name: 'credentials',\n  initialState: credentialsAdapter.getInitialState(),\n  reducers: {},\n  extraReducers(builder) {\n    builder\n    .addCase(fetchSupportedChannels.fulfilled, upsertCallback)\n    .addCase(disconnectCredential.fulfilled, upsertCallback)\n    .addCase(connectChannelAcct.fulfilled, upsertCallback)\n    .addCase(fetchThreadsByState.fulfilled, upsertCallback)\n    .addCase(searchInbox.fulfilled, upsertCallback)\n    .addCase(fetchThreadByID.fulfilled, upsertCallback)\n    .addCase(useChannelInstance.fulfilled, upsertCallback)\n    .addCase(onWebSocketAccountDisconnected, upsertCallback)\n    .addCase(onWebSocketAccountStatusChanged, upsertCallback)\n    .addCase(onWebSocketWhatsAppAccountStatusChange, upsertCallback);\n  }\n});\n\nexport const credentialsReducer = credentialsSlice.reducer;\n\nexport const {\n  selectById: selectCredentialById,\n  selectIds: selectCredentialIds,\n  selectEntities: selectCredentialEntities,\n  selectAll: selectAllCredentials,\n  selectTotal: selectTotalCredentials,\n} = credentialsAdapter.getSelectors<RootState>((state) => state.channel.entities.credentials);\n\nexport const selectActiveOrgCredentials = createSelector(\n  selectOrganisationID,\n  selectAllCredentials,\n  (orgID, credentials) => credentials.filter(\n    ({ organisation_id, status }) => (organisation_id === orgID && status !== 'disconnected')\n  )\n);\n\nexport const selectActiveOrgChannelCredentials = createSelector(\n  (_: RootState, channel: string) => channel,\n  selectActiveOrgCredentials,\n  selectCustomerEntities,\n  (channel, orgCredentials, customerObj) => orgCredentials.filter(\n    ({ user_id }) => {\n      let credentialChannel = customerObj[user_id]?.channel;\n      if (credentialChannel === 'whatsappWeb') {\n        credentialChannel = 'whatsapp';\n      }\n\n      return credentialChannel === channel;\n    }\n  )\n);\n\nexport const selectActiveOrgChannelCredentialIDs = createSelector(\n  selectActiveOrgChannelCredentials,\n  (credentials) => credentials.map(\n    ({ uuid: credential_id, user_id }) => ({ credential_id, user_id })\n  )\n);\n\nexport const selectIsCredentialConnected = createSelector(\n  selectActiveOrgChannelCredentials,\n  (orgChannelCredentials) => orgChannelCredentials.length > 0\n);\n\nexport const selectThreadReceiverPlatformID = createSelector(\n  selectThreadById,\n  selectCredentialEntities,\n  (thread, credentials) => credentials[thread?.receiver_id || '']?.user_id\n);\n\nexport const selectOrgCredentials = createSelector(\n  selectOrganisationID,\n  selectAllCredentials,\n  (orgID, credentials) => credentials.filter(\n    ({ organisation_id }) => orgID === organisation_id\n  )\n);\n\nexport const selectCredentialsWithIssue = createSelector(\n  selectOrgCredentials,\n  orgCredentials => orgCredentials.filter(\n    ({ status }) => !['active', 'disconnected'].includes(status)\n  )\n);\n"]},"metadata":{},"sourceType":"module"}