{"ast":null,"code":"import _objectSpread from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/marketing/campaigns/components/credit-topup-modal.tsx\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Icon, Image, ModalBody, ModalCloseButton, Stack, Text, useToast } from '@chakra-ui/core';\nimport { BodyText, Button, Input, SmallText } from 'app/components';\nimport { useFormik } from 'formik';\nimport React from 'react';\nimport { usePaystackPayment } from 'react-paystack';\nimport { useSelector } from 'react-redux';\nimport * as yup from 'yup';\nimport { getReference } from '../../../../../utils';\nimport { sendAmplitudeData } from '../../../../../utils/amplitude';\nimport { ModalContainer, ToastBox } from '../../../../components';\nimport { selectOrganisationID } from '../../../../unauthenticated-app/authentication';\nimport { topupCampaignCredits } from '../campaigns.service';\nexport const CreditTopupModal = props => {\n  const {\n    cards,\n    isOpen,\n    onOpen,\n    onClose,\n    wallet_id,\n    fetchWallet,\n    wallet_email,\n    default_card,\n    amount: amountProps\n  } = props;\n  const toast = useToast();\n  const {\n    values,\n    errors,\n    handleChange,\n    resetForm\n  } = useFormik({\n    initialValues: {\n      amount: amountProps !== null && amountProps !== void 0 ? amountProps : 100\n    },\n    onSubmit: values => console.log(values),\n    validationSchema: yup.object().shape({\n      amount: yup.number().min(100, 'Minimum amount is 100').max(500000, 'Maximum amount is 500,000').required('Amount is required')\n    })\n  });\n  const organisationID = useSelector(selectOrganisationID);\n  const {\n    amount\n  } = values;\n  const amountToPay = amount;\n  const publicKey = process.env.REACT_APP_PAYSTACK_PUBLIC_KEY;\n  const commonConfig = {\n    email: wallet_email !== null && wallet_email !== void 0 ? wallet_email : '',\n    reference: getReference(),\n    publicKey: publicKey || '',\n    amount: amountToPay * 100\n  };\n\n  const oneTimePaymentConfig = _objectSpread(_objectSpread({}, commonConfig), {}, {\n    metadata: {\n      wallet_id,\n      save_card: false,\n      purpose: 'credit-purchase'\n    }\n  });\n\n  const addCardConfig = _objectSpread(_objectSpread({}, commonConfig), {}, {\n    channels: ['card'],\n    metadata: {\n      wallet_id,\n      save_card: true,\n      purpose: 'credit-purchase'\n    }\n  }); // @ts-ignore\n\n\n  const initializeOneTimePayment = usePaystackPayment(oneTimePaymentConfig); // @ts-ignore\n\n  const initializeAddCardPayment = usePaystackPayment(addCardConfig);\n  const [section, setSection] = React.useState(0);\n\n  const handleCloseModal = () => {\n    resetForm();\n    setSection(0);\n    onClose === null || onClose === void 0 ? void 0 : onClose();\n  };\n\n  const handleFetchWallet = async () => {\n    try {\n      await fetchWallet(organisationID);\n      handleCloseModal();\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          status: \"success\",\n          onClose: onClose,\n          message: \"Campaign credit successfully purchased\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 11\n          }\n        })\n      });\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  };\n\n  const handlePaymentSuccess = () => {\n    setTimeout(() => {\n      handleFetchWallet();\n    }, 2000);\n  };\n\n  return __jsx(ModalContainer, {\n    size: \"md\",\n    isOpen: isOpen,\n    onClose: handleCloseModal,\n    title: \"Topup Credit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }, __jsx(ModalCloseButton, {\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }), __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, section === 0 && __jsx(React.Fragment, null, __jsx(SmallText, {\n    pb: \"1rem\",\n    color: \"gray.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, \"Enter the amount you wish to purchase and get the corresponding value in credits\"), __jsx(BodyText, {\n    pb: \"0.5rem\",\n    fontWeight: \"bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, \"1 simpu credit = \\u20A61\"), __jsx(Input, {\n    mb: \"1rem\",\n    type: \"number\",\n    name: \"amount\",\n    value: amount,\n    onChange: handleChange,\n    isInvalid: !!errors.amount,\n    errorMessage: errors.amount,\n    placeholder: \"Enter amount in Naira\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }), __jsx(Input, {\n    isDisabled: true,\n    value: amountToPay,\n    mb: \"1rem\",\n    placeholder: \"Simpu Credit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }), __jsx(Button, {\n    mb: \"1rem\",\n    isFullWidth: true,\n    variantColor: \"blue\",\n    onClick: () => setSection(1),\n    isDisabled: !amount || amount < 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }, \"Topup\")), section === 1 && __jsx(React.Fragment, null, __jsx(SmallText, {\n    pb: \"1.5rem\",\n    color: \"gray.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }, \"How would you like to pay for your Simpu campaign credits\"), __jsx(Box, {\n    height: \"400px\",\n    overflowY: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }\n  }, __jsx(Flex, {\n    pb: \"1rem\",\n    mb: \"1rem\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 15\n    }\n  }, __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  }, __jsx(Flex, {\n    w: \"50px\",\n    h: \"50px\",\n    rounded: \"6px\",\n    bg: \"gray.200\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 19\n    }\n  }, __jsx(Icon, {\n    name: \"marketing-one-time-payment\",\n    color: \"#3525E6\",\n    size: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 21\n    }\n  })), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 19\n    }\n  }, __jsx(BodyText, {\n    color: \"gray.900\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 21\n    }\n  }, \"One-time payment\"))), __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    size: \"sm\",\n    width: \"100px\",\n    variantColor: \"blue\",\n    isDisabled: !amount,\n    onClick: () => {\n      onClose === null || onClose === void 0 ? void 0 : onClose();\n      sendAmplitudeData('campaignTopupOneTimePayment');\n      initializeOneTimePayment(handlePaymentSuccess, onOpen);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 19\n    }\n  }, \"Pay now\"))), __jsx(Flex, {\n    pb: \"1rem\",\n    mb: \"1rem\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 15\n    }\n  }, __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 17\n    }\n  }, __jsx(Flex, {\n    w: \"50px\",\n    h: \"50px\",\n    rounded: \"6px\",\n    bg: \"gray.200\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 19\n    }\n  }, __jsx(Icon, {\n    name: \"marketing-use-card\",\n    color: \"#3525E6\",\n    size: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 21\n    }\n  })), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 19\n    }\n  }, __jsx(BodyText, {\n    color: \"gray.900\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 21\n    }\n  }, \"Use a new card\"))), __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    size: \"sm\",\n    width: \"100px\",\n    variantColor: \"blue\",\n    isDisabled: !amount,\n    onClick: () => {\n      onClose === null || onClose === void 0 ? void 0 : onClose();\n      sendAmplitudeData('campaignTopupNewCard');\n      initializeAddCardPayment(handlePaymentSuccess, onOpen);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 19\n    }\n  }, \"Add card\"))), cards.map(i => __jsx(CardItem, {\n    card: i,\n    key: i.id,\n    amount: amount,\n    onClose: onClose,\n    fetchWallet: fetchWallet,\n    default_card: default_card // @ts-ignore\n    ,\n    organisation_id: organisationID,\n    handleCloseModal: handleCloseModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 17\n    }\n  }))), __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    mb: \"1rem\",\n    isFullWidth: true,\n    variant: \"outline\",\n    onClick: () => setSection(0),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 15\n    }\n  }, \"Back\"), __jsx(Button, {\n    mb: \"1rem\",\n    isFullWidth: true,\n    variant: \"outline\",\n    onClick: handleCloseModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 15\n    }\n  }, \"Cancel\")))));\n};\n\nconst CardItem = props => {\n  const {\n    card,\n    amount,\n    onClose,\n    fetchWallet,\n    default_card,\n    organisation_id,\n    handleCloseModal\n  } = props;\n  const [isToppingUp, setIsToppingUp] = React.useState(false);\n  const toast = useToast();\n\n  const handleUseCard = async () => {\n    try {\n      setIsToppingUp(true);\n      await topupCampaignCredits({\n        amount: amount * 100,\n        card: card.id\n      });\n      await fetchWallet(organisation_id);\n      handleCloseModal();\n      onClose === null || onClose === void 0 ? void 0 : onClose();\n      setIsToppingUp(false);\n      sendAmplitudeData('campaignTopupWithCard');\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          status: \"success\",\n          onClose: onClose,\n          message: \"Campaign credit successfully purchased\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 11\n          }\n        })\n      });\n    } catch (error) {\n      setIsToppingUp(false);\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: \"Sorry, unable to login. Please check your credentials\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 11\n          }\n        })\n      });\n    }\n  };\n\n  return __jsx(Flex, {\n    pb: \"1rem\",\n    mb: \"1rem\",\n    key: card.id,\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 5\n    }\n  }, __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 9\n    }\n  }, __jsx(Image, {\n    alt: \"credit card\",\n    src: `/images/credit-cards/${card.brand}.svg`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 11\n    }\n  })), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 9\n    }\n  }, __jsx(BodyText, {\n    color: \"gray.900\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 11\n    }\n  }, `••••  ${card.last4}`), __jsx(SmallText, {\n    color: \"gray.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 11\n    }\n  }, `Exp ${card.exp_month}/${card.exp_year}`))), __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }\n  }, card.id === default_card && __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    color: \"#1A1A1A\",\n    fontSize: \"0.875rem\",\n    fontWeight: \"400\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 13\n    }\n  }, \"Default\"), __jsx(Icon, {\n    size: \"1rem\",\n    name: \"check-circle\",\n    color: \"#47B881\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 13\n    }\n  })), __jsx(Button, {\n    size: \"sm\",\n    width: \"100px\",\n    variantColor: \"blue\",\n    isLoading: isToppingUp,\n    onClick: () => handleUseCard(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 9\n    }\n  }, \"Use card\")));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/marketing/campaigns/components/credit-topup-modal.tsx"],"names":["Box","Flex","Icon","Image","ModalBody","ModalCloseButton","Stack","Text","useToast","BodyText","Button","Input","SmallText","useFormik","React","usePaystackPayment","useSelector","yup","getReference","sendAmplitudeData","ModalContainer","ToastBox","selectOrganisationID","topupCampaignCredits","CreditTopupModal","props","cards","isOpen","onOpen","onClose","wallet_id","fetchWallet","wallet_email","default_card","amount","amountProps","toast","values","errors","handleChange","resetForm","initialValues","onSubmit","console","log","validationSchema","object","shape","number","min","max","required","organisationID","amountToPay","publicKey","process","env","REACT_APP_PAYSTACK_PUBLIC_KEY","commonConfig","email","reference","oneTimePaymentConfig","metadata","save_card","purpose","addCardConfig","channels","initializeOneTimePayment","initializeAddCardPayment","section","setSection","useState","handleCloseModal","handleFetchWallet","position","render","error","handlePaymentSuccess","setTimeout","map","i","id","CardItem","card","organisation_id","isToppingUp","setIsToppingUp","handleUseCard","brand","last4","exp_month","exp_year"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Flex,\n  Icon,\n  Image,\n  ModalBody,\n  ModalCloseButton,\n  Stack,\n  Text,\n  useToast,\n} from '@chakra-ui/core';\nimport { BodyText, Button, Input, SmallText } from 'app/components';\nimport { useFormik } from 'formik';\nimport React from 'react';\nimport { usePaystackPayment } from 'react-paystack';\nimport { useSelector } from 'react-redux';\nimport * as yup from 'yup';\nimport { getReference } from '../../../../../utils';\nimport { sendAmplitudeData } from '../../../../../utils/amplitude';\nimport { ModalContainer, ModalContainerOptions, ToastBox } from '../../../../components';\nimport { selectOrganisationID } from '../../../../unauthenticated-app/authentication';\nimport { topupCampaignCredits } from '../campaigns.service';\n\ninterface CardItemProps {\n  card: any;\n  amount: number;\n  organisation_id: string;\n  default_card: any;\n  onClose?(): void;\n  fetchWallet: any;\n  handleCloseModal(): void;\n}\n\ninterface CreditTopupModalProps {\n  cards: any[];\n  onOpen(): void;\n  wallet_id: any;\n  amount?: number;\n  billingData?: any;\n  default_card: any;\n  wallet_email?: any;\n  organisation_id: string;\n  isOpen: ModalContainerOptions['isOpen'];\n  onClose: ModalContainerOptions['onClose'];\n  fetchWallet: (organization_id: any) => void;\n}\n\nexport const CreditTopupModal = (props: CreditTopupModalProps) => {\n  const {\n    cards,\n    isOpen,\n    onOpen,\n    onClose,\n    wallet_id,\n    fetchWallet,\n    wallet_email,\n    default_card,\n    amount: amountProps,\n  } = props;\n  const toast = useToast();\n  const { values, errors, handleChange, resetForm } = useFormik({\n    initialValues: { amount: amountProps ?? 100 },\n    onSubmit: values => console.log(values),\n    validationSchema: yup.object().shape({\n      amount: yup\n        .number()\n        .min(100, 'Minimum amount is 100')\n        .max(500000, 'Maximum amount is 500,000')\n        .required('Amount is required'),\n    }),\n  });\n  const organisationID = useSelector(selectOrganisationID);\n  const { amount } = values;\n  const amountToPay = amount;\n  const publicKey = process.env.REACT_APP_PAYSTACK_PUBLIC_KEY;\n  const commonConfig = {\n    email: wallet_email ?? '',\n    reference: getReference(),\n    publicKey: publicKey || '',\n    amount: amountToPay * 100,\n  };\n  const oneTimePaymentConfig = {\n    ...commonConfig,\n    metadata: {\n      wallet_id,\n      save_card: false,\n      purpose: 'credit-purchase',\n    },\n  };\n  const addCardConfig = {\n    ...commonConfig,\n    channels: ['card'],\n    metadata: {\n      wallet_id,\n      save_card: true,\n      purpose: 'credit-purchase',\n    },\n  };\n  // @ts-ignore\n  const initializeOneTimePayment = usePaystackPayment(oneTimePaymentConfig);\n  // @ts-ignore\n  const initializeAddCardPayment = usePaystackPayment(addCardConfig);\n\n  const [section, setSection] = React.useState(0);\n\n  const handleCloseModal = () => {\n    resetForm();\n    setSection(0);\n    onClose?.();\n  };\n\n  const handleFetchWallet = async () => {\n    try {\n      await fetchWallet(organisationID);\n      handleCloseModal();\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox\n            status=\"success\"\n            onClose={onClose}\n            message=\"Campaign credit successfully purchased\"\n          />\n        ),\n      });\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n  };\n\n  const handlePaymentSuccess = () => {\n    setTimeout(() => {\n      handleFetchWallet();\n    }, 2000);\n  };\n\n  return (\n    <ModalContainer size=\"md\" isOpen={isOpen} onClose={handleCloseModal} title=\"Topup Credit\">\n      <ModalCloseButton size=\"sm\" />\n      <ModalBody>\n        {section === 0 && (\n          <>\n            <SmallText pb=\"1rem\" color=\"gray.500\">\n              Enter the amount you wish to purchase and get the corresponding value in credits\n            </SmallText>\n            <BodyText pb=\"0.5rem\" fontWeight=\"bold\">\n              1 simpu credit = &#8358;1\n            </BodyText>\n            <Input\n              mb=\"1rem\"\n              type=\"number\"\n              name=\"amount\"\n              value={amount}\n              onChange={handleChange}\n              isInvalid={!!errors.amount}\n              errorMessage={errors.amount}\n              placeholder=\"Enter amount in Naira\"\n            />\n            <Input isDisabled value={amountToPay} mb=\"1rem\" placeholder=\"Simpu Credit\" />\n            <Button\n              mb=\"1rem\"\n              isFullWidth\n              variantColor=\"blue\"\n              onClick={() => setSection(1)}\n              isDisabled={!amount || amount < 100}\n            >\n              Topup\n            </Button>\n          </>\n        )}\n        {section === 1 && (\n          <>\n            <SmallText pb=\"1.5rem\" color=\"gray.500\">\n              How would you like to pay for your Simpu campaign credits\n            </SmallText>\n            <Box height=\"400px\" overflowY=\"auto\">\n              <Flex pb=\"1rem\" mb=\"1rem\" alignItems=\"center\" justifyContent=\"space-between\">\n                <Stack isInline alignItems=\"center\">\n                  <Flex\n                    w=\"50px\"\n                    h=\"50px\"\n                    rounded=\"6px\"\n                    bg=\"gray.200\"\n                    alignItems=\"center\"\n                    justifyContent=\"center\"\n                  >\n                    <Icon name=\"marketing-one-time-payment\" color=\"#3525E6\" size=\"2rem\" />\n                  </Flex>\n                  <Box>\n                    <BodyText color=\"gray.900\">One-time payment</BodyText>\n                  </Box>\n                </Stack>\n\n                <Stack isInline alignItems=\"center\">\n                  <Button\n                    size=\"sm\"\n                    width=\"100px\"\n                    variantColor=\"blue\"\n                    isDisabled={!amount}\n                    onClick={() => {\n                      onClose?.();\n                      sendAmplitudeData('campaignTopupOneTimePayment');\n                      initializeOneTimePayment(handlePaymentSuccess, onOpen);\n                    }}\n                  >\n                    Pay now\n                  </Button>\n                </Stack>\n              </Flex>\n\n              <Flex pb=\"1rem\" mb=\"1rem\" alignItems=\"center\" justifyContent=\"space-between\">\n                <Stack isInline alignItems=\"center\">\n                  <Flex\n                    w=\"50px\"\n                    h=\"50px\"\n                    rounded=\"6px\"\n                    bg=\"gray.200\"\n                    alignItems=\"center\"\n                    justifyContent=\"center\"\n                  >\n                    <Icon name=\"marketing-use-card\" color=\"#3525E6\" size=\"2rem\" />\n                  </Flex>\n                  <Box>\n                    <BodyText color=\"gray.900\">Use a new card</BodyText>\n                  </Box>\n                </Stack>\n\n                <Stack isInline alignItems=\"center\">\n                  <Button\n                    size=\"sm\"\n                    width=\"100px\"\n                    variantColor=\"blue\"\n                    isDisabled={!amount}\n                    onClick={() => {\n                      onClose?.();\n                      sendAmplitudeData('campaignTopupNewCard');\n                      initializeAddCardPayment(handlePaymentSuccess, onOpen);\n                    }}\n                  >\n                    Add card\n                  </Button>\n                </Stack>\n              </Flex>\n              {cards.map(i => (\n                <CardItem\n                  card={i}\n                  key={i.id}\n                  amount={amount}\n                  onClose={onClose}\n                  fetchWallet={fetchWallet}\n                  default_card={default_card}\n                  // @ts-ignore\n                  organisation_id={organisationID}\n                  handleCloseModal={handleCloseModal}\n                />\n              ))}\n            </Box>\n            <Stack isInline alignItems=\"center\">\n              <Button mb=\"1rem\" isFullWidth variant=\"outline\" onClick={() => setSection(0)}>\n                Back\n              </Button>\n              <Button mb=\"1rem\" isFullWidth variant=\"outline\" onClick={handleCloseModal}>\n                Cancel\n              </Button>\n            </Stack>\n          </>\n        )}\n      </ModalBody>\n    </ModalContainer>\n  );\n};\n\nconst CardItem = (props: CardItemProps) => {\n  const {\n    card,\n    amount,\n    onClose,\n    fetchWallet,\n    default_card,\n    organisation_id,\n    handleCloseModal,\n  } = props;\n\n  const [isToppingUp, setIsToppingUp] = React.useState(false);\n\n  const toast = useToast();\n\n  const handleUseCard = async () => {\n    try {\n      setIsToppingUp(true);\n      await topupCampaignCredits({ amount: amount * 100, card: card.id });\n      await fetchWallet(organisation_id);\n      handleCloseModal();\n      onClose?.();\n      setIsToppingUp(false);\n      sendAmplitudeData('campaignTopupWithCard');\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox\n            status=\"success\"\n            onClose={onClose}\n            message=\"Campaign credit successfully purchased\"\n          />\n        ),\n      });\n    } catch (error) {\n      setIsToppingUp(false);\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox\n            onClose={onClose}\n            message=\"Sorry, unable to login. Please check your credentials\"\n          />\n        ),\n      });\n    }\n  };\n\n  return (\n    <Flex pb=\"1rem\" mb=\"1rem\" key={card.id} alignItems=\"center\" justifyContent=\"space-between\">\n      <Stack isInline alignItems=\"center\">\n        <Box>\n          <Image alt=\"credit card\" src={`/images/credit-cards/${card.brand}.svg`} />\n        </Box>\n        <Box>\n          <BodyText color=\"gray.900\">{`••••  ${card.last4}`}</BodyText>\n          <SmallText color=\"gray.500\">{`Exp ${card.exp_month}/${card.exp_year}`}</SmallText>\n        </Box>\n      </Stack>\n\n      <Stack isInline alignItems=\"center\">\n        {card.id === default_card && (\n          <Stack isInline alignItems=\"center\">\n            <Text color=\"#1A1A1A\" fontSize=\"0.875rem\" fontWeight=\"400\">\n              Default\n            </Text>\n            <Icon size=\"1rem\" name=\"check-circle\" color=\"#47B881\" />\n          </Stack>\n        )}\n        <Button\n          size=\"sm\"\n          width=\"100px\"\n          variantColor=\"blue\"\n          isLoading={isToppingUp}\n          onClick={() => handleUseCard()}\n        >\n          Use card\n        </Button>\n      </Stack>\n    </Flex>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}