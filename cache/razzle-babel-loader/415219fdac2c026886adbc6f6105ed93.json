{"ast":null,"code":"import _objectWithoutProperties from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nconst _excluded = [\"data\"],\n      _excluded2 = [\"attachments\", \"meta\", \"author\", \"notification\", \"notifications\"],\n      _excluded3 = [\"userInfo\"],\n      _excluded4 = [\"notes\"],\n      _excluded5 = [\"columns\"],\n      _excluded6 = [\"sender\", \"receiver\", \"lastMessage\", \"addressBookDetail\", \"contactDetail\", \"assignments\"],\n      _excluded7 = [\"userDetail\"],\n      _excluded8 = [\"columns\"];\nimport { differenceInSeconds, differenceInMinutes, differenceInHours, differenceInDays, differenceInWeeks, differenceInMonths, differenceInYears, isToday, isYesterday, format } from 'date-fns';\nimport emojiRegex from 'emoji-regex';\nimport { capitalize, isEmpty } from 'lodash';\nimport { loadState } from '../../../utils';\nimport { channelGroups } from './inbox.data';\nexport function removeTemplateHtmlTags(text) {\n  let content = text;\n  content = content.includes('<span class=\"contact-column\">') ? content.replace(new RegExp(`<span class=\"contact-column\">`, 'g'), '') : content;\n  content = content.includes('</span>') ? content.replace(new RegExp(`</span>`, 'g'), '') : content;\n  return content;\n}\nexport function aggregate(lol) {\n  return lol.reduce((a, item) => {\n    if (isEmpty(item)) {\n      return a;\n    }\n\n    const [payload, meta] = item;\n    const [type] = Object.keys(payload);\n    let value = payload[type];\n\n    if (isEmpty(value)) {\n      return a;\n    }\n\n    if (!a[type]) {\n      a[type] = [];\n    }\n\n    if (meta && !Array.isArray(value)) {\n      value = _objectSpread(_objectSpread({}, meta), value);\n    }\n\n    a[type] = a[type].concat(value);\n    return a;\n  }, {});\n}\nexport const dAttachment = (attachments, message_id) => {\n  const pAttachment = [];\n  (attachments || []).forEach((item, index) => {\n    const _ref = item || {},\n          {\n      data: attachmentData\n    } = _ref,\n          attachment = _objectWithoutProperties(_ref, _excluded);\n\n    const id = attachment.id || `${index}-${message_id}`;\n    pAttachment.push([{\n      attachmentData\n    }, {\n      attachment_id: id\n    }]);\n    pAttachment.push([{\n      attachment\n    }, {\n      id,\n      message_id\n    }]);\n  });\n  return pAttachment;\n};\nexport function destrutureMessage(params = {}) {\n  const {\n    attachments: as,\n    meta: messageMeta,\n    author,\n    notification,\n    notifications\n  } = params,\n        message = _objectWithoutProperties(params, _excluded2);\n\n  const attachments = dAttachment(as, message.uuid);\n\n  const _ref2 = author || {},\n        {\n    userInfo\n  } = _ref2,\n        inboxUser = _objectWithoutProperties(_ref2, _excluded3);\n\n  const customer = inboxUser.is_customer ? userInfo : null;\n  return [...attachments, [{\n    messageMeta\n  }, {\n    message_id: message.uuid\n  }], [{\n    notification\n  }], [{\n    notification: notifications || []\n  }], [{\n    message\n  }], [{\n    inboxUser\n  }], [{\n    customer\n  }]];\n}\nexport function destructureAssignment(params) {\n  const {\n    notes: note\n  } = params,\n        assignment = _objectWithoutProperties(params, _excluded4);\n\n  return [[{\n    note\n  }], [{\n    assignment\n  }]];\n}\nexport function dContactList(params = {}) {\n  const {\n    columns\n  } = params,\n        contact = _objectWithoutProperties(params, _excluded5);\n\n  return [[{\n    column: columns\n  }, {\n    contact_id: contact.id\n  }], [{\n    contact\n  }]];\n}\nexport function destructureThread(params) {\n  var _assignments$map;\n\n  const {\n    sender,\n    receiver: r,\n    lastMessage,\n    addressBookDetail,\n    contactDetail,\n    assignments\n  } = params,\n        thread = _objectWithoutProperties(params, _excluded6);\n\n  const assignment = (assignments === null || assignments === void 0 ? void 0 : (_assignments$map = assignments.map(item => destructureAssignment(item))) === null || _assignments$map === void 0 ? void 0 : _assignments$map.flat()) || [];\n  const message = destrutureMessage(lastMessage);\n\n  const _ref3 = r || {},\n        {\n    userDetail\n  } = _ref3,\n        receiver = _objectWithoutProperties(_ref3, _excluded7);\n\n  const _ref4 = contactDetail || {},\n        {\n    columns\n  } = _ref4,\n        contact = _objectWithoutProperties(_ref4, _excluded8);\n\n  return [...assignment, ...message, [{\n    customer: sender\n  }], [{\n    customer: userDetail\n  }], [{\n    credential: receiver\n  }], [{\n    column: columns\n  }, {\n    contact_id: contact.id\n  }], [{\n    addressBook: addressBookDetail\n  }], [{\n    contact\n  }], [{\n    thread\n  }, {\n    last_message_id: lastMessage === null || lastMessage === void 0 ? void 0 : lastMessage.uuid\n  }]];\n}\nexport function destructureThreads(params) {\n  return params.map(item => destructureThread(item)).flat();\n}\nexport function extractor(fn, payload) {\n  return aggregate(fn(payload));\n}\nexport const threadSorter = (a = '', b) => {\n  const createdA = a.toUpperCase();\n  const createdB = b && b.toUpperCase();\n\n  if (createdA > createdB) {\n    return -1;\n  }\n\n  if (createdA < createdB) {\n    return 1;\n  } // createdDatetime must be equal\n\n\n  return 0;\n};\nexport const getChannelComposeRules = channel => {\n  if (!channel) {\n    return null;\n  }\n\n  const rules = {\n    twitter: {\n      fileType: 'image/*, video/*',\n      multiple: false,\n      meta: {\n        video: {\n          size: 536870912,\n          duration: 260\n        },\n        image: {\n          size: 3072000\n        }\n      }\n    },\n    messenger: {\n      multiple: false,\n      meta: {\n        default: {\n          size: 26214400,\n          duration: Infinity\n        }\n      }\n    },\n    whatsapp: {\n      multiple: false,\n      meta: {\n        default: {\n          size: 26214400,\n          duration: Infinity\n        }\n      }\n    },\n    whatsappWeb: {\n      multiple: false,\n      meta: {\n        default: {\n          size: 26214400,\n          duration: Infinity\n        }\n      }\n    },\n    email: {\n      multiple: true,\n      meta: {\n        default: {\n          size: 26214400,\n          duration: Infinity\n        }\n      }\n    }\n  };\n  return rules[channel] || rules.twitter;\n};\nexport const formatBytes = (bytes, decimals = 1) => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n};\nexport const formatTime = time => {\n  const now = new Date();\n\n  switch (true) {\n    case differenceInSeconds(now, time) < 60:\n      return 'Just Now';\n\n    case differenceInMinutes(now, time) < 60:\n      return `${differenceInMinutes(now, time)}m`;\n\n    case differenceInHours(now, time) < 24:\n      return `${differenceInHours(now, time)}h`;\n\n    case differenceInDays(now, time) < 7:\n      return `${differenceInDays(now, time)}d`;\n\n    case differenceInWeeks(now, time) < 4:\n      return `${differenceInWeeks(now, time)}w`;\n\n    case differenceInMonths(now, time) < 12:\n      return `${differenceInMonths(now, time)} mon`;\n\n    default:\n      return `${differenceInYears(now, time)}y`;\n  }\n};\nexport const formatMessageDateTime = time => {\n  const now = new Date();\n\n  switch (true) {\n    case differenceInSeconds(now, time) < 60:\n      return 'a few seconds ago';\n\n    case isToday(time):\n      return format(time, 'hh:mm a');\n\n    case isYesterday(time):\n      return `Yesterday, ${format(time, 'hh:mm a')}`;\n\n    case differenceInDays(now, time) < 7:\n      return format(time, 'eee, hh:mm a ');\n\n    case differenceInYears(now, time) === 0:\n      return format(time, 'dd MMM hh:mm a');\n\n    default:\n      return format(time, 'dd MMM yyyy hh:mm a');\n  }\n};\nexport const parseTemplate = (template, contactTable, contact) => {\n  let content = template;\n  contactTable && contactTable.columns.forEach(({\n    name,\n    id\n  }) => {\n    if (id) {\n      content = content.replace(new RegExp(`{{${name}}}`, 'g'), contact && `<span class=\"contact-column\">${contact[id]}</span>` || '');\n    }\n  });\n  return content.trim();\n};\nexport const formatToCurrency = amount => {\n  const valueDisplay = (amount / 100).toLocaleString('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  });\n  return valueDisplay.substr(1, valueDisplay.length);\n};\nconst regex = emojiRegex();\nexport const isOnlyEmoji = str => {\n  if (!str) {\n    return false;\n  }\n\n  const result = str.replace(new RegExp(regex, 'g'), '').trim();\n  return !result.length;\n};\nexport const getFlagEmoji = key => {\n  const flagEmojis = {\n    AD: '🇦🇩',\n    AE: '🇦🇪',\n    AF: '🇦🇫',\n    AG: '🇦🇬',\n    AI: '🇦🇮',\n    AL: '🇦🇱',\n    AM: '🇦🇲',\n    AO: '🇦🇴',\n    AQ: '🇦🇶',\n    AR: '🇦🇷',\n    AS: '🇦🇸',\n    AT: '🇦🇹',\n    AU: '🇦🇺',\n    AW: '🇦🇼',\n    AX: '🇦🇽',\n    AZ: '🇦🇿',\n    BA: '🇧🇦',\n    BB: '🇧🇧',\n    BD: '🇧🇩',\n    BE: '🇧🇪',\n    BF: '🇧🇫',\n    BG: '🇧🇬',\n    BH: '🇧🇭',\n    BI: '🇧🇮',\n    BJ: '🇧🇯',\n    BL: '🇧🇱',\n    BM: '🇧🇲',\n    BN: '🇧🇳',\n    BO: '🇧🇴',\n    BQ: '🇧🇶',\n    BR: '🇧🇷',\n    BS: '🇧🇸',\n    BT: '🇧🇹',\n    BV: '🇧🇻',\n    BW: '🇧🇼',\n    BY: '🇧🇾',\n    BZ: '🇧🇿',\n    CA: '🇨🇦',\n    CC: '🇨🇨',\n    CD: '🇨🇩',\n    CF: '🇨🇫',\n    CG: '🇨🇬',\n    CH: '🇨🇭',\n    CI: '🇨🇮',\n    CK: '🇨🇰',\n    CL: '🇨🇱',\n    CM: '🇨🇲',\n    CN: '🇨🇳',\n    CO: '🇨🇴',\n    CR: '🇨🇷',\n    CU: '🇨🇺',\n    CV: '🇨🇻',\n    CW: '🇨🇼',\n    CX: '🇨🇽',\n    CY: '🇨🇾',\n    CZ: '🇨🇿',\n    DE: '🇩🇪',\n    DJ: '🇩🇯',\n    DK: '🇩🇰',\n    DM: '🇩🇲',\n    DO: '🇩🇴',\n    DZ: '🇩🇿',\n    EC: '🇪🇨',\n    EE: '🇪🇪',\n    EG: '🇪🇬',\n    EH: '🇪🇭',\n    ER: '🇪🇷',\n    ES: '🇪🇸',\n    ET: '🇪🇹',\n    FI: '🇫🇮',\n    FJ: '🇫🇯',\n    FK: '🇫🇰',\n    FM: '🇫🇲',\n    FO: '🇫🇴',\n    FR: '🇫🇷',\n    GA: '🇬🇦',\n    GB: '🇬🇧',\n    GD: '🇬🇩',\n    GE: '🇬🇪',\n    GF: '🇬🇫',\n    GG: '🇬🇬',\n    GH: '🇬🇭',\n    GI: '🇬🇮',\n    GL: '🇬🇱',\n    GM: '🇬🇲',\n    GN: '🇬🇳',\n    GP: '🇬🇵',\n    GQ: '🇬🇶',\n    GR: '🇬🇷',\n    GS: '🇬🇸',\n    GT: '🇬🇹',\n    GU: '🇬🇺',\n    GW: '🇬🇼',\n    GY: '🇬🇾',\n    HK: '🇭🇰',\n    HM: '🇭🇲',\n    HN: '🇭🇳',\n    HR: '🇭🇷',\n    HT: '🇭🇹',\n    HU: '🇭🇺',\n    ID: '🇮🇩',\n    IE: '🇮🇪',\n    IL: '🇮🇱',\n    IM: '🇮🇲',\n    IN: '🇮🇳',\n    IO: '🇮🇴',\n    IQ: '🇮🇶',\n    IR: '🇮🇷',\n    IS: '🇮🇸',\n    IT: '🇮🇹',\n    JE: '🇯🇪',\n    JM: '🇯🇲',\n    JO: '🇯🇴',\n    JP: '🇯🇵',\n    KE: '🇰🇪',\n    KG: '🇰🇬',\n    KH: '🇰🇭',\n    KI: '🇰🇮',\n    KM: '🇰🇲',\n    KN: '🇰🇳',\n    KP: '🇰🇵',\n    KR: '🇰🇷',\n    KW: '🇰🇼',\n    KY: '🇰🇾',\n    KZ: '🇰🇿',\n    LA: '🇱🇦',\n    LB: '🇱🇧',\n    LC: '🇱🇨',\n    LI: '🇱🇮',\n    LK: '🇱🇰',\n    LR: '🇱🇷',\n    LS: '🇱🇸',\n    LT: '🇱🇹',\n    LU: '🇱🇺',\n    LV: '🇱🇻',\n    LY: '🇱🇾',\n    MA: '🇲🇦',\n    MC: '🇲🇨',\n    MD: '🇲🇩',\n    ME: '🇲🇪',\n    MF: '🇲🇫',\n    MG: '🇲🇬',\n    MH: '🇲🇭',\n    MK: '🇲🇰',\n    ML: '🇲🇱',\n    MM: '🇲🇲',\n    MN: '🇲🇳',\n    MO: '🇲🇴',\n    MP: '🇲🇵',\n    MQ: '🇲🇶',\n    MR: '🇲🇷',\n    MS: '🇲🇸',\n    MT: '🇲🇹',\n    MU: '🇲🇺',\n    MV: '🇲🇻',\n    MW: '🇲🇼',\n    MX: '🇲🇽',\n    MY: '🇲🇾',\n    MZ: '🇲🇿',\n    NA: '🇳🇦',\n    NC: '🇳🇨',\n    NE: '🇳🇪',\n    NF: '🇳🇫',\n    NG: '🇳🇬',\n    NI: '🇳🇮',\n    NL: '🇳🇱',\n    NO: '🇳🇴',\n    NP: '🇳🇵',\n    NR: '🇳🇷',\n    NU: '🇳🇺',\n    NZ: '🇳🇿',\n    OM: '🇴🇲',\n    PA: '🇵🇦',\n    PE: '🇵🇪',\n    PF: '🇵🇫',\n    PG: '🇵🇬',\n    PH: '🇵🇭',\n    PK: '🇵🇰',\n    PL: '🇵🇱',\n    PM: '🇵🇲',\n    PN: '🇵🇳',\n    PR: '🇵🇷',\n    PS: '🇵🇸',\n    PT: '🇵🇹',\n    PW: '🇵🇼',\n    PY: '🇵🇾',\n    QA: '🇶🇦',\n    RE: '🇷🇪',\n    RO: '🇷🇴',\n    RS: '🇷🇸',\n    RU: '🇷🇺',\n    RW: '🇷🇼',\n    SA: '🇸🇦',\n    SB: '🇸🇧',\n    SC: '🇸🇨',\n    SD: '🇸🇩',\n    SE: '🇸🇪',\n    SG: '🇸🇬',\n    SH: '🇸🇭',\n    SI: '🇸🇮',\n    SJ: '🇸🇯',\n    SK: '🇸🇰',\n    SL: '🇸🇱',\n    SM: '🇸🇲',\n    SN: '🇸🇳',\n    SO: '🇸🇴',\n    SR: '🇸🇷',\n    SS: '🇸🇸',\n    ST: '🇸🇹',\n    SV: '🇸🇻',\n    SX: '🇸🇽',\n    SY: '🇸🇾',\n    SZ: '🇸🇿',\n    TC: '🇹🇨',\n    TD: '🇹🇩',\n    TF: '🇹🇫',\n    TG: '🇹🇬',\n    TH: '🇹🇭',\n    TJ: '🇹🇯',\n    TK: '🇹🇰',\n    TL: '🇹🇱',\n    TM: '🇹🇲',\n    TN: '🇹🇳',\n    TO: '🇹🇴',\n    TR: '🇹🇷',\n    TT: '🇹🇹',\n    TV: '🇹🇻',\n    TW: '🇹🇼',\n    TZ: '🇹🇿',\n    UA: '🇺🇦',\n    UG: '🇺🇬',\n    UM: '🇺🇲',\n    US: '🇺🇸',\n    UY: '🇺🇾',\n    UZ: '🇺🇿',\n    VA: '🇻🇦',\n    VC: '🇻🇨',\n    VE: '🇻🇪',\n    VG: '🇻🇬',\n    VI: '🇻🇮',\n    VN: '🇻🇳',\n    VU: '🇻🇺',\n    WF: '🇼🇫',\n    WS: '🇼🇸',\n    XK: '🇽🇰',\n    YE: '🇾🇪',\n    YT: '🇾🇹',\n    ZA: '🇿🇦',\n    ZM: '🇿🇲'\n  };\n  return flagEmojis[key === null || key === void 0 ? void 0 : key.toUpperCase()] || '🏳️';\n};\nexport function getDefaultConversationData(id) {\n  let scrollTop = 0;\n\n  if (id) {\n    const currentLocalState = loadState();\n    scrollTop = (currentLocalState === null || currentLocalState === void 0 ? void 0 : currentLocalState.scrollMemory) && currentLocalState.scrollMemory[id] || 0;\n  }\n\n  return {\n    assignments: [],\n    messages: {\n      scrollTop,\n      data: [],\n      status: 'none',\n      unreadCount: 0,\n      firstUnreadMessgeID: null\n    }\n  };\n}\nexport function getChannelGroupName(channel) {\n  const group = channelGroups.find(({\n    channels\n  }) => channels.includes(channel));\n  return group && group.name || channel;\n}\nexport function transformSenderToContact(table, sender) {\n  const columns = [...table.columns];\n  let isChannelUsed = false;\n  const {\n    platform_name,\n    platform_nick,\n    email,\n    channel: c\n  } = sender;\n  const channel = getChannelGroupName(c);\n  const transformedData = columns.reduce((acc, {\n    id,\n    name\n  }) => {\n    let item = '';\n\n    if (name === 'name') {\n      item = platform_name || '';\n    } else if (name === 'email') {\n      item = email || '';\n    } else if (name === channel) {\n      item = platform_nick || platform_name || '';\n      isChannelUsed = true;\n    }\n\n    return _objectSpread(_objectSpread({}, acc), {}, {\n      [id || '']: item\n    });\n  }, {});\n\n  if (!isChannelUsed) {\n    columns.push({\n      hidden: false,\n      id: 'unknown',\n      label: capitalize(channel),\n      name: channel,\n      type: 'TEXT'\n    });\n    transformedData.unknown = platform_nick || platform_name || '';\n  }\n\n  return [columns, transformedData];\n}\nexport function sortColumns(columns, contact) {\n  const result = [];\n  let index = 0;\n  columns.forEach(item => {\n    const formattedItem = _objectSpread({\n      uid: item.id\n    }, item);\n\n    if (item && contact && contact[item.id || '-1'] && contact[item.id || '-1'] !== '-') {\n      result.unshift(formattedItem);\n      index += 1;\n    } else {\n      result.push(formattedItem);\n    }\n  });\n  return [result, index];\n}\nexport function getUnknownColumnID(columns, unknownColumn) {\n  const filteredColumns = columns.filter(({\n    hidden,\n    label,\n    name,\n    type\n  }) => unknownColumn.hidden === hidden && unknownColumn.label === label && unknownColumn.name === name && unknownColumn.type === type);\n\n  if (filteredColumns.length === 1) {\n    var _filteredColumns$;\n\n    return (_filteredColumns$ = filteredColumns[0]) === null || _filteredColumns$ === void 0 ? void 0 : _filteredColumns$.id;\n  }\n\n  return filteredColumns.reduce((acc, item) => {\n    return acc >= (item === null || item === void 0 ? void 0 : item.id) ? acc : item === null || item === void 0 ? void 0 : item.id;\n  }, null);\n}\nexport function mergeContact(transformedContact, contact, tableColumn) {\n  var _tableColumn$find;\n\n  const nameID = (_tableColumn$find = tableColumn.find(item => item.name === 'name')) === null || _tableColumn$find === void 0 ? void 0 : _tableColumn$find.id;\n  const mergedContact = Object.keys(transformedContact).reduce((acc, itemID) => {\n    if (String(itemID) === String(nameID)) {\n      acc[nameID] = contact && contact[nameID] || transformedContact && transformedContact[nameID] || '';\n    } else {\n      acc[itemID] = transformedContact && transformedContact[itemID] || contact && contact[itemID] || '';\n    }\n\n    return acc;\n  }, {});\n  return mergedContact;\n}","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/inbox.utils.ts"],"names":["differenceInSeconds","differenceInMinutes","differenceInHours","differenceInDays","differenceInWeeks","differenceInMonths","differenceInYears","isToday","isYesterday","format","emojiRegex","capitalize","isEmpty","loadState","channelGroups","removeTemplateHtmlTags","text","content","includes","replace","RegExp","aggregate","lol","reduce","a","item","payload","meta","type","Object","keys","value","Array","isArray","concat","dAttachment","attachments","message_id","pAttachment","forEach","index","data","attachmentData","attachment","id","push","attachment_id","destrutureMessage","params","as","messageMeta","author","notification","notifications","message","uuid","userInfo","inboxUser","customer","is_customer","destructureAssignment","notes","note","assignment","dContactList","columns","contact","column","contact_id","destructureThread","sender","receiver","r","lastMessage","addressBookDetail","contactDetail","assignments","thread","map","flat","userDetail","credential","addressBook","last_message_id","destructureThreads","extractor","fn","threadSorter","b","createdA","toUpperCase","createdB","getChannelComposeRules","channel","rules","twitter","fileType","multiple","video","size","duration","image","messenger","default","Infinity","whatsapp","whatsappWeb","email","formatBytes","bytes","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","formatTime","time","now","Date","formatMessageDateTime","parseTemplate","template","contactTable","name","trim","formatToCurrency","amount","valueDisplay","toLocaleString","style","currency","substr","length","regex","isOnlyEmoji","str","result","getFlagEmoji","key","flagEmojis","AD","AE","AF","AG","AI","AL","AM","AO","AQ","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BV","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GS","GT","GU","GW","GY","HK","HM","HN","HR","HT","HU","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PN","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TC","TD","TF","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","UM","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","XK","YE","YT","ZA","ZM","getDefaultConversationData","scrollTop","currentLocalState","scrollMemory","messages","status","unreadCount","firstUnreadMessgeID","getChannelGroupName","group","find","channels","transformSenderToContact","table","isChannelUsed","platform_name","platform_nick","c","transformedData","acc","hidden","label","unknown","sortColumns","formattedItem","uid","unshift","getUnknownColumnID","unknownColumn","filteredColumns","filter","mergeContact","transformedContact","tableColumn","nameID","mergedContact","itemID","String"],"mappings":"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","sourcesContent":["import {\n  differenceInSeconds,\n  differenceInMinutes,\n  differenceInHours,\n  differenceInDays,\n  differenceInWeeks,\n  differenceInMonths,\n  differenceInYears,\n  isToday,\n  isYesterday,\n  format,\n} from 'date-fns';\nimport emojiRegex from 'emoji-regex';\nimport { capitalize, isEmpty } from 'lodash';\nimport { loadState } from '../../../utils';\nimport { TablePropertiesOptions } from '../tables';\nimport { PropertySchema } from '../tables/components';\nimport { channelGroups } from './inbox.data';\nimport {\n  AssignmentSchema,\n  ContactColumnSchema,\n  CustomerSchema,\n  MessageSchema,\n} from './inbox.types';\n\nexport function removeTemplateHtmlTags(text: string) {\n  let content = text;\n  content = content.includes('<span class=\"contact-column\">')\n    ? content.replace(new RegExp(`<span class=\"contact-column\">`, 'g'), '')\n    : content;\n  content = content.includes('</span>') ? content.replace(new RegExp(`</span>`, 'g'), '') : content;\n\n  return content;\n}\n\nexport function aggregate(lol: any[]) {\n  return lol.reduce((a, item) => {\n    if (isEmpty(item)) {\n      return a;\n    }\n\n    const [payload, meta] = item;\n    const [type] = Object.keys(payload);\n    let value = payload[type];\n\n    if (isEmpty(value)) {\n      return a;\n    }\n\n    if (!a[type]) {\n      a[type] = [];\n    }\n\n    if (meta && !Array.isArray(value)) {\n      value = { ...meta, ...value };\n    }\n\n    a[type] = a[type].concat(value);\n\n    return a;\n  }, {});\n}\n\nexport const dAttachment = (attachments: any, message_id: string) => {\n  const pAttachment: any[] = [];\n\n  (attachments || []).forEach((item: any, index: number) => {\n    const { data: attachmentData, ...attachment } = item || {};\n    const id = attachment.id || `${index}-${message_id}`;\n\n    pAttachment.push([{ attachmentData }, { attachment_id: id }]);\n    pAttachment.push([{ attachment }, { id, message_id }]);\n  });\n\n  return pAttachment;\n};\n\nexport function destrutureMessage(params: any = {}) {\n  const {\n    attachments: as,\n    meta: messageMeta,\n    author,\n    notification,\n    notifications,\n    ...message\n  } = params;\n  const attachments = dAttachment(as, message.uuid);\n  const { userInfo, ...inboxUser } = author || {};\n  const customer = inboxUser.is_customer ? userInfo : null;\n\n  return [\n    ...attachments,\n    [{ messageMeta }, { message_id: message.uuid }],\n    [{ notification }],\n    [{ notification: notifications || [] }],\n    [{ message }],\n    [{ inboxUser }],\n    [{ customer }],\n  ];\n}\n\nexport function destructureAssignment(params: any) {\n  const { notes: note, ...assignment } = params;\n\n  return [[{ note }], [{ assignment }]];\n}\n\nexport function dContactList(params: any = {}) {\n  const { columns, ...contact } = params;\n\n  return [[{ column: columns }, { contact_id: contact.id }], [{ contact }]];\n}\n\nexport function destructureThread(params: any) {\n  const {\n    sender,\n    receiver: r,\n    lastMessage,\n    addressBookDetail,\n    contactDetail,\n    assignments,\n    ...thread\n  } = params;\n\n  const assignment = assignments?.map((item: any) => destructureAssignment(item))?.flat() || [];\n  const message = destrutureMessage(lastMessage);\n  const { userDetail, ...receiver } = r || {};\n  const { columns, ...contact } = contactDetail || {};\n\n  return [\n    ...assignment,\n    ...message,\n    [{ customer: sender }],\n    [{ customer: userDetail }],\n    [{ credential: receiver }],\n    [{ column: columns }, { contact_id: contact.id }],\n    [{ addressBook: addressBookDetail }],\n    [{ contact }],\n    [{ thread }, { last_message_id: lastMessage?.uuid }],\n  ];\n}\n\nexport function destructureThreads(params: any[]) {\n  return params.map(item => destructureThread(item)).flat();\n}\n\nexport function extractor(fn: any, payload: any) {\n  return aggregate(fn(payload));\n}\n\nexport const threadSorter = (a: string = '', b: string) => {\n  const createdA = a.toUpperCase();\n  const createdB = b && b.toUpperCase();\n  if (createdA > createdB) {\n    return -1;\n  }\n  if (createdA < createdB) {\n    return 1;\n  }\n\n  // createdDatetime must be equal\n  return 0;\n};\n\nexport const getChannelComposeRules = (channel?: string) => {\n  if (!channel) {\n    return null;\n  }\n\n  const rules: {\n    [key: string]: {\n      fileType?: string;\n      multiple: boolean;\n      meta: {\n        [key: string]: {\n          size: number;\n          duration?: number;\n        };\n      };\n    };\n  } = {\n    twitter: {\n      fileType: 'image/*, video/*',\n      multiple: false,\n      meta: {\n        video: {\n          size: 536870912,\n          duration: 260,\n        },\n        image: {\n          size: 3072000,\n        },\n      },\n    },\n    messenger: {\n      multiple: false,\n      meta: {\n        default: {\n          size: 26214400,\n          duration: Infinity,\n        },\n      },\n    },\n    whatsapp: {\n      multiple: false,\n      meta: {\n        default: {\n          size: 26214400,\n          duration: Infinity,\n        },\n      },\n    },\n    whatsappWeb: {\n      multiple: false,\n      meta: {\n        default: {\n          size: 26214400,\n          duration: Infinity,\n        },\n      },\n    },\n    email: {\n      multiple: true,\n      meta: {\n        default: {\n          size: 26214400,\n          duration: Infinity,\n        },\n      },\n    },\n  };\n\n  return rules[channel] || rules.twitter;\n};\n\nexport const formatBytes = (bytes: number, decimals = 1) => {\n  if (bytes === 0) return '0 Bytes';\n\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n};\n\nexport const formatTime = (time: Date): any => {\n  const now = new Date();\n  switch (true) {\n    case differenceInSeconds(now, time) < 60:\n      return 'Just Now';\n    case differenceInMinutes(now, time) < 60:\n      return `${differenceInMinutes(now, time)}m`;\n    case differenceInHours(now, time) < 24:\n      return `${differenceInHours(now, time)}h`;\n    case differenceInDays(now, time) < 7:\n      return `${differenceInDays(now, time)}d`;\n    case differenceInWeeks(now, time) < 4:\n      return `${differenceInWeeks(now, time)}w`;\n    case differenceInMonths(now, time) < 12:\n      return `${differenceInMonths(now, time)} mon`;\n    default:\n      return `${differenceInYears(now, time)}y`;\n  }\n};\n\nexport const formatMessageDateTime = (time: Date) => {\n  const now = new Date();\n  switch (true) {\n    case differenceInSeconds(now, time) < 60:\n      return 'a few seconds ago';\n    case isToday(time):\n      return format(time, 'hh:mm a');\n    case isYesterday(time):\n      return `Yesterday, ${format(time, 'hh:mm a')}`;\n    case differenceInDays(now, time) < 7:\n      return format(time, 'eee, hh:mm a ');\n    case differenceInYears(now, time) === 0:\n      return format(time, 'dd MMM hh:mm a');\n    default:\n      return format(time, 'dd MMM yyyy hh:mm a');\n  }\n};\n\nexport const parseTemplate = (\n  template: string,\n  contactTable?: TablePropertiesOptions,\n  contact?: any,\n) => {\n  let content = template;\n  contactTable &&\n    contactTable.columns.forEach(({ name, id }) => {\n      if (id) {\n        content = content.replace(\n          new RegExp(`{{${name}}}`, 'g'),\n          (contact && `<span class=\"contact-column\">${contact[id]}</span>`) || '',\n        );\n      }\n    });\n\n  return content.trim();\n};\n\nexport const formatToCurrency = (amount: number) => {\n  const valueDisplay = (amount / 100).toLocaleString('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  });\n\n  return valueDisplay.substr(1, valueDisplay.length);\n};\n\nconst regex = emojiRegex();\nexport const isOnlyEmoji = (str: string) => {\n  if (!str) {\n    return false;\n  }\n\n  const result = str.replace(new RegExp(regex, 'g'), '').trim();\n\n  return !result.length;\n};\n\nexport const getFlagEmoji = (key: string) => {\n  const flagEmojis: { [v: string]: string } = {\n    AD: '🇦🇩',\n    AE: '🇦🇪',\n    AF: '🇦🇫',\n    AG: '🇦🇬',\n    AI: '🇦🇮',\n    AL: '🇦🇱',\n    AM: '🇦🇲',\n    AO: '🇦🇴',\n    AQ: '🇦🇶',\n    AR: '🇦🇷',\n    AS: '🇦🇸',\n    AT: '🇦🇹',\n    AU: '🇦🇺',\n    AW: '🇦🇼',\n    AX: '🇦🇽',\n    AZ: '🇦🇿',\n    BA: '🇧🇦',\n    BB: '🇧🇧',\n    BD: '🇧🇩',\n    BE: '🇧🇪',\n    BF: '🇧🇫',\n    BG: '🇧🇬',\n    BH: '🇧🇭',\n    BI: '🇧🇮',\n    BJ: '🇧🇯',\n    BL: '🇧🇱',\n    BM: '🇧🇲',\n    BN: '🇧🇳',\n    BO: '🇧🇴',\n    BQ: '🇧🇶',\n    BR: '🇧🇷',\n    BS: '🇧🇸',\n    BT: '🇧🇹',\n    BV: '🇧🇻',\n    BW: '🇧🇼',\n    BY: '🇧🇾',\n    BZ: '🇧🇿',\n    CA: '🇨🇦',\n    CC: '🇨🇨',\n    CD: '🇨🇩',\n    CF: '🇨🇫',\n    CG: '🇨🇬',\n    CH: '🇨🇭',\n    CI: '🇨🇮',\n    CK: '🇨🇰',\n    CL: '🇨🇱',\n    CM: '🇨🇲',\n    CN: '🇨🇳',\n    CO: '🇨🇴',\n    CR: '🇨🇷',\n    CU: '🇨🇺',\n    CV: '🇨🇻',\n    CW: '🇨🇼',\n    CX: '🇨🇽',\n    CY: '🇨🇾',\n    CZ: '🇨🇿',\n    DE: '🇩🇪',\n    DJ: '🇩🇯',\n    DK: '🇩🇰',\n    DM: '🇩🇲',\n    DO: '🇩🇴',\n    DZ: '🇩🇿',\n    EC: '🇪🇨',\n    EE: '🇪🇪',\n    EG: '🇪🇬',\n    EH: '🇪🇭',\n    ER: '🇪🇷',\n    ES: '🇪🇸',\n    ET: '🇪🇹',\n    FI: '🇫🇮',\n    FJ: '🇫🇯',\n    FK: '🇫🇰',\n    FM: '🇫🇲',\n    FO: '🇫🇴',\n    FR: '🇫🇷',\n    GA: '🇬🇦',\n    GB: '🇬🇧',\n    GD: '🇬🇩',\n    GE: '🇬🇪',\n    GF: '🇬🇫',\n    GG: '🇬🇬',\n    GH: '🇬🇭',\n    GI: '🇬🇮',\n    GL: '🇬🇱',\n    GM: '🇬🇲',\n    GN: '🇬🇳',\n    GP: '🇬🇵',\n    GQ: '🇬🇶',\n    GR: '🇬🇷',\n    GS: '🇬🇸',\n    GT: '🇬🇹',\n    GU: '🇬🇺',\n    GW: '🇬🇼',\n    GY: '🇬🇾',\n    HK: '🇭🇰',\n    HM: '🇭🇲',\n    HN: '🇭🇳',\n    HR: '🇭🇷',\n    HT: '🇭🇹',\n    HU: '🇭🇺',\n    ID: '🇮🇩',\n    IE: '🇮🇪',\n    IL: '🇮🇱',\n    IM: '🇮🇲',\n    IN: '🇮🇳',\n    IO: '🇮🇴',\n    IQ: '🇮🇶',\n    IR: '🇮🇷',\n    IS: '🇮🇸',\n    IT: '🇮🇹',\n    JE: '🇯🇪',\n    JM: '🇯🇲',\n    JO: '🇯🇴',\n    JP: '🇯🇵',\n    KE: '🇰🇪',\n    KG: '🇰🇬',\n    KH: '🇰🇭',\n    KI: '🇰🇮',\n    KM: '🇰🇲',\n    KN: '🇰🇳',\n    KP: '🇰🇵',\n    KR: '🇰🇷',\n    KW: '🇰🇼',\n    KY: '🇰🇾',\n    KZ: '🇰🇿',\n    LA: '🇱🇦',\n    LB: '🇱🇧',\n    LC: '🇱🇨',\n    LI: '🇱🇮',\n    LK: '🇱🇰',\n    LR: '🇱🇷',\n    LS: '🇱🇸',\n    LT: '🇱🇹',\n    LU: '🇱🇺',\n    LV: '🇱🇻',\n    LY: '🇱🇾',\n    MA: '🇲🇦',\n    MC: '🇲🇨',\n    MD: '🇲🇩',\n    ME: '🇲🇪',\n    MF: '🇲🇫',\n    MG: '🇲🇬',\n    MH: '🇲🇭',\n    MK: '🇲🇰',\n    ML: '🇲🇱',\n    MM: '🇲🇲',\n    MN: '🇲🇳',\n    MO: '🇲🇴',\n    MP: '🇲🇵',\n    MQ: '🇲🇶',\n    MR: '🇲🇷',\n    MS: '🇲🇸',\n    MT: '🇲🇹',\n    MU: '🇲🇺',\n    MV: '🇲🇻',\n    MW: '🇲🇼',\n    MX: '🇲🇽',\n    MY: '🇲🇾',\n    MZ: '🇲🇿',\n    NA: '🇳🇦',\n    NC: '🇳🇨',\n    NE: '🇳🇪',\n    NF: '🇳🇫',\n    NG: '🇳🇬',\n    NI: '🇳🇮',\n    NL: '🇳🇱',\n    NO: '🇳🇴',\n    NP: '🇳🇵',\n    NR: '🇳🇷',\n    NU: '🇳🇺',\n    NZ: '🇳🇿',\n    OM: '🇴🇲',\n    PA: '🇵🇦',\n    PE: '🇵🇪',\n    PF: '🇵🇫',\n    PG: '🇵🇬',\n    PH: '🇵🇭',\n    PK: '🇵🇰',\n    PL: '🇵🇱',\n    PM: '🇵🇲',\n    PN: '🇵🇳',\n    PR: '🇵🇷',\n    PS: '🇵🇸',\n    PT: '🇵🇹',\n    PW: '🇵🇼',\n    PY: '🇵🇾',\n    QA: '🇶🇦',\n    RE: '🇷🇪',\n    RO: '🇷🇴',\n    RS: '🇷🇸',\n    RU: '🇷🇺',\n    RW: '🇷🇼',\n    SA: '🇸🇦',\n    SB: '🇸🇧',\n    SC: '🇸🇨',\n    SD: '🇸🇩',\n    SE: '🇸🇪',\n    SG: '🇸🇬',\n    SH: '🇸🇭',\n    SI: '🇸🇮',\n    SJ: '🇸🇯',\n    SK: '🇸🇰',\n    SL: '🇸🇱',\n    SM: '🇸🇲',\n    SN: '🇸🇳',\n    SO: '🇸🇴',\n    SR: '🇸🇷',\n    SS: '🇸🇸',\n    ST: '🇸🇹',\n    SV: '🇸🇻',\n    SX: '🇸🇽',\n    SY: '🇸🇾',\n    SZ: '🇸🇿',\n    TC: '🇹🇨',\n    TD: '🇹🇩',\n    TF: '🇹🇫',\n    TG: '🇹🇬',\n    TH: '🇹🇭',\n    TJ: '🇹🇯',\n    TK: '🇹🇰',\n    TL: '🇹🇱',\n    TM: '🇹🇲',\n    TN: '🇹🇳',\n    TO: '🇹🇴',\n    TR: '🇹🇷',\n    TT: '🇹🇹',\n    TV: '🇹🇻',\n    TW: '🇹🇼',\n    TZ: '🇹🇿',\n    UA: '🇺🇦',\n    UG: '🇺🇬',\n    UM: '🇺🇲',\n    US: '🇺🇸',\n    UY: '🇺🇾',\n    UZ: '🇺🇿',\n    VA: '🇻🇦',\n    VC: '🇻🇨',\n    VE: '🇻🇪',\n    VG: '🇻🇬',\n    VI: '🇻🇮',\n    VN: '🇻🇳',\n    VU: '🇻🇺',\n    WF: '🇼🇫',\n    WS: '🇼🇸',\n    XK: '🇽🇰',\n    YE: '🇾🇪',\n    YT: '🇾🇹',\n    ZA: '🇿🇦',\n    ZM: '🇿🇲',\n  };\n\n  return flagEmojis[key?.toUpperCase()] || '🏳️';\n};\n\nexport function getDefaultConversationData(\n  id?: string,\n): {\n  assignments: AssignmentSchema[];\n  messages: {\n    scrollTop: number;\n    data: MessageSchema[];\n    status: string;\n    unreadCount: number;\n    firstUnreadMessgeID: string | null;\n  };\n} {\n  let scrollTop = 0;\n  if (id) {\n    const currentLocalState = loadState();\n    scrollTop = (currentLocalState?.scrollMemory && currentLocalState.scrollMemory[id]) || 0;\n  }\n\n  return {\n    assignments: [],\n    messages: {\n      scrollTop,\n      data: [],\n      status: 'none',\n      unreadCount: 0,\n      firstUnreadMessgeID: null,\n    },\n  };\n}\n\nexport function getChannelGroupName(channel: string) {\n  const group = channelGroups.find(({ channels }) => channels.includes(channel));\n\n  return (group && group.name) || channel;\n}\n\nexport function transformSenderToContact(table: TablePropertiesOptions, sender: CustomerSchema) {\n  const columns = [...table.columns];\n  let isChannelUsed = false;\n  const { platform_name, platform_nick, email, channel: c } = sender;\n  const channel = getChannelGroupName(c);\n\n  const transformedData: any = columns.reduce((acc, { id, name }) => {\n    let item = '';\n\n    if (name === 'name') {\n      item = platform_name || '';\n    } else if (name === 'email') {\n      item = email || '';\n    } else if (name === channel) {\n      item = platform_nick || platform_name || '';\n      isChannelUsed = true;\n    }\n\n    return { ...acc, [id || '']: item };\n  }, {});\n\n  if (!isChannelUsed) {\n    columns.push({\n      hidden: false,\n      id: 'unknown',\n      label: capitalize(channel),\n      name: channel,\n      type: 'TEXT',\n    });\n    transformedData.unknown = platform_nick || platform_name || '';\n  }\n\n  return [columns, transformedData];\n}\n\nexport function sortColumns(\n  columns: PropertySchema[],\n  contact: Omit<ContactColumnSchema, 'contact_id'>,\n) {\n  const result: (PropertySchema & { uid?: string | number })[] = [];\n  let index = 0;\n  columns.forEach(item => {\n    const formattedItem: PropertySchema & { uid?: string | number } = { uid: item.id, ...item };\n    if (item && contact && contact[item.id || '-1'] && contact[item.id || '-1'] !== '-') {\n      result.unshift(formattedItem);\n      index += 1;\n    } else {\n      result.push(formattedItem);\n    }\n  });\n\n  return [result, index];\n}\n\nexport function getUnknownColumnID(columns: any[], unknownColumn: any) {\n  const filteredColumns = columns.filter(\n    ({ hidden, label, name, type }) =>\n      unknownColumn.hidden === hidden &&\n      unknownColumn.label === label &&\n      unknownColumn.name === name &&\n      unknownColumn.type === type,\n  );\n\n  if (filteredColumns.length === 1) {\n    return filteredColumns[0]?.id;\n  }\n\n  return filteredColumns.reduce((acc, item) => {\n    return acc >= item?.id ? acc : item?.id;\n  }, null);\n}\n\nexport function mergeContact(transformedContact: any, contact: any, tableColumn: any[]) {\n  const nameID = tableColumn.find((item: any) => item.name === 'name')?.id;\n\n  const mergedContact = Object.keys(transformedContact).reduce((acc: any, itemID) => {\n    if (String(itemID) === String(nameID)) {\n      acc[nameID] =\n        (contact && contact[nameID]) || (transformedContact && transformedContact[nameID]) || '';\n    } else {\n      acc[itemID] =\n        (transformedContact && transformedContact[itemID]) || (contact && contact[itemID]) || '';\n    }\n    return acc;\n  }, {});\n\n  return mergedContact;\n}\n"]},"metadata":{},"sourceType":"module"}