{"ast":null,"code":"import { addTeamMember, createTeam, deleteTeam, inviteTeamMembers, listTeams, organisationMembers, organizationList, teamMemberList, updateTeam } from '../settings.service';\nimport { sortTeamsFunc } from '../settings.utils';\nimport { createTeamItem, deleteTeamItem, editTeamItem, getOrganisationMembers, getOrganizations, getTeams, getTeamsMembers, removeTeamInvite, removeTeamMember } from '../settings.reducers';\nimport { client } from '../../../../utils';\nexport const fetchTeams = organisation_id => async dispatch => {\n  const response = await listTeams(organisation_id);\n  const {\n    teams\n  } = response.data;\n  /**\n   * sort teams based on created datetime\n   * this sort should come from API actually\n   */\n\n  const sortedTeams = teams.sort(sortTeamsFunc);\n  dispatch(getTeams({\n    teams: sortedTeams\n  }));\n  return response.data;\n};\nexport const addTeam = payload => async dispatch => {\n  const response = await createTeam(payload);\n  const {\n    team\n  } = response.data;\n  dispatch(createTeamItem({\n    team\n  }));\n  return response.data;\n};\nexport const editTeam = payload => async dispatch => {\n  const response = await updateTeam(payload);\n  const {\n    team\n  } = response.data;\n  dispatch(editTeamItem({\n    team\n  }));\n  return response.data;\n};\nexport const removeTeam = payload => async dispatch => {\n  const response = await deleteTeam(payload);\n  dispatch(deleteTeamItem({\n    id: payload\n  }));\n  return response;\n};\nexport const fetchTeamMembers = id => async dispatch => {\n  const response = await teamMemberList(id);\n  const {\n    team\n  } = response.data;\n  dispatch(getTeamsMembers({\n    team\n  }));\n  return response.data;\n};\nexport const onInviteTeamMembers = payload => async () => {\n  const response = await inviteTeamMembers(payload);\n  return response.data;\n};\nexport const fetchOrganisationMembers = id => async dispatch => {\n  const response = await organisationMembers(id);\n  const {\n    members\n  } = response.data;\n  dispatch(getOrganisationMembers({\n    organisationMembers: members\n  }));\n  return response.data;\n};\nexport const fetchOrganizations = () => async dispatch => {\n  const response = await organizationList();\n  const {\n    organisations: organizations\n  } = response.data;\n  dispatch(getOrganizations({\n    organizations\n  }));\n  return response.data;\n};\nexport const createTeamMember = payload => async (dispatch, getState) => {\n  const {\n    auth: {\n      profile\n    }\n  } = getState();\n  const client_calls = payload.user_ids.map(i => addTeamMember({\n    team_id: payload.team_id,\n    user_id: i\n  }));\n\n  try {\n    const response = await Promise.all(client_calls);\n    profile && dispatch(fetchTeams(profile.organisation_id));\n    return response;\n  } catch (e) {\n    return null;\n  }\n};\nexport const deleteMemberInvite = payload => async dispatch => {\n  await client(`teams/${payload.team_id}/invite`, {\n    method: 'DELETE',\n    data: {\n      id: payload.inviteID\n    }\n  });\n  dispatch(removeTeamInvite({\n    inviteID: payload.inviteID\n  }));\n};\nexport const deleteTeamMember = payload => async (dispatch, getState) => {\n  const {\n    auth: {\n      profile\n    }\n  } = getState();\n  await client(`teams/${payload.team_id}/members`, {\n    method: 'DELETE',\n    data: {\n      id: payload.memberID\n    }\n  });\n  profile && dispatch(fetchTeams(profile.organisation_id));\n  dispatch(removeTeamMember({\n    memberID: payload.memberID\n  }));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/settings/thunks/teams.ts"],"names":["addTeamMember","createTeam","deleteTeam","inviteTeamMembers","listTeams","organisationMembers","organizationList","teamMemberList","updateTeam","sortTeamsFunc","createTeamItem","deleteTeamItem","editTeamItem","getOrganisationMembers","getOrganizations","getTeams","getTeamsMembers","removeTeamInvite","removeTeamMember","client","fetchTeams","organisation_id","dispatch","response","teams","data","sortedTeams","sort","addTeam","payload","team","editTeam","removeTeam","id","fetchTeamMembers","onInviteTeamMembers","fetchOrganisationMembers","members","fetchOrganizations","organisations","organizations","createTeamMember","getState","auth","profile","client_calls","user_ids","map","i","team_id","user_id","Promise","all","e","deleteMemberInvite","method","inviteID","deleteTeamMember","memberID"],"mappings":"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","sourcesContent":["import { UserProfile } from '../../../unauthenticated-app/authentication/service';\nimport { AppThunk } from '../../../../root';\nimport {\n  addTeamMember,\n  createTeam,\n  deleteTeam,\n  inviteTeamMembers,\n  listTeams,\n  organisationMembers,\n  organizationList,\n  teamMemberList,\n  updateTeam,\n} from '../settings.service';\nimport { sortTeamsFunc } from '../settings.utils';\nimport {\n  createTeamItem,\n  deleteTeamItem,\n  editTeamItem,\n  getOrganisationMembers,\n  getOrganizations,\n  getTeams,\n  getTeamsMembers,\n  removeTeamInvite,\n  removeTeamMember,\n} from '../settings.reducers';\nimport { Team, TeamInvite, TeamMember } from '../settings.types';\nimport { client } from '../../../../utils';\n\nexport const fetchTeams = (\n  organisation_id: UserProfile['organisation_id'],\n): AppThunk => async dispatch => {\n  const response = await listTeams(organisation_id);\n  const { teams } = response.data;\n  /**\n   * sort teams based on created datetime\n   * this sort should come from API actually\n   */\n  const sortedTeams = teams.sort(sortTeamsFunc);\n  dispatch(getTeams({ teams: sortedTeams }));\n  return response.data;\n};\n\nexport const addTeam = (\n  payload: Pick<Team, 'name' | 'color'> & {\n    organisation_id?: UserProfile['organisation_id'];\n  },\n): AppThunk => async dispatch => {\n  const response = await createTeam(payload);\n  const { team } = response.data;\n  dispatch(createTeamItem({ team }));\n  return response.data;\n};\n\nexport const editTeam = (payload: Team): AppThunk => async dispatch => {\n  const response = await updateTeam(payload);\n  const { team } = response.data;\n  dispatch(editTeamItem({ team }));\n  return response.data;\n};\n\nexport const removeTeam = (payload: Team['id']): AppThunk => async dispatch => {\n  const response = await deleteTeam(payload);\n  dispatch(deleteTeamItem({ id: payload }));\n  return response;\n};\n\nexport const fetchTeamMembers = (id: Team['id']): AppThunk => async dispatch => {\n  const response = await teamMemberList(id);\n  const { team } = response.data;\n  dispatch(getTeamsMembers({ team }));\n  return response.data;\n};\n\nexport const onInviteTeamMembers = (payload: {\n  link: string;\n  email: string;\n  team_id: Team['id'];\n}): AppThunk => async () => {\n  const response = await inviteTeamMembers(payload);\n  return response.data;\n};\n\nexport const fetchOrganisationMembers = (\n  id: UserProfile['organisation_id'],\n): AppThunk => async dispatch => {\n  const response = await organisationMembers(id);\n  const { members } = response.data;\n  dispatch(getOrganisationMembers({ organisationMembers: members }));\n  return response.data;\n};\n\nexport const fetchOrganizations = (): AppThunk => async dispatch => {\n  const response = await organizationList();\n  const { organisations: organizations } = response.data;\n  dispatch(getOrganizations({ organizations }));\n  return response.data;\n};\n\nexport const createTeamMember = (payload: {\n  team_id: Team['id'];\n  user_ids: string[];\n}): AppThunk => async (dispatch, getState) => {\n  const {\n    auth: { profile },\n  } = getState();\n\n  const client_calls = payload.user_ids.map((i: string) =>\n    addTeamMember({\n      team_id: payload.team_id,\n      user_id: i,\n    }),\n  );\n  try {\n    const response = await Promise.all(client_calls);\n    profile && dispatch(fetchTeams(profile.organisation_id));\n    return response;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const deleteMemberInvite = (payload: {\n  inviteID: TeamInvite['id'];\n  team_id: Team['id'];\n}): AppThunk => async dispatch => {\n  await client(`teams/${payload.team_id}/invite`, {\n    method: 'DELETE',\n    data: {\n      id: payload.inviteID,\n    },\n  });\n  dispatch(removeTeamInvite({ inviteID: payload.inviteID }));\n};\n\nexport const deleteTeamMember = (payload: {\n  memberID: TeamMember['id'];\n  team_id: Team['id'];\n}): AppThunk => async (dispatch, getState) => {\n  const {\n    auth: { profile },\n  } = getState();\n\n  await client(`teams/${payload.team_id}/members`, {\n    method: 'DELETE',\n    data: {\n      id: payload.memberID,\n    },\n  });\n  profile && dispatch(fetchTeams(profile.organisation_id));\n  dispatch(removeTeamMember({ memberID: payload.memberID }));\n};\n"]},"metadata":{},"sourceType":"module"}