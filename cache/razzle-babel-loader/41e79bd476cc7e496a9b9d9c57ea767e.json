{"ast":null,"code":"import * as React from 'react';\nexport function useControllableProp(propValue, stateValue) {\n  const {\n    current: isControlled\n  } = React.useRef(propValue !== undefined);\n  const value = isControlled ? propValue : stateValue;\n  return [isControlled, value];\n}\nexport default useControllableProp;","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/hooks/use-controllable-props.ts"],"names":["React","useControllableProp","propValue","stateValue","current","isControlled","useRef","undefined","value"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAO,SAASC,mBAAT,CACLC,SADK,EAELC,UAFK,EAGL;AACA,QAAM;AAAEC,IAAAA,OAAO,EAAEC;AAAX,MAA4BL,KAAK,CAACM,MAAN,CAAaJ,SAAS,KAAKK,SAA3B,CAAlC;AACA,QAAMC,KAAK,GAAGH,YAAY,GAAGH,SAAH,GAAeC,UAAzC;AACA,SAAO,CAACE,YAAD,EAAeG,KAAf,CAAP;AACD;AAED,eAAeP,mBAAf","sourcesContent":["import * as React from 'react'\n\nexport function useControllableProp<T> (\n  propValue: T | undefined,\n  stateValue: T\n) {\n  const { current: isControlled } = React.useRef(propValue !== undefined)\n  const value = isControlled ? propValue : stateValue\n  return [isControlled, value] as [boolean, T]\n}\n\nexport default useControllableProp\n"]},"metadata":{},"sourceType":"module"}