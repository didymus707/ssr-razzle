{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/settings/Connections.tsx\";\nvar __jsx = React.createElement;\nimport { Box, Skeleton, Stack, useDisclosure, useToast } from '@chakra-ui/core';\nimport { ConfirmModal, ToastBox } from 'app/components';\nimport React, { useState } from 'react';\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\nimport { deleteInboxConnection, getInboxConnections } from '../inbox.service';\nimport { ConnectionModal, InboxSettingsPage, InboxSettingsPageItem } from './component';\nexport const InboxSettingsConnections = () => {\n  const toast = useToast();\n  const queryClient = useQueryClient();\n  const {\n    isOpen: isConnectionModalOpen,\n    onOpen: onOpenConnectionModal,\n    onClose: onCloseConnectionModal\n  } = useDisclosure();\n  const {\n    isLoading,\n    data: connections\n  } = useQuery('inbox-connections', getInboxConnections);\n  const {\n    0: connectionToDelete,\n    1: setConnectionToDelete\n  } = useState();\n  const {\n    isLoading: isDeleting,\n    mutate\n  } = useMutation(payload => deleteInboxConnection(payload.id), {\n    onMutate: async payload => {\n      await queryClient.cancelQueries('inbox-connections');\n      const previousConnections = queryClient.getQueryData('inbox-connections');\n      queryClient.setQueryData('inbox-connections', old => //@ts-ignore\n      old === null || old === void 0 ? void 0 : old.filter(item => item.id !== payload.id));\n      return {\n        previousConnections\n      };\n    },\n    onSuccess: () => {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          status: \"success\",\n          onClose: onClose,\n          message: \"Connection deleted successfully\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }\n        })\n      });\n      setConnectionToDelete(undefined);\n    },\n    onError: (error, newData, context) => {\n      queryClient.setQueryData('inbox-connections', context.previousConnections);\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 36\n          }\n        })\n      });\n    }\n  });\n\n  const handleDeleteConnection = () => {\n    if (connectionToDelete) {\n      mutate(connectionToDelete);\n    }\n  };\n\n  return __jsx(InboxSettingsPage, {\n    maxW: \"600px\",\n    title: \"Connections\",\n    helperAlert: {\n      title: 'Connections',\n      caption: 'Connections in Simpu Inbox help you integrate your lists and segments into your Inbox. Simpu data - Inbox connections makes available quick information you need '\n    },\n    createAction: (connections === null || connections === void 0 ? void 0 : connections.length) !== 2 ? {\n      label: 'Create a connection',\n      onClick: onOpenConnectionModal\n    } : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, isLoading ? __jsx(Stack, {\n    spacing: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, Array.from({\n    length: 5\n  }, (v, i) => __jsx(Stack, {\n    isInline: true,\n    py: \"0.5rem\",\n    px: \"0.75rem\",\n    borderBottomWidth: \"1px\",\n    key: `${i.toString()}-${new Date().getTime()}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, __jsx(Skeleton, {\n    height: \"50px\",\n    width: \"50px\",\n    rounded: \"50%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }), __jsx(Stack, {\n    flex: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, __jsx(Skeleton, {\n    height: \"8px\",\n    width: \"50%\",\n    my: \"8px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }), __jsx(Skeleton, {\n    height: \"8px\",\n    my: \"8px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }))))) : __jsx(Stack, {\n    spacing: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, connections === null || connections === void 0 ? void 0 : connections.map(connection => {\n    var _ref, _connection$table_nam;\n\n    return __jsx(Box, {\n      key: connection.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }, __jsx(InboxSettingsPageItem, {\n      iconProps: {\n        name: 'inbox-tag'\n      },\n      onDelete: () => setConnectionToDelete(connection),\n      heading: (_ref = (_connection$table_nam = connection.table_name) !== null && _connection$table_nam !== void 0 ? _connection$table_nam : connection.data_model_name) !== null && _ref !== void 0 ? _ref : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 15\n      }\n    }));\n  })), __jsx(ConfirmModal, {\n    isLoading: isDeleting,\n    title: \"Delete Connection\",\n    isOpen: !!connectionToDelete,\n    onConfirm: handleDeleteConnection,\n    onClose: () => setConnectionToDelete(undefined),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }), __jsx(ConnectionModal, {\n    connections: connections,\n    isOpen: isConnectionModalOpen,\n    onClose: onCloseConnectionModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/settings/Connections.tsx"],"names":["Box","Skeleton","Stack","useDisclosure","useToast","ConfirmModal","ToastBox","React","useState","useMutation","useQuery","useQueryClient","deleteInboxConnection","getInboxConnections","ConnectionModal","InboxSettingsPage","InboxSettingsPageItem","InboxSettingsConnections","toast","queryClient","isOpen","isConnectionModalOpen","onOpen","onOpenConnectionModal","onClose","onCloseConnectionModal","isLoading","data","connections","connectionToDelete","setConnectionToDelete","isDeleting","mutate","payload","id","onMutate","cancelQueries","previousConnections","getQueryData","setQueryData","old","filter","item","onSuccess","position","render","undefined","onError","error","newData","context","message","handleDeleteConnection","title","caption","length","label","onClick","Array","from","v","i","toString","Date","getTime","map","connection","name","table_name","data_model_name"],"mappings":"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","sourcesContent":["import { Box, Skeleton, Stack, useDisclosure, useToast } from '@chakra-ui/core';\nimport { ConfirmModal, ToastBox } from 'app/components';\nimport { AxiosError } from 'axios';\nimport React, { useState } from 'react';\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\nimport { deleteInboxConnection, getInboxConnections } from '../inbox.service';\nimport { InboxConnection } from '../inbox.types';\nimport { ConnectionModal, InboxSettingsPage, InboxSettingsPageItem } from './component';\n\nexport const InboxSettingsConnections = () => {\n  const toast = useToast();\n  const queryClient = useQueryClient();\n  const {\n    isOpen: isConnectionModalOpen,\n    onOpen: onOpenConnectionModal,\n    onClose: onCloseConnectionModal,\n  } = useDisclosure();\n\n  const { isLoading, data: connections } = useQuery('inbox-connections', getInboxConnections);\n\n  const [connectionToDelete, setConnectionToDelete] = useState<InboxConnection | undefined>();\n\n  const { isLoading: isDeleting, mutate } = useMutation<any, AxiosError, any, any>(\n    (payload: InboxConnection) => deleteInboxConnection(payload.id),\n    {\n      onMutate: async payload => {\n        await queryClient.cancelQueries('inbox-connections');\n        const previousConnections = queryClient.getQueryData('inbox-connections');\n        queryClient.setQueryData('inbox-connections', old =>\n          //@ts-ignore\n          old?.filter(item => item.id !== payload.id),\n        );\n        return { previousConnections };\n      },\n      onSuccess: () => {\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => (\n            <ToastBox\n              status=\"success\"\n              onClose={onClose}\n              message=\"Connection deleted successfully\"\n            />\n          ),\n        });\n        setConnectionToDelete(undefined);\n      },\n      onError: (error, newData, context) => {\n        queryClient.setQueryData('inbox-connections', context.previousConnections);\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => <ToastBox onClose={onClose} message={error.message} />,\n        });\n      },\n    },\n  );\n\n  const handleDeleteConnection = () => {\n    if (connectionToDelete) {\n      mutate(connectionToDelete);\n    }\n  };\n\n  return (\n    <InboxSettingsPage\n      maxW=\"600px\"\n      title=\"Connections\"\n      helperAlert={{\n        title: 'Connections',\n        caption:\n          'Connections in Simpu Inbox help you integrate your lists and segments into your Inbox. Simpu data - Inbox connections makes available quick information you need ',\n      }}\n      createAction={\n        connections?.length !== 2\n          ? {\n              label: 'Create a connection',\n              onClick: onOpenConnectionModal,\n            }\n          : undefined\n      }\n    >\n      {isLoading ? (\n        <Stack spacing=\"0\">\n          {Array.from({ length: 5 }, (v, i) => (\n            <Stack\n              isInline\n              py=\"0.5rem\"\n              px=\"0.75rem\"\n              borderBottomWidth=\"1px\"\n              key={`${i.toString()}-${new Date().getTime()}`}\n            >\n              <Skeleton height=\"50px\" width=\"50px\" rounded=\"50%\" />\n              <Stack flex={1}>\n                <Skeleton height=\"8px\" width=\"50%\" my=\"8px\" />\n                <Skeleton height=\"8px\" my=\"8px\" />\n              </Stack>\n            </Stack>\n          ))}\n        </Stack>\n      ) : (\n        <Stack spacing=\"0\">\n          {connections?.map((connection: InboxConnection) => (\n            <Box key={connection.id}>\n              <InboxSettingsPageItem\n                iconProps={{ name: 'inbox-tag' }}\n                onDelete={() => setConnectionToDelete(connection)}\n                heading={connection.table_name ?? connection.data_model_name ?? ''}\n              />\n            </Box>\n          ))}\n        </Stack>\n      )}\n      <ConfirmModal\n        isLoading={isDeleting}\n        title=\"Delete Connection\"\n        isOpen={!!connectionToDelete}\n        onConfirm={handleDeleteConnection}\n        onClose={() => setConnectionToDelete(undefined)}\n      />\n      <ConnectionModal\n        connections={connections}\n        isOpen={isConnectionModalOpen}\n        onClose={onCloseConnectionModal}\n      />\n    </InboxSettingsPage>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}