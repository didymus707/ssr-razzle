{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/lists/component/lists/components/lists/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Component } from './component';\nimport { connect } from 'react-redux';\nimport { deleteList, deleteListPermanently, deleteSmartList, deleteTrashPermanently, fetchAppEndpoints, fetchAppEndpointSchema, fetchGSheetMetadata, fetchGSheetSpreadSheets, fetchResourceSchema, markListFavorite, queueAppImport, queueResourceImport, restoreList, unMarkListFavorite, updateList, updateSmartList } from '../../../../lists.reducer';\nimport { openNoSubscriptionModal, openCreateTableModal } from '../../../../../globals';\nimport { sortListByTime } from '../../../../lists.utils';\n\nconst mapStateToProps = state => _objectSpread({}, state.lists);\n\nconst stateConnector = connect(mapStateToProps, {\n  updateList,\n  deleteList,\n  restoreList,\n  deleteSmartList,\n  updateSmartList,\n  markListFavorite,\n  unMarkListFavorite,\n  deleteListPermanently,\n  openNoSubscriptionModal,\n  openCreateTableModal,\n  deleteTrashPermanently,\n  fetchGSheetSpreadSheets,\n  fetchGSheetMetadata,\n  queueResourceImport,\n  queueAppImport,\n  fetchResourceSchema,\n  fetchAppEndpoints,\n  fetchAppEndpointSchema\n});\n\nconst Container = props => {\n  const {\n    visualization,\n    searchValue,\n    selectedTab,\n    initial_list,\n    selectTab\n  } = props;\n  const {\n    updateList,\n    deleteList,\n    restoreList,\n    deleteSmartList,\n    updateSmartList,\n    markListFavorite,\n    unMarkListFavorite,\n    deleteListPermanently,\n    openNoSubscriptionModal,\n    deleteTrashPermanently,\n    openCreateTableModal,\n    addList,\n    addListFromTemplate,\n    handleImport,\n    handleImportMapping,\n    handleImportNewTable,\n    importedData,\n    fetchGSheetSpreadSheets,\n    fetchGSheetMetadata,\n    queueResourceImport,\n    queueAppImport,\n    fetchResourceSchema,\n    fetchAppEndpoints,\n    fetchAppEndpointSchema\n  } = props;\n  let lists = props.lists_by_id.map(list_id => props.lists[list_id]);\n  lists = lists.filter(list => list.name.toLowerCase().includes(searchValue.toLowerCase()));\n  lists = lists.sort(sortListByTime);\n  let smart_lists = props.smart_lists_by_id.map(smart_list_id => props.smart_lists[smart_list_id]);\n  smart_lists = smart_lists.filter(smart_list => {\n    var _smart_list$name;\n\n    return smart_list === null || smart_list === void 0 ? void 0 : (_smart_list$name = smart_list.name) === null || _smart_list$name === void 0 ? void 0 : _smart_list$name.toLowerCase().includes(searchValue.toLowerCase());\n  });\n  smart_lists = smart_lists.sort(sortListByTime);\n  let favorite_lists = props.favorites.map(list_id => props.lists[list_id]);\n  favorite_lists = favorite_lists.filter(list => list.name.toLowerCase().includes(searchValue.toLowerCase()));\n  favorite_lists = favorite_lists.sort(sortListByTime);\n  let trash_lists = props.trash_by_id.map(list_id => props.trash[list_id]);\n  trash_lists = trash_lists.filter(list => list.name.toLowerCase().includes(searchValue.toLowerCase()));\n  trash_lists = trash_lists.sort(sortListByTime);\n  return __jsx(Component, {\n    initial_list,\n    visualization,\n    selectedTab,\n    selectTab,\n    trash_lists,\n    favorite_lists,\n    favorites: props.favorites,\n    smart_lists,\n    lists,\n    searchValue,\n    updateList,\n    deleteList,\n    restoreList,\n    deleteSmartList,\n    updateSmartList,\n    markListFavorite,\n    unMarkListFavorite,\n    deleteListPermanently,\n    openNoSubscriptionModal,\n    deleteTrashPermanently,\n    openCreateTableModal,\n    addList,\n    addListFromTemplate,\n    handleImport,\n    handleImportMapping,\n    handleImportNewTable,\n    importedData,\n    fetchGSheetSpreadSheets,\n    fetchGSheetMetadata,\n    queueResourceImport,\n    queueAppImport,\n    fetchResourceSchema,\n    fetchAppEndpoints,\n    fetchAppEndpointSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  });\n};\n\nexport const Lists = stateConnector(Container);","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/lists/component/lists/components/lists/index.tsx"],"names":["React","Component","connect","deleteList","deleteListPermanently","deleteSmartList","deleteTrashPermanently","fetchAppEndpoints","fetchAppEndpointSchema","fetchGSheetMetadata","fetchGSheetSpreadSheets","fetchResourceSchema","markListFavorite","queueAppImport","queueResourceImport","restoreList","unMarkListFavorite","updateList","updateSmartList","openNoSubscriptionModal","openCreateTableModal","sortListByTime","mapStateToProps","state","lists","stateConnector","Container","props","visualization","searchValue","selectedTab","initial_list","selectTab","addList","addListFromTemplate","handleImport","handleImportMapping","handleImportNewTable","importedData","lists_by_id","map","list_id","filter","list","name","toLowerCase","includes","sort","smart_lists","smart_lists_by_id","smart_list_id","smart_list","favorite_lists","favorites","trash_lists","trash_by_id","trash","Lists"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { RootState } from '../../../../../../../root';\nimport { Component } from './component';\nimport { connect } from 'react-redux';\nimport {\n  deleteList,\n  deleteListPermanently,\n  deleteSmartList,\n  deleteTrashPermanently,\n  fetchAppEndpoints,\n  fetchAppEndpointSchema,\n  fetchGSheetMetadata,\n  fetchGSheetSpreadSheets,\n  fetchResourceSchema,\n  markListFavorite,\n  queueAppImport,\n  queueResourceImport,\n  restoreList,\n  unMarkListFavorite,\n  updateList,\n  updateSmartList,\n} from '../../../../lists.reducer';\nimport { openNoSubscriptionModal, openCreateTableModal } from '../../../../../globals';\n\nimport { List, SmartList } from '../../../../lists.types';\nimport { sortListByTime } from '../../../../lists.utils';\n\nconst mapStateToProps = (state: RootState) => ({\n  ...state.lists,\n});\n\nconst stateConnector = connect(mapStateToProps, {\n  updateList,\n  deleteList,\n  restoreList,\n  deleteSmartList,\n  updateSmartList,\n  markListFavorite,\n  unMarkListFavorite,\n  deleteListPermanently,\n  openNoSubscriptionModal,\n  openCreateTableModal,\n  deleteTrashPermanently,\n  fetchGSheetSpreadSheets,\n  fetchGSheetMetadata,\n  queueResourceImport,\n  queueAppImport,\n  fetchResourceSchema,\n  fetchAppEndpoints,\n  fetchAppEndpointSchema,\n});\n\nconst Container = (props: any) => {\n  const { visualization, searchValue, selectedTab, initial_list, selectTab } = props;\n\n  const {\n    updateList,\n    deleteList,\n    restoreList,\n    deleteSmartList,\n    updateSmartList,\n    markListFavorite,\n    unMarkListFavorite,\n    deleteListPermanently,\n    openNoSubscriptionModal,\n    deleteTrashPermanently,\n    openCreateTableModal,\n    addList,\n    addListFromTemplate,\n    handleImport,\n    handleImportMapping,\n    handleImportNewTable,\n    importedData,\n    fetchGSheetSpreadSheets,\n    fetchGSheetMetadata,\n    queueResourceImport,\n    queueAppImport,\n    fetchResourceSchema,\n    fetchAppEndpoints,\n    fetchAppEndpointSchema,\n  } = props;\n\n  let lists = props.lists_by_id.map((list_id: string) => props.lists[list_id]);\n  lists = lists.filter((list: List) => list.name.toLowerCase().includes(searchValue.toLowerCase()));\n\n  lists = lists.sort(sortListByTime);\n\n  let smart_lists = props.smart_lists_by_id.map(\n    (smart_list_id: string) => props.smart_lists[smart_list_id],\n  );\n\n  smart_lists = smart_lists.filter((smart_list: SmartList) =>\n    smart_list?.name?.toLowerCase().includes(searchValue.toLowerCase()),\n  );\n\n  smart_lists = smart_lists.sort(sortListByTime);\n\n  let favorite_lists = props.favorites.map((list_id: string) => props.lists[list_id]);\n\n  favorite_lists = favorite_lists.filter((list: List) =>\n    list.name.toLowerCase().includes(searchValue.toLowerCase()),\n  );\n\n  favorite_lists = favorite_lists.sort(sortListByTime);\n\n  let trash_lists = props.trash_by_id.map((list_id: string) => props.trash[list_id]);\n\n  trash_lists = trash_lists.filter((list: List) =>\n    list.name.toLowerCase().includes(searchValue.toLowerCase()),\n  );\n\n  trash_lists = trash_lists.sort(sortListByTime);\n\n  return (\n    <Component\n      {...{\n        initial_list,\n        visualization,\n        selectedTab,\n        selectTab,\n        trash_lists,\n        favorite_lists,\n        favorites: props.favorites,\n        smart_lists,\n        lists,\n        searchValue,\n        updateList,\n        deleteList,\n        restoreList,\n        deleteSmartList,\n        updateSmartList,\n        markListFavorite,\n        unMarkListFavorite,\n        deleteListPermanently,\n        openNoSubscriptionModal,\n        deleteTrashPermanently,\n        openCreateTableModal,\n        addList,\n        addListFromTemplate,\n        handleImport,\n        handleImportMapping,\n        handleImportNewTable,\n        importedData,\n        fetchGSheetSpreadSheets,\n        fetchGSheetMetadata,\n        queueResourceImport,\n        queueAppImport,\n        fetchResourceSchema,\n        fetchAppEndpoints,\n        fetchAppEndpointSchema,\n      }}\n    />\n  );\n};\n\nexport const Lists = stateConnector(Container);\n"]},"metadata":{},"sourceType":"module"}