{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/lists/component/lists/components/data-models/create-data-model/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Box, IconButton } from '@chakra-ui/core';\nimport { useHistory } from 'react-router';\nimport { SelectResource, MapSchema, SchemaSummary } from './stages';\nexport const CreateDataModel = props => {\n  const {\n    0: stage,\n    1: setStage\n  } = useState('select-resource');\n  const {\n    0: schema,\n    1: setSchema\n  } = useState([]);\n  const {\n    0: selectedResource,\n    1: setSelectedResource\n  } = useState(null);\n  const {\n    0: addedColumns,\n    1: setAddedColumns\n  } = useState({});\n  const routerHistory = useHistory();\n\n  const handleFetchResourceSchema = async () => {\n    setSchema(await props.fetchResourceSchema(selectedResource));\n    setStage('map-schema');\n  };\n\n  const goBack = () => {\n    if (stage === 'select-resource') routerHistory.push('/s/lists/data-models');\n    if (stage === 'map-schema') setStage('select-resource');\n    if (stage === 'schema-summary') setStage('map-schema');else setStage('select-resource');\n  };\n\n  return __jsx(Box, {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, stage !== 'success-prompt' && __jsx(IconButton, {\n    icon: \"arrow-back\",\n    size: \"xs\",\n    borderRadius: \"10px\",\n    \"aria-label\": \"back\",\n    mr: \"10px\",\n    mb: \"5px\",\n    onClick: goBack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }), \"Create Data Model\")), stage === 'select-resource' && __jsx(SelectResource, {\n    selectedResource,\n    setSelectedResource,\n    fetchResourceSchema: handleFetchResourceSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }), stage === 'map-schema' && __jsx(MapSchema, {\n    schema,\n    goBack,\n    addedColumns,\n    setAddedColumns,\n    proceed: () => setStage('schema-summary'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }), stage === 'schema-summary' && __jsx(SchemaSummary, {\n    addedColumns,\n    selectedResource,\n    createDataModel: props.createDataModel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/lists/component/lists/components/data-models/create-data-model/index.tsx"],"names":["React","useState","Box","IconButton","useHistory","SelectResource","MapSchema","SchemaSummary","CreateDataModel","props","stage","setStage","schema","setSchema","selectedResource","setSelectedResource","addedColumns","setAddedColumns","routerHistory","handleFetchResourceSchema","fetchResourceSchema","goBack","push","proceed","createDataModel"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAT,EAAcC,UAAd,QAAgC,iBAAhC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,cAAT,EAAyBC,SAAzB,EAAoCC,aAApC,QAAyD,UAAzD;AAQA,OAAO,MAAMC,eAAe,GAAIC,KAAD,IAAkB;AAC/C,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBV,QAAQ,CAEhC,iBAFgC,CAAlC;AAGA,QAAM;AAAA,OAACW,MAAD;AAAA,OAASC;AAAT,MAAsBZ,QAAQ,CAAQ,EAAR,CAApC;AACA,QAAM;AAAA,OAACa,gBAAD;AAAA,OAAmBC;AAAnB,MAA0Cd,QAAQ,CAAgB,IAAhB,CAAxD;AACA,QAAM;AAAA,OAACe,YAAD;AAAA,OAAeC;AAAf,MAAkChB,QAAQ,CAM7C,EAN6C,CAAhD;AAQA,QAAMiB,aAAa,GAAGd,UAAU,EAAhC;;AAEA,QAAMe,yBAAyB,GAAG,YAAY;AAC5CN,IAAAA,SAAS,CAAC,MAAMJ,KAAK,CAACW,mBAAN,CAA0BN,gBAA1B,CAAP,CAAT;AACAH,IAAAA,QAAQ,CAAC,YAAD,CAAR;AACD,GAHD;;AAKA,QAAMU,MAAM,GAAG,MAAM;AACnB,QAAIX,KAAK,KAAK,iBAAd,EAAiCQ,aAAa,CAACI,IAAd,CAAmB,sBAAnB;AACjC,QAAIZ,KAAK,KAAK,YAAd,EAA4BC,QAAQ,CAAC,iBAAD,CAAR;AAC5B,QAAID,KAAK,KAAK,gBAAd,EAAgCC,QAAQ,CAAC,YAAD,CAAR,CAAhC,KACKA,QAAQ,CAAC,iBAAD,CAAR;AACN,GALD;;AAOA,SACE,MAAC,GAAD;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KAAK,KAAK,gBAAV,IACC,MAAC,UAAD;AACE,IAAA,IAAI,EAAC,YADP;AAEE,IAAA,IAAI,EAAC,IAFP;AAGE,IAAA,YAAY,EAAC,MAHf;AAIE,kBAAW,MAJb;AAKE,IAAA,EAAE,EAAC,MALL;AAME,IAAA,EAAE,EAAC,KANL;AAOE,IAAA,OAAO,EAAEW,MAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,sBADF,CADF,EAiBGX,KAAK,KAAK,iBAAV,IACC,MAAC,cAAD;AAEII,IAAAA,gBAFJ;AAGIC,IAAAA,mBAHJ;AAIIK,IAAAA,mBAAmB,EAAED,yBAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBJ,EA0BGT,KAAK,KAAK,YAAV,IACC,MAAC,SAAD;AAEIE,IAAAA,MAFJ;AAGIS,IAAAA,MAHJ;AAIIL,IAAAA,YAJJ;AAKIC,IAAAA,eALJ;AAMIM,IAAAA,OAAO,EAAE,MAAMZ,QAAQ,CAAC,gBAAD,CAN3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3BJ,EAqCGD,KAAK,KAAK,gBAAV,IACC,MAAC,aAAD;AACQM,IAAAA,YADR;AACsBF,IAAAA,gBADtB;AACwCU,IAAAA,eAAe,EAAEf,KAAK,CAACe,eAD/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtCJ,CADF;AA6CD,CAzEM","sourcesContent":["import React, { useState } from 'react';\nimport { Box, IconButton } from '@chakra-ui/core';\nimport { useHistory } from 'react-router';\nimport { SelectResource, MapSchema, SchemaSummary } from './stages';\n\ninterface Props {\n  createDataModel: Function;\n  fetchResourceSchema: Function;\n  fetchResourceSubSchema: Function;\n}\n\nexport const CreateDataModel = (props: Props) => {\n  const [stage, setStage] = useState<\n    'select-resource' | 'map-schema' | 'schema-summary' | 'success-prompt'\n  >('select-resource');\n  const [schema, setSchema] = useState<any[]>([]);\n  const [selectedResource, setSelectedResource] = useState<string | null>(null);\n  const [addedColumns, setAddedColumns] = useState<{\n    [key: string]: {\n      table_name: string;\n      columns: { value: string; data_type: string }[];\n      relationship: any;\n    };\n  }>({});\n\n  const routerHistory = useHistory();\n\n  const handleFetchResourceSchema = async () => {\n    setSchema(await props.fetchResourceSchema(selectedResource));\n    setStage('map-schema');\n  };\n\n  const goBack = () => {\n    if (stage === 'select-resource') routerHistory.push('/s/lists/data-models');\n    if (stage === 'map-schema') setStage('select-resource');\n    if (stage === 'schema-summary') setStage('map-schema');\n    else setStage('select-resource');\n  };\n\n  return (\n    <Box className=\"content\">\n      <Box className=\"section-title\">\n        <Box className=\"title\">\n          {stage !== 'success-prompt' && (\n            <IconButton\n              icon=\"arrow-back\"\n              size=\"xs\"\n              borderRadius=\"10px\"\n              aria-label=\"back\"\n              mr=\"10px\"\n              mb=\"5px\"\n              onClick={goBack}\n            />\n          )}\n          Create Data Model\n        </Box>\n      </Box>\n      {stage === 'select-resource' && (\n        <SelectResource\n          {...{\n            selectedResource,\n            setSelectedResource,\n            fetchResourceSchema: handleFetchResourceSchema,\n          }}\n        />\n      )}\n      {stage === 'map-schema' && (\n        <MapSchema\n          {...{\n            schema,\n            goBack,\n            addedColumns,\n            setAddedColumns,\n            proceed: () => setStage('schema-summary'),\n          }}\n        />\n      )}\n      {stage === 'schema-summary' && (\n        <SchemaSummary\n          {...{ addedColumns, selectedResource, createDataModel: props.createDataModel }}\n        />\n      )}\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}