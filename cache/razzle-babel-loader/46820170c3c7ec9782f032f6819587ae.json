{"ast":null,"code":"var _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/components/messages/ConversationThreadContent.tsx\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Spinner } from '@chakra-ui/core';\nimport { BodyText, FullPageSpinner } from 'app/components';\nimport React, { useRef } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { Chatbubble } from './Chatbubble';\nexport const ConversationThreadContent = props => {\n  var _messages$length;\n\n  const {\n    thread,\n    hasMore,\n    messages,\n    isFetching,\n    onEmailReply,\n    onEmailForward,\n    onEmailReplyAll,\n    onFetchMoreData\n  } = props;\n  const timeViewRef = useRef();\n  const flexDirection = (thread === null || thread === void 0 ? void 0 : thread.sender.channel_name) === 'email' ? 'column' : 'column-reverse';\n\n  if (isFetching) {\n    return __jsx(FullPageSpinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return __jsx(Flex, {\n    flex: 1,\n    overflowY: \"hidden\",\n    flexDirection: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, __jsx(Flex, {\n    pt: \"0\",\n    flex: 1,\n    overflowY: \"scroll\",\n    className: \"thread\",\n    flexDirection: flexDirection,\n    id: \"message-thread-scrollable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, __jsx(InfiniteScroll, {\n    inverse: true,\n    hasMore: hasMore !== null && hasMore !== void 0 ? hasMore : false,\n    next: () => onFetchMoreData === null || onFetchMoreData === void 0 ? void 0 : onFetchMoreData(),\n    dataLength: (_messages$length = messages === null || messages === void 0 ? void 0 : messages.length) !== null && _messages$length !== void 0 ? _messages$length : 0,\n    endMessage: __jsx(BodyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 23\n      }\n    }),\n    scrollableTarget: \"message-thread-scrollable\",\n    style: {\n      display: 'flex',\n      flexDirection,\n      paddingBottom: '.75rem'\n    },\n    loader: __jsx(Flex, {\n      my: \"1rem\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      paddingTop: \"2rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, __jsx(Spinner, {\n      color: \"blue.500\",\n      size: \"md\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, messages === null || messages === void 0 ? void 0 : messages.map((message, index) => __jsx(Box, {\n    mt: \"1rem\",\n    key: message.uuid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, __jsx(Chatbubble, {\n    thread: thread,\n    message: message,\n    timeViewRef: timeViewRef,\n    receiver: thread === null || thread === void 0 ? void 0 : thread.receiver,\n    onEmailReply: onEmailReply,\n    onEmailForward: onEmailForward,\n    onEmailReplyAll: onEmailReplyAll,\n    emailBubbleDefaultIndex: [index],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  }))))));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/components/messages/ConversationThreadContent.tsx"],"names":["Box","Flex","Spinner","BodyText","FullPageSpinner","React","useRef","InfiniteScroll","Chatbubble","ConversationThreadContent","props","thread","hasMore","messages","isFetching","onEmailReply","onEmailForward","onEmailReplyAll","onFetchMoreData","timeViewRef","flexDirection","sender","channel_name","length","display","paddingBottom","map","message","index","uuid","receiver"],"mappings":"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","sourcesContent":["import { Box, Flex, Spinner } from '@chakra-ui/core';\nimport { BodyText, FullPageSpinner } from 'app/components';\nimport React, { useRef } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { ThreadSchema } from '../../inbox.types';\nimport { Chatbubble, ChatbubbleProps } from './Chatbubble';\n\nexport type ConversationThreadContentProps = {\n  messages?: any[];\n  hasMore?: boolean;\n  isFetching?: boolean;\n  thread?: ThreadSchema;\n  onFetchMoreData?(): void;\n  onEmailReply?: ChatbubbleProps['onEmailReply'];\n  onEmailForward?: ChatbubbleProps['onEmailForward'];\n  onEmailReplyAll?: ChatbubbleProps['onEmailReplyAll'];\n};\n\nexport const ConversationThreadContent = (props: ConversationThreadContentProps) => {\n  const {\n    thread,\n    hasMore,\n    messages,\n    isFetching,\n    onEmailReply,\n    onEmailForward,\n    onEmailReplyAll,\n    onFetchMoreData,\n  } = props;\n\n  const timeViewRef = useRef<HTMLParagraphElement>();\n  const flexDirection = thread?.sender.channel_name === 'email' ? 'column' : 'column-reverse';\n\n  if (isFetching) {\n    return <FullPageSpinner />;\n  }\n\n  return (\n    <Flex flex={1} overflowY=\"hidden\" flexDirection=\"column\">\n      <Flex\n        pt=\"0\"\n        flex={1}\n        overflowY=\"scroll\"\n        className=\"thread\"\n        flexDirection={flexDirection}\n        id=\"message-thread-scrollable\"\n      >\n        <InfiniteScroll\n          inverse={true}\n          hasMore={hasMore ?? false}\n          next={() => onFetchMoreData?.()}\n          dataLength={messages?.length ?? 0}\n          endMessage={<BodyText></BodyText>}\n          scrollableTarget=\"message-thread-scrollable\"\n          style={{ display: 'flex', flexDirection, paddingBottom: '.75rem' }}\n          loader={\n            <Flex my=\"1rem\" alignItems=\"center\" justifyContent=\"center\" paddingTop=\"2rem\">\n              <Spinner color=\"blue.500\" size=\"md\" />\n            </Flex>\n          }\n        >\n          {messages?.map((message, index) => (\n            <Box mt=\"1rem\" key={message.uuid}>\n              <Chatbubble\n                thread={thread}\n                message={message}\n                timeViewRef={timeViewRef}\n                receiver={thread?.receiver}\n                onEmailReply={onEmailReply}\n                onEmailForward={onEmailForward}\n                onEmailReplyAll={onEmailReplyAll}\n                emailBubbleDefaultIndex={[index]}\n              />\n            </Box>\n          ))}\n        </InfiniteScroll>\n      </Flex>\n    </Flex>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}