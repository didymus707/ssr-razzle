{"ast":null,"code":"import _extends from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/settings/component/payment/bank-accounts/bank-accounts.tsx\";\nvar __jsx = React.createElement;\n//@ts-nocheck\nimport React, { useEffect, useState } from 'react';\nimport { Box, IconButton, Text, useClipboard, useToast } from '@chakra-ui/core';\nimport { BankAccountForm } from './bank-account-form';\nimport { BankAccountItem } from './bank-account-item';\nimport { BankAccountDialog } from './bank-account-dialog';\nimport { ToastBox, Button } from '../../../../../components';\nimport { useSelector } from 'react-redux';\nimport { selectBankAccounts } from '../../../slices';\nimport { selectManagedAccount } from '../../../../payments/selectors';\nimport { Divider } from '@chakra-ui/core/dist';\nexport const BankAccounts = ({\n  banks,\n  getBanks,\n  banks_loading,\n  bank_account_form_loading,\n  resolveBankAccount,\n  addBankAccount,\n  deleteBankAccount\n}) => {\n  const {\n    0: deleteLoading,\n    1: setDeleteLoading\n  } = useState([]);\n  const {\n    0: isDialogOpen,\n    1: setIsDialogOpen\n  } = useState(false);\n  const bank_accounts = useSelector(selectBankAccounts);\n  const toast = useToast();\n  useEffect(() => {\n    if (banks.length === 0 && getBanks) getBanks();\n  }, [banks.length, getBanks]);\n  useEffect(() => {\n    setIsDialogOpen(false);\n  }, [bank_accounts]);\n  const managed_account = useSelector(selectManagedAccount);\n\n  const handleDeleteBankAccount = async bank_account_id => {\n    setDeleteLoading([...deleteLoading, bank_account_id]);\n    const res = await deleteBankAccount(bank_account_id);\n    let message = 'Beneficiary deleted successfully';\n    if (!res) message = 'Unable to delete beneficiary account, please try again';\n    toast({\n      position: 'bottom-left',\n      render: ({\n        onClose\n      }) => __jsx(ToastBox, {\n        onClose: onClose,\n        message: message,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 32\n        }\n      })\n    });\n    setDeleteLoading(deleteLoading.filter(i => i !== bank_account_id));\n  };\n\n  const {\n    onCopy\n  } = useClipboard(managed_account === null || managed_account === void 0 ? void 0 : managed_account.account_number);\n\n  const handleCopyManagedAccountNumber = () => {\n    onCopy();\n    toast({\n      position: 'bottom-left',\n      render: ({\n        onClose\n      }) => __jsx(ToastBox, {\n        status: \"info\",\n        onClose: onClose,\n        message: \"Account number has been copied to your clipboard\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }\n      })\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, managed_account && __jsx(Box, {\n    className: \"bank-account-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    className: \"item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    width: \"50%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, __jsx(Text, {\n    className: \"text-primary\",\n    textTransform: \"uppercase\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 19\n    }\n  }, managed_account.account_name), __jsx(Text, {\n    className: \"text-secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 19\n    }\n  }, \"NGN\")), __jsx(Box, {\n    width: \"50%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, __jsx(Text, {\n    className: \"text-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 19\n    }\n  }, managed_account.account_number), __jsx(Text, {\n    className: \"text-secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 19\n    }\n  }, managed_account.bank_name))), __jsx(IconButton, {\n    \"aria-label\": \"copy account number\",\n    icon: \"copy\",\n    backgroundColor: \"white\",\n    size: \"sm\",\n    fontSize: \"20px\",\n    marginRight: \"10px\",\n    onClick: handleCopyManagedAccountNumber,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }))), bank_accounts.length === 0 && __jsx(BankAccountForm, {\n    is_loading: bank_account_form_loading,\n    banks: banks,\n    banks_loading: banks_loading,\n    resolveBankAccount: resolveBankAccount,\n    getBanks: getBanks,\n    addBankAccount: addBankAccount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }), bank_accounts.length > 0 && __jsx(React.Fragment, null, __jsx(Box, {\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    marginTop: \"20px\",\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    fontSize: \"14px\",\n    color: \"#757575\",\n    paddingRight: \"50px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }, \"Others\"), __jsx(Divider, {\n    width: \"90%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  })), __jsx(Box, {\n    className: \"bank-account-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, bank_accounts.map(i => __jsx(BankAccountItem, _extends({\n    key: i.id\n  }, _objectSpread(_objectSpread({}, i), {}, {\n    handleDeleteBankAccount,\n    isLoading: deleteLoading.includes(i.id)\n  }), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  })))), __jsx(Box, {\n    className: \"bank-account-actions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    variantColor: \"blue\",\n    onClick: () => setIsDialogOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 15\n    }\n  }, \"Add Bank Details\")))), __jsx(BankAccountDialog, {\n    isOpen: isDialogOpen,\n    onClose: () => setIsDialogOpen(false),\n    bank_account_form_loading: bank_account_form_loading,\n    banks: banks,\n    banks_loading: banks_loading,\n    resolveBankAccount: resolveBankAccount,\n    getBanks: getBanks,\n    addBankAccount: addBankAccount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/settings/component/payment/bank-accounts/bank-accounts.tsx"],"names":["React","useEffect","useState","Box","IconButton","Text","useClipboard","useToast","BankAccountForm","BankAccountItem","BankAccountDialog","ToastBox","Button","useSelector","selectBankAccounts","selectManagedAccount","Divider","BankAccounts","banks","getBanks","banks_loading","bank_account_form_loading","resolveBankAccount","addBankAccount","deleteBankAccount","deleteLoading","setDeleteLoading","isDialogOpen","setIsDialogOpen","bank_accounts","toast","length","managed_account","handleDeleteBankAccount","bank_account_id","res","message","position","render","onClose","filter","i","onCopy","account_number","handleCopyManagedAccountNumber","account_name","bank_name","map","id","isLoading","includes"],"mappings":"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","sourcesContent":["//@ts-nocheck\nimport React, { useEffect, useState } from 'react';\nimport { Box, IconButton, Text, useClipboard, useToast } from '@chakra-ui/core';\nimport { BankAccountForm } from './bank-account-form';\nimport { BankAccountItem } from './bank-account-item';\nimport { BankAccountDialog } from './bank-account-dialog';\nimport { ToastBox, Button } from '../../../../../components';\nimport { useSelector } from 'react-redux';\nimport { selectBankAccounts } from '../../../slices';\nimport { selectManagedAccount } from '../../../../payments/selectors';\nimport { Divider } from '@chakra-ui/core/dist';\n\nexport const BankAccounts = ({\n  banks,\n  getBanks,\n  banks_loading,\n  bank_account_form_loading,\n  resolveBankAccount,\n  addBankAccount,\n  deleteBankAccount,\n}) => {\n  const [deleteLoading, setDeleteLoading] = useState<string[]>([]);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const bank_accounts = useSelector(selectBankAccounts);\n\n  const toast = useToast();\n\n  useEffect(() => {\n    if (banks.length === 0 && getBanks) getBanks();\n  }, [banks.length, getBanks]);\n\n  useEffect(() => {\n    setIsDialogOpen(false);\n  }, [bank_accounts]);\n\n  const managed_account = useSelector(selectManagedAccount);\n\n  const handleDeleteBankAccount = async bank_account_id => {\n    setDeleteLoading([...deleteLoading, bank_account_id]);\n    const res = await deleteBankAccount(bank_account_id);\n    let message = 'Beneficiary deleted successfully';\n    if (!res) message = 'Unable to delete beneficiary account, please try again';\n    toast({\n      position: 'bottom-left',\n      render: ({ onClose }) => <ToastBox onClose={onClose} message={message} />,\n    });\n    setDeleteLoading(deleteLoading.filter((i: string) => i !== bank_account_id));\n  };\n\n  const { onCopy } = useClipboard(managed_account?.account_number);\n\n  const handleCopyManagedAccountNumber = () => {\n    onCopy();\n    toast({\n      position: 'bottom-left',\n      render: ({ onClose }) => (\n        <ToastBox\n          status=\"info\"\n          onClose={onClose}\n          message=\"Account number has been copied to your clipboard\"\n        />\n      ),\n    });\n  };\n\n  return (\n    <>\n      <Box>\n        {managed_account && (\n          <Box className=\"bank-account-list\">\n            <Box className=\"item\">\n              <Box display=\"flex\" justifyContent=\"space-between\" width=\"100%\">\n                <Box width=\"50%\">\n                  <Text className=\"text-primary\" textTransform=\"uppercase\">\n                    {managed_account.account_name}\n                  </Text>\n                  <Text className=\"text-secondary\">NGN</Text>\n                </Box>\n\n                <Box width=\"50%\">\n                  <Text className=\"text-primary\">{managed_account.account_number}</Text>\n                  <Text className=\"text-secondary\">{managed_account.bank_name}</Text>\n                </Box>\n              </Box>\n\n              <IconButton\n                aria-label=\"copy account number\"\n                icon=\"copy\"\n                backgroundColor=\"white\"\n                size=\"sm\"\n                fontSize=\"20px\"\n                marginRight=\"10px\"\n                onClick={handleCopyManagedAccountNumber}\n              />\n            </Box>\n          </Box>\n        )}\n\n        {bank_accounts.length === 0 && (\n          <BankAccountForm\n            is_loading={bank_account_form_loading}\n            banks={banks}\n            banks_loading={banks_loading}\n            resolveBankAccount={resolveBankAccount}\n            getBanks={getBanks}\n            addBankAccount={addBankAccount}\n          />\n        )}\n        {bank_accounts.length > 0 && (\n          <>\n            <Box\n              width=\"100%\"\n              display=\"flex\"\n              alignItems=\"center\"\n              marginTop=\"20px\"\n              justifyContent=\"space-between\"\n            >\n              <Box fontSize=\"14px\" color=\"#757575\" paddingRight=\"50px\">\n                Others\n              </Box>\n              <Divider width=\"90%\" />\n            </Box>\n            <Box className=\"bank-account-list\">\n              {bank_accounts.map(i => (\n                <BankAccountItem\n                  key={i.id}\n                  {...{\n                    ...i,\n                    handleDeleteBankAccount,\n                    isLoading: deleteLoading.includes(i.id),\n                  }}\n                />\n              ))}\n            </Box>\n            <Box className=\"bank-account-actions\">\n              <Button variantColor=\"blue\" onClick={() => setIsDialogOpen(true)}>\n                Add Bank Details\n              </Button>\n            </Box>\n          </>\n        )}\n      </Box>\n      <BankAccountDialog\n        isOpen={isDialogOpen}\n        onClose={() => setIsDialogOpen(false)}\n        bank_account_form_loading={bank_account_form_loading}\n        banks={banks}\n        banks_loading={banks_loading}\n        resolveBankAccount={resolveBankAccount}\n        getBanks={getBanks}\n        addBankAccount={addBankAccount}\n      />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}