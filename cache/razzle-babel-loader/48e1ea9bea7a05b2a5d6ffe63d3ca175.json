{"ast":null,"code":"import _extends from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/components/cell-properties/date/time-format-select.tsx\";\nvar __jsx = React.createElement;\n// @ts-nocheck\nimport React from 'react';\nimport { Box, Icon, Popover, PopoverContent, PopoverTrigger } from '@chakra-ui/core';\nimport { PopoverWrapper } from '../../../list-view.styles';\nimport { available_time_formats } from '../../../list.data';\nimport { parseDate } from '../../../lists.utils';\n\nconst TimeFormatOption = props => {\n  const {\n    label,\n    format,\n    date_today\n  } = props;\n  return __jsx(Box, {\n    className: `list-item ${props.active ? 'active' : ''}`,\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, `${label} (${date_today.format(format)})`);\n};\n\nexport const TimeFormatSelect = props => {\n  var _props$column;\n\n  let customization = (props === null || props === void 0 ? void 0 : (_props$column = props.column) === null || _props$column === void 0 ? void 0 : _props$column.customization) || {};\n  let time_format = (customization === null || customization === void 0 ? void 0 : customization.time_format) || 'h:mm A';\n  let selected_format_option = available_time_formats.find(i => i.format === time_format);\n  const date_today = parseDate(new Date().toString());\n\n  const handleFormatSelect = format => {\n    props.updateCustomization(props.column.uid, _objectSpread(_objectSpread({}, customization), {}, {\n      time_format: format\n    }));\n  };\n\n  return __jsx(Popover, {\n    trigger: \"hover\",\n    placement: \"right-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, ({\n    onClose\n  }) => __jsx(React.Fragment, null, __jsx(PopoverTrigger, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"list-item-no-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, `${selected_format_option === null || selected_format_option === void 0 ? void 0 : selected_format_option.label} (${date_today.format(selected_format_option === null || selected_format_option === void 0 ? void 0 : selected_format_option.format)})`, __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 15\n    }\n  }, __jsx(Icon, {\n    name: \"chevron-right\",\n    size: \"12.5px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  })))), __jsx(PopoverContent, {\n    zIndex: 4,\n    width: \"max-content\",\n    boxShadow: \"none\",\n    _focus: {\n      boxShadow: 'none',\n      outline: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, __jsx(PopoverWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, available_time_formats.map((i, index) => __jsx(TimeFormatOption, _extends({}, i, {\n    key: index,\n    date_today: date_today,\n    active: i.format === (selected_format_option === null || selected_format_option === void 0 ? void 0 : selected_format_option.format),\n    onClick: () => {\n      handleFormatSelect(i.format);\n      onClose();\n      props.close();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  })))))));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/components/cell-properties/date/time-format-select.tsx"],"names":["React","Box","Icon","Popover","PopoverContent","PopoverTrigger","PopoverWrapper","available_time_formats","parseDate","TimeFormatOption","props","label","format","date_today","active","onClick","TimeFormatSelect","customization","column","time_format","selected_format_option","find","i","Date","toString","handleFormatSelect","updateCustomization","uid","onClose","boxShadow","outline","map","index","close"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport React from 'react';\nimport { Box, Icon, Popover, PopoverContent, PopoverTrigger } from '@chakra-ui/core';\nimport { PopoverWrapper } from '../../../list-view.styles';\nimport { available_time_formats } from '../../../list.data';\nimport { parseDate } from '../../../lists.utils';\n\nconst TimeFormatOption = (props: any) => {\n  const { label, format, date_today } = props;\n  return (\n    <Box className={`list-item ${props.active ? 'active' : ''}`} onClick={props.onClick}>\n      {`${label} (${date_today.format(format)})`}\n    </Box>\n  );\n};\n\nexport const TimeFormatSelect = (props: any) => {\n  let customization = props?.column?.customization || {};\n  let time_format = customization?.time_format || 'h:mm A';\n\n  let selected_format_option = available_time_formats.find((i: any) => i.format === time_format);\n\n  const date_today = parseDate(new Date().toString());\n\n  const handleFormatSelect = (format: string) => {\n    props.updateCustomization(props.column.uid, {\n      ...customization,\n      time_format: format,\n    });\n  };\n\n  return (\n    <Popover trigger=\"hover\" placement=\"right-start\">\n      {({ onClose }) => (\n        <>\n          <PopoverTrigger>\n            <div className=\"list-item-no-icon\">\n              {`${selected_format_option?.label} (${date_today.format(\n                selected_format_option?.format,\n              )})`}\n              <Box display=\"flex\" justifyContent=\"flex-end\" alignItems=\"center\">\n                <Icon name=\"chevron-right\" size=\"12.5px\" />\n              </Box>\n            </div>\n          </PopoverTrigger>\n          <PopoverContent\n            zIndex={4}\n            width=\"max-content\"\n            boxShadow=\"none\"\n            _focus={{\n              boxShadow: 'none',\n              outline: 'none',\n            }}\n          >\n            <PopoverWrapper>\n              {available_time_formats.map((i: any, index) => (\n                <TimeFormatOption\n                  {...i}\n                  key={index}\n                  date_today={date_today}\n                  active={i.format === selected_format_option?.format}\n                  onClick={() => {\n                    handleFormatSelect(i.format);\n                    onClose();\n                    props.close();\n                  }}\n                />\n              ))}\n            </PopoverWrapper>\n          </PopoverContent>\n        </>\n      )}\n    </Popover>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}