{"ast":null,"code":"var _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/components/more-info/MoreInfoSidebar.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Avatar, Box, Collapse, Flex, Icon, Stack, Tooltip, useDisclosure, useToast } from '@chakra-ui/core';\nimport styled from '@emotion/styled';\nimport { getFilterFieldRenderer, querySegment } from 'app/authenticated-app/lists';\nimport { selectContactList, selectLists } from 'app/authenticated-app/lists/lists.slice';\nimport { createRow, filterRows, getRow, updateRow } from 'app/authenticated-app/tables';\nimport { BodyText, Button, FormLabel, Menu, MenuItem, SmallText, Subtitle, ToastBox, XSmallText } from 'app/components';\nimport { format } from 'date-fns';\nimport { AnimateSharedLayout, motion } from 'framer-motion';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useInfiniteQuery, useMutation, useQuery, useQueryClient } from 'react-query';\nimport { useSelector } from 'react-redux';\nimport { ResizableBox } from 'react-resizable';\nimport { channelOptions } from '../..';\nimport { addProfileToContact, getConversationNotes, getInboxConnections, getThreadByID } from '../../inbox.service';\nimport { MoreInfoSidebarCard } from './MoreInfoSidebarCard';\nexport const MoreInfoSidebar = props => {\n  var _data$pages$reduce, _data$pages, _sender$image_url, _sender$image_url2, _sender$image_url4;\n\n  const {\n    thread: threadProp\n  } = props;\n\n  const handle = () => {\n    return __jsx(\"div\", {\n      className: \"handle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 12\n      }\n    });\n  };\n\n  const toast = useToast();\n  const {\n    isOpen: isEditSectionOpen,\n    onOpen: onOpenEditSection,\n    onClose: onCloseEditSection\n  } = useDisclosure();\n  const {\n    isOpen: isDataModelCardOpen,\n    onToggle: onToggleDataModelCard\n  } = useDisclosure();\n  const {\n    isOpen: isContactListCardOpen,\n    onToggle: onToggleContactListCard\n  } = useDisclosure();\n  const queryClient = useQueryClient();\n  const lists = useSelector(selectLists);\n  const contactList = useSelector(selectContactList);\n  const {\n    data: thread\n  } = useQuery(['threads', threadProp === null || threadProp === void 0 ? void 0 : threadProp.uuid], () => getThreadByID({\n    thread_id: threadProp === null || threadProp === void 0 ? void 0 : threadProp.uuid\n  }), {\n    initialData: threadProp,\n    enabled: !!(threadProp !== null && threadProp !== void 0 && threadProp.uuid)\n  });\n  const {\n    sender,\n    sender_id\n  } = thread !== null && thread !== void 0 ? thread : {};\n  const {\n    0: width,\n    1: setWidth\n  } = useState(80);\n  const {\n    0: section,\n    1: setSection\n  } = useState(0);\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n  const {\n    0: staticWidth,\n    1: setStaticWidth\n  } = useState(80);\n  const {\n    0: background,\n    1: setBackground\n  } = useState('white');\n  const {\n    0: contactId,\n    1: setContactId\n  } = useState(sender === null || sender === void 0 ? void 0 : sender.contact_id);\n  const {\n    0: columnsWithValue,\n    1: setColumnsWithValue\n  } = useState([]);\n  const {\n    0: columnsWithoutValue,\n    1: setColumnsWithoutValue\n  } = useState([]);\n\n  const fetchConversationNotes = async ({\n    pageParam = 1,\n    queryKey\n  }) => {\n    const customer_id = queryKey[1];\n    return getConversationNotes({\n      page: pageParam,\n      customer_id\n    });\n  };\n\n  const {\n    mutate: updateContactData\n  } = useMutation(payload => updateRow(payload), {\n    onMutate: async payload => {\n      await queryClient.cancelQueries(['row-data', contactId]);\n      const previousRowData = queryClient.getQueryData(['row-data', contactId]);\n\n      const newRowData = _objectSpread(_objectSpread({}, previousRowData), {}, {\n        columns: payload.columns\n      });\n\n      queryClient.setQueryData(['row-data', contactId], newRowData);\n      return {\n        previousRowData,\n        newRowData\n      };\n    },\n    onError: (err, newRowData, context) => {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: err.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 36\n          }\n        })\n      });\n      queryClient.setQueryData(['row-data', contactId], context.previousRowData);\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(['row-data', contactId]);\n      queryClient.invalidateQueries('threads');\n      queryClient.invalidateQueries(['list-query', thread === null || thread === void 0 ? void 0 : thread.uuid]);\n    }\n  });\n  const {\n    mutate: onAddProfileToContact,\n    isLoading: isAddingProfileToContact\n  } = useMutation(contactID => addProfileToContact({\n    contactID,\n    customer_id: sender_id !== null && sender_id !== void 0 ? sender_id : ''\n  }), {\n    onError: error => {\n      toast({\n        position: 'bottom-left',\n        render: () => __jsx(ToastBox, {\n          message: error.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 23\n          }\n        })\n      });\n    },\n    onSuccess: data => {\n      setContactId(data.profile.contact_id);\n      toast({\n        position: 'bottom-left',\n        render: () => __jsx(ToastBox, {\n          message: \"Profile added to contact list\",\n          status: \"success\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 23\n          }\n        })\n      });\n    }\n  });\n  const {\n    mutate: onAddToContactList,\n    isLoading: isAddingToContactList\n  } = useMutation(({\n    columns,\n    table_id\n  }) => createRow({\n    columns,\n    table_id\n  }), {\n    onError: error => {\n      toast({\n        position: 'bottom-left',\n        render: () => __jsx(ToastBox, {\n          message: error.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 23\n          }\n        })\n      });\n    },\n    onSuccess: data => {\n      var _data$data, _data$data$row;\n\n      const contactID = data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : (_data$data$row = _data$data.row) === null || _data$data$row === void 0 ? void 0 : _data$data$row.id;\n      onAddProfileToContact(contactID);\n    }\n  });\n  const {\n    data: rowData\n  } = useQuery(['row-data', contactId], () => getRow(contactId !== null && contactId !== void 0 ? contactId : ''), {\n    enabled: !!contactId\n  });\n  const {\n    data\n  } = useInfiniteQuery(['notes', sender_id], fetchConversationNotes, {\n    getNextPageParam: lastPage => {\n      return lastPage.data.meta.page < lastPage.data.meta.page_count ? lastPage.data.meta.page + 1 : undefined;\n    },\n    enabled: !!sender_id\n  });\n  const {\n    data: connections\n  } = useQuery('inbox-connections', getInboxConnections, {\n    enabled: !!(thread !== null && thread !== void 0 && thread.uuid)\n  });\n  const listConnection = useMemo(() => {\n    return connections === null || connections === void 0 ? void 0 : connections.find(item => item.table_id);\n  }, [connections]);\n  const listConnectionInfo = useMemo(() => {\n    if (listConnection && listConnection.table_id) {\n      return lists[listConnection === null || listConnection === void 0 ? void 0 : listConnection.table_id];\n    }\n\n    return '';\n  }, [listConnection, lists]);\n  const listFilters = useMemo(() => {\n    return listConnection === null || listConnection === void 0 ? void 0 : listConnection.variables.filters.find(filter => {\n      var _thread$sender;\n\n      return filter.channel === (thread === null || thread === void 0 ? void 0 : (_thread$sender = thread.sender) === null || _thread$sender === void 0 ? void 0 : _thread$sender.channel_name);\n    });\n  }, [listConnection, thread]);\n  const dataModelConnection = useMemo(() => {\n    return connections === null || connections === void 0 ? void 0 : connections.find(item => item.data_model_id);\n  }, [connections]);\n  const dataModelFilters = useMemo(() => {\n    return dataModelConnection === null || dataModelConnection === void 0 ? void 0 : dataModelConnection.variables.filters.find(filter => {\n      var _thread$sender2;\n\n      return filter.channel === (thread === null || thread === void 0 ? void 0 : (_thread$sender2 = thread.sender) === null || _thread$sender2 === void 0 ? void 0 : _thread$sender2.channel_name);\n    });\n  }, [dataModelConnection, thread]);\n  const {\n    data: dataModelQuery\n  } = useQuery(['data-model-query', thread === null || thread === void 0 ? void 0 : thread.uuid], () => {\n    var _thread$sender3;\n\n    const {\n      columnID: column,\n      operator\n    } = dataModelFilters !== null && dataModelFilters !== void 0 ? dataModelFilters : {};\n    return querySegment({\n      data_model: dataModelConnection === null || dataModelConnection === void 0 ? void 0 : dataModelConnection.data_model_id,\n      filters: [{\n        column,\n        operator,\n        value: thread === null || thread === void 0 ? void 0 : (_thread$sender3 = thread.sender) === null || _thread$sender3 === void 0 ? void 0 : _thread$sender3.platform_nick\n      }]\n    });\n  }, {\n    enabled: !!contactId && !!dataModelConnection && !!dataModelFilters\n  });\n  const {\n    data: listQuery\n  } = useQuery(['list-query', thread === null || thread === void 0 ? void 0 : thread.uuid], () => {\n    var _thread$sender4;\n\n    const {\n      columnID,\n      operator,\n      columnType,\n      name\n    } = listFilters !== null && listFilters !== void 0 ? listFilters : {};\n    return filterRows({\n      page: 1,\n      limit: 200,\n      table_id: listConnection === null || listConnection === void 0 ? void 0 : listConnection.table_id,\n      filters: [{\n        name,\n        columnID,\n        operator,\n        columnType,\n        subOperator: null,\n        value: thread === null || thread === void 0 ? void 0 : (_thread$sender4 = thread.sender) === null || _thread$sender4 === void 0 ? void 0 : _thread$sender4.platform_nick\n      }]\n    });\n  }, {\n    enabled: !!contactId && !!listConnection && !!listFilters\n  });\n  const notes = (_data$pages$reduce = data === null || data === void 0 ? void 0 : (_data$pages = data.pages) === null || _data$pages === void 0 ? void 0 : _data$pages.reduce((acc, page) => [...acc, ...page.data.notes], [])) !== null && _data$pages$reduce !== void 0 ? _data$pages$reduce : [];\n\n  const getContactRowData = () => {\n    const nameColumn = contactList.columns.find(item => item.name.toLowerCase() === 'name');\n    const phoneNumberColumn = contactList.columns.find(item => item.type.toLowerCase() === 'phone number');\n    const emailColumn = contactList.columns.find(item => item.type.toLowerCase() === 'email');\n    let columns = {\n      [nameColumn.id]: sender === null || sender === void 0 ? void 0 : sender.name\n    };\n\n    if ((sender === null || sender === void 0 ? void 0 : sender.channel_name) === 'email' && emailColumn) {\n      columns[emailColumn.id] = sender === null || sender === void 0 ? void 0 : sender.platform_nick;\n    }\n\n    if (phoneNumberColumn && ((sender === null || sender === void 0 ? void 0 : sender.channel_name) === 'phone' || (sender === null || sender === void 0 ? void 0 : sender.channel_name) === 'whatsapp' || (sender === null || sender === void 0 ? void 0 : sender.channel_name) === 'whatsappWeb')) {\n      columns[phoneNumberColumn.id] = sender === null || sender === void 0 ? void 0 : sender.platform_nick;\n    }\n\n    return columns;\n  };\n\n  const handleAddContact = async () => {\n    const columns = getContactRowData();\n    onAddToContactList({\n      columns,\n      table_id: contactList.id\n    });\n  };\n\n  const handleResize = (e, d) => {\n    if (d.size.width === 302) {\n      setIsOpen(true);\n    }\n\n    if (d.size.width === 80) {\n      setIsOpen(false);\n    }\n\n    setWidth(d.size.width);\n  };\n\n  useEffect(() => {\n    setContactId(sender === null || sender === void 0 ? void 0 : sender.contact_id);\n  }, [sender]);\n  useEffect(() => {\n    if (isOpen) {\n      setWidth(302);\n      setStaticWidth(302);\n    } else {\n      setWidth(80);\n      setStaticWidth(80);\n    }\n  }, [isOpen]);\n  useEffect(() => {\n    if (width <= 200) {\n      setSection(0);\n      setBackground('white');\n    } else {\n      setSection(1);\n      setBackground('#F4F6F9');\n    }\n  }, [width]);\n  useEffect(() => {\n    if (rowData) {\n      let columnsWithValue = contactList.columns.filter(column => Object.keys(rowData === null || rowData === void 0 ? void 0 : rowData.columns).includes(column.id.toString()));\n      let columnsWithoutValue = contactList.columns.filter(column => !Object.keys(rowData === null || rowData === void 0 ? void 0 : rowData.columns).includes(column.id.toString()));\n      setColumnsWithValue(columnsWithValue);\n      setColumnsWithoutValue(columnsWithoutValue);\n    }\n  }, [contactList.columns, rowData, contactId]);\n  return __jsx(MoreInfoSidebarContainer, {\n    background: background,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 5\n    }\n  }, __jsx(ResizableBox, {\n    axis: \"x\",\n    className: \"box\",\n    handle: handle(),\n    width: staticWidth,\n    resizeHandles: ['w'],\n    onResize: handleResize,\n    minConstraints: [80, 100],\n    height: window.innerHeight,\n    maxConstraints: [302, window.innerHeight],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }\n  }, section === 0 ? __jsx(Flex, {\n    my: \"4.75rem\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 11\n    }\n  }, __jsx(Avatar, {\n    size: \"sm\",\n    color: \"white\",\n    cursor: \"pointer\",\n    name: sender === null || sender === void 0 ? void 0 : sender.name,\n    onClick: () => setIsOpen(true),\n    src: (_sender$image_url = sender === null || sender === void 0 ? void 0 : sender.image_url) !== null && _sender$image_url !== void 0 ? _sender$image_url : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 13\n    }\n  })) : __jsx(Box, {\n    mt: \"2.5rem\",\n    mb: \"10rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 11\n    }\n  }, isOpen && __jsx(Button, {\n    top: \"0\",\n    size: \"sm\",\n    right: \"0.5rem\",\n    variant: \"ghost\",\n    position: \"absolute\",\n    onClick: () => setIsOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 15\n    }\n  }, __jsx(Icon, {\n    size: \"1rem\",\n    name: \"inbox-close\",\n    color: \"gray.800\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 17\n    }\n  })), __jsx(AnimateSharedLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 13\n    }\n  }, !isEditSectionOpen && __jsx(MotionBox, {\n    layout: true,\n    exit: {\n      opacity: 0,\n      x: -302\n    },\n    animate: {\n      opacity: 1,\n      x: 0\n    },\n    initial: {\n      opacity: 0,\n      x: 302\n    },\n    transition: {\n      ease: 'easeOut'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 17\n    }\n  }, __jsx(MoreInfoSidebarCard, {\n    mb: \"2rem\",\n    position: \"relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 19\n    }\n  }, __jsx(Tooltip, {\n    zIndex: 10000,\n    placement: \"bottom\",\n    label: \"Edit Contact\",\n    \"aria-label\": \"edit-contact\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    px: \"0\",\n    size: \"xs\",\n    width: \"unset\",\n    top: \"0.25rem\",\n    rounded: \"50%\",\n    height: \"unset\",\n    right: \"0.5rem\",\n    display: \"flex\",\n    bg: \"transparent\",\n    variant: \"unstyled\",\n    position: \"absolute\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    onClick: onOpenEditSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 23\n    }\n  }, __jsx(Icon, {\n    name: \"inbox-edit-contact-info\",\n    color: \"blue.400\",\n    size: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 25\n    }\n  }))), __jsx(Flex, {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 21\n    }\n  }, __jsx(Avatar, {\n    size: \"lg\",\n    showBorder: true,\n    mb: \"1.25rem\",\n    color: \"white\",\n    name: sender === null || sender === void 0 ? void 0 : sender.name,\n    src: (_sender$image_url2 = sender === null || sender === void 0 ? void 0 : sender.image_url) !== null && _sender$image_url2 !== void 0 ? _sender$image_url2 : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 23\n    }\n  }), __jsx(Icon, {\n    pb: \"0.5rem\",\n    size: \"1.5rem\",\n    color: \"gray.600\",\n    name: sender !== null && sender !== void 0 && sender.channel_name ? channelOptions[sender === null || sender === void 0 ? void 0 : sender.channel_name].icon : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 23\n    }\n  }), __jsx(BodyText, {\n    pb: \"0.25rem\",\n    color: \"gray.900\",\n    textAlign: \"center\",\n    fontWeight: \"medium\",\n    wordBreak: \"break-all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 23\n    }\n  }, sender === null || sender === void 0 ? void 0 : sender.name), __jsx(SmallText, {\n    wordBreak: \"break-all\",\n    color: \"gray.500\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 23\n    }\n  }, sender === null || sender === void 0 ? void 0 : sender.platform_nick))), !!(dataModelQuery !== null && dataModelQuery !== void 0 && dataModelQuery.length) && __jsx(Box, {\n    mb: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 21\n    }\n  }, __jsx(Subtitle, {\n    pb: \"1rem\",\n    color: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 23\n    }\n  }, dataModelConnection === null || dataModelConnection === void 0 ? void 0 : dataModelConnection.data_model_name), dataModelQuery === null || dataModelQuery === void 0 ? void 0 : dataModelQuery.map((model, index) => __jsx(MoreInfoSidebarCard, {\n    mb: \"0.5rem\",\n    px: \"0.5rem\",\n    py: \"0.75rem\",\n    overflowX: \"auto\",\n    key: `${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 25\n    }\n  }, __jsx(Collapse, {\n    startingHeight: 100,\n    isOpen: isDataModelCardOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 27\n    }\n  }, Object.keys(model).map((modelItem, index) => __jsx(Stack, {\n    isInline: true,\n    mb: \"0.5rem\",\n    flexWrap: \"wrap\",\n    key: `${index}`,\n    alignItems: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 31\n    }\n  }, __jsx(SmallText, {\n    color: \"gray.900\",\n    fontWeight: \"bold\",\n    lineHeight: \"20px\",\n    textTransform: \"capitalize\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 33\n    }\n  }, modelItem, \":\"), __jsx(SmallText, {\n    flex: 1,\n    wordBreak: \"break-all\",\n    color: \"gray.600\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 33\n    }\n  }, model[modelItem])))), __jsx(Button, {\n    size: \"sm\",\n    variant: \"link\",\n    variantColor: \"blue\",\n    onClick: onToggleDataModelCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 27\n    }\n  }, \"Show \", isDataModelCardOpen ? 'less' : 'more')))), !!(listQuery !== null && listQuery !== void 0 && listQuery.length) && __jsx(Box, {\n    mb: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 21\n    }\n  }, __jsx(Subtitle, {\n    pb: \"1rem\",\n    color: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 23\n    }\n  }, listConnection === null || listConnection === void 0 ? void 0 : listConnection.table_name), listQuery === null || listQuery === void 0 ? void 0 : listQuery.map((row, index) => __jsx(MoreInfoSidebarCard, {\n    mb: \"0.5rem\",\n    px: \"0.5rem\",\n    py: \"0.75rem\",\n    overflowX: \"auto\",\n    key: `${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 25\n    }\n  }, __jsx(Collapse, {\n    startingHeight: 100,\n    isOpen: isContactListCardOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 27\n    }\n  }, Object.keys(row.columns).map((column, index) => {\n    if (column === '_system') {\n      return null;\n    }\n\n    const listColumnNames = {};\n\n    for (let item of listConnectionInfo.columns) {\n      listColumnNames[item.id] = item.name;\n    }\n\n    return __jsx(Stack, {\n      isInline: true,\n      mb: \"0.5rem\",\n      key: `${index}`,\n      alignItems: \"flex-start\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 33\n      }\n    }, __jsx(SmallText, {\n      width: \"60px\",\n      lineHeight: \"20px\",\n      color: \"gray.900\",\n      fontWeight: \"bold\",\n      textTransform: \"capitalize\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 35\n      }\n    }, listColumnNames[column], \":\"), __jsx(SmallText, {\n      flex: 1,\n      color: \"gray.600\",\n      wordBreak: \"break-all\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 35\n      }\n    }, row.columns[column]));\n  })), __jsx(Button, {\n    size: \"sm\",\n    variant: \"link\",\n    variantColor: \"blue\",\n    onClick: onToggleContactListCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 27\n    }\n  }, \"Show \", isContactListCardOpen ? 'less' : 'more')))), !!(notes !== null && notes !== void 0 && notes.length) && __jsx(Box, {\n    mb: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 21\n    }\n  }, __jsx(Subtitle, {\n    pb: \"1rem\",\n    color: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 23\n    }\n  }, \"Cases\"), notes === null || notes === void 0 ? void 0 : notes.map(note => {\n    var _sender$image_url3;\n\n    return __jsx(MoreInfoSidebarCard, {\n      key: note.uuid,\n      mb: \"0.5rem\",\n      py: \"0.75rem\",\n      px: \"0.5rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 25\n      }\n    }, __jsx(Stack, {\n      mb: \"0.5rem\",\n      isInline: true,\n      alignItems: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 27\n      }\n    }, __jsx(Avatar, {\n      size: \"sm\",\n      color: \"white\",\n      name: sender === null || sender === void 0 ? void 0 : sender.name,\n      src: (_sender$image_url3 = sender === null || sender === void 0 ? void 0 : sender.image_url) !== null && _sender$image_url3 !== void 0 ? _sender$image_url3 : undefined,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 29\n      }\n    }), __jsx(Box, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 29\n      }\n    }, __jsx(SmallText, {\n      color: \"gray.900\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 31\n      }\n    }, sender === null || sender === void 0 ? void 0 : sender.name), __jsx(XSmallText, {\n      color: \"gray.400\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 31\n      }\n    }, format(new Date(note.created_datetime), 'do MMM yyyy')))), __jsx(SmallText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 27\n      }\n    }, note.content));\n  }))), isEditSectionOpen && __jsx(MotionBox, {\n    layout: true,\n    exit: {\n      opacity: 0,\n      x: -302\n    },\n    animate: {\n      opacity: 1,\n      x: 0\n    },\n    initial: {\n      opacity: 0,\n      x: 302\n    },\n    transition: {\n      ease: 'easeIn'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 580,\n      columnNumber: 17\n    }\n  }, __jsx(MoreInfoSidebarCard, {\n    px: \"0.5rem\",\n    position: \"relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 587,\n      columnNumber: 19\n    }\n  }, __jsx(Button, {\n    top: \"8px\",\n    size: \"xs\",\n    left: \"8px\",\n    variant: \"ghost\",\n    position: \"absolute\",\n    variantColor: \"blue\",\n    onClick: onCloseEditSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 21\n    }\n  }, __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 23\n    }\n  }, __jsx(Icon, {\n    name: \"inbox-chevron-left\",\n    size: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 25\n    }\n  }), __jsx(SmallText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 25\n    }\n  }, \"Back\"))), __jsx(Flex, {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 21\n    }\n  }, __jsx(Avatar, {\n    size: \"lg\",\n    showBorder: true,\n    mb: \"1.25rem\",\n    color: \"white\",\n    name: sender === null || sender === void 0 ? void 0 : sender.name,\n    src: (_sender$image_url4 = sender === null || sender === void 0 ? void 0 : sender.image_url) !== null && _sender$image_url4 !== void 0 ? _sender$image_url4 : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 603,\n      columnNumber: 23\n    }\n  }), __jsx(BodyText, {\n    pb: \"0.25rem\",\n    color: \"gray.900\",\n    textAlign: \"center\",\n    fontWeight: \"medium\",\n    wordBreak: \"break-all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 611,\n      columnNumber: 23\n    }\n  }, sender === null || sender === void 0 ? void 0 : sender.name), __jsx(SmallText, {\n    color: \"gray.500\",\n    textAlign: \"center\",\n    wordBreak: \"break-all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 23\n    }\n  }, sender === null || sender === void 0 ? void 0 : sender.platform_nick)), !!contactId && __jsx(React.Fragment, null, __jsx(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 626,\n      columnNumber: 25\n    }\n  }, __jsx(Stack, {\n    pt: \"2.5rem\",\n    pb: \"1rem\",\n    spacing: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 27\n    }\n  }, columnsWithValue.map(column => {\n    let FieldComponent = getFilterFieldRenderer(column.type);\n    return __jsx(Box, {\n      key: column.id,\n      position: \"relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 33\n      }\n    }, __jsx(FormLabel, {\n      p: \"0 8px\",\n      top: \"-8px\",\n      left: \"16px\",\n      zIndex: 2,\n      opacity: 1,\n      rounded: \"8px\",\n      position: \"absolute\",\n      backgroundColor: \"white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 35\n      }\n    }, column.label), __jsx(FieldComponent, {\n      column: column,\n      inputProps: {\n        height: '2.5rem'\n      },\n      value: rowData === null || rowData === void 0 ? void 0 : rowData.columns[column.id],\n      updateCellValue: value => updateContactData({\n        id: rowData.id,\n        table_id: contactList.id,\n        columns: _objectSpread(_objectSpread({}, rowData.columns), {}, {\n          [column.id]: value\n        })\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 35\n      }\n    }));\n  }))), !!columnsWithoutValue.length && __jsx(React.Fragment, null, __jsx(Menu, {\n    menuListProps: {\n      zIndex: 1000,\n      placement: 'bottom-start'\n    },\n    options: columnsWithoutValue,\n    renderItem: column => __jsx(MenuItem, {\n      key: column.id,\n      onClick: () => {\n        setColumnsWithValue([...columnsWithValue, column]);\n        setColumnsWithoutValue(columnsWithoutValue.filter(item => item.id !== column.id));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 33\n      }\n    }, __jsx(SmallText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 35\n      }\n    }, column.label)),\n    menuButtonProps: {\n      rounded: '4px',\n      color: 'blue.500',\n      _hover: {\n        bg: 'blue.100'\n      },\n      children: __jsx(Stack, {\n        isInline: true,\n        alignItems: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 35\n        }\n      }, __jsx(Icon, {\n        name: \"inbox-plus-circle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 37\n        }\n      }), __jsx(BodyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 691,\n          columnNumber: 37\n        }\n      }, \"Add a property\"))\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 29\n    }\n  }))), !contactId && __jsx(Stack, {\n    p: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 701,\n      columnNumber: 23\n    }\n  }, __jsx(Button, {\n    size: \"xs\",\n    variant: \"ghost\",\n    variantColor: \"blue\",\n    leftIcon: \"small-add\",\n    onClick: handleAddContact,\n    isLoading: isAddingToContactList || isAddingProfileToContact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 702,\n      columnNumber: 25\n    }\n  }, \"Add contact\"))))))));\n};\nconst MoreInfoSidebarContainer = styled.div`\n  background-color: ${props => props.background};\n\n  .box {\n    overflow-y: auto;\n    position: relative;\n    padding: 0 1rem;\n    overflow-x: hidden;\n    background-color: ${props => props.background};\n    border-left: 1px solid #f4f6f9;\n  }\n\n  .handle {\n    top: 0;\n    left: 0;\n    width: 3px;\n    position: absolute;\n    display: inline-block;\n    background-color: transparent;\n    height: ${window.innerHeight}px;\n  }\n\n  .handle:hover {\n    cursor: e-resize;\n    background-color: #3525e6;\n  }\n`;\nconst MotionBox = motion(Box);","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/components/more-info/MoreInfoSidebar.tsx"],"names":["Avatar","Box","Collapse","Flex","Icon","Stack","Tooltip","useDisclosure","useToast","styled","getFilterFieldRenderer","querySegment","selectContactList","selectLists","createRow","filterRows","getRow","updateRow","BodyText","Button","FormLabel","Menu","MenuItem","SmallText","Subtitle","ToastBox","XSmallText","format","AnimateSharedLayout","motion","React","useEffect","useMemo","useState","useInfiniteQuery","useMutation","useQuery","useQueryClient","useSelector","ResizableBox","channelOptions","addProfileToContact","getConversationNotes","getInboxConnections","getThreadByID","MoreInfoSidebarCard","MoreInfoSidebar","props","thread","threadProp","handle","toast","isOpen","isEditSectionOpen","onOpen","onOpenEditSection","onClose","onCloseEditSection","isDataModelCardOpen","onToggle","onToggleDataModelCard","isContactListCardOpen","onToggleContactListCard","queryClient","lists","contactList","data","uuid","thread_id","initialData","enabled","sender","sender_id","width","setWidth","section","setSection","setIsOpen","staticWidth","setStaticWidth","background","setBackground","contactId","setContactId","contact_id","columnsWithValue","setColumnsWithValue","columnsWithoutValue","setColumnsWithoutValue","fetchConversationNotes","pageParam","queryKey","customer_id","page","mutate","updateContactData","payload","onMutate","cancelQueries","previousRowData","getQueryData","newRowData","columns","setQueryData","onError","err","context","position","render","message","onSettled","invalidateQueries","onAddProfileToContact","isLoading","isAddingProfileToContact","contactID","error","onSuccess","profile","onAddToContactList","isAddingToContactList","table_id","row","id","rowData","getNextPageParam","lastPage","meta","page_count","undefined","connections","listConnection","find","item","listConnectionInfo","listFilters","variables","filters","filter","channel","channel_name","dataModelConnection","data_model_id","dataModelFilters","dataModelQuery","columnID","column","operator","data_model","value","platform_nick","listQuery","columnType","name","limit","subOperator","notes","pages","reduce","acc","getContactRowData","nameColumn","toLowerCase","phoneNumberColumn","type","emailColumn","handleAddContact","handleResize","e","d","size","Object","keys","includes","toString","window","innerHeight","image_url","opacity","x","ease","icon","length","data_model_name","map","model","index","modelItem","table_name","listColumnNames","note","Date","created_datetime","content","FieldComponent","label","height","zIndex","placement","rounded","color","_hover","bg","children","MoreInfoSidebarContainer","div","MotionBox"],"mappings":"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","sourcesContent":["import {\n  Avatar,\n  Box,\n  Collapse,\n  Flex,\n  Icon,\n  Stack,\n  Tooltip,\n  useDisclosure,\n  useToast,\n} from '@chakra-ui/core';\nimport styled from '@emotion/styled';\nimport { getFilterFieldRenderer, querySegment } from 'app/authenticated-app/lists';\nimport { selectContactList, selectLists } from 'app/authenticated-app/lists/lists.slice';\nimport { createRow, filterRows, getRow, updateRow } from 'app/authenticated-app/tables';\nimport {\n  BodyText,\n  Button,\n  FormLabel,\n  Menu,\n  MenuItem,\n  SmallText,\n  Subtitle,\n  ToastBox,\n  XSmallText,\n} from 'app/components';\nimport { AxiosError } from 'axios';\nimport { format } from 'date-fns';\nimport { AnimateSharedLayout, motion } from 'framer-motion';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useInfiniteQuery, useMutation, useQuery, useQueryClient } from 'react-query';\nimport { useSelector } from 'react-redux';\nimport { ResizableBox } from 'react-resizable';\nimport { OptionTypeBase } from 'react-select';\nimport { channelOptions } from '../..';\nimport {\n  addProfileToContact,\n  getConversationNotes,\n  getInboxConnections,\n  getThreadByID,\n} from '../../inbox.service';\nimport { InboxConnection, NoteSchema, ThreadSchema } from '../../inbox.types';\nimport { MoreInfoSidebarCard } from './MoreInfoSidebarCard';\n\nexport type MoreInfoSidebarProps = { thread?: ThreadSchema };\n\nexport const MoreInfoSidebar = (props: MoreInfoSidebarProps) => {\n  const { thread: threadProp } = props;\n  const handle = () => {\n    return <div className=\"handle\" />;\n  };\n\n  const toast = useToast();\n  const {\n    isOpen: isEditSectionOpen,\n    onOpen: onOpenEditSection,\n    onClose: onCloseEditSection,\n  } = useDisclosure();\n\n  const { isOpen: isDataModelCardOpen, onToggle: onToggleDataModelCard } = useDisclosure();\n  const { isOpen: isContactListCardOpen, onToggle: onToggleContactListCard } = useDisclosure();\n\n  const queryClient = useQueryClient();\n  const lists: any = useSelector(selectLists);\n  const contactList = useSelector(selectContactList);\n\n  const { data: thread } = useQuery<ThreadSchema, AxiosError>(\n    ['threads', threadProp?.uuid],\n    () => getThreadByID({ thread_id: threadProp?.uuid }),\n    {\n      initialData: threadProp,\n      enabled: !!threadProp?.uuid,\n    },\n  );\n\n  const { sender, sender_id } = thread ?? {};\n\n  const [width, setWidth] = useState(80);\n  const [section, setSection] = useState(0);\n  const [isOpen, setIsOpen] = useState(false);\n  const [staticWidth, setStaticWidth] = useState(80);\n  const [background, setBackground] = useState('white');\n  const [contactId, setContactId] = useState(sender?.contact_id);\n  const [columnsWithValue, setColumnsWithValue] = useState<any[]>([]);\n  const [columnsWithoutValue, setColumnsWithoutValue] = useState<any[]>([]);\n\n  const fetchConversationNotes = async ({ pageParam = 1, queryKey }: any) => {\n    const customer_id = queryKey[1];\n    return getConversationNotes({ page: pageParam, customer_id });\n  };\n\n  const { mutate: updateContactData } = useMutation<any, AxiosError, any, any>(\n    (payload: { id: string; columns: OptionTypeBase }) => updateRow(payload),\n    {\n      onMutate: async payload => {\n        await queryClient.cancelQueries(['row-data', contactId]);\n\n        const previousRowData: any = queryClient.getQueryData(['row-data', contactId]);\n        const newRowData = { ...previousRowData, columns: payload.columns };\n\n        queryClient.setQueryData(['row-data', contactId], newRowData);\n\n        return { previousRowData, newRowData };\n      },\n      onError: (err, newRowData, context) => {\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => <ToastBox onClose={onClose} message={err.message} />,\n        });\n        queryClient.setQueryData(['row-data', contactId], context.previousRowData);\n      },\n      onSettled: () => {\n        queryClient.invalidateQueries(['row-data', contactId]);\n        queryClient.invalidateQueries('threads');\n        queryClient.invalidateQueries(['list-query', thread?.uuid]);\n      },\n    },\n  );\n\n  const { mutate: onAddProfileToContact, isLoading: isAddingProfileToContact } = useMutation<\n    any,\n    AxiosError,\n    any,\n    any\n  >(contactID => addProfileToContact({ contactID, customer_id: sender_id ?? '' }), {\n    onError: error => {\n      toast({\n        position: 'bottom-left',\n        render: () => <ToastBox message={error.message} />,\n      });\n    },\n    onSuccess: data => {\n      setContactId(data.profile.contact_id);\n      toast({\n        position: 'bottom-left',\n        render: () => <ToastBox message=\"Profile added to contact list\" status=\"success\" />,\n      });\n    },\n  });\n\n  const { mutate: onAddToContactList, isLoading: isAddingToContactList } = useMutation<\n    any,\n    AxiosError,\n    any,\n    any\n  >(({ columns, table_id }) => createRow({ columns, table_id }), {\n    onError: error => {\n      toast({\n        position: 'bottom-left',\n        render: () => <ToastBox message={error.message} />,\n      });\n    },\n    onSuccess: data => {\n      const contactID = data?.data?.row?.id;\n      onAddProfileToContact(contactID);\n    },\n  });\n\n  const { data: rowData } = useQuery(['row-data', contactId], () => getRow(contactId ?? ''), {\n    enabled: !!contactId,\n  });\n\n  const { data } = useInfiniteQuery<any, AxiosError>(['notes', sender_id], fetchConversationNotes, {\n    getNextPageParam: lastPage => {\n      return lastPage.data.meta.page < lastPage.data.meta.page_count\n        ? lastPage.data.meta.page + 1\n        : undefined;\n    },\n    enabled: !!sender_id,\n  });\n\n  const { data: connections } = useQuery<InboxConnection[], any>(\n    'inbox-connections',\n    getInboxConnections,\n    {\n      enabled: !!thread?.uuid,\n    },\n  );\n\n  const listConnection = useMemo(() => {\n    return connections?.find(item => item.table_id);\n  }, [connections]);\n\n  const listConnectionInfo = useMemo(() => {\n    if (listConnection && listConnection.table_id) {\n      return lists[listConnection?.table_id];\n    }\n    return '';\n  }, [listConnection, lists]);\n\n  const listFilters = useMemo(() => {\n    return listConnection?.variables.filters.find(\n      filter => filter.channel === thread?.sender?.channel_name,\n    );\n  }, [listConnection, thread]);\n\n  const dataModelConnection = useMemo(() => {\n    return connections?.find(item => item.data_model_id);\n  }, [connections]);\n\n  const dataModelFilters = useMemo(() => {\n    return dataModelConnection?.variables.filters.find(\n      filter => filter.channel === thread?.sender?.channel_name,\n    );\n  }, [dataModelConnection, thread]);\n\n  const { data: dataModelQuery } = useQuery(\n    ['data-model-query', thread?.uuid],\n    () => {\n      const { columnID: column, operator } = dataModelFilters ?? {};\n      return querySegment({\n        data_model: dataModelConnection?.data_model_id,\n        filters: [\n          {\n            column,\n            operator,\n            value: thread?.sender?.platform_nick,\n          },\n        ],\n      });\n    },\n    {\n      enabled: !!contactId && !!dataModelConnection && !!dataModelFilters,\n    },\n  );\n\n  const { data: listQuery } = useQuery(\n    ['list-query', thread?.uuid],\n    () => {\n      const { columnID, operator, columnType, name } = listFilters ?? {};\n      return filterRows({\n        page: 1,\n        limit: 200,\n        table_id: listConnection?.table_id,\n        filters: [\n          {\n            name,\n            columnID,\n            operator,\n            columnType,\n            subOperator: null,\n            value: thread?.sender?.platform_nick,\n          },\n        ],\n      });\n    },\n    {\n      enabled: !!contactId && !!listConnection && !!listFilters,\n    },\n  );\n\n  const notes = data?.pages?.reduce((acc, page) => [...acc, ...page.data.notes], []) ?? [];\n\n  const getContactRowData = () => {\n    const nameColumn = contactList.columns.find((item: any) => item.name.toLowerCase() === 'name');\n    const phoneNumberColumn = contactList.columns.find(\n      (item: any) => item.type.toLowerCase() === 'phone number',\n    );\n    const emailColumn = contactList.columns.find(\n      (item: any) => item.type.toLowerCase() === 'email',\n    );\n\n    let columns = {\n      [nameColumn.id]: sender?.name,\n    };\n\n    if (sender?.channel_name === 'email' && emailColumn) {\n      columns[emailColumn.id] = sender?.platform_nick;\n    }\n    if (\n      phoneNumberColumn &&\n      (sender?.channel_name === 'phone' ||\n        sender?.channel_name === 'whatsapp' ||\n        sender?.channel_name === 'whatsappWeb')\n    ) {\n      columns[phoneNumberColumn.id] = sender?.platform_nick;\n    }\n\n    return columns;\n  };\n\n  const handleAddContact = async () => {\n    const columns = getContactRowData();\n    onAddToContactList({\n      columns,\n      table_id: contactList.id,\n    });\n  };\n\n  const handleResize = (e: any, d: any) => {\n    if (d.size.width === 302) {\n      setIsOpen(true);\n    }\n    if (d.size.width === 80) {\n      setIsOpen(false);\n    }\n    setWidth(d.size.width);\n  };\n\n  useEffect(() => {\n    setContactId(sender?.contact_id);\n  }, [sender]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setWidth(302);\n      setStaticWidth(302);\n    } else {\n      setWidth(80);\n      setStaticWidth(80);\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (width <= 200) {\n      setSection(0);\n      setBackground('white');\n    } else {\n      setSection(1);\n      setBackground('#F4F6F9');\n    }\n  }, [width]);\n\n  useEffect(() => {\n    if (rowData) {\n      let columnsWithValue = contactList.columns.filter((column: any) =>\n        Object.keys(rowData?.columns).includes(column.id.toString()),\n      );\n      let columnsWithoutValue = contactList.columns.filter(\n        (column: any) => !Object.keys(rowData?.columns).includes(column.id.toString()),\n      );\n\n      setColumnsWithValue(columnsWithValue);\n      setColumnsWithoutValue(columnsWithoutValue);\n    }\n  }, [contactList.columns, rowData, contactId]);\n\n  return (\n    <MoreInfoSidebarContainer background={background}>\n      <ResizableBox\n        axis=\"x\"\n        className=\"box\"\n        handle={handle()}\n        width={staticWidth}\n        resizeHandles={['w']}\n        onResize={handleResize}\n        minConstraints={[80, 100]}\n        height={window.innerHeight}\n        maxConstraints={[302, window.innerHeight]}\n      >\n        {section === 0 ? (\n          <Flex my=\"4.75rem\" flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\n            <Avatar\n              size=\"sm\"\n              color=\"white\"\n              cursor=\"pointer\"\n              name={sender?.name}\n              onClick={() => setIsOpen(true)}\n              src={sender?.image_url ?? undefined}\n            />\n          </Flex>\n        ) : (\n          <Box mt=\"2.5rem\" mb=\"10rem\">\n            {isOpen && (\n              <Button\n                top=\"0\"\n                size=\"sm\"\n                right=\"0.5rem\"\n                variant=\"ghost\"\n                position=\"absolute\"\n                onClick={() => setIsOpen(false)}\n              >\n                <Icon size=\"1rem\" name=\"inbox-close\" color=\"gray.800\" />\n              </Button>\n            )}\n            <AnimateSharedLayout>\n              {!isEditSectionOpen && (\n                <MotionBox\n                  layout\n                  exit={{ opacity: 0, x: -302 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  initial={{ opacity: 0, x: 302 }}\n                  transition={{ ease: 'easeOut' }}\n                >\n                  <MoreInfoSidebarCard mb=\"2rem\" position=\"relative\">\n                    <Tooltip\n                      zIndex={10000}\n                      placement=\"bottom\"\n                      label=\"Edit Contact\"\n                      aria-label=\"edit-contact\"\n                    >\n                      <Button\n                        px=\"0\"\n                        size=\"xs\"\n                        width=\"unset\"\n                        top=\"0.25rem\"\n                        rounded=\"50%\"\n                        height=\"unset\"\n                        right=\"0.5rem\"\n                        display=\"flex\"\n                        bg=\"transparent\"\n                        variant=\"unstyled\"\n                        position=\"absolute\"\n                        alignItems=\"center\"\n                        justifyContent=\"center\"\n                        onClick={onOpenEditSection}\n                      >\n                        <Icon name=\"inbox-edit-contact-info\" color=\"blue.400\" size=\"1.5rem\" />\n                      </Button>\n                    </Tooltip>\n                    <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\">\n                      <Avatar\n                        size=\"lg\"\n                        showBorder\n                        mb=\"1.25rem\"\n                        color=\"white\"\n                        name={sender?.name}\n                        src={sender?.image_url ?? undefined}\n                      />\n\n                      <Icon\n                        pb=\"0.5rem\"\n                        size=\"1.5rem\"\n                        color=\"gray.600\"\n                        name={sender?.channel_name ? channelOptions[sender?.channel_name].icon : ''}\n                      />\n                      <BodyText\n                        pb=\"0.25rem\"\n                        color=\"gray.900\"\n                        textAlign=\"center\"\n                        fontWeight=\"medium\"\n                        wordBreak=\"break-all\"\n                      >\n                        {sender?.name}\n                      </BodyText>\n                      <SmallText wordBreak=\"break-all\" color=\"gray.500\" textAlign=\"center\">\n                        {sender?.platform_nick}\n                      </SmallText>\n                    </Flex>\n                  </MoreInfoSidebarCard>\n\n                  {!!dataModelQuery?.length && (\n                    <Box mb=\"2rem\">\n                      <Subtitle pb=\"1rem\" color=\"black\">\n                        {dataModelConnection?.data_model_name}\n                      </Subtitle>\n                      {dataModelQuery?.map((model: any, index: number) => (\n                        <MoreInfoSidebarCard\n                          mb=\"0.5rem\"\n                          px=\"0.5rem\"\n                          py=\"0.75rem\"\n                          overflowX=\"auto\"\n                          key={`${index}`}\n                        >\n                          <Collapse startingHeight={100} isOpen={isDataModelCardOpen}>\n                            {Object.keys(model).map((modelItem, index) => (\n                              <Stack\n                                isInline\n                                mb=\"0.5rem\"\n                                flexWrap=\"wrap\"\n                                key={`${index}`}\n                                alignItems=\"flex-start\"\n                              >\n                                <SmallText\n                                  color=\"gray.900\"\n                                  fontWeight=\"bold\"\n                                  lineHeight=\"20px\"\n                                  textTransform=\"capitalize\"\n                                >\n                                  {modelItem}:\n                                </SmallText>\n                                <SmallText flex={1} wordBreak=\"break-all\" color=\"gray.600\">\n                                  {model[modelItem]}\n                                </SmallText>\n                              </Stack>\n                            ))}\n                          </Collapse>\n\n                          <Button\n                            size=\"sm\"\n                            variant=\"link\"\n                            variantColor=\"blue\"\n                            onClick={onToggleDataModelCard}\n                          >\n                            Show {isDataModelCardOpen ? 'less' : 'more'}\n                          </Button>\n                        </MoreInfoSidebarCard>\n                      ))}\n                    </Box>\n                  )}\n                  {!!listQuery?.length && (\n                    <Box mb=\"2rem\">\n                      <Subtitle pb=\"1rem\" color=\"black\">\n                        {listConnection?.table_name}\n                      </Subtitle>\n                      {listQuery?.map((row: any, index: number) => (\n                        <MoreInfoSidebarCard\n                          mb=\"0.5rem\"\n                          px=\"0.5rem\"\n                          py=\"0.75rem\"\n                          overflowX=\"auto\"\n                          key={`${index}`}\n                        >\n                          <Collapse startingHeight={100} isOpen={isContactListCardOpen}>\n                            {Object.keys(row.columns).map((column, index) => {\n                              if (column === '_system') {\n                                return null;\n                              }\n                              const listColumnNames: { [key: string]: string } = {};\n\n                              for (let item of listConnectionInfo.columns) {\n                                listColumnNames[item.id] = item.name;\n                              }\n\n                              return (\n                                <Stack\n                                  isInline\n                                  mb=\"0.5rem\"\n                                  key={`${index}`}\n                                  alignItems=\"flex-start\"\n                                >\n                                  <SmallText\n                                    width=\"60px\"\n                                    lineHeight=\"20px\"\n                                    color=\"gray.900\"\n                                    fontWeight=\"bold\"\n                                    textTransform=\"capitalize\"\n                                  >\n                                    {listColumnNames[column]}:\n                                  </SmallText>\n                                  <SmallText flex={1} color=\"gray.600\" wordBreak=\"break-all\">\n                                    {row.columns[column]}\n                                  </SmallText>\n                                </Stack>\n                              );\n                            })}\n                          </Collapse>\n\n                          <Button\n                            size=\"sm\"\n                            variant=\"link\"\n                            variantColor=\"blue\"\n                            onClick={onToggleContactListCard}\n                          >\n                            Show {isContactListCardOpen ? 'less' : 'more'}\n                          </Button>\n                        </MoreInfoSidebarCard>\n                      ))}\n                    </Box>\n                  )}\n                  {!!notes?.length && (\n                    <Box mb=\"2rem\">\n                      <Subtitle pb=\"1rem\" color=\"black\">\n                        Cases\n                      </Subtitle>\n                      {notes?.map((note: NoteSchema) => (\n                        <MoreInfoSidebarCard key={note.uuid} mb=\"0.5rem\" py=\"0.75rem\" px=\"0.5rem\">\n                          <Stack mb=\"0.5rem\" isInline alignItems=\"center\">\n                            <Avatar\n                              size=\"sm\"\n                              color=\"white\"\n                              name={sender?.name}\n                              src={sender?.image_url ?? undefined}\n                            />\n                            <Box>\n                              <SmallText color=\"gray.900\">{sender?.name}</SmallText>\n                              <XSmallText color=\"gray.400\">\n                                {format(new Date(note.created_datetime), 'do MMM yyyy')}\n                              </XSmallText>\n                            </Box>\n                          </Stack>\n                          <SmallText>{note.content}</SmallText>\n                        </MoreInfoSidebarCard>\n                      ))}\n                    </Box>\n                  )}\n                </MotionBox>\n              )}\n              {isEditSectionOpen && (\n                <MotionBox\n                  layout\n                  exit={{ opacity: 0, x: -302 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  initial={{ opacity: 0, x: 302 }}\n                  transition={{ ease: 'easeIn' }}\n                >\n                  <MoreInfoSidebarCard px=\"0.5rem\" position=\"relative\">\n                    <Button\n                      top=\"8px\"\n                      size=\"xs\"\n                      left=\"8px\"\n                      variant=\"ghost\"\n                      position=\"absolute\"\n                      variantColor=\"blue\"\n                      onClick={onCloseEditSection}\n                    >\n                      <Stack isInline alignItems=\"center\">\n                        <Icon name=\"inbox-chevron-left\" size=\"1rem\" />\n                        <SmallText>Back</SmallText>\n                      </Stack>\n                    </Button>\n                    <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\">\n                      <Avatar\n                        size=\"lg\"\n                        showBorder\n                        mb=\"1.25rem\"\n                        color=\"white\"\n                        name={sender?.name}\n                        src={sender?.image_url ?? undefined}\n                      />\n                      <BodyText\n                        pb=\"0.25rem\"\n                        color=\"gray.900\"\n                        textAlign=\"center\"\n                        fontWeight=\"medium\"\n                        wordBreak=\"break-all\"\n                      >\n                        {sender?.name}\n                      </BodyText>\n                      <SmallText color=\"gray.500\" textAlign=\"center\" wordBreak=\"break-all\">\n                        {sender?.platform_nick}\n                      </SmallText>\n                    </Flex>\n                    {!!contactId && (\n                      <>\n                        <form>\n                          <Stack pt=\"2.5rem\" pb=\"1rem\" spacing=\"1.5rem\">\n                            {columnsWithValue.map((column: any) => {\n                              let FieldComponent = getFilterFieldRenderer(column.type);\n                              return (\n                                <Box key={column.id} position=\"relative\">\n                                  <FormLabel\n                                    p=\"0 8px\"\n                                    top=\"-8px\"\n                                    left=\"16px\"\n                                    zIndex={2}\n                                    opacity={1}\n                                    rounded=\"8px\"\n                                    position=\"absolute\"\n                                    backgroundColor=\"white\"\n                                  >\n                                    {column.label}\n                                  </FormLabel>\n                                  <FieldComponent\n                                    column={column}\n                                    inputProps={{\n                                      height: '2.5rem',\n                                    }}\n                                    value={rowData?.columns[column.id]}\n                                    updateCellValue={(value: string) =>\n                                      updateContactData({\n                                        id: rowData.id,\n                                        table_id: contactList.id,\n                                        columns: { ...rowData.columns, [column.id]: value },\n                                      })\n                                    }\n                                  />\n                                </Box>\n                              );\n                            })}\n                          </Stack>\n                        </form>\n                        {!!columnsWithoutValue.length && (\n                          <>\n                            <Menu\n                              menuListProps={{\n                                zIndex: 1000,\n                                placement: 'bottom-start',\n                              }}\n                              options={columnsWithoutValue}\n                              renderItem={column => (\n                                <MenuItem\n                                  key={column.id}\n                                  onClick={() => {\n                                    setColumnsWithValue([...columnsWithValue, column]);\n                                    setColumnsWithoutValue(\n                                      columnsWithoutValue.filter(item => item.id !== column.id),\n                                    );\n                                  }}\n                                >\n                                  <SmallText>{column.label}</SmallText>\n                                </MenuItem>\n                              )}\n                              menuButtonProps={{\n                                rounded: '4px',\n                                color: 'blue.500',\n                                _hover: { bg: 'blue.100' },\n                                children: (\n                                  <Stack isInline alignItems=\"center\">\n                                    <Icon name=\"inbox-plus-circle\" />\n                                    <BodyText>Add a property</BodyText>\n                                  </Stack>\n                                ),\n                              }}\n                            />\n                          </>\n                        )}\n                      </>\n                    )}\n                    {!contactId && (\n                      <Stack p=\"0.5rem\">\n                        <Button\n                          size=\"xs\"\n                          variant=\"ghost\"\n                          variantColor=\"blue\"\n                          leftIcon=\"small-add\"\n                          onClick={handleAddContact}\n                          isLoading={isAddingToContactList || isAddingProfileToContact}\n                        >\n                          Add contact\n                        </Button>\n                      </Stack>\n                    )}\n                  </MoreInfoSidebarCard>\n                </MotionBox>\n              )}\n            </AnimateSharedLayout>\n          </Box>\n        )}\n      </ResizableBox>\n    </MoreInfoSidebarContainer>\n  );\n};\n\nconst MoreInfoSidebarContainer = styled.div<{ background: string }>`\n  background-color: ${props => props.background};\n\n  .box {\n    overflow-y: auto;\n    position: relative;\n    padding: 0 1rem;\n    overflow-x: hidden;\n    background-color: ${props => props.background};\n    border-left: 1px solid #f4f6f9;\n  }\n\n  .handle {\n    top: 0;\n    left: 0;\n    width: 3px;\n    position: absolute;\n    display: inline-block;\n    background-color: transparent;\n    height: ${window.innerHeight}px;\n  }\n\n  .handle:hover {\n    cursor: e-resize;\n    background-color: #3525e6;\n  }\n`;\n\nconst MotionBox = motion(Box);\n"]},"metadata":{},"sourceType":"module"}