{"ast":null,"code":"var _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/component/lists/components/lists/create-list/stages/upload-prompt.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Box, Checkbox, IconButton } from '@chakra-ui/core/dist';\nimport { FileUploader, Button } from 'app/components';\nconst description_map = {\n  csv: 'Get started quickly by importing a CSV file. Most spreadsheets can be easily exported as a CSV.',\n  'ms-excel': 'Get started quickly by importing an .xls or .xlsx file.',\n  'apple-numbers': 'You will first need to export the from Apple Numbers as a .CSV file in order to import it into a new list.',\n  asana: 'You will first need to export the data from Asana as a .CSV file in order to import it into a new list.',\n  trello: 'You will first need to export the data from Trello as a .CSV file in order to import it into a new list.',\n  'ms-access': 'You will first need to export the data as a .CSV file in order to import it into a new list.',\n  'google-sheets': 'Import data from Google Sheets',\n  calendar: 'Import data from your Calendar',\n  contacts: 'Import data from your Contacts',\n  mysql: 'Import data from your MySQL database'\n};\nexport const CreateListUploadPrompt = props => {\n  const {\n    0: termsAgreed,\n    1: setTermsAgreed\n  } = useState(false);\n  const {\n    importType,\n    file,\n    uploadLoading,\n    handleFileImport\n  } = props;\n\n  const handleUpload = ([uploaded_file]) => props.handleUpload(uploaded_file);\n\n  const clearFile = () => props.handleUpload(null);\n\n  useEffect(() => {\n    setTermsAgreed(false);\n  }, [file]);\n  if (!importType) return __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 27\n    }\n  });\n  return __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    className: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, description_map[importType]), __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"row\",\n    marginTop: \"25px\",\n    width: \"fit-content\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, __jsx(FileUploader, {\n    maxSize: 52428800,\n    onUpload: handleUpload,\n    accept: importType === 'ms-excel' ? '.xls, .xlsx' : '.csv',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    variant: \"link\",\n    variantColor: \"blue\",\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, importType === 'ms-excel' ? 'Select an Excel file' : 'Select a .CSV file')), file && __jsx(Box, {\n    className: \"file-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, file.name, __jsx(IconButton, {\n    \"aria-label\": \"clear\",\n    icon: \"small-close\",\n    size: \"xs\",\n    ml: \"10px\",\n    onClick: clearFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }))), file && __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"flex-start\",\n    mt: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, __jsx(Checkbox, {\n    mr: \"15px\",\n    mt: \"3px\",\n    isChecked: termsAgreed,\n    onChange: () => setTermsAgreed(!termsAgreed),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }), __jsx(Box, {\n    className: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, \"I agree that all contacts in this import are expecting to hear from me or my organisation. I have a prior relationship with these contacts and I have emailed or messaged them at least once in the past year. I can confirm that this list wasn\\u2019t purchased, rented, appended, or provided by a third party.\")), __jsx(Box, {\n    mt: \"15px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    variant: \"solid\",\n    variantColor: \"blue\",\n    size: \"sm\",\n    isDisabled: !termsAgreed,\n    onClick: () => handleFileImport(),\n    isLoading: uploadLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, \"Upload\"))));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/component/lists/components/lists/create-list/stages/upload-prompt.tsx"],"names":["React","useEffect","useState","Box","Checkbox","IconButton","FileUploader","Button","description_map","csv","asana","trello","calendar","contacts","mysql","CreateListUploadPrompt","props","termsAgreed","setTermsAgreed","importType","file","uploadLoading","handleFileImport","handleUpload","uploaded_file","clearFile","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Box, Checkbox, IconButton } from '@chakra-ui/core/dist';\nimport { ListImportType } from '../../../../../../lists.types';\nimport { FileUploader, Button } from 'app/components';\n\nconst description_map = {\n  csv:\n    'Get started quickly by importing a CSV file. Most spreadsheets can be easily exported as a CSV.',\n  'ms-excel': 'Get started quickly by importing an .xls or .xlsx file.',\n  'apple-numbers':\n    'You will first need to export the from Apple Numbers as a .CSV file in order to import it into a new list.',\n  asana:\n    'You will first need to export the data from Asana as a .CSV file in order to import it into a new list.',\n  trello:\n    'You will first need to export the data from Trello as a .CSV file in order to import it into a new list.',\n  'ms-access':\n    'You will first need to export the data as a .CSV file in order to import it into a new list.',\n  'google-sheets': 'Import data from Google Sheets',\n  calendar: 'Import data from your Calendar',\n  contacts: 'Import data from your Contacts',\n  mysql: 'Import data from your MySQL database',\n};\n\ninterface Props {\n  file: File | null;\n  importType: ListImportType | null;\n  handleUpload: Function;\n  handleFileImport: Function;\n  uploadLoading: boolean;\n}\n\nexport const CreateListUploadPrompt = (props: Props) => {\n  const [termsAgreed, setTermsAgreed] = useState<boolean>(false);\n\n  const { importType, file, uploadLoading, handleFileImport } = props;\n\n  const handleUpload = ([uploaded_file]: File[]) => props.handleUpload(uploaded_file);\n  const clearFile = () => props.handleUpload(null);\n\n  useEffect(() => {\n    setTermsAgreed(false);\n  }, [file]);\n\n  if (!importType) return <Box />;\n\n  return (\n    <Box>\n      <Box className=\"description\">{description_map[importType]}</Box>\n\n      <Box\n        display=\"flex\"\n        flexDirection=\"row\"\n        marginTop=\"25px\"\n        width=\"fit-content\"\n        alignItems=\"center\"\n      >\n        <FileUploader\n          maxSize={52428800}\n          onUpload={handleUpload}\n          accept={importType === 'ms-excel' ? '.xls, .xlsx' : '.csv'}\n        >\n          <Button variant=\"link\" variantColor=\"blue\" size=\"sm\">\n            {importType === 'ms-excel' ? 'Select an Excel file' : 'Select a .CSV file'}\n          </Button>\n        </FileUploader>\n\n        {file && (\n          <Box className=\"file-name\">\n            {file.name}\n            <IconButton\n              aria-label=\"clear\"\n              icon=\"small-close\"\n              size=\"xs\"\n              ml=\"10px\"\n              onClick={clearFile}\n            />\n          </Box>\n        )}\n      </Box>\n      {file && (\n        <Box>\n          <Box display=\"flex\" flexDirection=\"row\" alignItems=\"flex-start\" mt=\"20px\">\n            <Checkbox\n              mr=\"15px\"\n              mt=\"3px\"\n              isChecked={termsAgreed}\n              onChange={() => setTermsAgreed(!termsAgreed)}\n            />\n            <Box className=\"description\">\n              I agree that all contacts in this import are expecting to hear from me or my\n              organisation. I have a prior relationship with these contacts and I have emailed or\n              messaged them at least once in the past year. I can confirm that this list wasn’t\n              purchased, rented, appended, or provided by a third party.\n            </Box>\n          </Box>\n\n          <Box mt=\"15px\">\n            <Button\n              variant=\"solid\"\n              variantColor=\"blue\"\n              size=\"sm\"\n              isDisabled={!termsAgreed}\n              onClick={() => handleFileImport()}\n              isLoading={uploadLoading}\n            >\n              Upload\n            </Button>\n          </Box>\n        </Box>\n      )}\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}