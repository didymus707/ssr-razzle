{"ast":null,"code":"import debounce from 'lodash/debounce';\nimport * as React from 'react';\nimport { arrayMove } from 'react-sortable-hoc';\nimport { FILTER_CONJUCTIONS, PROPERTY_TYPE_OPERATORS } from './filter.data';\nexport const useFilter = ({\n  properties,\n  onChange\n}) => {\n  const [filters, setFilters] = React.useState([]);\n\n  function reset() {\n    setFilters([]);\n  }\n\n  function add() {\n    const initialProperty = properties[0];\n\n    if (initialProperty) {\n      const {\n        id,\n        name,\n        type\n      } = initialProperty;\n      const filter = {\n        name: name,\n        columnID: id,\n        operator: PROPERTY_TYPE_OPERATORS[type.toLowerCase()][0].value\n      };\n\n      if (!!filters.length) {\n        filter.conjunction = FILTER_CONJUCTIONS[0].value;\n      }\n\n      setFilters([...filters, filter]);\n    }\n  }\n\n  function update(value, index) {\n    const newData = [...filters];\n    newData[index] = value;\n    setFilters(newData);\n    const conditionToCallAPI = value.value || value.operator === 'empty' || value.operator === 'notEmpty';\n\n    if (conditionToCallAPI && onChange) {\n      debounce(() => {\n        onChange(newData);\n      }, 2000)();\n    }\n  }\n\n  function remove(index) {\n    const newData = filters.filter((x, idx) => index !== idx);\n    setFilters(newData);\n    onChange && onChange(newData);\n  }\n\n  function reorder({\n    oldIndex,\n    newIndex\n  }) {\n    const newData = arrayMove(filters, oldIndex, newIndex);\n    setFilters(newData);\n    onChange && onChange(newData);\n  }\n\n  return {\n    filters,\n    actions: {\n      add,\n      reset,\n      update,\n      remove,\n      reorder\n    }\n  };\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/tables/components/filter/filter.hook.ts"],"names":["debounce","React","arrayMove","FILTER_CONJUCTIONS","PROPERTY_TYPE_OPERATORS","useFilter","properties","onChange","filters","setFilters","useState","reset","add","initialProperty","id","name","type","filter","columnID","operator","toLowerCase","value","length","conjunction","update","index","newData","conditionToCallAPI","remove","x","idx","reorder","oldIndex","newIndex","actions"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,iBAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAEA,SAASC,kBAAT,EAA6BC,uBAA7B,QAA4D,eAA5D;AAEA,OAAO,MAAMC,SAAS,GAAG,CAAC;AACxBC,EAAAA,UADwB;AAExBC,EAAAA;AAFwB,CAAD,KAGoC;AAC3D,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,KAAK,CAACS,QAAN,CAA8B,EAA9B,CAA9B;;AAEA,WAASC,KAAT,GAAiB;AACfF,IAAAA,UAAU,CAAC,EAAD,CAAV;AACD;;AAED,WAASG,GAAT,GAAe;AACb,UAAMC,eAAe,GAAGP,UAAU,CAAC,CAAD,CAAlC;;AACA,QAAIO,eAAJ,EAAqB;AACnB,YAAM;AAAEC,QAAAA,EAAF;AAAMC,QAAAA,IAAN;AAAYC,QAAAA;AAAZ,UAAqBH,eAA3B;AACA,YAAMI,MAAM,GAAG;AACbF,QAAAA,IAAI,EAAEA,IADO;AAEbG,QAAAA,QAAQ,EAAEJ,EAFG;AAGbK,QAAAA,QAAQ,EAAEf,uBAAuB,CAACY,IAAI,CAACI,WAAL,EAAD,CAAvB,CAA4C,CAA5C,EAA+CC;AAH5C,OAAf;;AAMA,UAAI,CAAC,CAACb,OAAO,CAACc,MAAd,EAAsB;AACpBL,QAAAA,MAAM,CAACM,WAAP,GAAqBpB,kBAAkB,CAAC,CAAD,CAAlB,CAAsBkB,KAA3C;AACD;;AAEDZ,MAAAA,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAaS,MAAb,CAAD,CAAV;AACD;AACF;;AAED,WAASO,MAAT,CAAgBH,KAAhB,EAAoCI,KAApC,EAAmD;AACjD,UAAMC,OAAO,GAAG,CAAC,GAAGlB,OAAJ,CAAhB;AACAkB,IAAAA,OAAO,CAACD,KAAD,CAAP,GAAiBJ,KAAjB;AACAZ,IAAAA,UAAU,CAACiB,OAAD,CAAV;AACA,UAAMC,kBAAkB,GACtBN,KAAK,CAACA,KAAN,IAAeA,KAAK,CAACF,QAAN,KAAmB,OAAlC,IAA6CE,KAAK,CAACF,QAAN,KAAmB,UADlE;;AAEA,QAAIQ,kBAAkB,IAAIpB,QAA1B,EAAoC;AAClCP,MAAAA,QAAQ,CAAC,MAAM;AACbO,QAAAA,QAAQ,CAACmB,OAAD,CAAR;AACD,OAFO,EAEL,IAFK,CAAR;AAGD;AACF;;AAED,WAASE,MAAT,CAAgBH,KAAhB,EAA+B;AAC7B,UAAMC,OAAO,GAAGlB,OAAO,CAACS,MAAR,CAAe,CAACY,CAAD,EAAiBC,GAAjB,KAAiCL,KAAK,KAAKK,GAA1D,CAAhB;AACArB,IAAAA,UAAU,CAACiB,OAAD,CAAV;AACAnB,IAAAA,QAAQ,IAAIA,QAAQ,CAACmB,OAAD,CAApB;AACD;;AAED,WAASK,OAAT,CAAiB;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAjB,EAAiF;AAC/E,UAAMP,OAAO,GAAGxB,SAAS,CAACM,OAAD,EAAUwB,QAAV,EAAoBC,QAApB,CAAzB;AACAxB,IAAAA,UAAU,CAACiB,OAAD,CAAV;AACAnB,IAAAA,QAAQ,IAAIA,QAAQ,CAACmB,OAAD,CAApB;AACD;;AAED,SAAO;AAAElB,IAAAA,OAAF;AAAW0B,IAAAA,OAAO,EAAE;AAAEtB,MAAAA,GAAF;AAAOD,MAAAA,KAAP;AAAca,MAAAA,MAAd;AAAsBI,MAAAA,MAAtB;AAA8BG,MAAAA;AAA9B;AAApB,GAAP;AACD,CAtDM","sourcesContent":["import debounce from 'lodash/debounce';\nimport * as React from 'react';\nimport { arrayMove } from 'react-sortable-hoc';\nimport { FilterProps, FiltersDropdownProps } from './filter.types';\nimport { FILTER_CONJUCTIONS, PROPERTY_TYPE_OPERATORS } from './filter.data';\n\nexport const useFilter = ({\n  properties,\n  onChange,\n}: Pick<FiltersDropdownProps, 'onChange' | 'properties'>) => {\n  const [filters, setFilters] = React.useState<FilterProps[]>([]);\n\n  function reset() {\n    setFilters([]);\n  }\n\n  function add() {\n    const initialProperty = properties[0];\n    if (initialProperty) {\n      const { id, name, type } = initialProperty;\n      const filter = {\n        name: name,\n        columnID: id,\n        operator: PROPERTY_TYPE_OPERATORS[type.toLowerCase()][0].value,\n      } as FilterProps;\n\n      if (!!filters.length) {\n        filter.conjunction = FILTER_CONJUCTIONS[0].value;\n      }\n\n      setFilters([...filters, filter]);\n    }\n  }\n\n  function update(value: FilterProps, index: number) {\n    const newData = [...filters];\n    newData[index] = value;\n    setFilters(newData);\n    const conditionToCallAPI =\n      value.value || value.operator === 'empty' || value.operator === 'notEmpty';\n    if (conditionToCallAPI && onChange) {\n      debounce(() => {\n        onChange(newData);\n      }, 2000)();\n    }\n  }\n\n  function remove(index: number) {\n    const newData = filters.filter((x: FilterProps, idx: number) => index !== idx);\n    setFilters(newData);\n    onChange && onChange(newData);\n  }\n\n  function reorder({ oldIndex, newIndex }: { oldIndex: number; newIndex: number }) {\n    const newData = arrayMove(filters, oldIndex, newIndex);\n    setFilters(newData);\n    onChange && onChange(newData);\n  }\n\n  return { filters, actions: { add, reset, update, remove, reorder } };\n};\n"]},"metadata":{},"sourceType":"module"}