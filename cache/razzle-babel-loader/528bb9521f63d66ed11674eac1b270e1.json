{"ast":null,"code":"var _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/component/list-view/component.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { Box, Spinner, useDisclosure, useToast } from '@chakra-ui/core/dist';\nimport { ConfirmModal, ContentWrapper, ToastBox } from '../../../../components';\nimport { ListViewStyles as Wrapper } from './component.styles';\nimport { ListHeading } from './components';\nimport { ListGrid } from '../../components';\nexport const Component = props => {\n  const {\n    selected_list,\n    rows_loading,\n    lists_fetched,\n    selectList,\n    fetchRows,\n    lists,\n    rows,\n    columns,\n    rows_by_id,\n    columns_by_id,\n    column_id_map,\n    meta,\n    updateColumnArrangement,\n    updateRowCell,\n    list_syncing,\n    createColumn,\n    createRow,\n    selectRows,\n    clearRows,\n    deleteRows,\n    updateListName,\n    deleteColumn,\n    hideColumn,\n    showColumn,\n    updateColumnLabel,\n    updateColumnType,\n    addFilter,\n    filters,\n    filters_by_id,\n    updateFilter,\n    deleteFilter,\n    sorts,\n    sorts_by_id,\n    addSort,\n    deleteSort,\n    updateSort,\n    deleteList,\n    addSelectOption,\n    getRowByIndex,\n    updateSelectOption,\n    selected_rows,\n    updateColumnCustomization,\n    updateColumn,\n    createSmartList,\n    smart_lists,\n    is_smart_list,\n    selected_smart_list,\n    smart_lists_fetched,\n    selectSmartList,\n    updateSmartList,\n    deleteSmartList,\n    selectSmartListID,\n    updateSmartListFilters,\n    clearFilters,\n    search_query,\n    updateSearchQuery,\n    initial_list,\n    openNoSubscriptionModal,\n    enrichColumnData\n  } = props;\n  useEffect(() => {\n    if (!is_smart_list) {\n      const {\n        match: {\n          params\n        },\n        history\n      } = props;\n      const list_id = params.id;\n      if (!props.lists[list_id] && lists_fetched) history.push('/s/lists');else if (props.lists[list_id]) selectList(list_id);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  useEffect(() => {\n    if (is_smart_list) {\n      const {\n        match: {\n          params\n        },\n        history\n      } = props;\n      const smart_list_id = params.id;\n      if (!props.smart_lists[smart_list_id] && smart_lists_fetched) history.push('/s/lists');else if (props.smart_lists[smart_list_id]) selectSmartList(smart_list_id);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  useEffect(() => {\n    attachDisableScrollListener();\n    return detachDisableScrollListener; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const attachDisableScrollListener = () => {\n    // @ts-ignore\n    document.body.style.overscrollBehaviorX = 'none';\n  };\n\n  const detachDisableScrollListener = () => {\n    // @ts-ignore\n    document.body.style.overscrollBehaviorX = 'initial';\n  };\n\n  const {\n    isOpen: clearRowsDialogOpen,\n    onClose: closeClearRowsDialog,\n    onOpen: openClearRowsDialog\n  } = useDisclosure();\n  const {\n    isOpen: deleteRowsDialogOpen,\n    onClose: closeDeleteRowsDialog,\n    onOpen: openDeleteRowsDialog\n  } = useDisclosure();\n  const toast = useToast();\n\n  const handleClearRows = () => {\n    props.clearRows();\n    toast({\n      position: 'bottom-left',\n      render: ({\n        onClose\n      }) => __jsx(ToastBox, {\n        onClose: onClose,\n        status: \"success\",\n        message: \"Rows cleared successfully\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 9\n        }\n      })\n    });\n    closeClearRowsDialog();\n  };\n\n  const handleDeleteRows = () => {\n    props.deleteRows();\n    toast({\n      position: 'bottom-left',\n      render: ({\n        onClose\n      }) => __jsx(ToastBox, {\n        onClose: onClose,\n        status: \"success\",\n        message: \"Rows deleted successfully\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 9\n        }\n      })\n    });\n    closeDeleteRowsDialog();\n  };\n\n  if (!selected_list && !selected_smart_list) {\n    return __jsx(ContentWrapper, {\n      paddingBottom: \"8rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }\n    }, __jsx(Box, {\n      display: \"flex\",\n      height: \"100vh\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }, __jsx(Spinner, {\n      margin: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  const list = lists[selected_list];\n  const smart_list = smart_lists[selected_smart_list];\n  return __jsx(React.Fragment, null, __jsx(ContentWrapper, {\n    style: {\n      overscrollBehaviorX: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, __jsx(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, __jsx(ListHeading, {\n    columns,\n    columns_by_id,\n    rows_loading,\n    list,\n    smart_list,\n    updateColumnArrangement,\n    list_syncing,\n    history: props.history,\n    updateListName,\n    hideColumn,\n    showColumn,\n    addFilter,\n    filters,\n    filters_by_id,\n    updateFilter,\n    deleteFilter,\n    sorts,\n    sorts_by_id,\n    addSort,\n    deleteSort,\n    updateSort,\n    deleteList,\n    createSmartList,\n    updateSmartList,\n    deleteSmartList,\n    selectSmartList,\n    selectSmartListID,\n    updateSmartListFilters,\n    clearFilters,\n    is_smart_list,\n    search_query,\n    updateSearchQuery,\n    initial_list,\n    selected_rows,\n    openClearRowsDialog,\n    openDeleteRowsDialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }), __jsx(Box, {\n    className: \"list-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  }, __jsx(ListGrid, {\n    meta,\n    rows,\n    columns,\n    rows_by_id,\n    columns_by_id,\n    column_id_map,\n    rows_loading,\n    fetchRows,\n    updateRowCell,\n    list,\n    updateColumnArrangement,\n    createColumn,\n    createRow,\n    selectRows,\n    clearRows,\n    deleteRows,\n    deleteColumn,\n    hideColumn,\n    updateColumnLabel,\n    updateColumnType,\n    addSelectOption,\n    getRowByIndex,\n    updateSelectOption,\n    selected_rows,\n    updateColumnCustomization,\n    updateColumn,\n    is_smart_list,\n    search_query,\n    filters,\n    filters_by_id,\n    sorts,\n    sorts_by_id,\n    openNoSubscriptionModal,\n    enrichColumnData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  })))), __jsx(ConfirmModal, {\n    isOpen: clearRowsDialogOpen,\n    onClose: closeClearRowsDialog,\n    title: \"Clear rows\",\n    description: \"All cells currently occupied by the selected rows would be completely emptied\",\n    onConfirm: handleClearRows,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }\n  }), __jsx(ConfirmModal, {\n    isOpen: deleteRowsDialogOpen,\n    onClose: closeDeleteRowsDialog,\n    title: \"Delete rows\",\n    description: \"All selected rows would be permanently deleted\",\n    onConfirm: handleDeleteRows,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/component/list-view/component.tsx"],"names":["React","useEffect","Box","Spinner","useDisclosure","useToast","ConfirmModal","ContentWrapper","ToastBox","ListViewStyles","Wrapper","ListHeading","ListGrid","Component","props","selected_list","rows_loading","lists_fetched","selectList","fetchRows","lists","rows","columns","rows_by_id","columns_by_id","column_id_map","meta","updateColumnArrangement","updateRowCell","list_syncing","createColumn","createRow","selectRows","clearRows","deleteRows","updateListName","deleteColumn","hideColumn","showColumn","updateColumnLabel","updateColumnType","addFilter","filters","filters_by_id","updateFilter","deleteFilter","sorts","sorts_by_id","addSort","deleteSort","updateSort","deleteList","addSelectOption","getRowByIndex","updateSelectOption","selected_rows","updateColumnCustomization","updateColumn","createSmartList","smart_lists","is_smart_list","selected_smart_list","smart_lists_fetched","selectSmartList","updateSmartList","deleteSmartList","selectSmartListID","updateSmartListFilters","clearFilters","search_query","updateSearchQuery","initial_list","openNoSubscriptionModal","enrichColumnData","match","params","history","list_id","id","push","smart_list_id","attachDisableScrollListener","detachDisableScrollListener","document","body","style","overscrollBehaviorX","isOpen","clearRowsDialogOpen","onClose","closeClearRowsDialog","onOpen","openClearRowsDialog","deleteRowsDialogOpen","closeDeleteRowsDialog","openDeleteRowsDialog","toast","handleClearRows","position","render","handleDeleteRows","list","smart_list"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { Box, Spinner, useDisclosure, useToast } from '@chakra-ui/core/dist';\nimport { ConfirmModal, ContentWrapper, ToastBox } from '../../../../components';\nimport { ListViewStyles as Wrapper } from './component.styles';\nimport { ListHeading } from './components';\nimport { ListGrid } from '../../components';\n\nexport const Component = (props: any) => {\n  const {\n    selected_list,\n    rows_loading,\n    lists_fetched,\n    selectList,\n    fetchRows,\n    lists,\n    rows,\n    columns,\n    rows_by_id,\n    columns_by_id,\n    column_id_map,\n    meta,\n    updateColumnArrangement,\n    updateRowCell,\n    list_syncing,\n    createColumn,\n    createRow,\n    selectRows,\n    clearRows,\n    deleteRows,\n    updateListName,\n    deleteColumn,\n    hideColumn,\n    showColumn,\n    updateColumnLabel,\n    updateColumnType,\n    addFilter,\n    filters,\n    filters_by_id,\n    updateFilter,\n    deleteFilter,\n    sorts,\n    sorts_by_id,\n    addSort,\n    deleteSort,\n    updateSort,\n    deleteList,\n    addSelectOption,\n    getRowByIndex,\n    updateSelectOption,\n    selected_rows,\n    updateColumnCustomization,\n    updateColumn,\n    createSmartList,\n    smart_lists,\n    is_smart_list,\n    selected_smart_list,\n    smart_lists_fetched,\n    selectSmartList,\n    updateSmartList,\n    deleteSmartList,\n    selectSmartListID,\n    updateSmartListFilters,\n    clearFilters,\n    search_query,\n    updateSearchQuery,\n    initial_list,\n    openNoSubscriptionModal,\n    enrichColumnData,\n  } = props;\n\n  useEffect(() => {\n    if (!is_smart_list) {\n      const {\n        match: { params },\n        history,\n      } = props;\n      const list_id: string = params.id;\n      if (!props.lists[list_id] && lists_fetched) history.push('/s/lists');\n      else if (props.lists[list_id]) selectList(list_id);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (is_smart_list) {\n      const {\n        match: { params },\n        history,\n      } = props;\n      const smart_list_id: string = params.id;\n      if (!props.smart_lists[smart_list_id] && smart_lists_fetched) history.push('/s/lists');\n      else if (props.smart_lists[smart_list_id]) selectSmartList(smart_list_id);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    attachDisableScrollListener();\n    return detachDisableScrollListener;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const attachDisableScrollListener = () => {\n    // @ts-ignore\n    document.body.style.overscrollBehaviorX = 'none';\n  };\n\n  const detachDisableScrollListener = () => {\n    // @ts-ignore\n    document.body.style.overscrollBehaviorX = 'initial';\n  };\n\n  const {\n    isOpen: clearRowsDialogOpen,\n    onClose: closeClearRowsDialog,\n    onOpen: openClearRowsDialog,\n  } = useDisclosure();\n\n  const {\n    isOpen: deleteRowsDialogOpen,\n    onClose: closeDeleteRowsDialog,\n    onOpen: openDeleteRowsDialog,\n  } = useDisclosure();\n\n  const toast = useToast();\n\n  const handleClearRows = () => {\n    props.clearRows();\n    toast({\n      position: 'bottom-left',\n      render: ({ onClose }) => (\n        <ToastBox onClose={onClose} status=\"success\" message=\"Rows cleared successfully\" />\n      ),\n    });\n    closeClearRowsDialog();\n  };\n\n  const handleDeleteRows = () => {\n    props.deleteRows();\n    toast({\n      position: 'bottom-left',\n      render: ({ onClose }) => (\n        <ToastBox onClose={onClose} status=\"success\" message=\"Rows deleted successfully\" />\n      ),\n    });\n    closeDeleteRowsDialog();\n  };\n\n  if (!selected_list && !selected_smart_list) {\n    return (\n      <ContentWrapper paddingBottom=\"8rem\">\n        <Box display=\"flex\" height=\"100vh\">\n          <Spinner margin=\"auto\" />\n        </Box>\n      </ContentWrapper>\n    );\n  }\n\n  const list = lists[selected_list];\n  const smart_list = smart_lists[selected_smart_list];\n\n  return (\n    <>\n      <ContentWrapper style={{ overscrollBehaviorX: 'none' }}>\n        <Wrapper>\n          <ListHeading\n            {...{\n              columns,\n              columns_by_id,\n              rows_loading,\n              list,\n              smart_list,\n              updateColumnArrangement,\n              list_syncing,\n              history: props.history,\n              updateListName,\n              hideColumn,\n              showColumn,\n              addFilter,\n              filters,\n              filters_by_id,\n              updateFilter,\n              deleteFilter,\n              sorts,\n              sorts_by_id,\n              addSort,\n              deleteSort,\n              updateSort,\n              deleteList,\n              createSmartList,\n              updateSmartList,\n              deleteSmartList,\n              selectSmartList,\n              selectSmartListID,\n              updateSmartListFilters,\n              clearFilters,\n              is_smart_list,\n              search_query,\n              updateSearchQuery,\n              initial_list,\n              selected_rows,\n              openClearRowsDialog,\n              openDeleteRowsDialog,\n            }}\n          />\n          <Box className=\"list-content\">\n            <ListGrid\n              {...{\n                meta,\n                rows,\n                columns,\n                rows_by_id,\n                columns_by_id,\n                column_id_map,\n                rows_loading,\n                fetchRows,\n                updateRowCell,\n                list,\n                updateColumnArrangement,\n                createColumn,\n                createRow,\n                selectRows,\n                clearRows,\n                deleteRows,\n                deleteColumn,\n                hideColumn,\n                updateColumnLabel,\n                updateColumnType,\n                addSelectOption,\n                getRowByIndex,\n                updateSelectOption,\n                selected_rows,\n                updateColumnCustomization,\n                updateColumn,\n                is_smart_list,\n                search_query,\n                filters,\n                filters_by_id,\n                sorts,\n                sorts_by_id,\n                openNoSubscriptionModal,\n                enrichColumnData,\n              }}\n            />\n          </Box>\n        </Wrapper>\n      </ContentWrapper>\n      <ConfirmModal\n        isOpen={clearRowsDialogOpen}\n        onClose={closeClearRowsDialog}\n        title=\"Clear rows\"\n        description=\"All cells currently occupied by the selected rows would be completely emptied\"\n        onConfirm={handleClearRows}\n      />\n      <ConfirmModal\n        isOpen={deleteRowsDialogOpen}\n        onClose={closeDeleteRowsDialog}\n        title=\"Delete rows\"\n        description=\"All selected rows would be permanently deleted\"\n        onConfirm={handleDeleteRows}\n      />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}