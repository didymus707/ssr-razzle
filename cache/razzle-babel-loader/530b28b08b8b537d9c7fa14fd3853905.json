{"ast":null,"code":"var _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/components/grid/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// @ts-nocheck\nimport React, { useEffect, useState, useRef } from 'react';\nimport { ListGridWrapper } from './index.styles';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport { HeaderNew } from './header-new';\nimport { HeaderSelect } from './header-select';\nimport { Header } from './header';\nimport { RowNew } from './row-new';\nimport { GridColumnMenu } from './column-menu';\nimport { default_editable_properties } from '../../list.data';\nimport { PopoverCellEditor } from './popover-cell-editor';\nimport { CustomCell } from './custom-cell';\nimport { getColumnHeaderIcon } from '../../lists.utils';\nimport { RowSelectCell } from './row-select-cell';\nimport { RecordModal } from '../record-modal/index.container';\nimport { useSelector } from 'react-redux';\nimport { Box } from '@chakra-ui/core';\nimport { selectActiveSubscription } from '../../../settings';\nimport { EmptyState } from '../../../../components';\nimport noDataImage from '../../assets/no-data.svg';\nimport { Spinner } from '@chakra-ui/core/dist';\nconst PAGE_LIMIT = Number(process.env.REACT_APP_PAGINATION_LIMIT) || 200;\nconst SCROLL_THRESHOLD_RATIO = 0.7;\nconst default_cell = {\n  row: null,\n  column: null\n};\nexport const ListGrid = props => {\n  var _active_subscription$, _active_subscription$2, _activeCell$column3;\n\n  const gridApi = useRef();\n  const gridViewport = useRef(); // @ts-ignore\n\n  const {\n    0: activeColumn,\n    1: setActiveColumn\n  } = useState(null);\n  const {\n    0: activeCell,\n    1: setActiveCell\n  } = useState({\n    row: null,\n    column: null\n  });\n  const {\n    0: activeCellPosition,\n    1: setActiveCellPosition\n  } = useState({\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  });\n  const {\n    0: rowNodeOpen,\n    1: setRowNodeOpen\n  } = useState(null);\n\n  const openRow = async index => {\n    const row = await props.getRowByIndex(index);\n    const node = gridApi.current.getRowNode(row.uid);\n    setRowNodeOpen(node);\n  };\n\n  const closeRow = () => setRowNodeOpen(null);\n\n  const rows = props.rows_by_id.filter(i => {\n    var _props$rows, _props$rows$i;\n\n    return !!((_props$rows = props.rows) !== null && _props$rows !== void 0 && (_props$rows$i = _props$rows[i]) !== null && _props$rows$i !== void 0 && _props$rows$i.columns);\n  }).map(i => {\n    var _props$rows2, _props$rows2$i;\n\n    return _objectSpread(_objectSpread({}, (_props$rows2 = props.rows) === null || _props$rows2 === void 0 ? void 0 : (_props$rows2$i = _props$rows2[i]) === null || _props$rows2$i === void 0 ? void 0 : _props$rows2$i.columns), {}, {\n      uid: i\n    });\n  });\n  const columns = props.columns_by_id.map(i => props.columns[i]).filter(column => !column.hidden);\n  const meta = props.meta;\n  const list = props.list;\n  const row_count = props.meta.count_total;\n  const visible_rows = props.rows_by_id.length;\n\n  const attachCellEditingStartedListener = event => {\n    if (!gridViewport.current) return;\n    if (!gridApi.current) return;\n    if (gridViewport.current.contains(event.target)) return;\n    if (!event.view.location.pathname.includes('/s/lists')) return;\n    if (event.target.className === 'ag-react-container') return;\n    gridApi.current.stopEditing();\n    onCellEditingStopped();\n  };\n\n  const onCellEditingStarted = () => {\n    document.addEventListener('click', attachCellEditingStartedListener);\n  };\n\n  const onCellEditingStopped = () => {\n    document.removeEventListener('click', attachCellEditingStartedListener);\n  };\n\n  const onCellValueChanged = params => {\n    const row_index = params.node.childIndex;\n    const columnID = params.colDef.field;\n    const value = params.newValue;\n    onCellEditingStopped();\n    props.updateRowCell({\n      row_index,\n      columnID,\n      value\n    });\n    return true;\n  };\n\n  const updateCellValue = (value, row_id, columnID) => {\n    var _activeCell$row, _activeCell$column;\n\n    props.updateRowCell({\n      row_id: ((_activeCell$row = activeCell.row) === null || _activeCell$row === void 0 ? void 0 : _activeCell$row.uid) || row_id,\n      columnID: ((_activeCell$column = activeCell.column) === null || _activeCell$column === void 0 ? void 0 : _activeCell$column.uid) || columnID,\n      value\n    });\n  };\n\n  const handleBodyScroll = params => {\n    if (params.direction === 'horizontal') {// handle horizontal scroll debounce\n    } else handlePagination(params);\n  };\n\n  const handlePagination = params => {\n    // handle pagination\n    if (props.rows_loading) return;\n    if (!meta.next_page) return;\n    const last_displayed_row = params.api.getLastDisplayedRow();\n    const scroll_threshold = meta.page * PAGE_LIMIT * SCROLL_THRESHOLD_RATIO;\n    if (!(last_displayed_row >= scroll_threshold)) return;\n    props.fetchRows({\n      list: list.id,\n      page: meta.page + 1\n    });\n  };\n\n  const handleSelectionChanged = params => {\n    const selected_row_indices = params.api.getSelectedNodes().map(node => {\n      return node.rowIndex;\n    });\n    props.selectRows(selected_row_indices);\n  };\n\n  const handleRowClick = params => {\n    if (checkNewColCell(params)) handleNewRowClick();\n  };\n\n  const handleNewColumnClick = async () => {\n    gridApi.current.stopEditing();\n    const column = await props.createColumn();\n    await gridApi.current.gridPanel.eCenterViewport.scrollTo({\n      left: 1000000000000000,\n      behavior: 'auto'\n    });\n    setTimeout(() => setActiveColumn(column['uid']), 100);\n  };\n\n  const active_subscription = useSelector(selectActiveSubscription);\n  let allow_create_row = false;\n  if (!(active_subscription !== null && active_subscription !== void 0 && (_active_subscription$ = active_subscription.details) !== null && _active_subscription$ !== void 0 && (_active_subscription$2 = _active_subscription$.lists) !== null && _active_subscription$2 !== void 0 && _active_subscription$2.rows)) allow_create_row = true;else if (active_subscription.details.lists.rows > rows.length) allow_create_row = true;\n\n  const handleNewRowClick = () => {\n    if (allow_create_row) {\n      props.createRow();\n      gridViewport.current.scrollTop = gridViewport.current.scrollHeight;\n    } else {\n      props.openNoSubscriptionModal({\n        heading: \"Oops, looks like you've run out of available rows on your list\",\n        subHeading: `Upgrade to our business plan to create lists and smart lists with unlimited rows.\n         All lists you create are currently capped at ${active_subscription.details.lists.rows.toLocaleString()} rows`\n      });\n    }\n  };\n\n  const handleCellClicked = params => {\n    var _target_element$attri, _target_element$attri2, _parent_element$attri, _parent_element$attri2;\n\n    const col_id = params.colDef.field;\n    if (['_select', '_new'].includes(col_id)) return;\n    const column = props.columns[col_id];\n    const row_index = params.node.rowIndex;\n    const row_id = props.rows_by_id[row_index];\n\n    const row = _objectSpread(_objectSpread({}, props.rows[row_id]), {}, {\n      index: row_index\n    });\n\n    if (default_editable_properties.includes(column.type)) return;\n    if (column.type === 'DND') return;\n    const target_element = params.event.target;\n    let element_class = (target_element === null || target_element === void 0 ? void 0 : (_target_element$attri = target_element.attributes) === null || _target_element$attri === void 0 ? void 0 : (_target_element$attri2 = _target_element$attri['class']) === null || _target_element$attri2 === void 0 ? void 0 : _target_element$attri2.value) || '';\n    if (element_class.includes('close-icon')) return;\n    const parent_element = target_element.parentElement;\n    element_class = (parent_element === null || parent_element === void 0 ? void 0 : (_parent_element$attri = parent_element.attributes) === null || _parent_element$attri === void 0 ? void 0 : (_parent_element$attri2 = _parent_element$attri['class']) === null || _parent_element$attri2 === void 0 ? void 0 : _parent_element$attri2.value) || '';\n    if (element_class.includes('close-icon')) return;\n    const cell_target = params.event.target;\n    const rect = cell_target.getBoundingClientRect();\n    setActiveCellPosition({\n      left: rect.left,\n      right: rect.right,\n      top: rect.top,\n      bottom: rect.bottom\n    });\n    setActiveCell({\n      row,\n      column\n    });\n  };\n\n  const checkNewColCell = params => !!params.data.new_col;\n\n  const onGridReady = params => {\n    gridApi.current = params.api;\n    gridViewport.current = params.api.gridPanel.eBodyViewport;\n    setInitialWidths();\n  };\n\n  const setInitialWidths = () => {\n    const widthPayload = Object.values(props.columns).filter(i => !!i.width).map(i => ({\n      key: i.uid,\n      newWidth: i.width\n    }));\n    gridApi.current.columnController.columnApi.setColumnWidths(widthPayload);\n  };\n\n  const cleanupRefs = () => {\n    document.removeEventListener('click', attachCellEditingStartedListener);\n    gridApi.current = null;\n    gridViewport.current = null;\n  };\n\n  useEffect(() => {\n    return cleanupRefs; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const attachNewColumnClickListener = () => {\n    const elems = document.getElementsByClassName('ag-header-cell');\n\n    for (let i = 0; i < elems.length; i++) {\n      if (i === elems.length - 1) elems[i].addEventListener('click', handleNewColumnClick);\n    }\n  };\n\n  const handleDeletePressed = event => {\n    const platform = window.navigator.platform;\n    if (platform.includes('Mac')) handleMacDeletePressed(event);else handleOtherDeletePressed(event);\n  };\n\n  const handleMacDeletePressed = event => {\n    if (event.key !== 'Backspace') return;\n    if (event.metaKey) props.deleteRows();else props.clearRows();\n  };\n\n  const handleOtherDeletePressed = event => {\n    if (event.key === 'Backspace') props.clearRows();\n    if (event.key === 'Delete') props.deleteRows();\n  };\n\n  const attachDeleteKeyPressedListener = () => {\n    const grid_element = document.getElementById('ListGrid');\n    if (!(grid_element !== null && grid_element !== void 0 && grid_element.parentElement)) return;\n    grid_element.parentElement.addEventListener('keydown', handleDeletePressed);\n  };\n\n  const handleColumnClick = event => {\n    const columnID = event.target.getAttribute('col-id');\n    if (event.which !== 3) return; // @ts-ignore\n\n    if (activeColumn === columnID) setActiveColumn(null);else setActiveColumn(columnID);\n  };\n\n  const closeColumnMenu = () => setActiveColumn(null);\n\n  const handleColumnResize = params => {\n    const {\n      finished,\n      source\n    } = params;\n    if (!finished) return;\n    if (source === 'api') return;\n    const affectedColumns = params.columns.filter(i => i && i.colId !== '_new');\n    affectedColumns.forEach(i => {\n      props.updateColumn(i.colId, {\n        width: i.actualWidth\n      });\n    });\n  };\n\n  const handleDeleteColumn = columnID => {\n    closeColumnMenu();\n    props.deleteColumn(columnID);\n  };\n\n  const handleHideColumn = columnID => {\n    closeColumnMenu();\n    props.hideColumn(columnID);\n  };\n\n  const handleUpdateColumnLabel = (columnID, label) => {\n    props.updateColumnLabel(columnID, label);\n  };\n\n  const handleUpdateColumnType = (columnID, type) => {\n    props.updateColumnType(columnID, type);\n  };\n\n  const handleUpdateColumn = (columnID, payload) => {\n    props.updateColumn(columnID, payload);\n  };\n\n  const closePopoverCellEditor = () => {\n    setActiveCell(default_cell);\n  };\n\n  const handleAddSelectOption = (columnID, value) => props.addSelectOption(columnID, value);\n\n  const handleUpdateSelectOption = (option_id, payload) => {\n    var _activeCell$column2;\n\n    const columnID = activeCell === null || activeCell === void 0 ? void 0 : (_activeCell$column2 = activeCell.column) === null || _activeCell$column2 === void 0 ? void 0 : _activeCell$column2.uid;\n    props.updateSelectOption(columnID, option_id, payload);\n  };\n\n  useEffect(() => {\n    attachNewColumnClickListener();\n    attachDeleteKeyPressedListener(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getColumnOptions = columnID => {\n    var _props$columns$column;\n\n    return ((_props$columns$column = props.columns[columnID]) === null || _props$columns$column === void 0 ? void 0 : _props$columns$column.options) || [];\n  };\n\n  const getColumn = columnID => {\n    return props.columns[columnID];\n  };\n\n  const handleGetRowNodeID = row => row.uid;\n\n  const popover_cell_editor_open = !!activeCell.row && !!activeCell.column;\n  const allow_scroll = !activeColumn && !popover_cell_editor_open;\n  const filtered_columns = Object.values(props.filters).reduce((acc, i) => {\n    if (acc.includes(i.columnID)) return acc;\n    return [...acc, i.columnID];\n  }, []);\n  const sorted_columns = Object.values(props.sorts).reduce((acc, i) => {\n    if (acc.includes(i.columnID)) return acc;\n    return [...acc, i.columnID];\n  }, []); // @ts-ignore\n\n  return __jsx(React.Fragment, null, !!rowNodeOpen && __jsx(RecordModal, {\n    isOpen: !!rowNodeOpen,\n    onClose: closeRow,\n    node: rowNodeOpen,\n    openRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 9\n    }\n  }), __jsx(GridColumnMenu, {\n    columnID: activeColumn // @ts-ignore\n    ,\n    column: props.columns[activeColumn],\n    columns: props.columns,\n    isOpen: !!activeColumn,\n    close: closeColumnMenu,\n    deleteColumn: handleDeleteColumn,\n    hideColumn: handleHideColumn,\n    updateLabel: handleUpdateColumnLabel,\n    updateType: handleUpdateColumnType,\n    updateColumn: handleUpdateColumn,\n    enrichColumnData: props.enrichColumnData,\n    updateCustomization: props.updateColumnCustomization,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }\n  }), __jsx(PopoverCellEditor, {\n    isOpen: !!activeCell.row && !!activeCell.column,\n    close: closePopoverCellEditor,\n    cellPosition: activeCellPosition,\n    cell: {\n      row: activeCell.row,\n      column: props.columns[(_activeCell$column3 = activeCell.column) === null || _activeCell$column3 === void 0 ? void 0 : _activeCell$column3.uid]\n    },\n    updateCell: updateCellValue,\n    updateSelectOption: handleUpdateSelectOption,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }\n  }), __jsx(ListGridWrapper // @ts-ignore\n  , {\n    allowScroll: allow_scroll,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    id: \"ListGrid\",\n    className: \"ag-theme-alpine\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 9\n    }\n  }, __jsx(AgGridReact, {\n    rowDragManaged: true,\n    animateRows: true,\n    suppressScrollOnNewData: true,\n    suppressColumnVirtualisation: true,\n    singleClickEdit: true,\n    rowData: !props.is_smart_list ? [...rows, {\n      new_col: true\n    }] : rows,\n    onGridReady: onGridReady,\n    onBodyScroll: handleBodyScroll,\n    applyColumnDefOrder: true,\n    onCellEditingStarted: onCellEditingStarted,\n    onCellEditingStopped: onCellEditingStopped,\n    suppressDragLeaveHidesColumns: true,\n    onColumnResized: handleColumnResize,\n    rowMultiSelectWithClick: true,\n    suppressRowClickSelection: true,\n    suppressCellSelection: true,\n    onSelectionChanged: handleSelectionChanged,\n    onRowClicked: handleRowClick,\n    isFullWidthCell: checkNewColCell,\n    onCellClicked: handleCellClicked,\n    fullWidthCellRendererFramework: RowNew,\n    rowSelection: \"multiple\",\n    immutableData: true,\n    getRowNodeId: handleGetRowNodeID,\n    enableCellChangeFlash: false,\n    suppressPropertyNamesCheck: true,\n    rowHeight: 40,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 11\n    }\n  }, __jsx(AgGridColumn, {\n    key: \"_select\",\n    field: \"_select\",\n    width: 60,\n    maxWidth: 60,\n    minWidth: 60,\n    headerComponentFramework: HeaderSelect,\n    headerComponentParams: {\n      selectRows: props.selectRows\n    },\n    suppressSizeToFit: true,\n    suppressMovable: true,\n    lockPosition: true,\n    pinned: \"left\",\n    cellRendererFramework: RowSelectCell,\n    cellRendererParams: {\n      selectRows: props.selectRows,\n      openRow\n    },\n    headerHeight: 40,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 13\n    }\n  }), columns.map((i, index) => {\n    return __jsx(AgGridColumn, {\n      key: i.uid,\n      field: String(i.uid),\n      headerName: i.label,\n      minWidth: 100,\n      defaultWidth: i.width,\n      suppressMovable: true,\n      headerComponentFramework: Header,\n      valueSetter: onCellValueChanged,\n      headerHeight: 40,\n      headerComponentParams: {\n        activeColumn,\n        setActiveColumn,\n        handleColumnClick,\n        getColumn,\n        icon: getColumnHeaderIcon(i.type)\n      },\n      cellRendererParams: {\n        addOption: handleAddSelectOption,\n        getColumnOptions,\n        updateCellValue,\n        closePopoverCellEditor,\n        getRowByIndex: props.getRowByIndex,\n        search_query: props.search_query\n      },\n      cellRendererFramework: CustomCell,\n      cellStyle: {\n        backgroundColor: filtered_columns.includes(i.uid) ? '#f2fff2' : sorted_columns.includes(i.uid) ? '#fff4f2' : undefined\n      },\n      editable: default_editable_properties.includes(i === null || i === void 0 ? void 0 : i.type),\n      resizable: true,\n      pinned: index === 0 && 'left',\n      flex: index === columns.length && 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 17\n      }\n    });\n  }), __jsx(AgGridColumn, {\n    headerHeight: 40,\n    key: \"_new\",\n    field: \"_new\",\n    headerComponentFramework: HeaderNew,\n    resizable: false,\n    minWidth: 50,\n    flex: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 13\n    }\n  }))), row_count === 0 && __jsx(Box, {\n    position: \"absolute\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    top: \"calc(calc(100vh - 10rem)/2)\",\n    left: \"calc(calc(100vw - 10rem)/2)\",\n    width: \"10rem\",\n    height: \"10rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 11\n    }\n  }, !props.rows_loading && __jsx(EmptyState, {\n    image: noDataImage,\n    heading: \"Oops, no data here\",\n    headingProps: {\n      fontSize: '16px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 15\n    }\n  }), props.rows_loading && __jsx(Spinner, {\n    thickness: \"4px\",\n    speed: \"0.65s\",\n    emptyColor: \"gray.200\",\n    color: \"blue.500\",\n    size: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 15\n    }\n  })), __jsx(\"div\", {\n    className: \"footing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 9\n    }\n  }, visible_rows.toLocaleString(), \" of \", row_count.toLocaleString(), \" record(s) shown\")));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/components/grid/index.tsx"],"names":["React","useEffect","useState","useRef","ListGridWrapper","AgGridColumn","AgGridReact","HeaderNew","HeaderSelect","Header","RowNew","GridColumnMenu","default_editable_properties","PopoverCellEditor","CustomCell","getColumnHeaderIcon","RowSelectCell","RecordModal","useSelector","Box","selectActiveSubscription","EmptyState","noDataImage","Spinner","PAGE_LIMIT","Number","process","env","REACT_APP_PAGINATION_LIMIT","SCROLL_THRESHOLD_RATIO","default_cell","row","column","ListGrid","props","gridApi","gridViewport","activeColumn","setActiveColumn","activeCell","setActiveCell","activeCellPosition","setActiveCellPosition","top","bottom","left","right","rowNodeOpen","setRowNodeOpen","openRow","index","getRowByIndex","node","current","getRowNode","uid","closeRow","rows","rows_by_id","filter","i","columns","map","columns_by_id","hidden","meta","list","row_count","count_total","visible_rows","length","attachCellEditingStartedListener","event","contains","target","view","location","pathname","includes","className","stopEditing","onCellEditingStopped","onCellEditingStarted","document","addEventListener","removeEventListener","onCellValueChanged","params","row_index","childIndex","columnID","colDef","field","value","newValue","updateRowCell","updateCellValue","row_id","handleBodyScroll","direction","handlePagination","rows_loading","next_page","last_displayed_row","api","getLastDisplayedRow","scroll_threshold","page","fetchRows","id","handleSelectionChanged","selected_row_indices","getSelectedNodes","rowIndex","selectRows","handleRowClick","checkNewColCell","handleNewRowClick","handleNewColumnClick","createColumn","gridPanel","eCenterViewport","scrollTo","behavior","setTimeout","active_subscription","allow_create_row","details","lists","createRow","scrollTop","scrollHeight","openNoSubscriptionModal","heading","subHeading","toLocaleString","handleCellClicked","col_id","type","target_element","element_class","attributes","parent_element","parentElement","cell_target","rect","getBoundingClientRect","data","new_col","onGridReady","eBodyViewport","setInitialWidths","widthPayload","Object","values","width","key","newWidth","columnController","columnApi","setColumnWidths","cleanupRefs","attachNewColumnClickListener","elems","getElementsByClassName","handleDeletePressed","platform","window","navigator","handleMacDeletePressed","handleOtherDeletePressed","metaKey","deleteRows","clearRows","attachDeleteKeyPressedListener","grid_element","getElementById","handleColumnClick","getAttribute","which","closeColumnMenu","handleColumnResize","finished","source","affectedColumns","colId","forEach","updateColumn","actualWidth","handleDeleteColumn","deleteColumn","handleHideColumn","hideColumn","handleUpdateColumnLabel","label","updateColumnLabel","handleUpdateColumnType","updateColumnType","handleUpdateColumn","payload","closePopoverCellEditor","handleAddSelectOption","addSelectOption","handleUpdateSelectOption","option_id","updateSelectOption","getColumnOptions","options","getColumn","handleGetRowNodeID","popover_cell_editor_open","allow_scroll","filtered_columns","filters","reduce","acc","sorted_columns","sorts","isOpen","onClose","enrichColumnData","updateColumnCustomization","is_smart_list","String","icon","addOption","search_query","backgroundColor","undefined","fontSize"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport React, { useEffect, useState, useRef } from 'react';\nimport { ListGridWrapper } from './index.styles';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport { HeaderNew } from './header-new';\nimport { HeaderSelect } from './header-select';\nimport { Header } from './header';\nimport { MetaProps } from '../../lists.types';\nimport { RowNew } from './row-new';\nimport { GridColumnMenu } from './column-menu';\nimport { default_editable_properties } from '../../list.data';\nimport { PopoverCellEditor } from './popover-cell-editor';\nimport { CustomCell } from './custom-cell';\nimport { getColumnHeaderIcon } from '../../lists.utils';\nimport { RowSelectCell } from './row-select-cell';\nimport { RecordModal } from '../record-modal/index.container';\nimport { useSelector } from 'react-redux';\nimport { Box } from '@chakra-ui/core';\nimport { selectActiveSubscription } from '../../../settings';\nimport { EmptyState } from '../../../../components';\nimport noDataImage from '../../assets/no-data.svg';\nimport { Spinner } from '@chakra-ui/core/dist';\n\nconst PAGE_LIMIT: number = Number(process.env.REACT_APP_PAGINATION_LIMIT) || 200;\nconst SCROLL_THRESHOLD_RATIO: number = 0.7;\n\nconst default_cell = {\n  row: null,\n  column: null,\n};\n\nexport const ListGrid = (props: any) => {\n  const gridApi = useRef();\n  const gridViewport = useRef();\n\n  // @ts-ignore\n  const [activeColumn, setActiveColumn] = useState(null);\n  const [activeCell, setActiveCell] = useState({\n    row: null,\n    column: null,\n  });\n  const [activeCellPosition, setActiveCellPosition] = useState({\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n  });\n  const [rowNodeOpen, setRowNodeOpen] = useState<null | string>(null);\n\n  const openRow = async (index: any) => {\n    const row = await props.getRowByIndex(index);\n    const node = gridApi.current.getRowNode(row.uid);\n    setRowNodeOpen(node);\n  };\n  const closeRow = () => setRowNodeOpen(null);\n\n  const rows: Array<object> = props.rows_by_id\n    .filter((i: string) => !!props.rows?.[i]?.columns)\n    .map((i: string) => ({\n      ...props.rows?.[i]?.columns,\n      uid: i,\n    }));\n\n  const columns: Array<object> = props.columns_by_id\n    .map((i: string) => props.columns[i])\n    .filter((column: any) => !column.hidden);\n  const meta: MetaProps = props.meta;\n  const list: {\n    id: string;\n  } = props.list;\n\n  const row_count: number = props.meta.count_total;\n  const visible_rows: number = props.rows_by_id.length;\n\n  const attachCellEditingStartedListener = (event: any) => {\n    if (!gridViewport.current) return;\n    if (!gridApi.current) return;\n    if (gridViewport.current.contains(event.target)) return;\n    if (!event.view.location.pathname.includes('/s/lists')) return;\n    if (event.target.className === 'ag-react-container') return;\n    gridApi.current.stopEditing();\n    onCellEditingStopped();\n  };\n\n  const onCellEditingStarted = () => {\n    document.addEventListener('click', attachCellEditingStartedListener);\n  };\n\n  const onCellEditingStopped = () => {\n    document.removeEventListener('click', attachCellEditingStartedListener);\n  };\n\n  const onCellValueChanged = (params: any) => {\n    const row_index = params.node.childIndex;\n    const columnID = params.colDef.field;\n    const value = params.newValue;\n    onCellEditingStopped();\n    props.updateRowCell({ row_index, columnID, value });\n    return true;\n  };\n\n  const updateCellValue = (value: any, row_id?: string, columnID?: string) => {\n    props.updateRowCell({\n      row_id: activeCell.row?.uid || row_id,\n      columnID: activeCell.column?.uid || columnID,\n      value,\n    });\n  };\n\n  const handleBodyScroll = (params: any) => {\n    if (params.direction === 'horizontal') {\n      // handle horizontal scroll debounce\n    } else handlePagination(params);\n  };\n\n  const handlePagination = (params: any) => {\n    // handle pagination\n    if (props.rows_loading) return;\n    if (!meta.next_page) return;\n    const last_displayed_row: number = params.api.getLastDisplayedRow();\n    const scroll_threshold = meta.page * PAGE_LIMIT * SCROLL_THRESHOLD_RATIO;\n    if (!(last_displayed_row >= scroll_threshold)) return;\n    props.fetchRows({ list: list.id, page: meta.page + 1 });\n  };\n\n  const handleSelectionChanged = (params: any) => {\n    const selected_row_indices = params.api.getSelectedNodes().map((node: any) => {\n      return node.rowIndex;\n    });\n    props.selectRows(selected_row_indices);\n  };\n\n  const handleRowClick = (params: any) => {\n    if (checkNewColCell(params)) handleNewRowClick();\n  };\n\n  const handleNewColumnClick = async () => {\n    gridApi.current.stopEditing();\n    const column = await props.createColumn();\n    await gridApi.current.gridPanel.eCenterViewport.scrollTo({\n      left: 1000000000000000,\n      behavior: 'auto',\n    });\n    setTimeout(() => setActiveColumn(column['uid']), 100);\n  };\n\n  const active_subscription: any = useSelector(selectActiveSubscription);\n  let allow_create_row: boolean = false;\n  if (!active_subscription?.details?.lists?.rows) allow_create_row = true;\n  else if (active_subscription.details.lists.rows > rows.length) allow_create_row = true;\n\n  const handleNewRowClick = () => {\n    if (allow_create_row) {\n      props.createRow();\n      gridViewport.current.scrollTop = gridViewport.current.scrollHeight;\n    } else {\n      props.openNoSubscriptionModal({\n        heading: \"Oops, looks like you've run out of available rows on your list\",\n        subHeading: `Upgrade to our business plan to create lists and smart lists with unlimited rows.\n         All lists you create are currently capped at ${active_subscription.details.lists.rows.toLocaleString()} rows`,\n      });\n    }\n  };\n\n  const handleCellClicked = (params: any) => {\n    const col_id = params.colDef.field;\n    if (['_select', '_new'].includes(col_id)) return;\n\n    const column = props.columns[col_id];\n    const row_index = params.node.rowIndex;\n    const row_id = props.rows_by_id[row_index];\n    const row = { ...props.rows[row_id], index: row_index };\n\n    if (default_editable_properties.includes(column.type)) return;\n    if (column.type === 'DND') return;\n\n    const target_element = params.event.target;\n    let element_class = target_element?.attributes?.['class']?.value || '';\n    if (element_class.includes('close-icon')) return;\n    const parent_element = target_element.parentElement;\n    element_class = parent_element?.attributes?.['class']?.value || '';\n    if (element_class.includes('close-icon')) return;\n\n    const cell_target = params.event.target;\n\n    const rect = cell_target.getBoundingClientRect();\n    setActiveCellPosition({\n      left: rect.left,\n      right: rect.right,\n      top: rect.top,\n      bottom: rect.bottom,\n    });\n    setActiveCell({\n      row,\n      column,\n    });\n  };\n\n  const checkNewColCell = (params: any) => !!params.data.new_col;\n\n  const onGridReady = (params: any) => {\n    gridApi.current = params.api;\n    gridViewport.current = params.api.gridPanel.eBodyViewport;\n    setInitialWidths();\n  };\n\n  const setInitialWidths = () => {\n    const widthPayload = Object.values(props.columns)\n      .filter((i: any) => !!i.width)\n      .map((i: any) => ({ key: i.uid, newWidth: i.width }));\n\n    gridApi.current.columnController.columnApi.setColumnWidths(widthPayload);\n  };\n\n  const cleanupRefs = () => {\n    document.removeEventListener('click', attachCellEditingStartedListener);\n    gridApi.current = null;\n    gridViewport.current = null;\n  };\n\n  useEffect(() => {\n    return cleanupRefs;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const attachNewColumnClickListener = () => {\n    const elems: HTMLCollection = document.getElementsByClassName('ag-header-cell');\n    for (let i = 0; i < elems.length; i++) {\n      if (i === elems.length - 1) elems[i].addEventListener('click', handleNewColumnClick);\n    }\n  };\n\n  const handleDeletePressed = (event: any) => {\n    const platform = window.navigator.platform;\n    if (platform.includes('Mac')) handleMacDeletePressed(event);\n    else handleOtherDeletePressed(event);\n  };\n\n  const handleMacDeletePressed = (event: any) => {\n    if (event.key !== 'Backspace') return;\n    if (event.metaKey) props.deleteRows();\n    else props.clearRows();\n  };\n  const handleOtherDeletePressed = (event: any) => {\n    if (event.key === 'Backspace') props.clearRows();\n    if (event.key === 'Delete') props.deleteRows();\n  };\n\n  const attachDeleteKeyPressedListener = () => {\n    const grid_element = document.getElementById('ListGrid');\n    if (!grid_element?.parentElement) return;\n    grid_element.parentElement.addEventListener('keydown', handleDeletePressed);\n  };\n\n  const handleColumnClick = (event: any) => {\n    const columnID = event.target.getAttribute('col-id');\n    if (event.which !== 3) return;\n    // @ts-ignore\n    if (activeColumn === columnID) setActiveColumn(null);\n    else setActiveColumn(columnID);\n  };\n\n  const closeColumnMenu = () => setActiveColumn(null);\n\n  const handleColumnResize = params => {\n    const { finished, source } = params;\n    if (!finished) return;\n    if (source === 'api') return;\n    const affectedColumns = params.columns.filter((i: any) => i && i.colId !== '_new');\n    affectedColumns.forEach((i: any) => {\n      props.updateColumn(i.colId, { width: i.actualWidth });\n    });\n  };\n\n  const handleDeleteColumn = (columnID: string) => {\n    closeColumnMenu();\n    props.deleteColumn(columnID);\n  };\n\n  const handleHideColumn = (columnID: string) => {\n    closeColumnMenu();\n    props.hideColumn(columnID);\n  };\n\n  const handleUpdateColumnLabel = (columnID: string, label: string) => {\n    props.updateColumnLabel(columnID, label);\n  };\n\n  const handleUpdateColumnType = (columnID: string, type: string) => {\n    props.updateColumnType(columnID, type);\n  };\n\n  const handleUpdateColumn = (columnID: string, payload: {}) => {\n    props.updateColumn(columnID, payload);\n  };\n\n  const closePopoverCellEditor = () => {\n    setActiveCell(default_cell);\n  };\n\n  const handleAddSelectOption = (columnID: string, value: string) =>\n    props.addSelectOption(columnID, value);\n\n  const handleUpdateSelectOption = (option_id: string | number, payload: object) => {\n    const columnID = activeCell?.column?.uid;\n    props.updateSelectOption(columnID, option_id, payload);\n  };\n\n  useEffect(() => {\n    attachNewColumnClickListener();\n    attachDeleteKeyPressedListener();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getColumnOptions = (columnID: string) => {\n    return props.columns[columnID]?.options || [];\n  };\n\n  const getColumn = (columnID: string) => {\n    return props.columns[columnID];\n  };\n\n  const handleGetRowNodeID = (row: any) => row.uid;\n\n  const popover_cell_editor_open: boolean = !!activeCell.row && !!activeCell.column;\n  const allow_scroll: boolean = !activeColumn && !popover_cell_editor_open;\n\n  const filtered_columns = Object.values(props.filters).reduce((acc, i: any) => {\n    if (acc.includes(i.columnID)) return acc;\n    return [...acc, i.columnID];\n  }, []);\n\n  const sorted_columns = Object.values(props.sorts).reduce((acc, i: any) => {\n    if (acc.includes(i.columnID)) return acc;\n    return [...acc, i.columnID];\n  }, []);\n\n  // @ts-ignore\n  return (\n    <>\n      {!!rowNodeOpen && (\n        <RecordModal\n          {...{\n            isOpen: !!rowNodeOpen,\n            onClose: closeRow,\n            node: rowNodeOpen,\n            openRow,\n          }}\n        />\n      )}\n      <GridColumnMenu\n        columnID={activeColumn}\n        // @ts-ignore\n        column={props.columns[activeColumn]}\n        columns={props.columns}\n        isOpen={!!activeColumn}\n        close={closeColumnMenu}\n        deleteColumn={handleDeleteColumn}\n        hideColumn={handleHideColumn}\n        updateLabel={handleUpdateColumnLabel}\n        updateType={handleUpdateColumnType}\n        updateColumn={handleUpdateColumn}\n        enrichColumnData={props.enrichColumnData}\n        updateCustomization={props.updateColumnCustomization}\n      />\n      <PopoverCellEditor\n        isOpen={!!activeCell.row && !!activeCell.column}\n        close={closePopoverCellEditor}\n        cellPosition={activeCellPosition}\n        cell={{ row: activeCell.row, column: props.columns[activeCell.column?.uid] }}\n        updateCell={updateCellValue}\n        updateSelectOption={handleUpdateSelectOption}\n      />\n      <ListGridWrapper\n        // @ts-ignore\n        allowScroll={allow_scroll}\n      >\n        <div id=\"ListGrid\" className=\"ag-theme-alpine\">\n          <AgGridReact\n            rowDragManaged\n            animateRows\n            suppressScrollOnNewData\n            suppressColumnVirtualisation\n            singleClickEdit\n            rowData={!props.is_smart_list ? [...rows, { new_col: true }] : rows}\n            onGridReady={onGridReady}\n            onBodyScroll={handleBodyScroll}\n            applyColumnDefOrder\n            onCellEditingStarted={onCellEditingStarted}\n            onCellEditingStopped={onCellEditingStopped}\n            suppressDragLeaveHidesColumns\n            onColumnResized={handleColumnResize}\n            rowMultiSelectWithClick\n            suppressRowClickSelection\n            suppressCellSelection\n            onSelectionChanged={handleSelectionChanged}\n            onRowClicked={handleRowClick}\n            isFullWidthCell={checkNewColCell}\n            onCellClicked={handleCellClicked}\n            fullWidthCellRendererFramework={RowNew}\n            rowSelection=\"multiple\"\n            immutableData\n            getRowNodeId={handleGetRowNodeID}\n            enableCellChangeFlash={false}\n            suppressPropertyNamesCheck\n            rowHeight={40}\n          >\n            <AgGridColumn\n              key=\"_select\"\n              field=\"_select\"\n              width={60}\n              maxWidth={60}\n              minWidth={60}\n              headerComponentFramework={HeaderSelect}\n              headerComponentParams={{\n                selectRows: props.selectRows,\n              }}\n              suppressSizeToFit\n              suppressMovable\n              lockPosition\n              pinned=\"left\"\n              cellRendererFramework={RowSelectCell}\n              cellRendererParams={{\n                selectRows: props.selectRows,\n                openRow,\n              }}\n              headerHeight={40}\n            />\n            {columns.map((i: any, index) => {\n              return (\n                <AgGridColumn\n                  key={i.uid}\n                  field={String(i.uid)}\n                  headerName={i.label}\n                  minWidth={100}\n                  defaultWidth={i.width}\n                  suppressMovable\n                  headerComponentFramework={Header}\n                  valueSetter={onCellValueChanged}\n                  headerHeight={40}\n                  headerComponentParams={{\n                    activeColumn,\n                    setActiveColumn,\n                    handleColumnClick,\n                    getColumn,\n                    icon: getColumnHeaderIcon(i.type),\n                  }}\n                  cellRendererParams={{\n                    addOption: handleAddSelectOption,\n                    getColumnOptions,\n                    updateCellValue,\n                    closePopoverCellEditor,\n                    getRowByIndex: props.getRowByIndex,\n                    search_query: props.search_query,\n                  }}\n                  cellRendererFramework={CustomCell}\n                  cellStyle={{\n                    backgroundColor: filtered_columns.includes(i.uid)\n                      ? '#f2fff2'\n                      : sorted_columns.includes(i.uid)\n                      ? '#fff4f2'\n                      : undefined,\n                  }}\n                  editable={default_editable_properties.includes(i?.type)}\n                  resizable\n                  pinned={index === 0 && 'left'}\n                  flex={index === columns.length && 1}\n                />\n              );\n            })}\n            <AgGridColumn\n              headerHeight={40}\n              key=\"_new\"\n              field=\"_new\"\n              headerComponentFramework={HeaderNew}\n              resizable={false}\n              minWidth={50}\n              flex={1}\n            />\n          </AgGridReact>\n        </div>\n        {row_count === 0 && (\n          <Box\n            position=\"absolute\"\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            top=\"calc(calc(100vh - 10rem)/2)\"\n            left=\"calc(calc(100vw - 10rem)/2)\"\n            width=\"10rem\"\n            height=\"10rem\"\n          >\n            {!props.rows_loading && (\n              <EmptyState\n                image={noDataImage}\n                heading=\"Oops, no data here\"\n                headingProps={{ fontSize: '16px' }}\n              />\n            )}\n            {props.rows_loading && (\n              <Spinner\n                thickness=\"4px\"\n                speed=\"0.65s\"\n                emptyColor=\"gray.200\"\n                color=\"blue.500\"\n                size=\"lg\"\n              />\n            )}\n          </Box>\n        )}\n        <div className=\"footing\">\n          {visible_rows.toLocaleString()} of {row_count.toLocaleString()} record(s) shown\n        </div>\n      </ListGridWrapper>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}