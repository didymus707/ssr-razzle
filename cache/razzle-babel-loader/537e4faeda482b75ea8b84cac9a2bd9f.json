{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/payments/component/payments/components/components/funds-transfer-dialog/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState } from 'react';\nimport { Box, Input, Modal, ModalCloseButton, ModalOverlay, Select, useToast } from '@chakra-ui/core/dist';\nimport { FundsTransferDialogWrapper as Wrapper } from './index.styles';\nimport { connect } from 'react-redux';\nimport { resolveBankAccount, transferFunds } from '../../../../../thunks';\nimport { Button, ToastBox } from 'app/components';\nimport { formatToCurrency } from '../../../../../../inbox/inbox.utils';\n\nconst Component = props => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: account_number,\n    1: setAccountNumber\n  } = useState('');\n  const {\n    0: accountBank,\n    1: setAccountBank\n  } = useState('801');\n  const {\n    0: account_name,\n    1: setAccountName\n  } = useState('');\n  const {\n    0: accountVerified,\n    1: setAccountVerified\n  } = useState(false);\n  const {\n    0: amount,\n    1: setAmount\n  } = useState(10000); // const [stage, setStage] = useState<'verify' | 'confirm'>('verify');\n\n  const {\n    isOpen,\n    onClose,\n    banks\n  } = props;\n  const {\n    resolveBankAccount,\n    transferFunds,\n    managed_account\n  } = props;\n  const toast = useToast();\n  const regexp = /^[0-9\\b]+$/;\n\n  const handleVerify = async () => {\n    setLoading(true);\n    const res = await resolveBankAccount({\n      account_number: account_number,\n      bank_code: accountBank\n    });\n\n    if (!res) {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: \"Incorrect bank details provided\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 11\n          }\n        })\n      });\n    } else {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          status: \"success\",\n          onClose: onClose,\n          message: \"Bank account verified successfully\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 11\n          }\n        })\n      });\n      setAccountName(res['account_name']);\n      setAccountVerified(true);\n    }\n\n    setLoading(false);\n  };\n\n  const handleTransfer = async () => {\n    var _banks$find;\n\n    setLoading(true);\n    const res = await transferFunds({\n      account_number: account_number,\n      bank_code: accountBank,\n      bank_name: (_banks$find = banks.find(i => i.code === accountBank)) === null || _banks$find === void 0 ? void 0 : _banks$find['name'],\n      amount,\n      save_beneficiary: true\n    });\n\n    if (!res) {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: \"Unable to complete transfer, please try again\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 11\n          }\n        })\n      });\n    } else {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          status: \"success\",\n          onClose: onClose,\n          message: \"Account transfer completed successfully\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 11\n          }\n        })\n      });\n      onClose();\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    setAccountNumber('');\n    setAccountName('');\n    setAccountBank('801');\n    setAccountVerified(false); // setStage('verify');\n\n    setAmount(10000);\n  }, [isOpen]);\n  useEffect(() => {\n    setAccountVerified(false);\n  }, [account_number, accountBank]);\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }), __jsx(ModalCloseButton, {\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }), __jsx(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    className: \"heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, \"Transfer to Account\"), __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    marginY: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    marginBottom: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    fontSize: \"14px\",\n    color: \"#757575\",\n    marginBottom: \"5px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, \"Account Number\"), __jsx(Input, {\n    value: account_number,\n    onChange: e => {\n      const updatedValue = e.target.value;\n\n      if (regexp.test(updatedValue)) {\n        setAccountNumber(updatedValue);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  })), __jsx(Box, {\n    marginBottom: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    fontSize: \"14px\",\n    color: \"#757575\",\n    marginBottom: \"5px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, \"Bank Name\"), __jsx(Select, {\n    onChange: e => setAccountBank(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, banks.map((i, index) => __jsx(\"option\", {\n    key: index,\n    value: i.code,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }, i.name)))), accountVerified && __jsx(React.Fragment, null, __jsx(Box, {\n    marginBottom: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    fontSize: \"14px\",\n    color: \"#757575\",\n    marginBottom: \"5px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }\n  }, \"Account Name\"), __jsx(Input, {\n    value: account_name,\n    isDisabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }\n  })), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    fontSize: \"14px\",\n    color: \"#757575\",\n    marginBottom: \"5px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }\n  }, \"Transfer Amount (\\u20A6) maximum of \\u20A6 \", formatToCurrency(managed_account === null || managed_account === void 0 ? void 0 : managed_account.balance)), __jsx(Input, {\n    errorBorderColor: \"red.300\",\n    isInvalid: amount < 10000 || amount > (managed_account === null || managed_account === void 0 ? void 0 : managed_account.balance) - 10000,\n    type: \"number\",\n    min: 100,\n    value: amount / 100,\n    onChange: e => {\n      const updatedValue = e.target.value;\n\n      if (regexp.test(updatedValue)) {\n        setAmount(updatedValue * 100);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }\n  })))), __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"row\",\n    width: \"100%\",\n    justifyContent: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, !accountVerified && __jsx(Button, {\n    variantColor: \"blue\",\n    size: \"sm\",\n    onClick: handleVerify,\n    isLoading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, \"Verify Account\"), accountVerified && __jsx(Button, {\n    size: \"sm\",\n    variantColor: \"blue\",\n    isLoading: loading,\n    onClick: handleTransfer,\n    isDisabled: amount < 10000 || amount > (managed_account === null || managed_account === void 0 ? void 0 : managed_account.balance) - 10000,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }\n  }, \"Complete Transfer\"))));\n};\n\nconst mapStateToProps = state => ({});\n\nconst stateConnector = connect(mapStateToProps, {\n  resolveBankAccount,\n  transferFunds\n});\n\nconst Container = props => {\n  return __jsx(Component, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 10\n    }\n  }));\n};\n\nexport const TransferFundsDialog = stateConnector(Container);","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/payments/component/payments/components/components/funds-transfer-dialog/index.tsx"],"names":["React","useEffect","useState","Box","Input","Modal","ModalCloseButton","ModalOverlay","Select","useToast","FundsTransferDialogWrapper","Wrapper","connect","resolveBankAccount","transferFunds","Button","ToastBox","formatToCurrency","Component","props","loading","setLoading","account_number","setAccountNumber","accountBank","setAccountBank","account_name","setAccountName","accountVerified","setAccountVerified","amount","setAmount","isOpen","onClose","banks","managed_account","toast","regexp","handleVerify","res","bank_code","position","render","handleTransfer","bank_name","find","i","code","save_beneficiary","e","updatedValue","target","value","test","map","index","name","balance","mapStateToProps","state","stateConnector","Container","TransferFundsDialog"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  Box,\n  Input,\n  Modal,\n  ModalCloseButton,\n  ModalOverlay,\n  Select,\n  useToast,\n} from '@chakra-ui/core/dist';\nimport { FundsTransferDialogWrapper as Wrapper } from './index.styles';\nimport { RootState } from '../../../../../../../../root';\nimport { connect } from 'react-redux';\nimport { resolveBankAccount, transferFunds } from '../../../../../thunks';\nimport { Button, ToastBox } from 'app/components';\nimport { formatToCurrency } from '../../../../../../inbox/inbox.utils';\n\ninterface Props {\n  banks: any[];\n  isOpen: boolean;\n  onClose: () => void;\n  proceed: Function;\n  resolveBankAccount: Function;\n  transferFunds: Function;\n  managed_account: any;\n}\n\nconst Component = (props: Props) => {\n  const [loading, setLoading] = useState(false);\n  const [account_number, setAccountNumber] = useState('');\n  const [accountBank, setAccountBank] = useState<string | null>('801');\n  const [account_name, setAccountName] = useState('');\n  const [accountVerified, setAccountVerified] = useState(false);\n  const [amount, setAmount] = useState<number>(10000);\n  // const [stage, setStage] = useState<'verify' | 'confirm'>('verify');\n\n  const { isOpen, onClose, banks } = props;\n\n  const { resolveBankAccount, transferFunds, managed_account } = props;\n\n  const toast = useToast();\n  const regexp = /^[0-9\\b]+$/;\n\n  const handleVerify = async () => {\n    setLoading(true);\n    const res = await resolveBankAccount({\n      account_number: account_number,\n      bank_code: accountBank,\n    });\n\n    if (!res) {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox onClose={onClose} message=\"Incorrect bank details provided\" />\n        ),\n      });\n    } else {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox\n            status=\"success\"\n            onClose={onClose}\n            message=\"Bank account verified successfully\"\n          />\n        ),\n      });\n      setAccountName(res['account_name']);\n      setAccountVerified(true);\n    }\n\n    setLoading(false);\n  };\n\n  const handleTransfer = async () => {\n    setLoading(true);\n    const res = await transferFunds({\n      account_number: account_number,\n      bank_code: accountBank,\n      bank_name: banks.find((i: any) => i.code === accountBank)?.['name'],\n      amount,\n      save_beneficiary: true,\n    });\n\n    if (!res) {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox onClose={onClose} message=\"Unable to complete transfer, please try again\" />\n        ),\n      });\n    } else {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox\n            status=\"success\"\n            onClose={onClose}\n            message=\"Account transfer completed successfully\"\n          />\n        ),\n      });\n      onClose();\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    setAccountNumber('');\n    setAccountName('');\n    setAccountBank('801');\n    setAccountVerified(false);\n    // setStage('verify');\n    setAmount(10000);\n  }, [isOpen]);\n\n  useEffect(() => {\n    setAccountVerified(false);\n  }, [account_number, accountBank]);\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalCloseButton size=\"sm\" />\n\n      <Wrapper>\n        <Box className=\"heading\">Transfer to Account</Box>\n        <Box display=\"flex\" flexDirection=\"column\" marginY=\"20px\">\n          <Box marginBottom=\"10px\">\n            <Box fontSize=\"14px\" color=\"#757575\" marginBottom=\"5px\">\n              Account Number\n            </Box>\n            <Input\n              value={account_number}\n              onChange={(e: any) => {\n                const updatedValue = e.target.value;\n                if (regexp.test(updatedValue)) {\n                  setAccountNumber(updatedValue);\n                }\n              }}\n            />\n          </Box>\n          <Box marginBottom=\"10px\">\n            <Box fontSize=\"14px\" color=\"#757575\" marginBottom=\"5px\">\n              Bank Name\n            </Box>\n            <Select onChange={(e: any) => setAccountBank(e.target.value)}>\n              {banks.map((i: any, index) => (\n                <option key={index} value={i.code}>\n                  {i.name}\n                </option>\n              ))}\n            </Select>\n          </Box>\n          {accountVerified && (\n            <>\n              <Box marginBottom=\"10px\">\n                <Box fontSize=\"14px\" color=\"#757575\" marginBottom=\"5px\">\n                  Account Name\n                </Box>\n                <Input value={account_name} isDisabled />\n              </Box>\n              <Box>\n                <Box fontSize=\"14px\" color=\"#757575\" marginBottom=\"5px\">\n                  Transfer Amount (₦) maximum of ₦ {formatToCurrency(managed_account?.balance)}\n                </Box>\n                <Input\n                  errorBorderColor=\"red.300\"\n                  isInvalid={amount < 10000 || amount > managed_account?.balance - 10000}\n                  type=\"number\"\n                  min={100}\n                  value={amount / 100}\n                  onChange={(e: any) => {\n                    const updatedValue = e.target.value;\n                    if (regexp.test(updatedValue)) {\n                      setAmount(updatedValue * 100);\n                    }\n                  }}\n                />\n              </Box>\n            </>\n          )}\n        </Box>\n\n        <Box display=\"flex\" flexDirection=\"row\" width=\"100%\" justifyContent=\"flex-end\">\n          {!accountVerified && (\n            <Button variantColor=\"blue\" size=\"sm\" onClick={handleVerify} isLoading={loading}>\n              Verify Account\n            </Button>\n          )}\n\n          {accountVerified && (\n            <Button\n              size=\"sm\"\n              variantColor=\"blue\"\n              isLoading={loading}\n              onClick={handleTransfer}\n              isDisabled={amount < 10000 || amount > managed_account?.balance - 10000}\n            >\n              Complete Transfer\n            </Button>\n          )}\n        </Box>\n      </Wrapper>\n    </Modal>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({});\n\nconst stateConnector = connect(mapStateToProps, {\n  resolveBankAccount,\n  transferFunds,\n});\n\nconst Container = (props: any) => {\n  return <Component {...props} />;\n};\n\nexport const TransferFundsDialog = stateConnector(Container);\n"]},"metadata":{},"sourceType":"module"}