{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/lists/component/lists/components/lists/create-list/stages/select-source.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Box, Spinner, useToast } from '@chakra-ui/core';\nimport { Button, EmptyState, ToastBox, Select } from 'app/components';\nimport noResources from '../../../../../../assets/no-resources.svg';\nimport { resource_types } from '../../../../../../list.data';\nexport const SelectListSource = props => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: proceedLoading,\n    1: setProceedLoading\n  } = useState(false);\n  const resourceType = resource_types.find(i => props.importType === i.key);\n  const {\n    setStage,\n    sources,\n    selectedResource,\n    setSelectedSource,\n    selectedSource,\n    selectedSheet,\n    setSelectedSheet,\n    sourceMeta,\n    setSourceMeta\n  } = props;\n  const toast = useToast();\n\n  const handleSpreadSheetChanged = async () => {\n    setLoading(true);\n    setSourceMeta(null);\n    setSelectedSheet(null);\n\n    try {\n      const metadata = await props.fetchGSheetMetadata(selectedResource, selectedSource);\n      setSourceMeta(metadata);\n\n      if (metadata.length > 0) {\n        setSelectedSheet(metadata[0].title);\n      }\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: \"Unable to fetch information about your spreadsheet, please try again\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 11\n          }\n        })\n      });\n    }\n\n    setLoading(false);\n  };\n\n  const handleTableChanged = () => {\n    const sourceItem = sources.find(i => i.table_name === selectedSource);\n    setSourceMeta((sourceItem === null || sourceItem === void 0 ? void 0 : sourceItem.columns) || []);\n  };\n\n  const handleEndpointProceed = async () => {\n    setProceedLoading(true);\n\n    try {\n      const schema = await props.fetchAppEndpointSchema(resourceType === null || resourceType === void 0 ? void 0 : resourceType.key, selectedSource);\n      setSourceMeta(schema);\n      return setStage('schema-mapping');\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: \"Unable to fetch information about your connection endpoint, please try again\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 11\n          }\n        })\n      });\n    }\n\n    setProceedLoading(false);\n  };\n\n  useEffect(() => {\n    if (!resourceType) return;\n\n    if (selectedSource) {\n      if ((resourceType === null || resourceType === void 0 ? void 0 : resourceType.key) === 'google-sheets') {\n        handleSpreadSheetChanged();\n      } else if ((resourceType === null || resourceType === void 0 ? void 0 : resourceType.type) === 'database') {\n        handleTableChanged();\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [selectedSource]);\n  useEffect(() => {\n    if (!selectedSource && sources.length > 0) {\n      if ((resourceType === null || resourceType === void 0 ? void 0 : resourceType.key) === 'google-sheets') {\n        setSelectedSource(sources[0].id);\n        return;\n      }\n\n      if ((resourceType === null || resourceType === void 0 ? void 0 : resourceType.type) === 'app') {\n        setSelectedSource(sources[0].id);\n      } else {\n        setSelectedSource(sources[0].table_name);\n        setSourceMeta(sources[0].columns);\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n\n  const proceed = async () => {\n    if ((resourceType === null || resourceType === void 0 ? void 0 : resourceType.type) === 'app') {\n      await handleEndpointProceed();\n    } else setStage('schema-mapping');\n  };\n\n  return __jsx(React.Fragment, null, sources.length === 0 && __jsx(EmptyState, {\n    image: noResources,\n    paddingY: \"20px\",\n    heading: (resourceType === null || resourceType === void 0 ? void 0 : resourceType.key) === 'google-sheets' ? 'Oops, no spreadsheets on this drive' : 'Oops, no tables available on this database',\n    subheading: (resourceType === null || resourceType === void 0 ? void 0 : resourceType.key) === 'google-sheets' ? 'Select a drive connection that contains spreadsheets, so you can import your data' : `Select a ${resourceType === null || resourceType === void 0 ? void 0 : resourceType.label} connection that contains tables, so you can import your data`,\n    subheadingProps: {\n      width: '400px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }), sources.length > 0 && __jsx(React.Fragment, null, (resourceType === null || resourceType === void 0 ? void 0 : resourceType.key) === 'google-sheets' && __jsx(React.Fragment, null, __jsx(Box, {\n    className: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  }, \"Select the spreadsheet which you would like to import data from\"), __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    marginY: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    marginBottom: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }, __jsx(Select, {\n    label: \"Spreadsheet\",\n    value: selectedSource || '',\n    onChange: e => setSelectedSource(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 19\n    }\n  }, sources.map(i => __jsx(\"option\", {\n    key: i.id,\n    value: i.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 23\n    }\n  }, i.name)))), __jsx(Box, {\n    marginBottom: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    marginBottom: \"5px\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 19\n    }\n  }, loading && __jsx(Spinner, {\n    size: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 33\n    }\n  })), __jsx(Select, {\n    label: \"Sheet\",\n    value: selectedSheet || '',\n    onChange: e => setSelectedSheet(e.target.value),\n    isDisabled: loading || (sourceMeta === null || sourceMeta === void 0 ? void 0 : sourceMeta.length) === 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 19\n    }\n  }, __jsx(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 21\n    }\n  }, \"Select sheet\"), sourceMeta && sourceMeta.map(i => __jsx(\"option\", {\n    key: i.title,\n    value: i.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 25\n    }\n  }, i.title))), !loading && (sourceMeta === null || sourceMeta === void 0 ? void 0 : sourceMeta.length) === 0 && __jsx(Box, {\n    mt: \"20px\",\n    fontSize: \"12px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 21\n    }\n  }, \"Looks like the selected sheet is actually empty, please select another one\"))), __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"row\",\n    width: \"100%\",\n    justifyContent: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    variantColor: \"blue\",\n    variant: \"solid\",\n    size: \"sm\",\n    onClick: proceed,\n    isDisabled: !selectedSheet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 17\n    }\n  }, \"Proceed\"))), (resourceType === null || resourceType === void 0 ? void 0 : resourceType.type) === 'app' && __jsx(React.Fragment, null, __jsx(Box, {\n    className: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 15\n    }\n  }, \"Select the endpoint which you would like to import data from\"), __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    marginY: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    marginBottom: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 17\n    }\n  }, __jsx(Select, {\n    label: \"Endpoint\",\n    value: selectedSource || '',\n    onChange: e => setSelectedSource(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 19\n    }\n  }, sources.map(i => __jsx(\"option\", {\n    key: i.id,\n    value: i.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 23\n    }\n  }, i.request_name))))), __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"row\",\n    width: \"100%\",\n    justifyContent: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    variantColor: \"blue\",\n    variant: \"solid\",\n    size: \"sm\",\n    onClick: proceed,\n    isDisabled: !selectedSource,\n    isLoading: proceedLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 17\n    }\n  }, \"Proceed\"))), (resourceType === null || resourceType === void 0 ? void 0 : resourceType.type) === 'database' && __jsx(React.Fragment, null, __jsx(Box, {\n    className: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 15\n    }\n  }, \"Select the table which you would like to import data from\"), __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    marginY: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    marginBottom: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 17\n    }\n  }, __jsx(Select, {\n    label: \"Table\",\n    value: selectedSource || '',\n    onChange: e => setSelectedSource(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 19\n    }\n  }, sources.map(i => __jsx(\"option\", {\n    key: i.table_name,\n    value: i.table_name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 23\n    }\n  }, i.table_name))))), __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"row\",\n    width: \"100%\",\n    justifyContent: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    variantColor: \"blue\",\n    variant: \"solid\",\n    size: \"sm\",\n    onClick: proceed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 17\n    }\n  }, \"Proceed\")))));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/lists/component/lists/components/lists/create-list/stages/select-source.tsx"],"names":["React","useEffect","useState","Box","Spinner","useToast","Button","EmptyState","ToastBox","Select","noResources","resource_types","SelectListSource","props","loading","setLoading","proceedLoading","setProceedLoading","resourceType","find","i","importType","key","setStage","sources","selectedResource","setSelectedSource","selectedSource","selectedSheet","setSelectedSheet","sourceMeta","setSourceMeta","toast","handleSpreadSheetChanged","metadata","fetchGSheetMetadata","length","title","e","position","render","onClose","handleTableChanged","sourceItem","table_name","columns","handleEndpointProceed","schema","fetchAppEndpointSchema","type","id","proceed","label","width","target","value","map","name","request_name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Box, Spinner, useToast } from '@chakra-ui/core';\nimport { Button, EmptyState, ToastBox, Select } from 'app/components';\nimport noResources from '../../../../../../assets/no-resources.svg';\nimport { resource_types } from '../../../../../../list.data';\n\ninterface Props {\n  importType: string | null;\n  setStage: Function;\n  sources: any[];\n  selectedResource: string | null;\n  fetchGSheetMetadata: Function;\n  sourceMeta: any[] | null;\n  setSourceMeta: Function;\n  selectedSheet: string | null;\n  setSelectedSheet: Function;\n  selectedSource: string | null;\n  setSelectedSource: Function;\n  fetchAppEndpointSchema: Function;\n}\n\nexport const SelectListSource = (props: Props) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [proceedLoading, setProceedLoading] = useState<boolean>(false);\n\n  const resourceType = resource_types.find((i: any) => props.importType === i.key);\n\n  const {\n    setStage,\n    sources,\n    selectedResource,\n    setSelectedSource,\n    selectedSource,\n    selectedSheet,\n    setSelectedSheet,\n    sourceMeta,\n    setSourceMeta,\n  } = props;\n\n  const toast = useToast();\n\n  const handleSpreadSheetChanged = async () => {\n    setLoading(true);\n    setSourceMeta(null);\n    setSelectedSheet(null);\n    try {\n      const metadata = await props.fetchGSheetMetadata(selectedResource, selectedSource);\n      setSourceMeta(metadata);\n      if (metadata.length > 0) {\n        setSelectedSheet(metadata[0].title);\n      }\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox\n            onClose={onClose}\n            message=\"Unable to fetch information about your spreadsheet, please try again\"\n          />\n        ),\n      });\n    }\n    setLoading(false);\n  };\n\n  const handleTableChanged = () => {\n    const sourceItem = sources.find((i: any) => i.table_name === selectedSource);\n    setSourceMeta(sourceItem?.columns || []);\n  };\n\n  const handleEndpointProceed = async () => {\n    setProceedLoading(true);\n    try {\n      const schema = await props.fetchAppEndpointSchema(resourceType?.key, selectedSource);\n      setSourceMeta(schema);\n      return setStage('schema-mapping');\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox\n            onClose={onClose}\n            message=\"Unable to fetch information about your connection endpoint, please try again\"\n          />\n        ),\n      });\n    }\n    setProceedLoading(false);\n  };\n\n  useEffect(() => {\n    if (!resourceType) return;\n    if (selectedSource) {\n      if (resourceType?.key === 'google-sheets') {\n        handleSpreadSheetChanged();\n      } else if (resourceType?.type === 'database') {\n        handleTableChanged();\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedSource]);\n\n  useEffect(() => {\n    if (!selectedSource && sources.length > 0) {\n      if (resourceType?.key === 'google-sheets') {\n        setSelectedSource(sources[0].id);\n        return;\n      }\n      if (resourceType?.type === 'app') {\n        setSelectedSource(sources[0].id);\n      } else {\n        setSelectedSource(sources[0].table_name);\n        setSourceMeta(sources[0].columns);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const proceed = async () => {\n    if (resourceType?.type === 'app') {\n      await handleEndpointProceed();\n    } else setStage('schema-mapping');\n  };\n\n  return (\n    <>\n      {sources.length === 0 && (\n        <EmptyState\n          image={noResources}\n          paddingY=\"20px\"\n          heading={\n            resourceType?.key === 'google-sheets'\n              ? 'Oops, no spreadsheets on this drive'\n              : 'Oops, no tables available on this database'\n          }\n          subheading={\n            resourceType?.key === 'google-sheets'\n              ? 'Select a drive connection that contains spreadsheets, so you can import your data'\n              : `Select a ${resourceType?.label} connection that contains tables, so you can import your data`\n          }\n          subheadingProps={{\n            width: '400px',\n          }}\n        />\n      )}\n\n      {sources.length > 0 && (\n        <>\n          {resourceType?.key === 'google-sheets' && (\n            <>\n              <Box className=\"description\">\n                Select the spreadsheet which you would like to import data from\n              </Box>\n\n              <Box display=\"flex\" flexDirection=\"column\" marginY=\"20px\">\n                <Box marginBottom=\"20px\">\n                  <Select\n                    label=\"Spreadsheet\"\n                    value={selectedSource || ''}\n                    onChange={(e: any) => setSelectedSource(e.target.value)}\n                  >\n                    {sources.map((i: any) => (\n                      <option key={i.id} value={i.id}>\n                        {i.name}\n                      </option>\n                    ))}\n                  </Select>\n                </Box>\n\n                <Box marginBottom=\"10px\">\n                  <Box marginBottom=\"5px\" display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n                    {loading && <Spinner size=\"xs\" />}\n                  </Box>\n                  <Select\n                    label=\"Sheet\"\n                    value={selectedSheet || ''}\n                    onChange={(e: any) => setSelectedSheet(e.target.value)}\n                    isDisabled={loading || sourceMeta?.length === 0}\n                  >\n                    <option value=\"\">Select sheet</option>\n                    {sourceMeta &&\n                      sourceMeta.map((i: any) => (\n                        <option key={i.title} value={i.title}>\n                          {i.title}\n                        </option>\n                      ))}\n                  </Select>\n\n                  {!loading && sourceMeta?.length === 0 && (\n                    <Box mt=\"20px\" fontSize=\"12px\">\n                      Looks like the selected sheet is actually empty, please select another one\n                    </Box>\n                  )}\n                </Box>\n              </Box>\n\n              <Box display=\"flex\" flexDirection=\"row\" width=\"100%\" justifyContent=\"flex-end\">\n                <Button\n                  variantColor=\"blue\"\n                  variant=\"solid\"\n                  size=\"sm\"\n                  onClick={proceed}\n                  isDisabled={!selectedSheet}\n                >\n                  Proceed\n                </Button>\n              </Box>\n            </>\n          )}\n\n          {resourceType?.type === 'app' && (\n            <>\n              <Box className=\"description\">\n                Select the endpoint which you would like to import data from\n              </Box>\n\n              <Box display=\"flex\" flexDirection=\"column\" marginY=\"20px\">\n                <Box marginBottom=\"20px\">\n                  <Select\n                    label=\"Endpoint\"\n                    value={selectedSource || ''}\n                    onChange={(e: any) => setSelectedSource(e.target.value)}\n                  >\n                    {sources.map((i: any) => (\n                      <option key={i.id} value={i.id}>\n                        {i.request_name}\n                      </option>\n                    ))}\n                  </Select>\n                </Box>\n              </Box>\n\n              <Box display=\"flex\" flexDirection=\"row\" width=\"100%\" justifyContent=\"flex-end\">\n                <Button\n                  variantColor=\"blue\"\n                  variant=\"solid\"\n                  size=\"sm\"\n                  onClick={proceed}\n                  isDisabled={!selectedSource}\n                  isLoading={proceedLoading}\n                >\n                  Proceed\n                </Button>\n              </Box>\n            </>\n          )}\n\n          {resourceType?.type === 'database' && (\n            <>\n              <Box className=\"description\">\n                Select the table which you would like to import data from\n              </Box>\n              <Box display=\"flex\" flexDirection=\"column\" marginY=\"20px\">\n                <Box marginBottom=\"20px\">\n                  <Select\n                    label=\"Table\"\n                    value={selectedSource || ''}\n                    onChange={(e: any) => setSelectedSource(e.target.value)}\n                  >\n                    {sources.map((i: any) => (\n                      <option key={i.table_name} value={i.table_name}>\n                        {i.table_name}\n                      </option>\n                    ))}\n                  </Select>\n                </Box>\n              </Box>\n\n              <Box display=\"flex\" flexDirection=\"row\" width=\"100%\" justifyContent=\"flex-end\">\n                <Button variantColor=\"blue\" variant=\"solid\" size=\"sm\" onClick={proceed}>\n                  Proceed\n                </Button>\n              </Box>\n            </>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}