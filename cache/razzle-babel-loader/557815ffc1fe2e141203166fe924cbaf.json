{"ast":null,"code":"import _extends from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nconst _excluded = [\"table\"],\n      _excluded2 = [\"table\", \"contact\", \"contact_id\"],\n      _excluded3 = [\"contact_id\"],\n      _excluded4 = [\"columns\"];\nvar _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/components/more-info/Contact.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Box, Button, Grid, Icon, Input, Popover, PopoverBody, PopoverContent, PopoverCloseButton, PopoverTrigger, PseudoBox, Stack, Text, Flex, Image } from '@chakra-ui/core';\nimport { PROPERTIES_ICONS } from '../../../tables/components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { capitalize, isEmpty } from 'lodash';\nimport { addContact, addTableColumn, searchContactList, selectAddressBookDetailByID, selectContactTable, selectCustomerByID, selectName, selectThreadDetailByID, updateContact } from '../../slices';\nimport { mergeContact, sortColumns, transformSenderToContact } from '../../inbox.utils';\nimport { useParams } from 'react-router-dom';\nimport { INBOX_INIT } from '../../inbox.data';\nimport { Field } from '../../../lists/components/record-modal/index.component';\nimport { GridColumnMenu } from '../../../lists/components/grid/column-menu';\nimport noSearch from '../../no-search.svg';\nimport { selectThreadReceiverPlatformID } from '../../../channels';\n\nfunction Heading(_ref) {\n  let {\n    table\n  } = _ref,\n      item = _objectWithoutProperties(_ref, _excluded);\n\n  const dispatch = useDispatch();\n  const {\n    0: value,\n    1: setValue\n  } = useState('');\n  const {\n    type,\n    label\n  } = item;\n\n  const handleOnEnterPressed = event => {\n    event.stopPropagation();\n    if (event.key !== 'Enter') return;\n    event.target.blur();\n  };\n\n  const handleBlur = async () => {\n    if (table && item && value && label.toLowerCase() !== value.toLowerCase()) {\n      try {\n        await dispatch(addTableColumn(_objectSpread(_objectSpread({}, table), {}, {\n          columns: table.columns.map(column => {\n            if (column.id !== item.id) {\n              return column;\n            }\n\n            return _objectSpread(_objectSpread({}, item), {}, {\n              label: capitalize(value),\n              name: value.toLowerCase()\n            });\n          })\n        })));\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (value !== label) {\n      setValue(label);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [label]);\n  return __jsx(Stack, {\n    isInline: true,\n    spacing: \".5rem\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, __jsx(Icon, {\n    name: PROPERTIES_ICONS[type.toLowerCase()],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }), __jsx(Input, {\n    flex: 1,\n    value: value,\n    onKeyPress: handleOnEnterPressed,\n    onBlur: handleBlur,\n    onChange: e => setValue(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction ContactItem(_ref2) {\n  let {\n    table,\n    contact,\n    contact_id\n  } = _ref2,\n      item = _objectWithoutProperties(_ref2, _excluded2);\n\n  const {\n    label,\n    value\n  } = item;\n  const dispatch = useDispatch();\n\n  const updateCellValue = async (value, columnID) => {\n    if (contact && contact_id && contact[columnID] !== value) {\n      contact[columnID] = value;\n      const result = await dispatch(updateContact({\n        contact_id,\n        contact\n      }));\n\n      if (updateContact.rejected.match(result)) {\n        console.log(result.error.message);\n      }\n    }\n  };\n\n  const addSelectOption = (columnID, value) => {\n    console.log(value, columnID);\n  };\n\n  const updateSelectOption = (columnID, optionID, payload) => {\n    console.log(columnID, optionID, payload);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Heading, _extends({\n    table: table\n  }, item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  })), __jsx(Field, {\n    value: value,\n    column: item,\n    updateCellValue,\n    updateSelectOption,\n    addSelectOption,\n    placeholder: `Add ${label}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction NewProperty({\n  table\n}) {\n  const dispatch = useDispatch();\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n  const INITIAL_PROPERTY_VALUE = {\n    name: '',\n    type: 'TEXT',\n    hidden: false,\n    label: ''\n  };\n  const {\n    0: property,\n    1: setProperty\n  } = useState(INITIAL_PROPERTY_VALUE);\n\n  const handleNewContactProperty = async () => {\n    if (table && property) {\n      try {\n        await dispatch(addTableColumn(_objectSpread(_objectSpread({}, table), {}, {\n          columns: [...table.columns, property]\n        })));\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  const closeColumnMenu = async () => {\n    property.label && handleNewContactProperty();\n    setIsOpen(false);\n    setProperty(INITIAL_PROPERTY_VALUE);\n  };\n\n  const handleUpdateColumnLabel = (columnID, label) => {\n    setProperty(_objectSpread(_objectSpread({}, property), {}, {\n      label: capitalize(label),\n      name: label.toLowerCase()\n    }));\n  };\n\n  const handleUpdateColumnType = (columnID, type) => {\n    setProperty(_objectSpread(_objectSpread({}, property), {}, {\n      type: type.toUpperCase()\n    }));\n  };\n\n  const handleUpdateColumn = (columnID, payload) => {\n    const {\n      label,\n      type\n    } = payload;\n    setProperty(_objectSpread(_objectSpread({}, property), {}, {\n      type: type || property.type,\n      label: capitalize(label),\n      name: label.toLowerCase()\n    }));\n  };\n\n  const colID = 'add-new-property';\n  return __jsx(React.Fragment, null, !!isOpen && __jsx(GridColumnMenu, {\n    columnID: colID // @ts-ignore\n    ,\n    column: property,\n    isOpen: !!isOpen,\n    close: closeColumnMenu,\n    updateLabel: handleUpdateColumnLabel,\n    updateType: handleUpdateColumnType,\n    updateColumn: handleUpdateColumn,\n    updateCustomization: () => '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    \"col-id\": colID,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    variant: \"ghost\",\n    variantColor: \"blue\",\n    fontSize: \".75rem\",\n    lineHeight: \".875rem\",\n    leftIcon: \"add\",\n    height: \"auto\",\n    minWidth: \"auto\",\n    padding: \".25rem\",\n    _focus: {\n      boxShadow: 'none'\n    },\n    onClick: () => setIsOpen(!isOpen),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }\n  }, \"Add a property\")));\n}\n\nfunction UpdateContact({\n  onAddContact,\n  table_id,\n  children\n}) {\n  const dispatch = useDispatch();\n  const {\n    0: search,\n    1: setSearch\n  } = useState('');\n  const {\n    0: searchedContacts,\n    1: setSearchedContacts\n  } = useState();\n  const initialFocusRef = useRef(null);\n\n  const resetAfterSubmit = () => {\n    setSearch('');\n    setSearchedContacts([]);\n  };\n\n  const handleAddContact = contactToBeUpdated => {\n    onAddContact(contactToBeUpdated);\n    resetAfterSubmit();\n  };\n\n  const handleContactSearch = async value => {\n    setSearch(value || '');\n    const fc = await dispatch(searchContactList({\n      table_id,\n      query: value\n    }));\n\n    if (searchContactList.fulfilled.match(fc)) {\n      setSearchedContacts(fc.payload);\n    } else {\n      console.log(fc.error.message);\n    }\n  };\n\n  useEffect(() => {\n    handleContactSearch(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return __jsx(Popover, {\n    initialFocusRef: initialFocusRef,\n    closeOnBlur: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 5\n    }\n  }, __jsx(PopoverTrigger, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }\n  }, children), __jsx(PopoverContent, {\n    zIndex: 1500,\n    maxWidth: \"initial\",\n    width: \"auto\",\n    paddingY: \"1.25rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }\n  }, __jsx(PopoverCloseButton, {\n    size: \"1rem\",\n    color: \"#3f536e\",\n    right: \"1.5rem\",\n    top: \".75rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 9\n    }\n  }), __jsx(PopoverBody, {\n    paddingX: \"3.125rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    fontSize: \"1.125rem\",\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 11\n    }\n  }, \"Update Contact\"), __jsx(Text, {\n    fontSize: \".75rem\",\n    marginTop: \"1.6875rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 11\n    }\n  }, \"Select contact to update.\"), __jsx(Input, {\n    type: \"text\",\n    placeholder: \"Search Contact...\",\n    border: \"none\",\n    borderBottom: \"solid 1px rgba(17, 17, 17, 0.1)\",\n    padding: \"1rem 0\",\n    height: \"auto\",\n    borderRadius: \"0\",\n    _focus: {\n      boxShadow: 'none',\n      borderColor: 'rgba(17, 17, 17, 0.1)'\n    },\n    ref: initialFocusRef,\n    value: search,\n    onChange: ({\n      target: {\n        value\n      }\n    }) => handleContactSearch(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 11\n    }\n  }), __jsx(Box, {\n    overflowY: \"hidden\",\n    marginX: \"-3rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    overflowY: \"auto\",\n    height: \"300px\",\n    paddingX: \"2.725rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 13\n    }\n  }, searchedContacts && searchedContacts.length > 0 ? searchedContacts.map(item => item.name).map((itemName, index) => __jsx(PseudoBox, {\n    key: searchedContacts[index].id,\n    as: \"p\",\n    marginTop: \".625rem\",\n    marginX: \"-.5rem\",\n    padding: \".5rem\",\n    _hover: {\n      backgroundColor: 'rgba(119, 131, 253, 0.05)',\n      cursor: 'pointer'\n    },\n    onClick: () => handleAddContact(searchedContacts[index]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 21\n    }\n  }, itemName)) : __jsx(Flex, {\n    display: \"flex\",\n    textAlign: \"center\",\n    alignItems: \"center\",\n    paddingTop: \"1.25rem\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    color: \"rgb(0, 0, 0, 0.5)\",\n    borderTop: \"solid 1px #e9edf0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 17\n    }\n  }, __jsx(Image, {\n    src: noSearch,\n    width: \"80px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 19\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 19\n    }\n  }, \"No Result Found\"), __jsx(Text, {\n    fontSize: \".75rem\",\n    marginTop: \".25rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 19\n    }\n  }, `We couldn't find any matches for \"${search}\"`)))))));\n}\n\nexport function Contact(_ref3) {\n  let props = Object.assign({}, _ref3);\n  const params = useParams();\n  const thread_id = params.id; //@ts-ignore\n\n  const {\n    address_book_id,\n    sender_id\n  } = useSelector(state => selectThreadDetailByID(state, params.id === 'new' ? '' : params.id)) || INBOX_INIT.thread;\n  const table = useSelector(selectContactTable);\n  const addressBookDetail = useSelector(state => selectAddressBookDetailByID(state, address_book_id || ''));\n  let senderDetail = useSelector(state => selectCustomerByID(state, sender_id || ''));\n  const threadReceiverUserID = useSelector(state => selectThreadReceiverPlatformID(state, params.id === 'new' ? '' : params.id));\n  const sender_name = useSelector(state => selectName(state, {\n    id: sender_id,\n    credentialUserID: threadReceiverUserID\n  }));\n  senderDetail = _objectSpread(_objectSpread({}, senderDetail), {}, {\n    platform_name: sender_name\n  });\n  let columns = [];\n  let contact = {};\n  let contact_id = '';\n\n  if (!addressBookDetail && table && senderDetail) {\n    const [cols, data] = transformSenderToContact(table, senderDetail);\n    columns = cols;\n    contact = data;\n  } else {\n    var _addressBookDetail$co;\n\n    columns = (table === null || table === void 0 ? void 0 : table.columns) || [];\n\n    const _ref4 = (addressBookDetail === null || addressBookDetail === void 0 ? void 0 : (_addressBookDetail$co = addressBookDetail.contactinfo) === null || _addressBookDetail$co === void 0 ? void 0 : _addressBookDetail$co.columns) || {},\n          {\n      contact_id: cID = ''\n    } = _ref4,\n          c = _objectWithoutProperties(_ref4, _excluded3);\n\n    contact_id = cID;\n    contact = c;\n  }\n\n  const [sortedColumns, haveValueLength] = sortColumns(columns, contact);\n  columns = sortedColumns;\n  const dispatch = useDispatch();\n  const {\n    0: contactBtnLoader,\n    1: setContactBtnLoader\n  } = useState(false);\n\n  const handleAddContact = async contactToBeUpdated => {\n    const _ref5 = table || {},\n          {\n      columns: c\n    } = _ref5,\n          restOfTable = _objectWithoutProperties(_ref5, _excluded4);\n\n    if (columns && contact && !isEmpty(restOfTable) && thread_id) {\n      try {\n        let contactQ = contact;\n\n        if (!isEmpty(contactToBeUpdated)) {\n          contactQ = mergeContact(contact, contactToBeUpdated === null || contactToBeUpdated === void 0 ? void 0 : contactToBeUpdated.columns, columns);\n        }\n\n        setContactBtnLoader(true);\n        await dispatch(addContact({\n          columns,\n          restOfTable,\n          thread_id,\n          contact: contactQ,\n          contact_id: contactToBeUpdated === null || contactToBeUpdated === void 0 ? void 0 : contactToBeUpdated.id,\n          customer_id: sender_id\n        }));\n      } catch (error) {\n        console.log(error);\n      }\n\n      setContactBtnLoader(false);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Grid, _extends({\n    paddingRight: \"1.5rem\",\n    fontSize: \".75rem\",\n    className: \"contact-detail\",\n    flex: 1,\n    overflowY: \"auto\"\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }\n  }), (address_book_id ? columns : columns.slice(0, haveValueLength)).map(item => __jsx(ContactItem, _extends({\n    key: item.id,\n    table: table,\n    contact_id: contact_id,\n    contact: contact,\n    value: contact[item.id || '']\n  }, item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 11\n    }\n  })))), __jsx(Stack, {\n    isInline: true,\n    justifyContent: \"flex-start\",\n    marginTop: \"1.5rem\",\n    spacing: \".5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 7\n    }\n  }, address_book_id ? __jsx(NewProperty, {\n    table: table,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 11\n    }\n  }) : __jsx(React.Fragment, null, __jsx(Button, {\n    variant: \"ghost\",\n    variantColor: \"blue\",\n    fontSize: \".75rem\",\n    lineHeight: \".875rem\",\n    leftIcon: \"add\",\n    height: \"auto\",\n    minWidth: \"auto\",\n    padding: \".25rem\",\n    marginRight: \".5rem\",\n    _focus: {\n      boxShadow: 'none'\n    },\n    loadingText: \"Adding contact\",\n    isLoading: contactBtnLoader,\n    onClick: () => handleAddContact(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 13\n    }\n  }, \"Add Contact\"), __jsx(UpdateContact, {\n    onAddContact: handleAddContact,\n    table_id: table === null || table === void 0 ? void 0 : table.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    variant: \"ghost\",\n    variantColor: \"blue\",\n    fontSize: \".75rem\",\n    lineHeight: \".875rem\",\n    leftIcon: \"edit\",\n    height: \"auto\",\n    minWidth: \"auto\",\n    padding: \".25rem\",\n    _focus: {\n      boxShadow: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 15\n    }\n  }, \"Update Contact\")))));\n}","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/components/more-info/Contact.tsx"],"names":["React","useEffect","useRef","useState","Box","Button","Grid","Icon","Input","Popover","PopoverBody","PopoverContent","PopoverCloseButton","PopoverTrigger","PseudoBox","Stack","Text","Flex","Image","PROPERTIES_ICONS","useDispatch","useSelector","capitalize","isEmpty","addContact","addTableColumn","searchContactList","selectAddressBookDetailByID","selectContactTable","selectCustomerByID","selectName","selectThreadDetailByID","updateContact","mergeContact","sortColumns","transformSenderToContact","useParams","INBOX_INIT","Field","GridColumnMenu","noSearch","selectThreadReceiverPlatformID","Heading","table","item","dispatch","value","setValue","type","label","handleOnEnterPressed","event","stopPropagation","key","target","blur","handleBlur","toLowerCase","columns","map","column","id","name","error","console","log","e","ContactItem","contact","contact_id","updateCellValue","columnID","result","rejected","match","message","addSelectOption","updateSelectOption","optionID","payload","placeholder","NewProperty","isOpen","setIsOpen","INITIAL_PROPERTY_VALUE","hidden","property","setProperty","handleNewContactProperty","closeColumnMenu","handleUpdateColumnLabel","handleUpdateColumnType","toUpperCase","handleUpdateColumn","colID","boxShadow","UpdateContact","onAddContact","table_id","children","search","setSearch","searchedContacts","setSearchedContacts","initialFocusRef","resetAfterSubmit","handleAddContact","contactToBeUpdated","handleContactSearch","fc","query","fulfilled","borderColor","length","itemName","index","backgroundColor","cursor","Contact","props","params","thread_id","address_book_id","sender_id","state","thread","addressBookDetail","senderDetail","threadReceiverUserID","sender_name","credentialUserID","platform_name","cols","data","contactinfo","cID","c","sortedColumns","haveValueLength","contactBtnLoader","setContactBtnLoader","restOfTable","contactQ","customer_id","slice"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport {\n  Box,\n  Button,\n  Grid,\n  GridProps,\n  Icon,\n  Input,\n  Popover,\n  PopoverBody,\n  PopoverContent,\n  PopoverCloseButton,\n  PopoverTrigger,\n  PseudoBox,\n  Stack,\n  Text,\n  Flex,\n  Image,\n} from '@chakra-ui/core';\nimport { PROPERTIES_ICONS, PropertySchema } from '../../../tables/components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { capitalize, isEmpty } from 'lodash';\nimport {\n  addContact,\n  addTableColumn,\n  searchContactList,\n  selectAddressBookDetailByID,\n  selectContactTable,\n  selectCustomerByID,\n  selectName,\n  selectThreadDetailByID,\n  updateContact,\n} from '../../slices';\nimport { RootState } from '../../../../../root';\nimport { TablePropertiesOptions } from '../../../tables';\nimport { ContactColumnSchema, CustomerSchema } from '../../inbox.types';\nimport { mergeContact, sortColumns, transformSenderToContact } from '../../inbox.utils';\nimport { useParams } from 'react-router-dom';\nimport { INBOX_INIT } from '../../inbox.data';\nimport { Field } from '../../../lists/components/record-modal/index.component';\nimport { GridColumnMenu } from '../../../lists/components/grid/column-menu';\nimport noSearch from '../../no-search.svg';\nimport { selectThreadReceiverPlatformID } from '../../../channels';\n\nfunction Heading({\n  table,\n  ...item\n}: PropertySchema & {\n  table: TablePropertiesOptions | undefined;\n}) {\n  const dispatch = useDispatch();\n  const [value, setValue] = useState('');\n\n  const { type, label } = item;\n\n  const handleOnEnterPressed = (event: any) => {\n    event.stopPropagation();\n    if (event.key !== 'Enter') return;\n\n    event.target.blur();\n  };\n\n  const handleBlur = async () => {\n    if (table && item && value && label.toLowerCase() !== value.toLowerCase()) {\n      try {\n        await dispatch(\n          addTableColumn({\n            ...table,\n            columns: table.columns.map(column => {\n              if (column.id !== item.id) {\n                return column;\n              }\n\n              return {\n                ...item,\n                label: capitalize(value),\n                name: value.toLowerCase(),\n              };\n            }),\n          }),\n        );\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (value !== label) {\n      setValue(label);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [label]);\n\n  return (\n    <Stack isInline spacing=\".5rem\" alignItems=\"center\">\n      <Icon name={PROPERTIES_ICONS[type.toLowerCase()]} />\n\n      <Input\n        flex={1}\n        value={value}\n        onKeyPress={handleOnEnterPressed}\n        onBlur={handleBlur}\n        onChange={(e: any) => setValue(e.target.value)}\n      />\n    </Stack>\n  );\n}\n\nfunction ContactItem({\n  table,\n  contact,\n  contact_id,\n  ...item\n}: PropertySchema & {\n  uid?: string | number;\n  value: string;\n  contact_id?: string;\n  contact: Omit<ContactColumnSchema, 'contact_id'>;\n  table: TablePropertiesOptions | undefined;\n}) {\n  const { label, value } = item;\n  const dispatch = useDispatch();\n\n  const updateCellValue = async (value: any, columnID: any) => {\n    if (contact && contact_id && contact[columnID] !== value) {\n      contact[columnID] = value;\n      const result: any = await dispatch(\n        updateContact({\n          contact_id,\n          contact,\n        }),\n      );\n\n      if (updateContact.rejected.match(result)) {\n        console.log(result.error.message);\n      }\n    }\n  };\n\n  const addSelectOption = (columnID: any, value: any) => {\n    console.log(value, columnID);\n  };\n\n  const updateSelectOption = (columnID: any, optionID: any, payload: any) => {\n    console.log(columnID, optionID, payload);\n  };\n\n  return (\n    <>\n      <Heading table={table} {...item} />\n\n      <Field\n        {...{\n          value: value,\n          column: item,\n          updateCellValue,\n          updateSelectOption,\n          addSelectOption,\n          placeholder: `Add ${label}`,\n        }}\n      />\n    </>\n  );\n}\n\nfunction NewProperty({ table }: { table: TablePropertiesOptions | undefined }) {\n  const dispatch = useDispatch();\n  const [isOpen, setIsOpen] = useState(false);\n  const INITIAL_PROPERTY_VALUE = {\n    name: '',\n    type: 'TEXT',\n    hidden: false,\n    label: '',\n  };\n  const [property, setProperty] = useState<PropertySchema>(INITIAL_PROPERTY_VALUE);\n\n  const handleNewContactProperty = async () => {\n    if (table && property) {\n      try {\n        await dispatch(addTableColumn({ ...table, columns: [...table.columns, property] }));\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  const closeColumnMenu = async () => {\n    property.label && handleNewContactProperty();\n    setIsOpen(false);\n    setProperty(INITIAL_PROPERTY_VALUE);\n  };\n\n  const handleUpdateColumnLabel = (columnID: string, label: string) => {\n    setProperty({\n      ...property,\n      label: capitalize(label),\n      name: label.toLowerCase(),\n    });\n  };\n\n  const handleUpdateColumnType = (columnID: string, type: string) => {\n    setProperty({ ...property, type: type.toUpperCase() });\n  };\n\n  const handleUpdateColumn = (columnID: string, payload: any) => {\n    const { label, type } = payload;\n    setProperty({\n      ...property,\n      type: type || property.type,\n      label: capitalize(label),\n      name: label.toLowerCase(),\n    });\n  };\n\n  const colID = 'add-new-property';\n\n  return (\n    <>\n      {!!isOpen && (\n        <GridColumnMenu\n          columnID={colID}\n          // @ts-ignore\n          column={property}\n          isOpen={!!isOpen}\n          close={closeColumnMenu}\n          updateLabel={handleUpdateColumnLabel}\n          updateType={handleUpdateColumnType}\n          updateColumn={handleUpdateColumn}\n          updateCustomization={() => ''}\n        />\n      )}\n\n      <div col-id={colID}>\n        <Button\n          variant=\"ghost\"\n          variantColor=\"blue\"\n          fontSize=\".75rem\"\n          lineHeight=\".875rem\"\n          leftIcon=\"add\"\n          height=\"auto\"\n          minWidth=\"auto\"\n          padding=\".25rem\"\n          _focus={{ boxShadow: 'none' }}\n          onClick={() => setIsOpen(!isOpen)}\n        >\n          Add a property\n        </Button>\n      </div>\n    </>\n  );\n}\n\nfunction UpdateContact({ onAddContact, table_id, children }: any) {\n  const dispatch = useDispatch();\n  const [search, setSearch] = useState<string>('');\n  const [searchedContacts, setSearchedContacts] = useState<any[]>();\n  const initialFocusRef = useRef<HTMLInputElement>(null);\n\n  const resetAfterSubmit = () => {\n    setSearch('');\n    setSearchedContacts([]);\n  };\n\n  const handleAddContact = (contactToBeUpdated: any) => {\n    onAddContact(contactToBeUpdated);\n    resetAfterSubmit();\n  };\n\n  const handleContactSearch = async (value?: string) => {\n    setSearch(value || '');\n    const fc: any = await dispatch(\n      searchContactList({\n        table_id,\n        query: value,\n      }),\n    );\n\n    if (searchContactList.fulfilled.match(fc)) {\n      setSearchedContacts(fc.payload);\n    } else {\n      console.log(fc.error.message);\n    }\n  };\n\n  useEffect(() => {\n    handleContactSearch();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Popover initialFocusRef={initialFocusRef} closeOnBlur={false}>\n      <PopoverTrigger>{children}</PopoverTrigger>\n\n      <PopoverContent zIndex={1500} maxWidth=\"initial\" width=\"auto\" paddingY=\"1.25rem\">\n        <PopoverCloseButton size=\"1rem\" color=\"#3f536e\" right=\"1.5rem\" top=\".75rem\" />\n\n        <PopoverBody paddingX=\"3.125rem\">\n          <Text fontSize=\"1.125rem\" fontWeight={600}>\n            Update Contact\n          </Text>\n\n          <Text fontSize=\".75rem\" marginTop=\"1.6875rem\">\n            Select contact to update.\n          </Text>\n\n          <Input\n            type=\"text\"\n            placeholder=\"Search Contact...\"\n            border=\"none\"\n            borderBottom=\"solid 1px rgba(17, 17, 17, 0.1)\"\n            padding=\"1rem 0\"\n            height=\"auto\"\n            borderRadius=\"0\"\n            _focus={{\n              boxShadow: 'none',\n              borderColor: 'rgba(17, 17, 17, 0.1)',\n            }}\n            ref={initialFocusRef}\n            value={search}\n            onChange={({ target: { value } }: any) => handleContactSearch(value)}\n          />\n\n          <Box overflowY=\"hidden\" marginX=\"-3rem\">\n            <Box overflowY=\"auto\" height=\"300px\" paddingX=\"2.725rem\">\n              {searchedContacts && searchedContacts.length > 0 ? (\n                searchedContacts\n                  .map(item => item.name)\n                  .map((itemName, index) => (\n                    <PseudoBox\n                      key={searchedContacts[index].id}\n                      as=\"p\"\n                      marginTop=\".625rem\"\n                      marginX=\"-.5rem\"\n                      padding=\".5rem\"\n                      _hover={{\n                        backgroundColor: 'rgba(119, 131, 253, 0.05)',\n                        cursor: 'pointer',\n                      }}\n                      onClick={() => handleAddContact(searchedContacts[index])}\n                    >\n                      {itemName}\n                    </PseudoBox>\n                  ))\n              ) : (\n                <Flex\n                  display=\"flex\"\n                  textAlign=\"center\"\n                  alignItems=\"center\"\n                  paddingTop=\"1.25rem\"\n                  justifyContent=\"center\"\n                  flexDirection=\"column\"\n                  color=\"rgb(0, 0, 0, 0.5)\"\n                  borderTop=\"solid 1px #e9edf0\"\n                >\n                  <Image src={noSearch} width=\"80px\" />\n                  <Text>No Result Found</Text>\n                  <Text\n                    fontSize=\".75rem\"\n                    marginTop=\".25rem\"\n                  >{`We couldn't find any matches for \"${search}\"`}</Text>\n                </Flex>\n              )}\n            </Box>\n          </Box>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\nexport function Contact({ ...props }: GridProps) {\n  const params = useParams<{ id: string }>();\n  const thread_id = params.id;\n\n  //@ts-ignore\n  const { address_book_id, sender_id } =\n    useSelector((state: RootState) =>\n      selectThreadDetailByID(state, params.id === 'new' ? '' : params.id),\n    ) || INBOX_INIT.thread;\n  const table = useSelector(selectContactTable);\n  const addressBookDetail = useSelector((state: RootState) =>\n    selectAddressBookDetailByID(state, address_book_id || ''),\n  );\n  let senderDetail = useSelector((state: RootState) => selectCustomerByID(state, sender_id || ''));\n\n  const threadReceiverUserID = useSelector((state: RootState) =>\n    selectThreadReceiverPlatformID(state, params.id === 'new' ? '' : params.id),\n  );\n  const sender_name = useSelector((state: RootState) =>\n    selectName(state, \n      { id: sender_id, credentialUserID: threadReceiverUserID \n      }),\n  );\n  senderDetail = { ...senderDetail, platform_name: sender_name } as CustomerSchema;\n\n  let columns: TablePropertiesOptions['columns'] = [];\n  let contact: Omit<ContactColumnSchema, 'contact_id'> = {};\n  let contact_id = '';\n\n  if (!addressBookDetail && table && senderDetail) {\n    const [cols, data] = transformSenderToContact(table, senderDetail);\n    columns = cols;\n    contact = data;\n  } else {\n    columns = table?.columns || [];\n    const { contact_id: cID = '', ...c } = addressBookDetail?.contactinfo?.columns || {};\n    contact_id = cID;\n    contact = c as Omit<ContactColumnSchema, 'contact_id'>;\n  }\n\n  const [sortedColumns, haveValueLength] = sortColumns(columns, contact);\n  columns = sortedColumns as PropertySchema[];\n  const dispatch = useDispatch();\n  const [contactBtnLoader, setContactBtnLoader] = useState(false);\n\n  const handleAddContact = async (contactToBeUpdated?: any) => {\n    const { columns: c, ...restOfTable } = table || {};\n    if (columns && contact && !isEmpty(restOfTable) && thread_id) {\n      try {\n        let contactQ = contact;\n        if (!isEmpty(contactToBeUpdated)) {\n          contactQ = mergeContact(contact, contactToBeUpdated?.columns, columns);\n        }\n\n        setContactBtnLoader(true);\n        await dispatch(\n          addContact({\n            columns,\n            restOfTable,\n            thread_id,\n            contact: contactQ,\n            contact_id: contactToBeUpdated?.id,\n            customer_id: sender_id,\n          }),\n        );\n      } catch (error) {\n        console.log(error);\n      }\n      setContactBtnLoader(false);\n    }\n  };\n\n  return (\n    <>\n      <Grid\n        paddingRight=\"1.5rem\"\n        fontSize=\".75rem\"\n        className=\"contact-detail\"\n        flex={1}\n        overflowY=\"auto\"\n        {...props}\n      >\n        {(address_book_id ? columns : columns.slice(0, haveValueLength as number)).map(item => (\n          <ContactItem\n            key={item.id}\n            table={table}\n            contact_id={contact_id}\n            contact={contact}\n            value={contact[item.id || ''] as any}\n            {...item}\n          />\n        ))}\n      </Grid>\n\n      <Stack isInline justifyContent=\"flex-start\" marginTop=\"1.5rem\" spacing=\".5rem\">\n        {address_book_id ? (\n          <NewProperty table={table} />\n        ) : (\n          <>\n            <Button\n              variant=\"ghost\"\n              variantColor=\"blue\"\n              fontSize=\".75rem\"\n              lineHeight=\".875rem\"\n              leftIcon=\"add\"\n              height=\"auto\"\n              minWidth=\"auto\"\n              padding=\".25rem\"\n              marginRight=\".5rem\"\n              _focus={{ boxShadow: 'none' }}\n              loadingText=\"Adding contact\"\n              isLoading={contactBtnLoader}\n              onClick={() => handleAddContact()}\n            >\n              Add Contact\n            </Button>\n\n            <UpdateContact onAddContact={handleAddContact} table_id={table?.id}>\n              <Button\n                variant=\"ghost\"\n                variantColor=\"blue\"\n                fontSize=\".75rem\"\n                lineHeight=\".875rem\"\n                leftIcon=\"edit\"\n                height=\"auto\"\n                minWidth=\"auto\"\n                padding=\".25rem\"\n                _focus={{ boxShadow: 'none' }}\n              >\n                Update Contact\n              </Button>\n            </UpdateContact>\n          </>\n        )}\n      </Stack>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}