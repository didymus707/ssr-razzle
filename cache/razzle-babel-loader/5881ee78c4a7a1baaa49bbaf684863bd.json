{"ast":null,"code":"import _objectSpread from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit';\nimport { selectInboxEntitiesState } from './ui';\nimport { fetchThreadsByState, onWebSocketAssignedThread, onWebSocketNewMessage, addContact, onWebSocketNewThread, onWebSocketResolvedThread, sendMessage, fetchThreadByID, searchInbox, onWebSocketAccountDisconnected } from './global';\nimport { selectAllNotifications } from './notification';\nimport { selectAddressBookEntities, selectAllAddressBooks, selectColumnEntities } from './contact';\nimport { selectAllCustomers } from './customer';\nconst threadsAdapter = createEntityAdapter({\n  selectId: thread => thread.uuid,\n  sortComparer: (a, b) => {\n    var _ref;\n\n    return (_ref = (b === null || b === void 0 ? void 0 : b.updated_datetime) || '') === null || _ref === void 0 ? void 0 : _ref.localeCompare((a === null || a === void 0 ? void 0 : a.updated_datetime) || '');\n  }\n});\nconst INITIAL_META = {\n  assigned: {\n    count: 0,\n    page: 0,\n    pageSize: 0,\n    pageCount: 0\n  },\n  queued: {\n    count: 0,\n    page: 0,\n    pageSize: 0,\n    pageCount: 0\n  },\n  resolved: {\n    count: 0,\n    page: 0,\n    pageSize: 0,\n    pageCount: 0\n  }\n};\nconst INITIAL_HAS_MORE = {\n  assigned: true,\n  queued: true,\n  resolved: true\n};\nconst threadInitialState = threadsAdapter.getInitialState({\n  meta: {},\n  status: {\n    assigned: 'idle',\n    queued: 'idle',\n    resolved: 'idle'\n  },\n  hasMore: {}\n});\n\nconst websocketCallback = (state, action) => {\n  const {\n    threads\n  } = action.payload;\n  threads && threadsAdapter.upsertMany(state, threads);\n};\n\nconst threadsSlice = createSlice({\n  name: 'inbox_threads',\n  initialState: threadInitialState,\n  reducers: {\n    updateHasMore(state, action) {\n      const {\n        organisation_id,\n        state: threadState\n      } = action.payload;\n\n      if (threadState && organisation_id) {\n        if (!state.hasMore[organisation_id]) {\n          state.hasMore[organisation_id] = _objectSpread({}, INITIAL_HAS_MORE);\n        }\n\n        state.hasMore[organisation_id][threadState] = false;\n      }\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchThreadsByState.pending, (state, action) => {\n      state.status[action.meta.arg.state] = 'loading';\n    }).addCase(fetchThreadsByState.fulfilled, (state, action) => {\n      const {\n        threads,\n        meta\n      } = action.payload;\n      threads && threadsAdapter.upsertMany(state, threads);\n      state.status[action.meta.arg.state] = 'success';\n      const {\n        state: statusState,\n        organisation_id\n      } = action.meta.arg;\n\n      if (statusState && organisation_id) {\n        if (!state.meta[organisation_id]) {\n          state.meta[organisation_id] = _objectSpread({}, INITIAL_META);\n        }\n      }\n\n      state.meta[organisation_id][statusState] = meta || {};\n    }).addCase(onWebSocketNewThread, websocketCallback).addCase(sendMessage.fulfilled, websocketCallback).addCase(fetchThreadByID.fulfilled, websocketCallback).addCase(searchInbox.fulfilled, websocketCallback).addCase(onWebSocketResolvedThread, websocketCallback).addCase(onWebSocketAssignedThread, websocketCallback).addCase(onWebSocketNewMessage, (state, action) => {\n      const {\n        messages,\n        message_id\n      } = action.payload;\n      const message = messages[message_id];\n      const {\n        uuid: last_message_id,\n        thread_id: id,\n        created_datetime\n      } = message;\n\n      if (last_message_id && id) {\n        //@ts-ignore\n        threadsAdapter.updateOne(state, {\n          id,\n          changes: {\n            last_message_id,\n            updated_datetime: created_datetime\n          }\n        });\n      }\n    }).addCase(onWebSocketAccountDisconnected, (state, action) => {\n      const {\n        threadIDs\n      } = action.payload;\n      (threadIDs === null || threadIDs === void 0 ? void 0 : threadIDs.length) > 0 && threadsAdapter.removeMany(state, threadIDs);\n    }).addCase(addContact.fulfilled, (state, action) => {\n      const {\n        thread_id,\n        addressBooks: ab\n      } = action.payload;\n      const [addressBook] = ab || [];\n\n      if (thread_id && addressBook !== null && addressBook !== void 0 && addressBook.uuid) {\n        //@ts-ignore\n        threadsAdapter.updateOne(state, {\n          id: thread_id,\n          changes: {\n            address_book_id: addressBook.uuid\n          }\n        });\n      }\n    });\n  }\n});\nexport const threadsReducer = threadsSlice.reducer;\nexport const {\n  updateHasMore\n} = threadsSlice.actions;\nexport const {\n  selectById: selectThreadById,\n  selectIds: selectThreadIds,\n  selectEntities: selectThreadEntities,\n  selectAll: selectAllThreads,\n  selectTotal: selectTotalThreads\n} = threadsAdapter.getSelectors(state => state.inbox.entities.threads);\nexport const selectThreadDetailByID = createSelector(selectThreadById, selectAllAddressBooks, selectColumnEntities, (thread, addressBooks, cs) => {\n  const addressBook = addressBooks.find(({\n    organisation_id,\n    customer_id\n  }) => //@ts-ignore\n  organisation_id === (thread === null || thread === void 0 ? void 0 : thread.organisation_id) && customer_id === (thread === null || thread === void 0 ? void 0 : thread.sender_id));\n  const columns = cs[(addressBook === null || addressBook === void 0 ? void 0 : addressBook.contact_id) || ''];\n  const sender_name = columns && columns[1]; //@ts-ignore\n\n  return _objectSpread(_objectSpread({}, thread), {}, {\n    sender_name,\n    address_book_id: addressBook === null || addressBook === void 0 ? void 0 : addressBook.uuid\n  });\n});\nexport const makeSelectThreadById = () => selectThreadDetailByID;\nexport const selectThreadStateByID = createSelector(selectThreadById, thread => thread === null || thread === void 0 ? void 0 : thread.state);\nexport const selectThreadsState = createSelector(selectInboxEntitiesState, inbo => inbo.threads);\nexport const selectOrgThreadsByState = createSelector(selectAllThreads, //@ts-ignore\n(_, payload) => payload.state, //@ts-ignore\n(_, payload) => payload.organisation_id, (threads, pState, pOrganisationID) => threads.filter( //@ts-ignore\n({\n  state: tState,\n  organisation_id\n}) => pOrganisationID === organisation_id && pState === tState));\nexport const selectOrgThreadsByStateStatusCount = createSelector(selectOrgThreadsByState, selectAllNotifications, (_, payload) => payload, (threads, notifications, payload) => //@ts-ignore\nthreads.filter(({\n  last_message_id\n}) => {\n  const notification = notifications.find(({\n    user_id: u,\n    message_id: mID\n  }) => last_message_id === mID && u === payload.user_id);\n  return ['sent', 'delivered'].includes((notification === null || notification === void 0 ? void 0 : notification.status) || '');\n}).length);\nexport const selectOrgInboxStatusCount = createSelector(selectAllThreads, selectAllNotifications, (_, payload) => payload, (threads, notifications, payload) => {\n  let queuedcount = 0;\n  let otherCount = 0;\n  threads //@ts-ignore\n  .filter(({\n    organisation_id\n  }) => organisation_id === payload.organisation_id) //@ts-ignore\n  .forEach(({\n    last_message_id,\n    state\n  }) => {\n    if (state === 'queued') {\n      queuedcount += 1;\n      return;\n    }\n\n    const notification = notifications.find(({\n      user_id: u,\n      message_id: mID\n    }) => last_message_id === mID && u === payload.user_id);\n\n    if (['sent', 'delivered'].includes((notification === null || notification === void 0 ? void 0 : notification.status) || '')) {\n      otherCount += 1;\n    }\n  });\n  return queuedcount + otherCount;\n});\nexport const selectThreadIdsByState = createSelector(selectOrgThreadsByState, threads => threads.map(({\n  uuid\n}) => uuid));\nexport const selectOrgThreadsCount = createSelector(selectOrgThreadsByState, threads => threads.length);\nexport const makeSelectThreadIdsByState = () => selectThreadIdsByState;\nexport const selectFirstThread = createSelector(selectThreadIdsByState, uuids => uuids[0]);\nexport const selectThreadsStatus = createSelector(selectThreadsState, threads => threads.status);\nexport const selectThreadsMeta = createSelector(selectThreadsState, threads => threads.meta);\nexport const selectThreadsOrgMeta = createSelector(selectThreadsMeta, (_, payload) => payload.organisation_id, (meta, organisation_id) => meta[organisation_id] || INITIAL_META);\nexport const selectThreadsHasMore = createSelector(selectThreadsState, threads => threads.hasMore);\nexport const selectThreadsOrgHasMore = createSelector(selectThreadsHasMore, (_, payload) => payload.organisation_id, (hasMore, organisation_id) => hasMore[organisation_id] || INITIAL_HAS_MORE);\nexport const selectAssignedThreadUserMeta = createSelector(selectAllThreads, selectAllCustomers, selectAddressBookEntities, (threads, customers, addressBooksObj) => {\n  const assignedThreads = threads.filter(({\n    state\n  }) => state === 'assigned') //@ts-ignore\n  .map(({\n    uuid,\n    sender_id,\n    receiver_id,\n    address_book_id\n  }) => {\n    var _customers$find;\n\n    const senderPlatformID = (_customers$find = customers.find(({\n      uuid\n    }) => uuid === sender_id)) === null || _customers$find === void 0 ? void 0 : _customers$find.platform_nick;\n    let contact_id = null;\n\n    if (address_book_id) {\n      const addressBook = addressBooksObj[address_book_id];\n      contact_id = addressBook === null || addressBook === void 0 ? void 0 : addressBook.contact_id;\n    }\n\n    return {\n      thread_id: uuid,\n      receiver_id,\n      senderPlatformID,\n      contact_id\n    };\n  });\n  return assignedThreads;\n});\nexport const makeSelectStatusByState = () => createSelector(selectThreadsStatus, selectThreadsOrgMeta, selectThreadsOrgHasMore, (_, payload) => payload.statusState, (status, meta, hasMore, statusState) => ({\n  meta: meta[statusState],\n  status: (status || {})[statusState],\n  hasMore: hasMore[statusState]\n}));","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/slices/thread.ts"],"names":["createEntityAdapter","createSelector","createSlice","selectInboxEntitiesState","fetchThreadsByState","onWebSocketAssignedThread","onWebSocketNewMessage","addContact","onWebSocketNewThread","onWebSocketResolvedThread","sendMessage","fetchThreadByID","searchInbox","onWebSocketAccountDisconnected","selectAllNotifications","selectAddressBookEntities","selectAllAddressBooks","selectColumnEntities","selectAllCustomers","threadsAdapter","selectId","thread","uuid","sortComparer","a","b","updated_datetime","localeCompare","INITIAL_META","assigned","count","page","pageSize","pageCount","queued","resolved","INITIAL_HAS_MORE","threadInitialState","getInitialState","meta","status","hasMore","websocketCallback","state","action","threads","payload","upsertMany","threadsSlice","name","initialState","reducers","updateHasMore","organisation_id","threadState","extraReducers","builder","addCase","pending","arg","fulfilled","statusState","messages","message_id","message","last_message_id","thread_id","id","created_datetime","updateOne","changes","threadIDs","length","removeMany","addressBooks","ab","addressBook","address_book_id","threadsReducer","reducer","actions","selectById","selectThreadById","selectIds","selectThreadIds","selectEntities","selectThreadEntities","selectAll","selectAllThreads","selectTotal","selectTotalThreads","getSelectors","inbox","entities","selectThreadDetailByID","cs","find","customer_id","sender_id","columns","contact_id","sender_name","makeSelectThreadById","selectThreadStateByID","selectThreadsState","inbo","selectOrgThreadsByState","_","pState","pOrganisationID","filter","tState","selectOrgThreadsByStateStatusCount","notifications","notification","user_id","u","mID","includes","selectOrgInboxStatusCount","queuedcount","otherCount","forEach","selectThreadIdsByState","map","selectOrgThreadsCount","makeSelectThreadIdsByState","selectFirstThread","uuids","selectThreadsStatus","selectThreadsMeta","selectThreadsOrgMeta","selectThreadsHasMore","selectThreadsOrgHasMore","selectAssignedThreadUserMeta","customers","addressBooksObj","assignedThreads","receiver_id","senderPlatformID","platform_nick","makeSelectStatusByState"],"mappings":"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","sourcesContent":["import { createEntityAdapter, createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../../../root';\nimport { ThreadSchema, InboxStatusSchema, NotificationSchema } from '../inbox.types';\nimport { selectInboxEntitiesState } from './ui';\nimport {\n  fetchThreadsByState,\n  onWebSocketAssignedThread,\n  onWebSocketNewMessage,\n  addContact,\n  onWebSocketNewThread,\n  onWebSocketResolvedThread,\n  sendMessage,\n  fetchThreadByID,\n  searchInbox,\n  onWebSocketAccountDisconnected,\n} from './global';\nimport { selectAllNotifications } from './notification';\nimport { selectAddressBookEntities, selectAllAddressBooks, selectColumnEntities } from './contact';\nimport { selectAllCustomers } from './customer';\n\nconst threadsAdapter = createEntityAdapter<ThreadSchema>({\n  selectId: thread => thread.uuid,\n  sortComparer: (a, b) => (b?.updated_datetime || '')?.localeCompare(a?.updated_datetime || ''),\n});\n\ntype Meta = {\n  count: number;\n  pageSize: number;\n  pageCount: number;\n  page: number;\n};\nconst INITIAL_META = {\n  assigned: {\n    count: 0,\n    page: 0,\n    pageSize: 0,\n    pageCount: 0,\n  },\n  queued: {\n    count: 0,\n    page: 0,\n    pageSize: 0,\n    pageCount: 0,\n  },\n  resolved: {\n    count: 0,\n    page: 0,\n    pageSize: 0,\n    pageCount: 0,\n  },\n};\nconst INITIAL_HAS_MORE = { assigned: true, queued: true, resolved: true };\nconst threadInitialState = threadsAdapter.getInitialState<{\n  status: { [k: string]: InboxStatusSchema };\n  meta: { [v: string]: { [k: string]: Meta } };\n  hasMore: { [v: string]: { [k: string]: boolean } };\n}>({\n  meta: {},\n  status: { assigned: 'idle', queued: 'idle', resolved: 'idle' },\n  hasMore: {},\n});\n\nconst websocketCallback = (state: any, action: any) => {\n  const { threads } = action.payload;\n  threads && threadsAdapter.upsertMany(state, threads);\n};\n\nconst threadsSlice = createSlice({\n  name: 'inbox_threads',\n  initialState: threadInitialState,\n  reducers: {\n    updateHasMore(\n      state,\n      action: PayloadAction<{ state: ThreadSchema['state']; organisation_id: string }>,\n    ) {\n      const { organisation_id, state: threadState } = action.payload;\n\n      if (threadState && organisation_id) {\n        if (!state.hasMore[organisation_id]) {\n          state.hasMore[organisation_id] = { ...INITIAL_HAS_MORE };\n        }\n        state.hasMore[organisation_id][threadState] = false;\n      }\n    },\n  },\n  extraReducers: builder => {\n    builder\n      .addCase(fetchThreadsByState.pending, (state, action) => {\n        state.status[action.meta.arg.state] = 'loading';\n      })\n      .addCase(fetchThreadsByState.fulfilled, (state, action) => {\n        const { threads, meta } = action.payload;\n        threads && threadsAdapter.upsertMany(state, threads);\n        state.status[action.meta.arg.state] = 'success';\n        const { state: statusState, organisation_id } = action.meta.arg;\n        if (statusState && organisation_id) {\n          if (!state.meta[organisation_id]) {\n            state.meta[organisation_id] = { ...INITIAL_META };\n          }\n        }\n\n        state.meta[organisation_id][statusState] = meta || {};\n      })\n      .addCase(onWebSocketNewThread, websocketCallback)\n      .addCase(sendMessage.fulfilled, websocketCallback)\n      .addCase(fetchThreadByID.fulfilled, websocketCallback)\n      .addCase(searchInbox.fulfilled, websocketCallback)\n      .addCase(onWebSocketResolvedThread, websocketCallback)\n      .addCase(onWebSocketAssignedThread, websocketCallback)\n      .addCase(onWebSocketNewMessage, (state, action) => {\n        const { messages, message_id } = action.payload;\n        const message = messages[message_id];\n        const { uuid: last_message_id, thread_id: id, created_datetime } = message;\n\n        if (last_message_id && id) {\n          //@ts-ignore\n          threadsAdapter.updateOne(state, {\n            id,\n            changes: { last_message_id, updated_datetime: created_datetime },\n          });\n        }\n      })\n      .addCase(onWebSocketAccountDisconnected, (state, action) => {\n        const { threadIDs } = action.payload;\n\n        threadIDs?.length > 0 && threadsAdapter.removeMany(state, threadIDs);\n      })\n      .addCase(addContact.fulfilled, (state, action) => {\n        const { thread_id, addressBooks: ab } = action.payload;\n\n        const [addressBook] = ab || [];\n\n        if (thread_id && addressBook?.uuid) {\n          //@ts-ignore\n          threadsAdapter.updateOne(state, {\n            id: thread_id,\n            changes: { address_book_id: addressBook.uuid },\n          });\n        }\n      });\n  },\n});\n\nexport const threadsReducer = threadsSlice.reducer;\nexport const { updateHasMore } = threadsSlice.actions;\n\nexport const {\n  selectById: selectThreadById,\n  selectIds: selectThreadIds,\n  selectEntities: selectThreadEntities,\n  selectAll: selectAllThreads,\n  selectTotal: selectTotalThreads,\n} = threadsAdapter.getSelectors<RootState>(state => state.inbox.entities.threads);\n\nexport const selectThreadDetailByID = createSelector(\n  selectThreadById,\n  selectAllAddressBooks,\n  selectColumnEntities,\n  (thread, addressBooks, cs) => {\n    const addressBook = addressBooks.find(\n      ({ organisation_id, customer_id }) =>\n        //@ts-ignore\n        organisation_id === thread?.organisation_id && customer_id === thread?.sender_id,\n    );\n    const columns = cs[addressBook?.contact_id || ''];\n\n    const sender_name = columns && columns[1];\n\n    //@ts-ignore\n    return { ...thread, sender_name, address_book_id: addressBook?.uuid } as ThreadSchema;\n  },\n);\n\nexport const makeSelectThreadById = () => selectThreadDetailByID;\n\nexport const selectThreadStateByID = createSelector(selectThreadById, thread => thread?.state);\n\nexport const selectThreadsState = createSelector(selectInboxEntitiesState, inbo => inbo.threads);\n\nexport const selectOrgThreadsByState = createSelector(\n  selectAllThreads,\n  //@ts-ignore\n  (_: RootState, payload: Pick<ThreadSchema, 'state' | 'organisation_id'>) => payload.state,\n  //@ts-ignore\n  (_: RootState, payload: Pick<ThreadSchema, 'state' | 'organisation_id'>) =>\n    payload.organisation_id,\n  (threads, pState, pOrganisationID) =>\n    threads.filter(\n      //@ts-ignore\n      ({ state: tState, organisation_id }) =>\n        pOrganisationID === organisation_id && pState === tState,\n    ),\n);\n\nexport const selectOrgThreadsByStateStatusCount = createSelector(\n  selectOrgThreadsByState,\n  selectAllNotifications,\n  (_: RootState, payload: Pick<NotificationSchema, 'user_id'>) => payload,\n  (threads, notifications, payload) =>\n    //@ts-ignore\n    threads.filter(({ last_message_id }) => {\n      const notification = notifications.find(\n        ({ user_id: u, message_id: mID }) => last_message_id === mID && u === payload.user_id,\n      );\n\n      return ['sent', 'delivered'].includes(notification?.status || '');\n    }).length,\n);\n\nexport const selectOrgInboxStatusCount = createSelector(\n  selectAllThreads,\n  selectAllNotifications,\n  (_: RootState, payload: any) => payload,\n  (threads, notifications, payload) => {\n    let queuedcount = 0;\n    let otherCount = 0;\n    threads\n      //@ts-ignore\n      .filter(({ organisation_id }) => organisation_id === payload.organisation_id)\n      //@ts-ignore\n      .forEach(({ last_message_id, state }) => {\n        if (state === 'queued') {\n          queuedcount += 1;\n          return;\n        }\n\n        const notification = notifications.find(\n          ({ user_id: u, message_id: mID }) => last_message_id === mID && u === payload.user_id,\n        );\n\n        if (['sent', 'delivered'].includes(notification?.status || '')) {\n          otherCount += 1;\n        }\n      });\n\n    return queuedcount + otherCount;\n  },\n);\n\nexport const selectThreadIdsByState = createSelector(selectOrgThreadsByState, threads =>\n  threads.map(({ uuid }) => uuid),\n);\n\nexport const selectOrgThreadsCount = createSelector(\n  selectOrgThreadsByState,\n  threads => threads.length,\n);\n\nexport const makeSelectThreadIdsByState = () => selectThreadIdsByState;\n\nexport const selectFirstThread = createSelector(selectThreadIdsByState, uuids => uuids[0]);\n\nexport const selectThreadsStatus = createSelector(selectThreadsState, threads => threads.status);\n\nexport const selectThreadsMeta = createSelector(selectThreadsState, threads => threads.meta);\n\nexport const selectThreadsOrgMeta = createSelector(\n  selectThreadsMeta,\n  (_: RootState, payload: { statusState: string; organisation_id: string }) =>\n    payload.organisation_id,\n  (meta, organisation_id) => meta[organisation_id] || INITIAL_META,\n);\n\nexport const selectThreadsHasMore = createSelector(selectThreadsState, threads => threads.hasMore);\n\nexport const selectThreadsOrgHasMore = createSelector(\n  selectThreadsHasMore,\n  (_: RootState, payload: { statusState: string; organisation_id: string }) =>\n    payload.organisation_id,\n  (hasMore, organisation_id) => hasMore[organisation_id] || INITIAL_HAS_MORE,\n);\n\nexport const selectAssignedThreadUserMeta = createSelector(\n  selectAllThreads,\n  selectAllCustomers,\n  selectAddressBookEntities,\n  (threads, customers, addressBooksObj) => {\n    const assignedThreads = threads\n      .filter(({ state }) => state === 'assigned')\n      //@ts-ignore\n      .map(({ uuid, sender_id, receiver_id, address_book_id }) => {\n        const senderPlatformID = customers.find(({ uuid }) => uuid === sender_id)?.platform_nick;\n        let contact_id = null;\n        if (address_book_id) {\n          const addressBook = addressBooksObj[address_book_id];\n          contact_id = addressBook?.contact_id;\n        }\n\n        return { thread_id: uuid, receiver_id, senderPlatformID, contact_id };\n      });\n\n    return assignedThreads;\n  },\n);\n\nexport const makeSelectStatusByState = () =>\n  createSelector(\n    selectThreadsStatus,\n    selectThreadsOrgMeta,\n    selectThreadsOrgHasMore,\n    (_: RootState, payload: { statusState: string; organisation_id: string }) =>\n      payload.statusState,\n    (status, meta, hasMore, statusState) => ({\n      meta: meta[statusState],\n      status: (status || {})[statusState],\n      hasMore: hasMore[statusState],\n    }),\n  );\n"]},"metadata":{},"sourceType":"module"}