{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { campaignReducer } from '../app/authenticated-app/marketing/campaigns/campaigns.reducer';\nimport { channelReducer } from '../app/authenticated-app/channels/channel.reducer';\nimport { integrationReducer } from '../app/authenticated-app/integrations/integrations.reducer';\nimport { billingReducer, teamsReducer, paymentReducer, developersReducer } from '../app/authenticated-app/settings';\nimport { groupsReducer, rowsReducer, tablesReducer } from '../app/authenticated-app/tables';\nimport { dataModelsReducer, segmentsReducer, listsReducer, resourcesReducer } from '../app/authenticated-app/lists/lists.reducer';\nimport { templatesReducer } from '../app/authenticated-app/marketing/templates';\nimport { authReducer, getToken, getUser, logUserOut } from '../app/unauthenticated-app/authentication';\nimport { globalsReducer } from '../app/authenticated-app/globals';\nimport { inboxReducer } from '../app/authenticated-app/inbox';\nimport { paymentSetupReducer, paymentRequestsReducer, cardsReducer, bankAccountsReducer, walletReducer, managedAccountReducer } from '../app/authenticated-app/payments/reducers';\n\nconst getPreloadedState = () => {\n  try {\n    const user = getUser();\n    const token = getToken();\n\n    if (!user && !token) {\n      return {};\n    }\n\n    return {\n      auth: {\n        user,\n        token\n      }\n    };\n  } catch (e) {\n    return {};\n  }\n};\n\nexport const preloadedState = getPreloadedState();\nexport const appReducers = combineReducers({\n  auth: authReducer,\n  rows: rowsReducer,\n  teams: teamsReducer,\n  billing: billingReducer,\n  inbox: inboxReducer,\n  tables: tablesReducer,\n  lists: listsReducer,\n  dataModels: dataModelsReducer,\n  segments: segmentsReducer,\n  resources: resourcesReducer,\n  groups: groupsReducer,\n  payment: paymentReducer,\n  payments: combineReducers({\n    payment_setup: paymentSetupReducer,\n    payment_requests: paymentRequestsReducer,\n    cards: cardsReducer,\n    bank_accounts: bankAccountsReducer,\n    managed_account: managedAccountReducer,\n    wallet: walletReducer\n  }),\n  channel: channelReducer,\n  globals: globalsReducer,\n  campaigns: campaignReducer,\n  templates: templatesReducer,\n  integration: integrationReducer,\n  developers: developersReducer\n});\nexport const rootReducer = (state, action) => {\n  let appState = state;\n\n  if (action.type === logUserOut.toString()) {\n    appState = undefined;\n  }\n\n  return appReducers(appState, action);\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/root/root.reducer.ts"],"names":["combineReducers","campaignReducer","channelReducer","integrationReducer","billingReducer","teamsReducer","paymentReducer","developersReducer","groupsReducer","rowsReducer","tablesReducer","dataModelsReducer","segmentsReducer","listsReducer","resourcesReducer","templatesReducer","authReducer","getToken","getUser","logUserOut","globalsReducer","inboxReducer","paymentSetupReducer","paymentRequestsReducer","cardsReducer","bankAccountsReducer","walletReducer","managedAccountReducer","getPreloadedState","user","token","auth","e","preloadedState","appReducers","rows","teams","billing","inbox","tables","lists","dataModels","segments","resources","groups","payment","payments","payment_setup","payment_requests","cards","bank_accounts","managed_account","wallet","channel","globals","campaigns","templates","integration","developers","rootReducer","state","action","appState","type","toString","undefined"],"mappings":"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","sourcesContent":["import { Action, combineReducers } from 'redux';\nimport { campaignReducer } from '../app/authenticated-app/marketing/campaigns/campaigns.reducer';\nimport { channelReducer } from '../app/authenticated-app/channels/channel.reducer';\nimport { integrationReducer } from '../app/authenticated-app/integrations/integrations.reducer';\nimport {\n  billingReducer,\n  teamsReducer,\n  paymentReducer,\n  developersReducer,\n} from '../app/authenticated-app/settings';\nimport { groupsReducer, rowsReducer, tablesReducer } from '../app/authenticated-app/tables';\nimport {\n  dataModelsReducer,\n  segmentsReducer,\n  listsReducer,\n  resourcesReducer,\n} from '../app/authenticated-app/lists/lists.reducer';\nimport { templatesReducer } from '../app/authenticated-app/marketing/templates';\nimport {\n  authReducer,\n  getToken,\n  getUser,\n  logUserOut,\n} from '../app/unauthenticated-app/authentication';\nimport { globalsReducer } from '../app/authenticated-app/globals';\nimport { inboxReducer } from '../app/authenticated-app/inbox';\nimport {\n  paymentSetupReducer,\n  paymentRequestsReducer,\n  cardsReducer,\n  bankAccountsReducer,\n  walletReducer,\n  managedAccountReducer,\n} from '../app/authenticated-app/payments/reducers';\n\nconst getPreloadedState = () => {\n  try {\n    const user = getUser();\n    const token = getToken();\n\n    if (!user && !token) {\n      return {};\n    }\n    return {\n      auth: {\n        user,\n        token,\n      },\n    };\n  } catch (e) {\n    return {};\n  }\n};\n\nexport const preloadedState = getPreloadedState();\n\nexport const appReducers = combineReducers({\n  auth: authReducer,\n  rows: rowsReducer,\n  teams: teamsReducer,\n  billing: billingReducer,\n  inbox: inboxReducer,\n  tables: tablesReducer,\n  lists: listsReducer,\n  dataModels: dataModelsReducer,\n  segments: segmentsReducer,\n  resources: resourcesReducer,\n  groups: groupsReducer,\n  payment: paymentReducer,\n  payments: combineReducers({\n    payment_setup: paymentSetupReducer,\n    payment_requests: paymentRequestsReducer,\n    cards: cardsReducer,\n    bank_accounts: bankAccountsReducer,\n    managed_account: managedAccountReducer,\n    wallet: walletReducer,\n  }),\n  channel: channelReducer,\n  globals: globalsReducer,\n  campaigns: campaignReducer,\n  templates: templatesReducer,\n  integration: integrationReducer,\n  developers: developersReducer,\n});\n\nexport const rootReducer = (state: any, action: Action) => {\n  let appState = state;\n  if (action.type === logUserOut.toString()) {\n    appState = undefined;\n  }\n  return appReducers(appState, action);\n};\n"]},"metadata":{},"sourceType":"module"}