{"ast":null,"code":"import _objectSpread from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/marketing/templates/components/TemplateForm.tsx\";\nvar __jsx = React.createElement;\nimport { Box, Flex, FormControl, FormErrorMessage, FormLabel, Icon, Stack, Text, Tooltip, useClipboard, useToast } from '@chakra-ui/core';\nimport { useFormik } from 'formik';\nimport * as React from 'react';\nimport * as yup from 'yup';\nimport { validURL } from '../../../../../utils';\nimport { useLoading } from '../../../../../hooks';\nimport { AdvancedSelect, ToastBox, Button, Input } from 'app/components';\nimport { shortenLink } from '../templates.service';\nimport { Editable } from './Editable';\nimport { html2Text } from '../templates.utils';\nexport const templateFormValidationSchema = yup.object().shape({\n  name: yup.string().required('Template name is required'),\n  template: yup.string().required('Template content is required')\n});\nconst defaultInitialValues = {\n  id: '',\n  name: '',\n  table_id: '',\n  template: '',\n  smart_list_id: ''\n};\nexport function TemplateForm({\n  lists,\n  onClose,\n  onSubmit,\n  isLoading,\n  listOptions,\n  lists_by_id,\n  initialValues\n}) {\n  const [link, setLink] = React.useState('');\n  const [countText, setCountText] = React.useState('');\n  const [selectedTag, setSelectedTag] = React.useState('');\n  const [shortendLink, setShortendLink] = React.useState('');\n  const [tags, setTags] = React.useState([]);\n  const toast = useToast();\n  const editorRef = React.useRef(null);\n  const {\n    loading,\n    dispatch\n  } = useLoading();\n  const {\n    onCopy,\n    hasCopied\n  } = useClipboard(shortendLink);\n  const formik = useFormik({\n    validationSchema: templateFormValidationSchema,\n    initialValues: initialValues || defaultInitialValues,\n    onSubmit: values => onSubmit(_objectSpread(_objectSpread({}, values), {}, {\n      template: html2Text(values.template)\n    }))\n  });\n  React.useEffect(() => {\n    const selectedListId = formik.values.table_id;\n\n    if (selectedListId && lists_by_id !== null && lists_by_id !== void 0 && lists_by_id.includes(selectedListId)) {\n      const properties = lists[selectedListId].columns.map(({\n        name,\n        label\n      }) => ({\n        label,\n        value: name\n      }));\n      setTags(properties);\n    }\n  }, [formik.values.table_id, lists, lists_by_id]);\n\n  async function handleShortenLink() {\n    try {\n      dispatch({\n        type: 'LOADING_STARTED'\n      });\n      const response = await shortenLink({\n        link\n      });\n      const {\n        link: shortenedLink\n      } = response.data;\n      dispatch({\n        type: 'LOADING_RESOLVED'\n      });\n      setLink(shortenedLink.link.short);\n      setShortendLink(shortenedLink.link.short);\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          status: \"success\",\n          message: 'Link shortened',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 11\n          }\n        })\n      });\n    } catch (error) {\n      dispatch({\n        type: 'LOADING_RESOLVED'\n      });\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  }\n\n  function handleLinkChange(e) {\n    const value = e.target.value;\n    setLink(value);\n  }\n\n  function handleTagChange(value) {\n    if (value) {\n      const updatedContent = `${formik.values.template} {{${value}}}`;\n      setSelectedTag(value);\n      formik.setFieldValue('template', updatedContent);\n    }\n  }\n\n  function handleEditableBlur(value) {\n    formik.setFieldValue('template', value);\n    getCharacterCountText(value);\n  }\n\n  function getCharacterCountText(value) {\n    const characterCount = value.length;\n    const smsCount = Math.ceil(characterCount / 160);\n    const countText = `${characterCount}/${smsCount * 160}, ${smsCount} SMS`;\n    setCountText(countText);\n  }\n\n  return __jsx(\"form\", {\n    onSubmit: formik.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    width: \"50%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, __jsx(FormControl, {\n    isInvalid: !!formik.touched.name && !!formik.errors.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    size: \"sm\",\n    name: \"name\",\n    value: formik.values.name,\n    onChange: formik.handleChange,\n    placeholder: \"Give template a name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }), __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, formik.errors.name))), __jsx(Flex, {\n    width: \"100%\",\n    marginTop: \"1.1rem\",\n    alignItems: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    color: \"#212242\",\n    marginRight: \"1.3rem\",\n    width: ['100%', '100%', '60%'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    fontSize: \"0.85rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }, \"Template Message\"), __jsx(Editable, {\n    innerRef: editorRef,\n    placeholder: \"Write here...\",\n    onBlur: handleEditableBlur,\n    value: formik.values.template,\n    onChange: getCharacterCountText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }), __jsx(Text, {\n    fontSize: \"0.75rem\",\n    marginTop: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }, countText)), __jsx(Box, {\n    color: \"#212242\",\n    width: ['100%', '100%', '30%'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    marginBottom: \"0.6rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }\n  }, __jsx(FormLabel, {\n    fontSize: \"0.85rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }, \"List\"), __jsx(AdvancedSelect, {\n    size: \"sm\",\n    isSearchable: true,\n    isClearable: true,\n    options: listOptions,\n    placeholder: \"Select list\",\n    value: formik.values.table_id,\n    onChange: option => {\n      if (option) {\n        formik.setFieldValue('table_id', option.value);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  })), __jsx(Box, {\n    marginBottom: \"0.6rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 11\n    }\n  }, __jsx(FormLabel, {\n    fontSize: \"0.85rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }, \"Personalise with tags\"), __jsx(AdvancedSelect, {\n    size: \"sm\",\n    isSearchable: true,\n    options: tags,\n    isClearable: false,\n    placeholder: \"Choose a tag\",\n    onChange: option => handleTagChange(option.value),\n    value: selectedTag,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  })), __jsx(Box, {\n    marginTop: \"0.9rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 11\n    }\n  }, __jsx(FormLabel, {\n    fontSize: \"0.85rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }, __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 15\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }\n  }, \"Embed a trackable link\"), __jsx(Tooltip, {\n    zIndex: 10000,\n    placement: \"top\",\n    \"aria-label\": \"info\",\n    shouldWrapChildren: true,\n    label: \"Adding an embed trackable link means we'll track the message and provide analytics.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 17\n    }\n  }, __jsx(Icon, {\n    name: \"info\",\n    color: \"#a2a2a2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 19\n    }\n  })))), __jsx(Input, {\n    size: \"sm\",\n    type: \"url\",\n    value: link,\n    color: \"#212242\",\n    paddingLeft: \"0.5rem\",\n    onChange: handleLinkChange,\n    placeholder: \"Paste link here to shorten\\u2026\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }\n  }), __jsx(Button, {\n    size: \"xs\",\n    type: \"button\",\n    fontWeight: \"normal\",\n    marginTop: \"0.5rem\",\n    variantColor: \"blue\",\n    isDisabled: !validURL(link),\n    isLoading: loading === 'pending',\n    onClick: shortendLink ? onCopy : handleShortenLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }\n  }, shortendLink ? hasCopied ? 'Copied' : 'Copy' : 'Shorten')))), __jsx(Stack, {\n    isInline: true,\n    paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    justifyContent: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    type: \"button\",\n    size: \"sm\",\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }\n  }, \"Close\"), __jsx(Button, {\n    size: \"sm\",\n    type: \"submit\",\n    variantColor: \"blue\",\n    isLoading: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }\n  }, \"Save Template\")));\n}","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/marketing/templates/components/TemplateForm.tsx"],"names":["Box","Flex","FormControl","FormErrorMessage","FormLabel","Icon","Stack","Text","Tooltip","useClipboard","useToast","useFormik","React","yup","validURL","useLoading","AdvancedSelect","ToastBox","Button","Input","shortenLink","Editable","html2Text","templateFormValidationSchema","object","shape","name","string","required","template","defaultInitialValues","id","table_id","smart_list_id","TemplateForm","lists","onClose","onSubmit","isLoading","listOptions","lists_by_id","initialValues","link","setLink","useState","countText","setCountText","selectedTag","setSelectedTag","shortendLink","setShortendLink","tags","setTags","toast","editorRef","useRef","loading","dispatch","onCopy","hasCopied","formik","validationSchema","values","useEffect","selectedListId","includes","properties","columns","map","label","value","handleShortenLink","type","response","shortenedLink","data","short","position","render","error","handleLinkChange","e","target","handleTagChange","updatedContent","setFieldValue","handleEditableBlur","getCharacterCountText","characterCount","length","smsCount","Math","ceil","handleSubmit","touched","errors","handleChange","option"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Icon,\n  Stack,\n  Text,\n  Tooltip,\n  useClipboard,\n  useToast,\n} from '@chakra-ui/core';\nimport { useFormik } from 'formik';\nimport * as React from 'react';\nimport * as yup from 'yup';\nimport { validURL } from '../../../../../utils';\nimport { useLoading } from '../../../../../hooks';\nimport { AdvancedSelect, ToastBox, Button, Input } from 'app/components';\nimport { SelectOptions } from '../../../tables';\nimport { shortenLink } from '../templates.service';\nimport { Editable } from './Editable';\nimport { TemplateFormProps, TemplateFormValues } from './types';\nimport { html2Text } from '../templates.utils';\n\nexport const templateFormValidationSchema = yup.object().shape({\n  name: yup.string().required('Template name is required'),\n  template: yup.string().required('Template content is required'),\n});\n\nconst defaultInitialValues = {\n  id: '',\n  name: '',\n  table_id: '',\n  template: '',\n  smart_list_id: '',\n};\n\nexport function TemplateForm({\n  lists,\n  onClose,\n  onSubmit,\n  isLoading,\n  listOptions,\n  lists_by_id,\n  initialValues,\n}: TemplateFormProps) {\n  const [link, setLink] = React.useState('');\n  const [countText, setCountText] = React.useState('');\n  const [selectedTag, setSelectedTag] = React.useState('');\n  const [shortendLink, setShortendLink] = React.useState('');\n  const [tags, setTags] = React.useState<SelectOptions[]>([]);\n\n  const toast = useToast();\n  const editorRef = React.useRef<any>(null);\n  const { loading, dispatch } = useLoading();\n  const { onCopy, hasCopied } = useClipboard(shortendLink);\n  const formik = useFormik({\n    validationSchema: templateFormValidationSchema,\n    initialValues: initialValues || defaultInitialValues,\n    onSubmit: (values: TemplateFormValues) =>\n      onSubmit({ ...values, template: html2Text(values.template) }),\n  });\n\n  React.useEffect(() => {\n    const selectedListId = formik.values.table_id;\n    if (selectedListId && lists_by_id?.includes(selectedListId)) {\n      const properties = lists[selectedListId].columns.map(\n        ({ name, label }: { name: string; label: string }) => ({\n          label,\n          value: name,\n        }),\n      );\n\n      setTags(properties);\n    }\n  }, [formik.values.table_id, lists, lists_by_id]);\n\n  async function handleShortenLink() {\n    try {\n      dispatch({ type: 'LOADING_STARTED' });\n      const response = await shortenLink({ link });\n      const { link: shortenedLink } = response.data;\n\n      dispatch({ type: 'LOADING_RESOLVED' });\n      setLink(shortenedLink.link.short);\n      setShortendLink(shortenedLink.link.short);\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox onClose={onClose} status=\"success\" message={'Link shortened'} />\n        ),\n      });\n    } catch (error) {\n      dispatch({ type: 'LOADING_RESOLVED' });\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n  }\n\n  function handleLinkChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    setLink(value);\n  }\n\n  function handleTagChange(value: string | undefined) {\n    if (value) {\n      const updatedContent = `${formik.values.template} {{${value}}}`;\n\n      setSelectedTag(value);\n      formik.setFieldValue('template', updatedContent);\n    }\n  }\n\n  function handleEditableBlur(value: string) {\n    formik.setFieldValue('template', value);\n    getCharacterCountText(value);\n  }\n\n  function getCharacterCountText(value: string) {\n    const characterCount = value.length;\n    const smsCount = Math.ceil(characterCount / 160);\n    const countText = `${characterCount}/${smsCount * 160}, ${smsCount} SMS`;\n\n    setCountText(countText);\n  }\n\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <Box width=\"50%\">\n        <FormControl isInvalid={!!formik.touched.name && !!formik.errors.name}>\n          <Input\n            size=\"sm\"\n            name=\"name\"\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            placeholder=\"Give template a name\"\n          />\n          <FormErrorMessage>{formik.errors.name}</FormErrorMessage>\n        </FormControl>\n      </Box>\n      <Flex width=\"100%\" marginTop=\"1.1rem\" alignItems=\"center\" flexWrap=\"wrap\">\n        <Box color=\"#212242\" marginRight=\"1.3rem\" width={['100%', '100%', '60%']}>\n          <FormLabel fontSize=\"0.85rem\">Template Message</FormLabel>\n          <Editable\n            innerRef={editorRef}\n            placeholder=\"Write here...\"\n            onBlur={handleEditableBlur}\n            value={formik.values.template}\n            onChange={getCharacterCountText}\n          />\n          <Text fontSize=\"0.75rem\" marginTop=\"0.5rem\">\n            {countText}\n          </Text>\n        </Box>\n        <Box color=\"#212242\" width={['100%', '100%', '30%']}>\n          <Box marginBottom=\"0.6rem\">\n            <FormLabel fontSize=\"0.85rem\">List</FormLabel>\n            <AdvancedSelect\n              size=\"sm\"\n              isSearchable\n              isClearable={true}\n              options={listOptions}\n              placeholder=\"Select list\"\n              value={formik.values.table_id}\n              onChange={option => {\n                if (option) {\n                  formik.setFieldValue('table_id', option.value);\n                }\n              }}\n            />\n          </Box>\n          <Box marginBottom=\"0.6rem\">\n            <FormLabel fontSize=\"0.85rem\">Personalise with tags</FormLabel>\n\n            <AdvancedSelect\n              size=\"sm\"\n              isSearchable\n              options={tags}\n              isClearable={false}\n              placeholder=\"Choose a tag\"\n              onChange={option => handleTagChange(option.value)}\n              value={selectedTag}\n            />\n          </Box>\n          <Box marginTop=\"0.9rem\">\n            <FormLabel fontSize=\"0.85rem\">\n              <Stack isInline alignItems=\"center\">\n                <Text>Embed a trackable link</Text>\n                <Tooltip\n                  zIndex={10000}\n                  placement=\"top\"\n                  aria-label=\"info\"\n                  shouldWrapChildren\n                  label=\"Adding an embed trackable link means we'll track the message and provide analytics.\"\n                >\n                  <Icon name=\"info\" color=\"#a2a2a2\" />\n                </Tooltip>\n              </Stack>\n            </FormLabel>\n            <Input\n              size=\"sm\"\n              type=\"url\"\n              value={link}\n              color=\"#212242\"\n              paddingLeft=\"0.5rem\"\n              onChange={handleLinkChange}\n              placeholder=\"Paste link here to shorten…\"\n            />\n            <Button\n              size=\"xs\"\n              type=\"button\"\n              fontWeight=\"normal\"\n              marginTop=\"0.5rem\"\n              variantColor=\"blue\"\n              isDisabled={!validURL(link)}\n              isLoading={loading === 'pending'}\n              onClick={shortendLink ? onCopy : handleShortenLink}\n            >\n              {shortendLink ? (hasCopied ? 'Copied' : 'Copy') : 'Shorten'}\n            </Button>\n          </Box>\n        </Box>\n      </Flex>\n\n      <Stack isInline paddingTop=\"2rem\" paddingBottom=\"1rem\" justifyContent=\"flex-end\">\n        <Button type=\"button\" size=\"sm\" onClick={onClose}>\n          Close\n        </Button>\n        <Button size=\"sm\" type=\"submit\" variantColor=\"blue\" isLoading={isLoading}>\n          Save Template\n        </Button>\n      </Stack>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}