{"ast":null,"code":"import _extends from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/components/inbox-error.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay, Skeleton, Text } from '@chakra-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport QRCode from 'qrcode.react';\nimport { capitalize } from 'lodash';\nimport { selectCustomerById } from '../slices';\nimport { INBOX_INIT } from '../inbox.data';\nimport { getChannelGroupName } from '../inbox.utils';\nimport { connectChannelAcct, selectCredentialById, selectWhatsAppQrCode } from '../../channels';\nexport function AccountError({\n  title,\n  body,\n  customerID,\n  credentialID,\n  status,\n  closeModal\n}) {\n  const dispatch = useDispatch();\n  const {\n    0: isLoadingQr,\n    1: setIsLoadingQr\n  } = useState(false);\n  const {\n    platform_name,\n    platform_nick,\n    channel\n  } = useSelector(state => selectCustomerById(state, customerID)) || INBOX_INIT.customer;\n  const {\n    status: credentialStatus\n  } = useSelector(state => selectCredentialById(state, credentialID)) || {\n    status: ''\n  };\n  const qrcode = useSelector(selectWhatsAppQrCode);\n  const bodyText = status === 'invalid_token' ? `Seems like your authentication  for ${platform_name || platform_nick} of ${capitalize(getChannelGroupName(channel))} have been invalidated. Please re-authenticate.` : body;\n\n  const getQrCode = () => {\n    dispatch(connectChannelAcct({\n      channel,\n      isReAuth: true,\n      receiverID: credentialID\n    }));\n  };\n\n  useEffect(() => {\n    setIsLoadingQr(true);\n    getQrCode(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    if (credentialStatus === 'active') {\n      closeModal();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [credentialStatus]);\n  useEffect(() => {\n    if (isLoadingQr && qrcode) {\n      setIsLoadingQr(false);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [isLoadingQr, qrcode]);\n  return __jsx(React.Fragment, null, __jsx(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, title), __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, __jsx(Text, {\n    marginBottom: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, bodyText), status === 'invalid_token' && isLoadingQr ? __jsx(Skeleton, {\n    size: \"9.375rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }) : __jsx(QRCode, {\n    level: \"L\",\n    size: 264,\n    value: qrcode,\n    renderAs: \"canvas\",\n    bgColor: \"#ffffff\",\n    fgColor: \"#000000\",\n    includeMargin: false,\n    style: {\n      border: '1px solid black'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  })));\n}\nexport function InboxError({\n  isModalOpened,\n  closeModal,\n  title,\n  body,\n  data\n}) {\n  let view = __jsx(React.Fragment, null, __jsx(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, title), __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, body)));\n\n  if ((data === null || data === void 0 ? void 0 : data.type) === 'ACCOUNT_ERROR') {\n    view = __jsx(AccountError, _extends({\n      closeModal: closeModal,\n      title: title,\n      body: body\n    }, data, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 12\n      }\n    }));\n  }\n\n  return __jsx(Modal, {\n    size: \"md\",\n    isCentered: true,\n    isOpen: isModalOpened,\n    onClose: () => closeModal(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }), __jsx(ModalContent, {\n    borderRadius: \"4px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, view, __jsx(ModalCloseButton, {\n    size: \"sm\",\n    onClick: () => closeModal(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/components/inbox-error.tsx"],"names":["React","useEffect","useState","Modal","ModalBody","ModalCloseButton","ModalContent","ModalHeader","ModalOverlay","Skeleton","Text","useDispatch","useSelector","QRCode","capitalize","selectCustomerById","INBOX_INIT","getChannelGroupName","connectChannelAcct","selectCredentialById","selectWhatsAppQrCode","AccountError","title","body","customerID","credentialID","status","closeModal","dispatch","isLoadingQr","setIsLoadingQr","platform_name","platform_nick","channel","state","customer","credentialStatus","qrcode","bodyText","getQrCode","isReAuth","receiverID","border","InboxError","isModalOpened","data","view","type"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n  Skeleton,\n  Text,\n} from '@chakra-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport QRCode from 'qrcode.react';\nimport { capitalize } from 'lodash';\nimport { RootState } from '../../../../root';\nimport { selectCustomerById } from '../slices';\nimport { INBOX_INIT } from '../inbox.data';\nimport { getChannelGroupName } from '../inbox.utils';\nimport { connectChannelAcct, selectCredentialById, selectWhatsAppQrCode } from '../../channels';\n\nexport function AccountError({ title, body, customerID, credentialID, status, closeModal }: any) {\n  const dispatch = useDispatch();\n  const [isLoadingQr, setIsLoadingQr] = useState(false);\n  const { platform_name, platform_nick, channel } =\n    useSelector((state: RootState) => selectCustomerById(state, customerID)) || INBOX_INIT.customer;\n  const { status: credentialStatus } = useSelector((state: RootState) =>\n    selectCredentialById(state, credentialID),\n  ) || { status: '' };\n  const qrcode = useSelector(selectWhatsAppQrCode);\n  const bodyText =\n    status === 'invalid_token'\n      ? `Seems like your authentication  for ${platform_name || platform_nick} of ${capitalize(\n          getChannelGroupName(channel),\n        )} have been invalidated. Please re-authenticate.`\n      : body;\n\n  const getQrCode = () => {\n    dispatch(\n      connectChannelAcct({\n        channel,\n        isReAuth: true,\n        receiverID: credentialID,\n      }),\n    );\n  };\n\n  useEffect(() => {\n    setIsLoadingQr(true);\n    getQrCode();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (credentialStatus === 'active') {\n      closeModal();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [credentialStatus]);\n\n  useEffect(() => {\n    if (isLoadingQr && qrcode) {\n      setIsLoadingQr(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isLoadingQr, qrcode]);\n\n  return (\n    <>\n      <ModalHeader>{title}</ModalHeader>\n\n      <ModalBody>\n        <Text marginBottom=\"1rem\">{bodyText}</Text>\n\n        {status === 'invalid_token' && isLoadingQr ? (\n          <Skeleton size=\"9.375rem\" />\n        ) : (\n          <QRCode\n            level=\"L\"\n            size={264}\n            value={qrcode}\n            renderAs=\"canvas\"\n            bgColor=\"#ffffff\"\n            fgColor=\"#000000\"\n            includeMargin={false}\n            style={{ border: '1px solid black' }}\n          />\n        )}\n      </ModalBody>\n    </>\n  );\n}\n\nexport function InboxError({ isModalOpened, closeModal, title, body, data }: any) {\n  let view = (\n    <>\n      <ModalHeader>{title}</ModalHeader>\n      <ModalBody>\n        <Text>{body}</Text>\n      </ModalBody>\n    </>\n  );\n\n  if (data?.type === 'ACCOUNT_ERROR') {\n    view = <AccountError closeModal={closeModal} title={title} body={body} {...data} />;\n  }\n\n  return (\n    <Modal size=\"md\" isCentered isOpen={isModalOpened} onClose={() => closeModal()}>\n      <ModalOverlay />\n      <ModalContent borderRadius=\"4px\">\n        {view}\n        <ModalCloseButton size=\"sm\" onClick={() => closeModal()} />\n      </ModalContent>\n    </Modal>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}