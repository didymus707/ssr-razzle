{"ast":null,"code":"import { createSelector, createSlice } from \"@reduxjs/toolkit\";\nimport { getSupportedCountries } from \"../channel.thunks\";\nimport { onWebSocketAccountStatusChanged, onWebSocketWhatsAppAccountStatusChange, onWebSocketWhatsAppQrCode, onWebSocketWhatsAppQrCodeFailure } from \"../../inbox\";\nconst uiInitialState = {\n  qrcode: '',\n  supportedCountries: [],\n  qrcodeStatus: 'idle',\n  qrError: {\n    title: 'Error mirroring your WhatsApp account',\n    description: '',\n    isModalOpen: false\n  }\n};\n\nconst setQrError = (state, action) => {\n  var _action$payload;\n\n  state.qrcode = '';\n  state.qrcodeStatus = 'idle';\n  state.qrError.description = action === null || action === void 0 ? void 0 : (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.message;\n  state.qrError.isModalOpen = true;\n};\n\nconst uiSlice = createSlice({\n  name: 'channel_ui',\n  initialState: uiInitialState,\n  reducers: {\n    resetQrCode(state) {\n      state.qrcode = '';\n      state.qrcodeStatus = 'idle';\n    },\n\n    setQrcodeStatus(state, action) {\n      state.qrcodeStatus = action.payload;\n    },\n\n    setIsQrErrorModal(state, action) {\n      state.qrError.isModalOpen = action.payload;\n    },\n\n    setQRError: setQrError\n  },\n\n  extraReducers(builder) {\n    builder.addCase(onWebSocketWhatsAppQrCode, (state, action) => {\n      state.qrcode = action.payload.qrcode;\n    }).addCase(onWebSocketWhatsAppQrCodeFailure, setQrError).addCase(onWebSocketWhatsAppAccountStatusChange, (state, action) => {\n      const {\n        status\n      } = action.payload;\n      state.qrcodeStatus = status;\n\n      if (status === 'connected') {\n        state.qrcode = '';\n      }\n    }).addCase(getSupportedCountries.fulfilled, (state, action) => {\n      const {\n        supported_countries\n      } = action.payload;\n      state.supportedCountries = supported_countries;\n    }).addCase(onWebSocketAccountStatusChanged, state => {\n      if (state.qrcode) {\n        state.qrcode = '';\n      }\n    });\n  }\n\n});\nexport const {\n  resetQrCode,\n  setQrcodeStatus,\n  setIsQrErrorModal,\n  setQRError\n} = uiSlice.actions;\nexport const uiReducer = uiSlice.reducer;\nexport const selectUiState = createSelector(state => state.channel, channel => channel.ui);\nexport const selectSupportedCountries = createSelector(selectUiState, channelUi => channelUi.supportedCountries);\nexport const selectWhatsAppQrCode = createSelector(selectUiState, ui => ui.qrcode);\nexport const selectWhatsAppQrCodeStatus = createSelector(selectUiState, ui => ui.qrcodeStatus);\nexport const selectWhatsAppQrError = createSelector(selectUiState, ui => ui.qrError);","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/channels/slices/ui.ts"],"names":["createSelector","createSlice","getSupportedCountries","onWebSocketAccountStatusChanged","onWebSocketWhatsAppAccountStatusChange","onWebSocketWhatsAppQrCode","onWebSocketWhatsAppQrCodeFailure","uiInitialState","qrcode","supportedCountries","qrcodeStatus","qrError","title","description","isModalOpen","setQrError","state","action","payload","message","uiSlice","name","initialState","reducers","resetQrCode","setQrcodeStatus","setIsQrErrorModal","setQRError","extraReducers","builder","addCase","status","fulfilled","supported_countries","actions","uiReducer","reducer","selectUiState","channel","ui","selectSupportedCountries","channelUi","selectWhatsAppQrCode","selectWhatsAppQrCodeStatus","selectWhatsAppQrError"],"mappings":"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","sourcesContent":["import { createSelector, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { ErrorModalProps, SupportCountrySchema } from '../channels.types'\nimport { getSupportedCountries } from \"../channel.thunks\";\nimport { RootState } from \"../../../../root\";\nimport {\n  onWebSocketAccountStatusChanged, onWebSocketWhatsAppAccountStatusChange,\n  onWebSocketWhatsAppQrCode, onWebSocketWhatsAppQrCodeFailure,\n} from \"../../inbox\";\n\nconst uiInitialState = {\n  qrcode: '',\n  supportedCountries: [] as SupportCountrySchema[],\n  qrcodeStatus: 'idle' as 'idle' | 'connecting' | 'connected' | 'rejected',\n  qrError: {\n    title: 'Error mirroring your WhatsApp account', description: '', isModalOpen: false,\n  } as Pick<ErrorModalProps, 'title' | 'description'> & { isModalOpen: boolean },\n};\n\nconst setQrError = (state: any, action: any) => {\n  state.qrcode = '';\n  state.qrcodeStatus = 'idle';\n  state.qrError.description = action?.payload?.message\n  state.qrError.isModalOpen = true;\n}\n\nconst uiSlice = createSlice({\n  name: 'channel_ui',\n  initialState: uiInitialState,\n  reducers: {\n    resetQrCode(state) {\n      state.qrcode = '';\n      state.qrcodeStatus = 'idle';\n    },\n    setQrcodeStatus(state, action: PayloadAction<'idle' | 'connecting' | 'connected'>) {\n      state.qrcodeStatus = action.payload;\n    },\n    setIsQrErrorModal(state, action: PayloadAction<boolean>) {\n      state.qrError.isModalOpen = action.payload;\n    },\n    setQRError: setQrError,\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(onWebSocketWhatsAppQrCode, (state, action) => {\n        state.qrcode = action.payload.qrcode;\n      })\n      .addCase(onWebSocketWhatsAppQrCodeFailure, setQrError)\n      .addCase(onWebSocketWhatsAppAccountStatusChange, (state, action) => {\n        const { status } = action.payload;\n\n        state.qrcodeStatus = status;\n        if (status === 'connected') {\n          state.qrcode = '';\n        }\n      })\n      .addCase(getSupportedCountries.fulfilled, (state, action: any) => {\n        const { supported_countries } = action.payload;\n\n        state.supportedCountries = supported_countries;\n      })\n      .addCase(onWebSocketAccountStatusChanged, state => {\n        if (state.qrcode) {\n          state.qrcode = '';\n        }\n      })\n  },\n});\n\nexport const {\n  resetQrCode, setQrcodeStatus, setIsQrErrorModal, setQRError,\n} = uiSlice.actions;\nexport const uiReducer = uiSlice.reducer;\n\nexport const selectUiState = createSelector(\n  (state: RootState) => state.channel,\n  channel => channel.ui\n);\n\nexport const selectSupportedCountries = createSelector(\n  selectUiState, (channelUi) => channelUi.supportedCountries\n);\n\nexport const selectWhatsAppQrCode = createSelector(\n  selectUiState, ui => ui.qrcode\n);\n\nexport const selectWhatsAppQrCodeStatus = createSelector(\n  selectUiState, ui => ui.qrcodeStatus\n);\n\nexport const selectWhatsAppQrError = createSelector(\n  selectUiState, ui => ui.qrError,\n)\n"]},"metadata":{},"sourceType":"module"}