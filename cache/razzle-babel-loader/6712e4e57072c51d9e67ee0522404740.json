{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/marketing/campaigns/components/planner/test-message-modal.tsx\";\nvar __jsx = React.createElement;\nimport { Box, Flex, FormControl, FormErrorMessage, FormLabel, ModalCloseButton, Text } from '@chakra-ui/core';\nimport { Button, Input, ModalContainer } from 'app/components';\nimport * as yup from 'yup';\nimport { useFormik } from 'formik';\nimport React, { useEffect, useRef } from 'react';\nimport { CreditTopupCard } from '../credit-topup-card';\nimport { numberWithCommas } from '../../../../../../utils';\nexport const TestMessageModal = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  isLoading,\n  credit_balance\n}) => {\n  const validationSchema = yup.object().shape({\n    recipients: yup.string().required('Phone numbers are required')\n  });\n  const {\n    values,\n    touched,\n    errors,\n    handleChange,\n    setFieldValue,\n    handleSubmit\n  } = useFormik({\n    validationSchema,\n    initialValues: {\n      recipients: ''\n    },\n    onSubmit: (values, helpers) => onSubmit(values, helpers)\n  });\n  const recipientsLength = values.recipients.split(',').length;\n\n  const handleClose = () => {\n    setFieldValue('recipients', '');\n    onClose && onClose();\n  };\n\n  const amountToPay = (recipientsLength !== null && recipientsLength !== void 0 ? recipientsLength : 0) * 3.65;\n  const inputRef = useRef(null);\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n  return __jsx(ModalContainer, {\n    size: \"sm\",\n    isOpen: isOpen,\n    onClose: handleClose,\n    title: \"Send a test message\",\n    titleStyleProps: {\n      fontSize: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, __jsx(ModalCloseButton, {\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), __jsx(Box, {\n    px: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, __jsx(FormControl, {\n    isInvalid: !!touched.recipients && !!errors.recipients,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    pb: \"0\",\n    fontSize: \"0.8rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, \"Test message recipients\"), __jsx(Text, {\n    pb: \"0.5rem\",\n    color: \"gray.600\",\n    fontSize: \"0.7rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, \"Enter 10-digit phone numbers with country code, in a comma separated list.\"), __jsx(Input, {\n    size: \"sm\",\n    type: \"text\",\n    ref: inputRef,\n    name: \"recipients\",\n    value: values.recipients,\n    onChange: handleChange,\n    placeholder: \"Phone numbers e.g 2348078657980,2348078657909\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }), __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, errors.recipients))), credit_balance / 100 < amountToPay && __jsx(Box, {\n    px: \"1.5rem\",\n    pt: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, __jsx(CreditTopupCard, {\n    amount: amountToPay,\n    content: `We'll only be sending approximately ${numberWithCommas(Math.floor(credit_balance / (3.65 * 100)))} SMSs as you are low on campaign credits for the number of recipients (${numberWithCommas(recipientsLength)}) for this campaign. Please top-up to ensure all recipients receive this campaign.`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  })), __jsx(Flex, {\n    py: \"1rem\",\n    mt: \"1.5rem\",\n    px: \"1.5rem\",\n    alignItems: \"center\",\n    borderTopWidth: \"1px\",\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    size: \"sm\",\n    width: \"48%\",\n    variant: \"outline\",\n    variantColor: \"blue\",\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, \"Cancel\"), __jsx(Button, {\n    size: \"sm\",\n    width: \"48%\",\n    variantColor: \"blue\",\n    isLoading: isLoading,\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, \"Send test\")));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/marketing/campaigns/components/planner/test-message-modal.tsx"],"names":["Box","Flex","FormControl","FormErrorMessage","FormLabel","ModalCloseButton","Text","Button","Input","ModalContainer","yup","useFormik","React","useEffect","useRef","CreditTopupCard","numberWithCommas","TestMessageModal","isOpen","onClose","onSubmit","isLoading","credit_balance","validationSchema","object","shape","recipients","string","required","values","touched","errors","handleChange","setFieldValue","handleSubmit","initialValues","helpers","recipientsLength","split","length","handleClose","amountToPay","inputRef","current","focus","fontSize","Math","floor"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  ModalCloseButton,\n  Text,\n} from '@chakra-ui/core';\nimport { Button, Input, ModalContainer, ModalContainerOptions } from 'app/components';\nimport * as yup from 'yup';\nimport { FormikHelpers, useFormik } from 'formik';\nimport React, { useEffect, useRef } from 'react';\nimport { CreditTopupCard } from '../credit-topup-card';\nimport { numberWithCommas } from '../../../../../../utils';\n\ntype TestMessageModalProps = {\n  isLoading?: boolean;\n  credit_balance: number;\n  onSubmit: (\n    values: { recipients: string },\n    formikHelpers: FormikHelpers<{ recipients: string }>,\n  ) => void | Promise<any>;\n} & ModalContainerOptions;\n\nexport const TestMessageModal = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  isLoading,\n  credit_balance,\n}: TestMessageModalProps) => {\n  const validationSchema = yup.object().shape({\n    recipients: yup.string().required('Phone numbers are required'),\n  });\n  const { values, touched, errors, handleChange, setFieldValue, handleSubmit } = useFormik({\n    validationSchema,\n    initialValues: { recipients: '' },\n    onSubmit: (values, helpers) => onSubmit(values, helpers),\n  });\n\n  const recipientsLength = values.recipients.split(',').length;\n\n  const handleClose = () => {\n    setFieldValue('recipients', '');\n    onClose && onClose();\n  };\n\n  const amountToPay = (recipientsLength ?? 0) * 3.65;\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  return (\n    <ModalContainer\n      size=\"sm\"\n      isOpen={isOpen}\n      onClose={handleClose}\n      title=\"Send a test message\"\n      titleStyleProps={{ fontSize: '1rem' }}\n    >\n      <ModalCloseButton size=\"sm\" />\n      <Box px=\"1.5rem\">\n        <FormControl isInvalid={!!touched.recipients && !!errors.recipients}>\n          <FormLabel pb=\"0\" fontSize=\"0.8rem\">\n            Test message recipients\n          </FormLabel>\n          <Text pb=\"0.5rem\" color=\"gray.600\" fontSize=\"0.7rem\">\n            Enter 10-digit phone numbers with country code, in a comma separated list.\n          </Text>\n          <Input\n            size=\"sm\"\n            type=\"text\"\n            ref={inputRef}\n            name=\"recipients\"\n            value={values.recipients}\n            onChange={handleChange}\n            placeholder=\"Phone numbers e.g 2348078657980,2348078657909\"\n          />\n          <FormErrorMessage>{errors.recipients}</FormErrorMessage>\n        </FormControl>\n      </Box>\n      {credit_balance / 100 < amountToPay && (\n        <Box px=\"1.5rem\" pt=\"1rem\">\n          <CreditTopupCard\n            amount={amountToPay}\n            content={`We'll only be sending approximately ${numberWithCommas(\n              Math.floor(credit_balance / (3.65 * 100)),\n            )} SMSs as you are low on campaign credits for the number of recipients (${numberWithCommas(\n              recipientsLength,\n            )}) for this campaign. Please top-up to ensure all recipients receive this campaign.`}\n          />\n        </Box>\n      )}\n      <Flex\n        py=\"1rem\"\n        mt=\"1.5rem\"\n        px=\"1.5rem\"\n        alignItems=\"center\"\n        borderTopWidth=\"1px\"\n        justifyContent=\"space-between\"\n      >\n        <Button size=\"sm\" width=\"48%\" variant=\"outline\" variantColor=\"blue\" onClick={handleClose}>\n          Cancel\n        </Button>\n        <Button\n          size=\"sm\"\n          width=\"48%\"\n          variantColor=\"blue\"\n          isLoading={isLoading}\n          onClick={handleSubmit}\n        >\n          Send test\n        </Button>\n      </Flex>\n    </ModalContainer>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}