{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/lists/components/cell-properties/date/cell.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { CustomCellWrapper as Wrapper } from '../../grid/custom-cell/index.styles';\nimport { parseDate } from '../../../lists.utils';\nimport { calendarOutputFormat } from '../../../list.data';\nexport const DateCell = props => {\n  var _column$customization, _column$customization2, _column$customization3;\n\n  const column = props._column;\n  const date_format = (column === null || column === void 0 ? void 0 : (_column$customization = column.customization) === null || _column$customization === void 0 ? void 0 : _column$customization.date_format) || 'D/MM/YYYY';\n  const time_format = (column === null || column === void 0 ? void 0 : (_column$customization2 = column.customization) === null || _column$customization2 === void 0 ? void 0 : _column$customization2.time_format) || 'h:mm A';\n  const include_time = (column === null || column === void 0 ? void 0 : (_column$customization3 = column.customization) === null || _column$customization3 === void 0 ? void 0 : _column$customization3.include_time) || false;\n  const value = parseDate(props.value);\n  let formatted_date = date_format !== 'relative' ? value.format(date_format) : value.calendar(null, calendarOutputFormat);\n\n  if (include_time) {\n    if (date_format === 'relative') formatted_date += ' at';\n    formatted_date += ` ${value.format(time_format)}`;\n  }\n\n  return __jsx(Wrapper, {\n    onClick: e => e.stopPropagation(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"email-cell\",\n    onClick: e => e.stopPropagation(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, props.value && value.isValid() && formatted_date));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/lists/components/cell-properties/date/cell.tsx"],"names":["React","CustomCellWrapper","Wrapper","parseDate","calendarOutputFormat","DateCell","props","column","_column","date_format","customization","time_format","include_time","value","formatted_date","format","calendar","e","stopPropagation","isValid"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAiB,IAAIC,OAA9B,QAA6C,qCAA7C;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,oBAAT,QAAqC,oBAArC;AAEA,OAAO,MAAMC,QAAQ,GAAIC,KAAD,IAAgB;AAAA;;AACtC,QAAMC,MAAM,GAAGD,KAAK,CAACE,OAArB;AAEA,QAAMC,WAAW,GAAG,CAAAF,MAAM,SAAN,IAAAA,MAAM,WAAN,qCAAAA,MAAM,CAAEG,aAAR,gFAAuBD,WAAvB,KAAsC,WAA1D;AACA,QAAME,WAAW,GAAG,CAAAJ,MAAM,SAAN,IAAAA,MAAM,WAAN,sCAAAA,MAAM,CAAEG,aAAR,kFAAuBC,WAAvB,KAAsC,QAA1D;AACA,QAAMC,YAAY,GAAG,CAAAL,MAAM,SAAN,IAAAA,MAAM,WAAN,sCAAAA,MAAM,CAAEG,aAAR,kFAAuBE,YAAvB,KAAuC,KAA5D;AAEA,QAAMC,KAAK,GAAGV,SAAS,CAACG,KAAK,CAACO,KAAP,CAAvB;AAEA,MAAIC,cAAc,GAChBL,WAAW,KAAK,UAAhB,GACII,KAAK,CAACE,MAAN,CAAaN,WAAb,CADJ,GAEII,KAAK,CAACG,QAAN,CAAe,IAAf,EAAqBZ,oBAArB,CAHN;;AAKA,MAAIQ,YAAJ,EAAkB;AAChB,QAAIH,WAAW,KAAK,UAApB,EAAgCK,cAAc,IAAI,KAAlB;AAChCA,IAAAA,cAAc,IAAK,IAAGD,KAAK,CAACE,MAAN,CAAaJ,WAAb,CAA0B,EAAhD;AACD;;AAED,SACE,MAAC,OAAD;AAAS,IAAA,OAAO,EAAEM,CAAC,IAAIA,CAAC,CAACC,eAAF,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAA4B,IAAA,OAAO,EAAED,CAAC,IAAIA,CAAC,CAACC,eAAF,EAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,KAAK,CAACO,KAAN,IAAeA,KAAK,CAACM,OAAN,EAAf,IAAkCL,cADrC,CADF,CADF;AAOD,CA1BM","sourcesContent":["import React from 'react';\nimport { CustomCellWrapper as Wrapper } from '../../grid/custom-cell/index.styles';\nimport { parseDate } from '../../../lists.utils';\nimport { calendarOutputFormat } from '../../../list.data';\n\nexport const DateCell = (props: any) => {\n  const column = props._column;\n\n  const date_format = column?.customization?.date_format || 'D/MM/YYYY';\n  const time_format = column?.customization?.time_format || 'h:mm A';\n  const include_time = column?.customization?.include_time || false;\n\n  const value = parseDate(props.value);\n\n  let formatted_date =\n    date_format !== 'relative'\n      ? value.format(date_format)\n      : value.calendar(null, calendarOutputFormat);\n\n  if (include_time) {\n    if (date_format === 'relative') formatted_date += ' at';\n    formatted_date += ` ${value.format(time_format)}`;\n  }\n\n  return (\n    <Wrapper onClick={e => e.stopPropagation()}>\n      <div className=\"email-cell\" onClick={e => e.stopPropagation()}>\n        {props.value && value.isValid() && formatted_date}\n      </div>\n    </Wrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}