{"ast":null,"code":"import _objectSpread from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/settings/component/quick-reply-form.tsx\";\nvar __jsx = React.createElement;\nimport { Box, Flex, FormHelperText, Icon, Stack } from '@chakra-ui/core';\nimport { Button, FormLabel, Input } from 'app/components';\nimport { ContentState, convertFromHTML, EditorState, RichUtils } from 'draft-js';\nimport { useFormik } from 'formik';\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as yup from 'yup';\nimport { BlockStyleControls, DraftEditor, DraftEditorContainer, InlineStyleControls } from '../../components';\nexport const QuickReplyForm = props => {\n  var _initialValues$conten, _initialValues$conten2, _values$content;\n\n  const {\n    onSubmit,\n    onDelete,\n    onCancel,\n    isLoading,\n    isDeleting,\n    initialValues\n  } = props;\n  const {\n    values,\n    errors,\n    touched,\n    handleSubmit,\n    handleChange,\n    setFieldValue\n  } = useFormik({\n    initialValues: initialValues ? _objectSpread(_objectSpread({}, initialValues), {}, {\n      content: EditorState.createWithContent(ContentState.createFromBlockArray(convertFromHTML((_initialValues$conten = initialValues.content) !== null && _initialValues$conten !== void 0 ? _initialValues$conten : '').contentBlocks, convertFromHTML((_initialValues$conten2 = initialValues.content) !== null && _initialValues$conten2 !== void 0 ? _initialValues$conten2 : '').entityMap))\n    }) : {\n      name: '',\n      content: EditorState.createEmpty()\n    },\n    onSubmit,\n    validationSchema: yup.object().shape({\n      name: yup.string().required('Name is required')\n    })\n  });\n  const {\n    0: editorState,\n    1: setEditorState\n  } = useState((_values$content = values.content) !== null && _values$content !== void 0 ? _values$content : EditorState.createEmpty());\n\n  const toggleBlockType = blockType => {\n    setEditorState(RichUtils.toggleBlockType(editorState, blockType));\n  };\n\n  const toggleInlineStyle = inlineStyle => {\n    setEditorState(RichUtils.toggleInlineStyle(editorState, inlineStyle));\n  };\n\n  const handleContentChange = state => {\n    setEditorState(state);\n    setFieldValue('content', state);\n  };\n\n  const inputRef = useRef(null);\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    pb: \"2.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, __jsx(FormLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \"Name\"), __jsx(Input, {\n    name: \"name\",\n    ref: inputRef,\n    value: values.name,\n    onChange: handleChange,\n    errorMessage: errors.name,\n    placeholder: \"Enter name\",\n    isInvalid: !!touched.name && !!errors.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  })), __jsx(Box, {\n    pb: \"2.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, __jsx(FormLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \"Subject\"), __jsx(Input, {\n    name: \"subject\",\n    value: values.subject,\n    onChange: handleChange,\n    errorMessage: errors.subject,\n    placeholder: \"\",\n    isInvalid: !!touched.subject && !!errors.subject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }), __jsx(Stack, {\n    pt: \"0.5rem\",\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, __jsx(Icon, {\n    name: \"warning\",\n    color: \"gray.800\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    mt: \"0\",\n    color: \"gray.800\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, \"Optional: Will be placed in the subject when the message template is used in an email\"))), __jsx(DraftEditorContainer, {\n    mb: \"4rem\",\n    activeButtonColor: '#d2cef9',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    px: \"0.5rem\",\n    height: \"150px\",\n    borderWidth: \"1px\",\n    roundedTopLeft: \"8px\",\n    roundedTopRight: \"8px\",\n    borderColor: \"gray.500\",\n    borderBottomColor: \"transparent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, __jsx(DraftEditor, {\n    editorState: editorState,\n    onChange: handleContentChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  })), __jsx(Flex, {\n    py: \"1rem\",\n    px: \"1.5rem\",\n    bg: \"gray.200\",\n    borderWidth: \"1px\",\n    alignItems: \"center\",\n    borderColor: \"gray.500\",\n    roundedBottomLeft: \"8px\",\n    roundedBottomRight: \"8px\",\n    borderTopColor: \"transparent\",\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, __jsx(Stack, {\n    spacing: \"1rem\",\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, __jsx(InlineStyleControls, {\n    editorState: editorState,\n    onToggle: toggleInlineStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 15\n    }\n  })), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, __jsx(BlockStyleControls, {\n    editorState: editorState,\n    onToggle: toggleBlockType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 15\n    }\n  }))))), __jsx(Flex, {\n    pt: \"1.5rem\",\n    borderTopWidth: \"1px\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    onClick: onCancel,\n    variant: \"outline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, \"Cancel\"), __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, initialValues && __jsx(Button, {\n    isLoading: isDeleting,\n    variantColor: \"red\",\n    variant: \"outline\",\n    onClick: onDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, \"Delete\"), __jsx(Button, {\n    type: \"submit\",\n    isLoading: isLoading,\n    variantColor: \"blue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  }, \"Save\"))));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/settings/component/quick-reply-form.tsx"],"names":["Box","Flex","FormHelperText","Icon","Stack","Button","FormLabel","Input","ContentState","convertFromHTML","EditorState","RichUtils","useFormik","React","useEffect","useRef","useState","yup","BlockStyleControls","DraftEditor","DraftEditorContainer","InlineStyleControls","QuickReplyForm","props","onSubmit","onDelete","onCancel","isLoading","isDeleting","initialValues","values","errors","touched","handleSubmit","handleChange","setFieldValue","content","createWithContent","createFromBlockArray","contentBlocks","entityMap","name","createEmpty","validationSchema","object","shape","string","required","editorState","setEditorState","toggleBlockType","blockType","toggleInlineStyle","inlineStyle","handleContentChange","state","inputRef","current","focus","subject"],"mappings":"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","sourcesContent":["import { Box, Flex, FormHelperText, Icon, Stack } from '@chakra-ui/core';\nimport { Button, FormLabel, Input } from 'app/components';\nimport { ContentState, convertFromHTML, EditorState, RichUtils } from 'draft-js';\nimport { FormikConfig, useFormik } from 'formik';\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as yup from 'yup';\nimport {\n  BlockStyleControls,\n  DraftEditor,\n  DraftEditorContainer,\n  InlineStyleControls,\n} from '../../components';\n\nexport type QuickReplyFormValues = {\n  id?: string;\n  name: string;\n  subject?: string;\n  content?: EditorState;\n};\n\nexport type QuickReplyFormProps = {\n  isLoading?: boolean;\n  initialValues?: {\n    id?: string;\n    name: string;\n    subject?: string;\n    content?: string;\n  };\n  onDelete?(): void;\n  onCancel?(): void;\n  isDeleting?: boolean;\n  onSubmit: FormikConfig<QuickReplyFormValues>['onSubmit'];\n};\n\nexport const QuickReplyForm = (props: QuickReplyFormProps) => {\n  const { onSubmit, onDelete, onCancel, isLoading, isDeleting, initialValues } = props;\n  const {\n    values,\n    errors,\n    touched,\n    handleSubmit,\n    handleChange,\n    setFieldValue,\n  } = useFormik<QuickReplyFormValues>({\n    initialValues: initialValues\n      ? {\n          ...initialValues,\n          content: EditorState.createWithContent(\n            ContentState.createFromBlockArray(\n              convertFromHTML(initialValues.content ?? '').contentBlocks,\n              convertFromHTML(initialValues.content ?? '').entityMap,\n            ),\n          ),\n        }\n      : { name: '', content: EditorState.createEmpty() },\n    onSubmit,\n    validationSchema: yup.object().shape({\n      name: yup.string().required('Name is required'),\n    }),\n  });\n  const [editorState, setEditorState] = useState(values.content ?? EditorState.createEmpty());\n\n  const toggleBlockType = (blockType: string) => {\n    setEditorState(RichUtils.toggleBlockType(editorState, blockType));\n  };\n\n  const toggleInlineStyle = (inlineStyle: string) => {\n    setEditorState(RichUtils.toggleInlineStyle(editorState, inlineStyle));\n  };\n\n  const handleContentChange = (state: EditorState) => {\n    setEditorState(state);\n    setFieldValue('content', state);\n  };\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Box pb=\"2.5rem\">\n        <FormLabel>Name</FormLabel>\n        <Input\n          name=\"name\"\n          ref={inputRef}\n          value={values.name}\n          onChange={handleChange}\n          errorMessage={errors.name}\n          placeholder=\"Enter name\"\n          isInvalid={!!touched.name && !!errors.name}\n        />\n      </Box>\n      <Box pb=\"2.5rem\">\n        <FormLabel>Subject</FormLabel>\n        <Input\n          name=\"subject\"\n          value={values.subject}\n          onChange={handleChange}\n          errorMessage={errors.subject}\n          placeholder=\"\"\n          isInvalid={!!touched.subject && !!errors.subject}\n        />\n        <Stack pt=\"0.5rem\" isInline alignItems=\"center\">\n          <Icon name=\"warning\" color=\"gray.800\" />\n          <FormHelperText mt=\"0\" color=\"gray.800\">\n            Optional: Will be placed in the subject when the message template is used in an email\n          </FormHelperText>\n        </Stack>\n      </Box>\n      <DraftEditorContainer mb=\"4rem\" activeButtonColor={'#d2cef9'}>\n        <Box\n          px=\"0.5rem\"\n          height=\"150px\"\n          borderWidth=\"1px\"\n          roundedTopLeft=\"8px\"\n          roundedTopRight=\"8px\"\n          borderColor=\"gray.500\"\n          borderBottomColor=\"transparent\"\n        >\n          <DraftEditor editorState={editorState} onChange={handleContentChange} />\n        </Box>\n        <Flex\n          py=\"1rem\"\n          px=\"1.5rem\"\n          bg=\"gray.200\"\n          borderWidth=\"1px\"\n          alignItems=\"center\"\n          borderColor=\"gray.500\"\n          roundedBottomLeft=\"8px\"\n          roundedBottomRight=\"8px\"\n          borderTopColor=\"transparent\"\n          justifyContent=\"space-between\"\n        >\n          <Stack spacing=\"1rem\" isInline alignItems=\"center\">\n            <Box>\n              <InlineStyleControls editorState={editorState} onToggle={toggleInlineStyle} />\n            </Box>\n            <Box>\n              <BlockStyleControls editorState={editorState} onToggle={toggleBlockType} />\n            </Box>\n          </Stack>\n        </Flex>\n      </DraftEditorContainer>\n\n      <Flex pt=\"1.5rem\" borderTopWidth=\"1px\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Button onClick={onCancel} variant=\"outline\">\n          Cancel\n        </Button>\n        <Stack isInline alignItems=\"center\">\n          {initialValues && (\n            <Button isLoading={isDeleting} variantColor=\"red\" variant=\"outline\" onClick={onDelete}>\n              Delete\n            </Button>\n          )}\n          <Button type=\"submit\" isLoading={isLoading} variantColor=\"blue\">\n            Save\n          </Button>\n        </Stack>\n      </Flex>\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}