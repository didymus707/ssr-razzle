{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/components/messages/TagsMenu.tsx\";\nvar __jsx = React.createElement;\nimport { Flex, Icon, Stack, Tooltip } from '@chakra-ui/core';\nimport { Button, EmptyState, Menu, MenuItem, XSmallText } from 'app/components';\nimport React from 'react';\nimport { useHistory } from 'react-router';\nexport const TagsMenu = props => {\n  const {\n    tags,\n    onItemClick,\n    conversationTags\n  } = props;\n  const conversationTagIds = conversationTags === null || conversationTags === void 0 ? void 0 : conversationTags.map(item => item.uuid);\n  const tagIconColor = !!(conversationTags !== null && conversationTags !== void 0 && conversationTags.length) ? conversationTags[0].color : 'gray.400';\n  const history = useHistory();\n\n  const renderTagItem = (item, isSelected = false) => {\n    var _item$color;\n\n    return __jsx(MenuItem, {\n      key: item.uuid,\n      onClick: () => onItemClick === null || onItemClick === void 0 ? void 0 : onItemClick(item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }\n    }, __jsx(Flex, {\n      width: \"100%\",\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }, __jsx(Stack, {\n      flex: 1,\n      isInline: true,\n      alignItems: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }\n    }, __jsx(Icon, {\n      color: item.color,\n      size: \"1rem\",\n      name: \"inbox-tag\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    }), __jsx(Flex, {\n      px: \"0.8rem\",\n      rounded: \"100px\",\n      height: \"1.25rem\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      bg: (_item$color = item.color) !== null && _item$color !== void 0 ? _item$color : 'gray.400',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }\n    }, __jsx(XSmallText, {\n      textAlign: \"center\",\n      color: \"white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 15\n      }\n    }, item.name))), isSelected && __jsx(Icon, {\n      name: \"check\",\n      size: \"0.8rem\",\n      color: \"#5ACA75\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 26\n      }\n    })));\n  };\n\n  return __jsx(Menu, {\n    options: tags !== null && tags !== void 0 ? tags : [],\n    menuButtonProps: {\n      px: '0',\n      minW: 'unset',\n      children: __jsx(Tooltip, {\n        label: \"Tags\",\n        \"aria-label\": \"Tags\",\n        placement: \"bottom\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }\n      }, __jsx(Icon, {\n        size: \"1.5rem\",\n        name: \"inbox-tag\",\n        color: tagIconColor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }\n      }))\n    },\n    renderEmptyState: () => __jsx(EmptyState, {\n      width: \"200px\",\n      heading: \"No tags\",\n      subheading: \"Click the button below to create a tag\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, __jsx(Button, {\n      mb: \"1rem\",\n      size: \"xs\",\n      variantColor: \"blue\",\n      onClick: () => history.push('/s/inbox/settings/tags/new'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }, \"Create tag\")),\n    renderItem: tag => renderTagItem(tag, !!(conversationTagIds !== null && conversationTagIds !== void 0 && conversationTagIds.includes(tag.uuid))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  });\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/components/messages/TagsMenu.tsx"],"names":["Flex","Icon","Stack","Tooltip","Button","EmptyState","Menu","MenuItem","XSmallText","React","useHistory","TagsMenu","props","tags","onItemClick","conversationTags","conversationTagIds","map","item","uuid","tagIconColor","length","color","history","renderTagItem","isSelected","name","px","minW","children","push","tag","includes"],"mappings":";;AAAA,SAASA,IAAT,EAAeC,IAAf,EAAqBC,KAArB,EAA4BC,OAA5B,QAA2C,iBAA3C;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,IAA7B,EAAmCC,QAAnC,EAA6CC,UAA7C,QAA+D,gBAA/D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,cAA3B;AASA,OAAO,MAAMC,QAAQ,GAAIC,KAAD,IAA0B;AAChD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,WAAR;AAAqBC,IAAAA;AAArB,MAA0CH,KAAhD;AACA,QAAMI,kBAAkB,GAAGD,gBAAH,aAAGA,gBAAH,uBAAGA,gBAAgB,CAAEE,GAAlB,CAAsBC,IAAI,IAAIA,IAAI,CAACC,IAAnC,CAA3B;AACA,QAAMC,YAAY,GAAG,CAAC,EAACL,gBAAD,aAACA,gBAAD,eAACA,gBAAgB,CAAEM,MAAnB,CAAD,GAA6BN,gBAAgB,CAAC,CAAD,CAAhB,CAAoBO,KAAjD,GAAyD,UAA9E;AAEA,QAAMC,OAAO,GAAGb,UAAU,EAA1B;;AAEA,QAAMc,aAAa,GAAG,CAACN,IAAD,EAAiBO,UAAmB,GAAG,KAAvC,KAAiD;AAAA;;AACrE,WACE,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEP,IAAI,CAACC,IAApB;AAA0B,MAAA,OAAO,EAAE,MAAML,WAAN,aAAMA,WAAN,uBAAMA,WAAW,CAAGI,IAAH,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAC,MAAZ;AAAmB,MAAA,UAAU,EAAC,QAA9B;AAAuC,MAAA,cAAc,EAAC,eAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,KAAD;AAAO,MAAA,IAAI,EAAE,CAAb;AAAgB,MAAA,QAAQ,MAAxB;AAAyB,MAAA,UAAU,EAAC,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAEA,IAAI,CAACI,KAAlB;AAAyB,MAAA,IAAI,EAAC,MAA9B;AAAqC,MAAA,IAAI,EAAC,WAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,IAAD;AACE,MAAA,EAAE,EAAC,QADL;AAEE,MAAA,OAAO,EAAC,OAFV;AAGE,MAAA,MAAM,EAAC,SAHT;AAIE,MAAA,UAAU,EAAC,QAJb;AAKE,MAAA,cAAc,EAAC,QALjB;AAME,MAAA,EAAE,iBAAEJ,IAAI,CAACI,KAAP,qDAAgB,UANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQE,MAAC,UAAD;AAAY,MAAA,SAAS,EAAC,QAAtB;AAA+B,MAAA,KAAK,EAAC,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGJ,IAAI,CAACQ,IADR,CARF,CAFF,CADF,EAgBGD,UAAU,IAAI,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,OAAX;AAAmB,MAAA,IAAI,EAAC,QAAxB;AAAiC,MAAA,KAAK,EAAC,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBjB,CADF,CADF;AAsBD,GAvBD;;AAyBA,SACE,MAAC,IAAD;AACE,IAAA,OAAO,EAAEZ,IAAF,aAAEA,IAAF,cAAEA,IAAF,GAAU,EADnB;AAEE,IAAA,eAAe,EAAE;AACfc,MAAAA,EAAE,EAAE,GADW;AAEfC,MAAAA,IAAI,EAAE,OAFS;AAGfC,MAAAA,QAAQ,EACN,MAAC,OAAD;AAAS,QAAA,KAAK,EAAC,MAAf;AAAsB,sBAAW,MAAjC;AAAwC,QAAA,SAAS,EAAC,QAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,IAAD;AAAM,QAAA,IAAI,EAAC,QAAX;AAAoB,QAAA,IAAI,EAAC,WAAzB;AAAqC,QAAA,KAAK,EAAET,YAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAJa,KAFnB;AAWE,IAAA,gBAAgB,EAAE,MAChB,MAAC,UAAD;AACE,MAAA,KAAK,EAAC,OADR;AAEE,MAAA,OAAO,EAAC,SAFV;AAGE,MAAA,UAAU,EAAC,wCAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE,MAAC,MAAD;AACE,MAAA,EAAE,EAAC,MADL;AAEE,MAAA,IAAI,EAAC,IAFP;AAGE,MAAA,YAAY,EAAC,MAHf;AAIE,MAAA,OAAO,EAAE,MAAMG,OAAO,CAACO,IAAR,CAAa,4BAAb,CAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALF,CAZJ;AA2BE,IAAA,UAAU,EAAEC,GAAG,IAAIP,aAAa,CAACO,GAAD,EAAM,CAAC,EAACf,kBAAD,aAACA,kBAAD,eAACA,kBAAkB,CAAEgB,QAApB,CAA6BD,GAAG,CAACZ,IAAjC,CAAD,CAAP,CA3BlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AA+BD,CA/DM","sourcesContent":["import { Flex, Icon, Stack, Tooltip } from '@chakra-ui/core';\nimport { Button, EmptyState, Menu, MenuItem, XSmallText } from 'app/components';\nimport React from 'react';\nimport { useHistory } from 'react-router';\nimport { InboxTag } from '../../inbox.types';\n\nexport type TagsMenuProps = {\n  tags?: InboxTag[];\n  conversationTags?: InboxTag[];\n  onItemClick?(tag: InboxTag): void;\n};\n\nexport const TagsMenu = (props: TagsMenuProps) => {\n  const { tags, onItemClick, conversationTags } = props;\n  const conversationTagIds = conversationTags?.map(item => item.uuid);\n  const tagIconColor = !!conversationTags?.length ? conversationTags[0].color : 'gray.400';\n\n  const history = useHistory();\n\n  const renderTagItem = (item: InboxTag, isSelected: boolean = false) => {\n    return (\n      <MenuItem key={item.uuid} onClick={() => onItemClick?.(item)}>\n        <Flex width=\"100%\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Stack flex={1} isInline alignItems=\"center\">\n            <Icon color={item.color} size=\"1rem\" name=\"inbox-tag\" />\n            <Flex\n              px=\"0.8rem\"\n              rounded=\"100px\"\n              height=\"1.25rem\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              bg={item.color ?? 'gray.400'}\n            >\n              <XSmallText textAlign=\"center\" color=\"white\">\n                {item.name}\n              </XSmallText>\n            </Flex>\n          </Stack>\n          {isSelected && <Icon name=\"check\" size=\"0.8rem\" color=\"#5ACA75\" />}\n        </Flex>\n      </MenuItem>\n    );\n  };\n\n  return (\n    <Menu\n      options={tags ?? []}\n      menuButtonProps={{\n        px: '0',\n        minW: 'unset',\n        children: (\n          <Tooltip label=\"Tags\" aria-label=\"Tags\" placement=\"bottom\">\n            <Icon size=\"1.5rem\" name=\"inbox-tag\" color={tagIconColor} />\n          </Tooltip>\n        ),\n      }}\n      renderEmptyState={() => (\n        <EmptyState\n          width=\"200px\"\n          heading=\"No tags\"\n          subheading=\"Click the button below to create a tag\"\n        >\n          <Button\n            mb=\"1rem\"\n            size=\"xs\"\n            variantColor=\"blue\"\n            onClick={() => history.push('/s/inbox/settings/tags/new')}\n          >\n            Create tag\n          </Button>\n        </EmptyState>\n      )}\n      renderItem={tag => renderTagItem(tag, !!conversationTagIds?.includes(tag.uuid))}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}