{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/components/conversation/ConversationItem.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { Flex, Text, Box, PseudoBox, Button, useToast } from '@chakra-ui/core';\nimport { HighlightableText, ToastBox, SocialIcon } from '../../../../components';\nimport { formatTime, isOnlyEmoji } from '../../inbox.utils';\nimport { assignThread, makeSelectCustomerByID, makeSelectMessageNotificationStatus, makeSelectThreadById, selectLatestMessage, selectThreadAssigningState } from '../../slices';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectUserID } from '../../../../unauthenticated-app/authentication';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { INBOX_INIT } from '../../inbox.data';\nimport { selectThreadReceiverPlatformID } from '../../../channels';\nexport function ConversationItem({\n  highlight,\n  itemID\n}) {\n  const history = useHistory();\n  const params = useParams();\n  const dispatch = useDispatch();\n  const selectCustomerByID = useMemo(makeSelectCustomerByID, []);\n  const selectThreadById = useMemo(makeSelectThreadById, []);\n  const selectMessageNotificationStatus = useMemo(makeSelectMessageNotificationStatus, []);\n  const thread = useSelector(state => selectThreadById(state, itemID)) || INBOX_INIT.thread;\n  const threadReceiverUserID = useSelector(state => selectThreadReceiverPlatformID(state, itemID));\n  const sender_name = '';\n  const sender = useSelector(state => selectCustomerByID(state, thread.sender_id)) || INBOX_INIT.customer;\n  const lastMessage = useSelector(state => selectLatestMessage(state, thread.uuid)) || INBOX_INIT.message;\n  const assigningState = useSelector(state => selectThreadAssigningState(state, thread.uuid));\n  const user_id = useSelector(selectUserID);\n  const notificationStatus = useSelector(state => selectMessageNotificationStatus(state, {\n    message_id: lastMessage.uuid,\n    user_id: user_id || ''\n  })) || INBOX_INIT.notification.status;\n  const currentThreadID = params.id === 'new' ? '' : params.id;\n  const {\n    0: showAssignBtn,\n    1: setShowAssignBtn\n  } = useState(false);\n  const toast = useToast();\n  const {\n    state,\n    updated_datetime\n  } = thread;\n  const {\n    content = '',\n    attachments\n  } = lastMessage;\n  const {\n    channel = ''\n  } = sender;\n  const isQueued = state === 'queued';\n  const text = attachments && attachments.length > 0 ? '[Attachment]' : isOnlyEmoji((content === null || content === void 0 ? void 0 : content.substring(0, 24)) || '') ? (content || '').length <= 24 ? content : `${content === null || content === void 0 ? void 0 : content.substring(0, 24)}...` : (content || '').length <= 37 ? content : `${content === null || content === void 0 ? void 0 : content.substring(0, 34)}...`;\n\n  const handleItemClicked = async id => {\n    if (isQueued) {\n      user_id && dispatch(assignThread({\n        thread_id: id,\n        assignee_id: user_id\n      }));\n    } else {\n      history.push(`/s/inbox/${id}`);\n    }\n  };\n\n  useEffect(() => {\n    if (assigningState === 'fulfilled') {\n      history.push(`/s/inbox/${itemID}`);\n    } else if (assigningState === 'rejected') {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: \"Error: Failed to assign thread\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 11\n          }\n        })\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [assigningState]);\n  return __jsx(PseudoBox, {\n    as: \"div\",\n    _hover: {\n      bg: 'rgba(0, 0, 0, 0.05)',\n      cursor: 'pointer'\n    },\n    _focus: {\n      bg: 'rgba(0, 0, 0, 0.05)',\n      outline: 'none',\n      cursor: 'pointer'\n    },\n    tabIndex: 0,\n    bg: currentThreadID === itemID ? 'rgba(61, 80, 223, 0.0557802)' : 'initial',\n    onMouseEnter: isQueued ? () => setShowAssignBtn(true) : undefined,\n    onMouseLeave: isQueued ? () => setShowAssignBtn(false) : undefined,\n    onClick: () => handleItemClicked(itemID),\n    color: \"brandBlack\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    marginX: \"1rem\",\n    position: \"relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, showAssignBtn && isQueued && __jsx(Flex, {\n    bg: \"transparent\",\n    position: \"absolute\",\n    left: \"0\",\n    top: \"0\",\n    right: \"0\",\n    bottom: \"0\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    fontSize: \".875rem\",\n    variantColor: \"blue\",\n    color: \"#f6fafd\",\n    p: \".5rem 1rem\",\n    height: \"initial\",\n    minWidth: \"initial\",\n    zIndex: 2,\n    borderRadius: \"25px\",\n    boxShadow: \"0 2px 4px 0 rgba(0, 0, 0, 0.22)\",\n    loadingText: \"Assigning ...\",\n    isLoading: assigningState === 'pending',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, \"Assign to me\")), __jsx(Flex, {\n    py: \".5rem\",\n    textAlign: \"left\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, __jsx(SocialIcon, {\n    which: channel || '',\n    size: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }), __jsx(Box, {\n    ml: \"1.0625rem\",\n    flex: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, __jsx(Flex, {\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n    marginBottom: \".625rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    fontSize: \".875em\",\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 15\n    }\n  }, (sender_name || '').length > 19 ? `${(sender_name || '').substr(0, 19)}...` : sender_name), __jsx(Text, {\n    flex: \"1\",\n    ml: \".9375rem\",\n    textAlign: \"right\",\n    opacity: 0.5,\n    fontSize: \".75rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 15\n    }\n  }, formatTime(new Date(updated_datetime)))), __jsx(Flex, {\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, __jsx(HighlightableText, {\n    text: text,\n    highlight: highlight,\n    opacity: 0.5,\n    fontSize: \".75rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 15\n    }\n  }), (isQueued || !['read', 'unsent'].includes(notificationStatus)) && __jsx(Box, {\n    padding: \".25rem\",\n    height: \"0\",\n    backgroundColor: \"blue.500\",\n    borderRadius: \"50%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }\n  }))))));\n}","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/components/conversation/ConversationItem.tsx"],"names":["React","useEffect","useMemo","useState","Flex","Text","Box","PseudoBox","Button","useToast","HighlightableText","ToastBox","SocialIcon","formatTime","isOnlyEmoji","assignThread","makeSelectCustomerByID","makeSelectMessageNotificationStatus","makeSelectThreadById","selectLatestMessage","selectThreadAssigningState","useDispatch","useSelector","selectUserID","useHistory","useParams","INBOX_INIT","selectThreadReceiverPlatformID","ConversationItem","highlight","itemID","history","params","dispatch","selectCustomerByID","selectThreadById","selectMessageNotificationStatus","thread","state","threadReceiverUserID","sender_name","sender","sender_id","customer","lastMessage","uuid","message","assigningState","user_id","notificationStatus","message_id","notification","status","currentThreadID","id","showAssignBtn","setShowAssignBtn","toast","updated_datetime","content","attachments","channel","isQueued","text","length","substring","handleItemClicked","thread_id","assignee_id","push","position","render","onClose","bg","cursor","outline","undefined","substr","Date","includes"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { Flex, Text, Box, PseudoBox, Button, useToast } from '@chakra-ui/core';\nimport { ConversationItemProps } from '../../inbox.types';\nimport { HighlightableText, ToastBox, SocialIcon } from '../../../../components';\nimport { formatTime, isOnlyEmoji } from '../../inbox.utils';\nimport {\n  assignThread,\n  makeSelectCustomerByID,\n  makeSelectMessageNotificationStatus,\n  makeSelectThreadById,\n  selectLatestMessage,\n  selectThreadAssigningState,\n} from '../../slices';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../../../../root';\nimport { selectUserID } from '../../../../unauthenticated-app/authentication';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { INBOX_INIT } from '../../inbox.data';\nimport { selectThreadReceiverPlatformID } from '../../../channels';\n\nexport function ConversationItem({ highlight, itemID }: ConversationItemProps) {\n  const history = useHistory();\n  const params = useParams<{ id: string }>();\n  const dispatch = useDispatch();\n\n  const selectCustomerByID = useMemo(makeSelectCustomerByID, []);\n  const selectThreadById = useMemo(makeSelectThreadById, []);\n  const selectMessageNotificationStatus = useMemo(makeSelectMessageNotificationStatus, []);\n\n  const thread =\n    useSelector((state: RootState) => selectThreadById(state, itemID)) || INBOX_INIT.thread;\n\n  const threadReceiverUserID = useSelector((state: RootState) =>\n    selectThreadReceiverPlatformID(state, itemID),\n  );\n  const sender_name = '';\n\n  const sender =\n    useSelector((state: RootState) => selectCustomerByID(state, thread.sender_id)) ||\n    INBOX_INIT.customer;\n  const lastMessage =\n    useSelector((state: RootState) => selectLatestMessage(state, thread.uuid)) ||\n    INBOX_INIT.message;\n\n  const assigningState = useSelector((state: RootState) =>\n    selectThreadAssigningState(state, thread.uuid),\n  );\n\n  const user_id = useSelector(selectUserID);\n  const notificationStatus =\n    useSelector((state: RootState) =>\n      selectMessageNotificationStatus(state, {\n        message_id: lastMessage.uuid,\n        user_id: user_id || '',\n      }),\n    ) || INBOX_INIT.notification.status;\n  const currentThreadID = params.id === 'new' ? '' : params.id;\n\n  const [showAssignBtn, setShowAssignBtn] = useState<boolean>(false);\n  const toast = useToast();\n\n  const { state, updated_datetime } = thread;\n\n  const { content = '', attachments } = lastMessage;\n  const { channel = '' } = sender;\n  const isQueued = state === 'queued';\n\n  const text =\n    attachments && attachments.length > 0\n      ? '[Attachment]'\n      : isOnlyEmoji(content?.substring(0, 24) || '')\n      ? (content || '').length <= 24\n        ? content\n        : `${content?.substring(0, 24)}...`\n      : (content || '').length <= 37\n      ? content\n      : `${content?.substring(0, 34)}...`;\n\n  const handleItemClicked = async (id: string) => {\n    if (isQueued) {\n      user_id &&\n        dispatch(\n          assignThread({\n            thread_id: id,\n            assignee_id: user_id,\n          }),\n        );\n    } else {\n      history.push(`/s/inbox/${id}`);\n    }\n  };\n\n  useEffect(() => {\n    if (assigningState === 'fulfilled') {\n      history.push(`/s/inbox/${itemID}`);\n    } else if (assigningState === 'rejected') {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox onClose={onClose} message=\"Error: Failed to assign thread\" />\n        ),\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [assigningState]);\n\n  return (\n    <PseudoBox\n      as=\"div\"\n      _hover={{ bg: 'rgba(0, 0, 0, 0.05)', cursor: 'pointer' }}\n      _focus={{ bg: 'rgba(0, 0, 0, 0.05)', outline: 'none', cursor: 'pointer' }}\n      tabIndex={0}\n      bg={currentThreadID === itemID ? 'rgba(61, 80, 223, 0.0557802)' : 'initial'}\n      onMouseEnter={isQueued ? () => setShowAssignBtn(true) : undefined}\n      onMouseLeave={isQueued ? () => setShowAssignBtn(false) : undefined}\n      onClick={() => handleItemClicked(itemID)}\n      color=\"brandBlack\"\n    >\n      <Box marginX=\"1rem\" position=\"relative\">\n        {showAssignBtn && isQueued && (\n          <Flex\n            bg=\"transparent\"\n            position=\"absolute\"\n            left=\"0\"\n            top=\"0\"\n            right=\"0\"\n            bottom=\"0\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Button\n              fontSize=\".875rem\"\n              variantColor=\"blue\"\n              color=\"#f6fafd\"\n              p=\".5rem 1rem\"\n              height=\"initial\"\n              minWidth=\"initial\"\n              zIndex={2}\n              borderRadius=\"25px\"\n              boxShadow=\"0 2px 4px 0 rgba(0, 0, 0, 0.22)\"\n              loadingText=\"Assigning ...\"\n              isLoading={assigningState === 'pending'}\n            >\n              Assign to me\n            </Button>\n          </Flex>\n        )}\n\n        <Flex py=\".5rem\" textAlign=\"left\" alignItems=\"center\">\n          <SocialIcon which={channel || ''} size=\"2rem\" />\n\n          <Box ml=\"1.0625rem\" flex={1}>\n            <Flex justifyContent=\"space-between\" alignItems=\"flex-start\" marginBottom=\".625rem\">\n              <Text fontSize=\".875em\" fontWeight={500}>\n                {(sender_name || '').length > 19\n                  ? `${(sender_name || '').substr(0, 19)}...`\n                  : sender_name}\n              </Text>\n\n              <Text flex=\"1\" ml=\".9375rem\" textAlign=\"right\" opacity={0.5} fontSize=\".75rem\">\n                {formatTime(new Date(updated_datetime as string))}\n              </Text>\n            </Flex>\n\n            <Flex justifyContent=\"space-between\">\n              <HighlightableText\n                text={text}\n                highlight={highlight}\n                opacity={0.5}\n                fontSize=\".75rem\"\n              />\n\n              {(isQueued || !['read', 'unsent'].includes(notificationStatus)) && (\n                <Box padding=\".25rem\" height=\"0\" backgroundColor=\"blue.500\" borderRadius=\"50%\" />\n              )}\n            </Flex>\n          </Box>\n        </Flex>\n      </Box>\n    </PseudoBox>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}