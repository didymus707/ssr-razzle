{"ast":null,"code":"import _objectSpread from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nconst _excluded = [\"id\", \"name\", \"label\"];\nimport camelCase from 'lodash/camelCase';\nimport * as React from 'react';\nimport { arrayMove } from 'react-sortable-hoc';\n\n/**\n * Hook for managing table columns.\n * Manages add, update, delete, reorder actions for table columns\n */\nexport function useProperties({\n  properties\n}) {\n  const [columns, setColumns] = React.useState(properties);\n\n  async function handlePropertyAdd(value) {\n    let column = {};\n\n    if (value) {\n      column = {\n        hidden: false,\n        label: value.label,\n        name: camelCase(value.label),\n        type: value.type.toUpperCase()\n      };\n    } else {\n      column = {\n        hidden: false,\n        label: 'Column',\n        type: 'text'.toUpperCase(),\n        name: `column ${columns.length}`\n      };\n    }\n\n    if (value !== null && value !== void 0 && value.type.toLowerCase().includes('select')) {\n      column.options = [];\n    }\n\n    const data = [...columns, column];\n    setColumns(data);\n  }\n\n  async function handlePropertyUpdate(value, index) {\n    const data = [...columns];\n\n    if (value.type.toLowerCase().includes('select') && !value.options) {\n      value.options = [];\n    }\n\n    if (!value.type.toLowerCase().includes('select') && value.options) {\n      delete value.options;\n    }\n\n    data[index] = value;\n    setColumns([...data]);\n  }\n\n  async function handlePropertyDelete(index) {\n    const data = columns.filter((x, idx) => index !== idx);\n    setColumns(data);\n  }\n\n  async function handlePropertyDuplicate(value) {\n    const {\n      id,\n      name,\n      label\n    } = value,\n          rest = _objectWithoutProperties(value, _excluded);\n\n    const property = _objectSpread(_objectSpread({}, rest), {}, {\n      name: `${name}${columns.length + 1}`,\n      label: `${label} ${columns.length + 1}`\n    });\n\n    const data = [...columns, property];\n    setColumns(data);\n  }\n\n  async function handlePropertyDrag({\n    oldIndex,\n    newIndex\n  }) {\n    const data = arrayMove(columns, oldIndex, newIndex);\n    setColumns(data);\n  }\n\n  return {\n    properties: columns,\n    onPropertyAdd: handlePropertyAdd,\n    onPropertyDrag: handlePropertyDrag,\n    onPropertyUpdate: handlePropertyUpdate,\n    onPropertyDelete: handlePropertyDelete,\n    onPropertyDuplicate: handlePropertyDuplicate\n  };\n}","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/tables/components/table/table.hooks/use-columns.ts"],"names":["camelCase","React","arrayMove","useProperties","properties","columns","setColumns","useState","handlePropertyAdd","value","column","hidden","label","name","type","toUpperCase","length","toLowerCase","includes","options","data","handlePropertyUpdate","index","handlePropertyDelete","filter","x","idx","handlePropertyDuplicate","id","rest","property","handlePropertyDrag","oldIndex","newIndex","onPropertyAdd","onPropertyDrag","onPropertyUpdate","onPropertyDelete","onPropertyDuplicate"],"mappings":"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","sourcesContent":["import camelCase from 'lodash/camelCase'\nimport * as React from 'react'\nimport { arrayMove } from 'react-sortable-hoc'\nimport { PropertySchema } from '../../property'\n\n/**\n * Hook for managing table columns.\n * Manages add, update, delete, reorder actions for table columns\n */\n\nexport function useProperties ({\n  properties\n}: {\n  properties: PropertySchema[]\n}) {\n  const [columns, setColumns] = React.useState<PropertySchema[]>(properties)\n\n  async function handlePropertyAdd (\n    value?: Pick<PropertySchema, 'label' | 'type'>\n  ) {\n    let column = {} as PropertySchema\n    if (value) {\n      column = {\n        hidden: false,\n        label: value.label,\n        name: camelCase(value.label),\n        type: value.type.toUpperCase()\n      } as PropertySchema\n    } else {\n      column = {\n        hidden: false,\n        label: 'Column',\n        type: 'text'.toUpperCase(),\n        name: `column ${columns.length}`\n      } as PropertySchema\n    }\n    if (value?.type.toLowerCase().includes('select')) {\n      column.options = []\n    }\n    const data = [...columns, column]\n    setColumns(data)\n  }\n\n  async function handlePropertyUpdate (value: PropertySchema, index: number) {\n    const data = [...columns]\n    if (value.type.toLowerCase().includes('select') && !value.options) {\n      value.options = []\n    }\n    if (!value.type.toLowerCase().includes('select') && value.options) {\n      delete value.options\n    }\n    data[index] = value\n    setColumns([...data])\n  }\n\n  async function handlePropertyDelete (index: number) {\n    const data = columns.filter(\n      (x: PropertySchema, idx: number) => index !== idx\n    )\n    setColumns(data)\n  }\n\n  async function handlePropertyDuplicate (value: PropertySchema) {\n    const { id, name, label, ...rest } = value\n    const property = {\n      ...rest,\n      name: `${name}${columns.length + 1}`,\n      label: `${label} ${columns.length + 1}`\n    }\n    const data = [...columns, property]\n    setColumns(data)\n  }\n\n  async function handlePropertyDrag ({\n    oldIndex,\n    newIndex\n  }: {\n    oldIndex: number\n    newIndex: number\n  }) {\n    const data = arrayMove(columns, oldIndex, newIndex)\n    setColumns(data)\n  }\n\n  return {\n    properties: columns,\n    onPropertyAdd: handlePropertyAdd,\n    onPropertyDrag: handlePropertyDrag,\n    onPropertyUpdate: handlePropertyUpdate,\n    onPropertyDelete: handlePropertyDelete,\n    onPropertyDuplicate: handlePropertyDuplicate\n  }\n}\n"]},"metadata":{},"sourceType":"module"}