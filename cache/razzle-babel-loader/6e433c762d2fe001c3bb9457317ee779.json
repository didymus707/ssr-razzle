{"ast":null,"code":"var _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/payments/component/payments/component.content.tsx\";\nvar __jsx = React.createElement;\n// @ts-nocheck\nimport React, { useState } from 'react';\nimport { Box, useDisclosure, useToast } from '@chakra-ui/core';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { Button, EmptyState, ToastBox } from '../../../../components';\nimport { CompletePaymentSetupDialog } from './components/components/finish-setup-dialog';\nimport blankSetup from '../../assets/blank-setup.svg';\nimport pendingSetup from '../../assets/pending-setup.svg';\nimport submittedSetup from '../../assets/submitted-setup.svg';\nimport { PaymentRequests, TransactionHistory, AccountBalance } from './components';\nimport { useSelector } from 'react-redux';\nimport { selectPaymentSetupStatus } from '../../selectors';\nexport const PaymentsContent = props => {\n  const {\n    0: BAMVerifyData,\n    1: setBAMVerifyData\n  } = useState({\n    transaction_ref: null,\n    prompt: null\n  });\n  const {\n    0: requestBAMLoading,\n    1: setRequestBAMLoading\n  } = useState(false);\n  const {\n    0: verifyBAMLoading,\n    1: setVerifyBAMLoading\n  } = useState(false);\n  const {\n    match\n  } = props;\n  const toast = useToast();\n  const setup_status = useSelector(selectPaymentSetupStatus);\n\n  const handleFinishSetup = async () => {\n    setRequestBAMLoading(true);\n    const res = await props.requestCreateManagedAccount();\n\n    if (!res) {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: \"Unable to request account provisioning, please try again\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 11\n          }\n        })\n      });\n    } else {\n      setBAMVerifyData(res);\n      openCompleteDialog();\n    }\n\n    setRequestBAMLoading(false);\n  };\n\n  const handleVerifyBAM = async otp => {\n    setVerifyBAMLoading(true);\n    const res = await props.validateCreateManagedAccount(BAMVerifyData['transaction_ref'], otp);\n\n    if (!res) {\n      setVerifyBAMLoading(false);\n      return false;\n    } else {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          status: \"success\",\n          onClose: onClose,\n          message: \"Payment setup completed, and account provisioned successfully\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 11\n          }\n        })\n      });\n      setVerifyBAMLoading(false);\n      closeCompleteDialog();\n      return res;\n    }\n  };\n\n  const {\n    isOpen: completeDialogOpen,\n    onClose: closeCompleteDialog,\n    onOpen: openCompleteDialog\n  } = useDisclosure();\n  return __jsx(React.Fragment, null, __jsx(CompletePaymentSetupDialog, {\n    isOpen: completeDialogOpen,\n    onClose: closeCompleteDialog,\n    verify: handleVerifyBAM,\n    prompt: BAMVerifyData['prompt'],\n    isLoading: verifyBAMLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }), __jsx(Box, {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, __jsx(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, __jsx(Route, {\n    path: `${match.path}/balance`,\n    render: () => __jsx(AccountBalance, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 63\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }), __jsx(Route, {\n    path: `${match.path}/requests`,\n    render: () => __jsx(PaymentRequests, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 64\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }), __jsx(Route, {\n    path: `${match.path}/history`,\n    render: () => __jsx(TransactionHistory, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 63\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }), __jsx(Route, {\n    path: \"*\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, __jsx(Redirect, {\n    to: `${match.path}/requests`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }))), setup_status !== 'completed' && __jsx(React.Fragment, null, setup_status === 'pristine' && __jsx(EmptyState, {\n    image: blankSetup,\n    paddingY: \"150px\",\n    heading: \"Setup your account to receive payments\",\n    subheading: 'Get a unique bank account for all your transactions. Click the button below to setup your account.',\n    subheadingProps: {\n      width: '500px'\n    },\n    children: __jsx(Button, {\n      size: \"sm\",\n      variantColor: \"blue\",\n      onClick: () => window.open('/s/payments/onboarding'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 19\n      }\n    }, \"Setup Account\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 15\n    }\n  }), setup_status === 'pending' && __jsx(EmptyState, {\n    image: pendingSetup,\n    paddingY: \"150px\",\n    heading: \"Complete your account setup\",\n    subheading: \"You are almost there. Please complete setup to get a Simpu bank account.\",\n    children: __jsx(Button, {\n      variantColor: \"green\",\n      size: \"sm\",\n      onClick: () => window.open('/s/payments/onboarding'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 19\n      }\n    }, \"Complete your setup\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 15\n    }\n  }), setup_status === 'submitted' && __jsx(EmptyState, {\n    image: submittedSetup,\n    paddingY: \"150px\",\n    heading: \"Setup pending approval!\",\n    subheading: \"Approval usually takes one business day. Once you have been approved, you will be able to receive payments and track transactions. Please check back.\",\n    subheadingProps: {\n      width: '500px'\n    },\n    children: __jsx(Button, {\n      size: \"sm\",\n      variant: \"outline\",\n      variantColor: \"blue\",\n      onClick: () => window.open('/s/payments/onboarding'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 19\n      }\n    }, \"Update Setup\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 15\n    }\n  }), setup_status === 'approved' && __jsx(EmptyState, {\n    image: blankSetup,\n    paddingY: \"150px\",\n    heading: \"Your setup has been approved!\",\n    subheading: \"You'll just need to do a quick account confirmation, after which you'll get your SimpuPay account and all payment features would be available to you\",\n    subheadingProps: {\n      width: '500px'\n    },\n    children: __jsx(Button, {\n      size: \"sm\",\n      variantColor: \"blue\",\n      onClick: handleFinishSetup,\n      isLoading: requestBAMLoading // @ts-ignore\n      ,\n      subheadingProps: {\n        width: '500px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 19\n      }\n    }, \"Finish Setup\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 15\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/payments/component/payments/component.content.tsx"],"names":["React","useState","Box","useDisclosure","useToast","Redirect","Route","Switch","Button","EmptyState","ToastBox","CompletePaymentSetupDialog","blankSetup","pendingSetup","submittedSetup","PaymentRequests","TransactionHistory","AccountBalance","useSelector","selectPaymentSetupStatus","PaymentsContent","props","BAMVerifyData","setBAMVerifyData","transaction_ref","prompt","requestBAMLoading","setRequestBAMLoading","verifyBAMLoading","setVerifyBAMLoading","match","toast","setup_status","handleFinishSetup","res","requestCreateManagedAccount","position","render","onClose","openCompleteDialog","handleVerifyBAM","otp","validateCreateManagedAccount","closeCompleteDialog","isOpen","completeDialogOpen","onOpen","path","width","window","open"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport React, { useState } from 'react';\nimport { Box, useDisclosure, useToast } from '@chakra-ui/core';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { Button, EmptyState, ToastBox } from '../../../../components';\nimport { CompletePaymentSetupDialog } from './components/components/finish-setup-dialog';\nimport blankSetup from '../../assets/blank-setup.svg';\nimport pendingSetup from '../../assets/pending-setup.svg';\nimport submittedSetup from '../../assets/submitted-setup.svg';\nimport { PaymentRequests, TransactionHistory, AccountBalance } from './components';\nimport { PaymentSetupStatus } from '../../payments.types';\nimport { useSelector } from 'react-redux';\nimport { selectPaymentSetupStatus } from '../../selectors';\n\ninterface Props {\n  match: any;\n  requestCreateManagedAccount: Function;\n  validateCreateManagedAccount: Function;\n}\n\nexport const PaymentsContent = (props: Props) => {\n  const [BAMVerifyData, setBAMVerifyData] = useState({\n    transaction_ref: null,\n    prompt: null,\n  });\n  const [requestBAMLoading, setRequestBAMLoading] = useState(false);\n  const [verifyBAMLoading, setVerifyBAMLoading] = useState(false);\n\n  const { match } = props;\n\n  const toast = useToast();\n\n  const setup_status: PaymentSetupStatus = useSelector(selectPaymentSetupStatus);\n\n  const handleFinishSetup = async () => {\n    setRequestBAMLoading(true);\n    const res = await props.requestCreateManagedAccount();\n\n    if (!res) {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox\n            onClose={onClose}\n            message=\"Unable to request account provisioning, please try again\"\n          />\n        ),\n      });\n    } else {\n      setBAMVerifyData(res);\n      openCompleteDialog();\n    }\n    setRequestBAMLoading(false);\n  };\n\n  const handleVerifyBAM = async otp => {\n    setVerifyBAMLoading(true);\n    const res = await props.validateCreateManagedAccount(BAMVerifyData['transaction_ref'], otp);\n    if (!res) {\n      setVerifyBAMLoading(false);\n      return false;\n    } else {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox\n            status=\"success\"\n            onClose={onClose}\n            message=\"Payment setup completed, and account provisioned successfully\"\n          />\n        ),\n      });\n      setVerifyBAMLoading(false);\n      closeCompleteDialog();\n      return res;\n    }\n  };\n\n  const {\n    isOpen: completeDialogOpen,\n    onClose: closeCompleteDialog,\n    onOpen: openCompleteDialog,\n  } = useDisclosure();\n\n  return (\n    <>\n      <CompletePaymentSetupDialog\n        isOpen={completeDialogOpen}\n        onClose={closeCompleteDialog}\n        verify={handleVerifyBAM}\n        prompt={BAMVerifyData['prompt']}\n        isLoading={verifyBAMLoading}\n      />\n      <Box className=\"content\">\n        <Switch>\n          <Route path={`${match.path}/balance`} render={() => <AccountBalance />} />\n          <Route path={`${match.path}/requests`} render={() => <PaymentRequests />} />\n          <Route path={`${match.path}/history`} render={() => <TransactionHistory />} />\n          <Route path=\"*\">\n            <Redirect to={`${match.path}/requests`} />\n          </Route>\n        </Switch>\n\n        {setup_status !== 'completed' && (\n          <>\n            {setup_status === 'pristine' && (\n              <EmptyState\n                image={blankSetup}\n                paddingY=\"150px\"\n                heading=\"Setup your account to receive payments\"\n                subheading={\n                  'Get a unique bank account for all your transactions. Click the button below to setup your account.'\n                }\n                subheadingProps={{\n                  width: '500px',\n                }}\n                children={\n                  <Button\n                    size=\"sm\"\n                    variantColor=\"blue\"\n                    onClick={() => window.open('/s/payments/onboarding')}\n                  >\n                    Setup Account\n                  </Button>\n                }\n              />\n            )}\n            {setup_status === 'pending' && (\n              <EmptyState\n                image={pendingSetup}\n                paddingY=\"150px\"\n                heading=\"Complete your account setup\"\n                subheading=\"You are almost there. Please complete setup to get a Simpu bank account.\"\n                children={\n                  <Button\n                    variantColor=\"green\"\n                    size=\"sm\"\n                    onClick={() => window.open('/s/payments/onboarding')}\n                  >\n                    Complete your setup\n                  </Button>\n                }\n              />\n            )}\n            {setup_status === 'submitted' && (\n              <EmptyState\n                image={submittedSetup}\n                paddingY=\"150px\"\n                heading=\"Setup pending approval!\"\n                subheading=\"Approval usually takes one business day. Once you have been approved, you will be able to receive payments and track transactions. Please check back.\"\n                subheadingProps={{\n                  width: '500px',\n                }}\n                children={\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    variantColor=\"blue\"\n                    onClick={() => window.open('/s/payments/onboarding')}\n                  >\n                    Update Setup\n                  </Button>\n                }\n              />\n            )}\n            {setup_status === 'approved' && (\n              <EmptyState\n                image={blankSetup}\n                paddingY=\"150px\"\n                heading=\"Your setup has been approved!\"\n                subheading=\"You'll just need to do a quick account confirmation, after which you'll get your SimpuPay account and all payment features would be available to you\"\n                subheadingProps={{\n                  width: '500px',\n                }}\n                children={\n                  <Button\n                    size=\"sm\"\n                    variantColor=\"blue\"\n                    onClick={handleFinishSetup}\n                    isLoading={requestBAMLoading}\n                    // @ts-ignore\n                    subheadingProps={{\n                      width: '500px',\n                    }}\n                  >\n                    Finish Setup\n                  </Button>\n                }\n              />\n            )}\n          </>\n        )}\n      </Box>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}