{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { buildAppsURL, client } from '../../../../utils';\nimport { fetchDataModels, fetchSegments, setResourcesData, setResourcesLoading } from '../lists.reducer';\nimport { sendAmplitudeData } from '../../../../utils/amplitude';\nexport const requestResourceAuth = (resourceName, resourceType) => async () => {\n  const response = await client(`lists/resource/${resourceType}/auth/request`, {\n    method: 'GET',\n    params: {\n      name: resourceName\n    }\n  });\n  return response.data['auth_url'];\n};\nexport const requestAppResourceAuth = (type, params) => async () => {\n  const response = await client('', {\n    url: buildAppsURL(`/${type}/auth/request`),\n    method: 'GET',\n    params\n  });\n  return response.data.auth_url;\n};\nexport const submitAppResourceAuth = (type, payload, params) => async (dispatch, getState) => {\n  sendAmplitudeData('createResource');\n  const response = await client('', {\n    url: buildAppsURL(`/${type}/auth/request`),\n    method: 'POST',\n    params,\n    data: payload\n  });\n  const {\n    resources: {\n      data,\n      meta,\n      by_id\n    }\n  } = getState();\n  const resource = response.data;\n\n  const updated_data = _objectSpread(_objectSpread({}, data), {}, {\n    [resource.id]: resource\n  });\n\n  const updated_by_id = [...by_id, resource.id];\n\n  const updated_meta = _objectSpread(_objectSpread({}, meta), {}, {\n    count_total: meta.count_total + 1\n  });\n\n  dispatch(setResourcesData({\n    data: updated_data,\n    by_id: updated_by_id,\n    meta: updated_meta\n  }));\n  return response.data;\n};\nexport const testResourceConnection = (payload, resourceType) => async () => {\n  sendAmplitudeData('testResourceConnection');\n  const response = await client(`lists/resource/${resourceType}/auth`, {\n    method: 'POST',\n    data: payload\n  });\n  return response.message;\n};\nexport const createResource = (payload, resourceType) => async (dispatch, getState) => {\n  sendAmplitudeData('createResource');\n  const {\n    resources: {\n      data,\n      meta,\n      by_id\n    }\n  } = getState();\n  const response = await client(`lists/resource/${resourceType}/`, {\n    method: 'POST',\n    data: payload\n  });\n\n  const updated_data = _objectSpread(_objectSpread({}, data), {}, {\n    [response.data.id]: response.data\n  });\n\n  const updated_by_id = [...by_id, response.data.id];\n\n  const updated_meta = _objectSpread(_objectSpread({}, meta), {}, {\n    count_total: meta.count_total + 1\n  });\n\n  dispatch(setResourcesData({\n    data: updated_data,\n    by_id: updated_by_id,\n    meta: updated_meta\n  }));\n  return response.data;\n};\nexport const fetchResources = () => async dispatch => {\n  try {\n    dispatch(setResourcesLoading(true));\n    const response = await client('lists/resource/', {\n      method: 'GET'\n    });\n    const data = {};\n    const by_id = [];\n    response.data.forEach(i => {\n      data[i.id] = i;\n      by_id.push(i.id);\n    });\n    dispatch(setResourcesData({\n      data,\n      by_id,\n      meta: {}\n    }));\n    dispatch(setResourcesLoading(false));\n  } catch (e) {\n    dispatch(setResourcesLoading(false));\n    return null;\n  }\n};\nexport const updateResource = (resourceID, payload) => async (dispatch, getState) => {\n  sendAmplitudeData('updateResource');\n  const {\n    resources: {\n      by_id,\n      data,\n      meta\n    }\n  } = getState();\n  const response = await client(`lists/resource/${resourceID}`, {\n    method: 'PATCH',\n    data: payload\n  });\n\n  const updated_data = _objectSpread(_objectSpread({}, data), {}, {\n    [resourceID]: response.data\n  });\n\n  dispatch(setResourcesData({\n    data: updated_data,\n    by_id,\n    meta\n  }));\n  return response.data;\n};\nexport const deleteResource = resourceID => async (dispatch, getState) => {\n  const {\n    resources: {\n      by_id,\n      data,\n      meta\n    }\n  } = getState();\n  sendAmplitudeData('deleteResource');\n  const response = await client(`lists/resource/${resourceID}`, {\n    method: 'DELETE'\n  });\n  dispatch(fetchDataModels());\n  dispatch(fetchSegments());\n  const updated_by_id = by_id.filter(i => i !== resourceID);\n  const updated_data = updated_by_id.reduce((acc, i) => _objectSpread(_objectSpread({}, acc), {}, {\n    [i]: data[i]\n  }), {});\n\n  const updated_meta = _objectSpread(_objectSpread({}, meta), {}, {\n    count_total: meta.count_total - 1\n  });\n\n  dispatch(setResourcesData({\n    data: updated_data,\n    by_id: updated_by_id,\n    meta: updated_meta\n  }));\n  return response.data;\n};\nexport const fetchResourceSchema = resourceID => async (dispatch, getState) => {\n  const {\n    resources: {\n      data\n    }\n  } = getState(); // @ts-ignore\n\n  const resource = data[resourceID];\n  const response = await client(`lists/resource/${resource === null || resource === void 0 ? void 0 : resource.provider}/schema/${resourceID}`, {\n    method: 'GET'\n  });\n  return response.data;\n};\nexport const fetchAppEndpoints = type => async () => {\n  const response = await client('', {\n    url: buildAppsURL(`/${type}/endpoints`),\n    method: 'GET'\n  });\n  return response['data'];\n};\nexport const fetchAppEndpointSchema = (type, endpointID) => async () => {\n  const response = await client('', {\n    url: buildAppsURL(`/${type}/endpoints/${endpointID}`),\n    method: 'GET'\n  });\n  return response['data']['schema'];\n};\nexport const enableResourceWebhook = (resourceID, type) => async (dispatch, getState) => {\n  const {\n    resources: {\n      by_id,\n      data,\n      meta\n    }\n  } = getState();\n  const response = await client('', {\n    url: buildAppsURL(`/${type}/webhooks`),\n    method: 'POST',\n    data: {\n      resource: resourceID\n    }\n  }); // @ts-ignore\n\n  const updatedData = _objectSpread(_objectSpread({}, data), {}, {\n    [resourceID]: _objectSpread(_objectSpread({}, data[resourceID]), {}, {\n      webhooks_enabled: true\n    })\n  });\n\n  dispatch(setResourcesData({\n    data: updatedData,\n    by_id,\n    meta\n  }));\n  return response.data;\n};\nexport const disableResourceWebhook = (resourceID, type) => async (dispatch, getState) => {\n  const {\n    resources: {\n      by_id,\n      data,\n      meta\n    }\n  } = getState();\n  const response = await client('', {\n    url: buildAppsURL(`/${type}/webhooks/${resourceID}`),\n    method: 'DELETE'\n  }); // @ts-ignore\n\n  const updated_data = _objectSpread(_objectSpread({}, data), {}, {\n    [resourceID]: _objectSpread(_objectSpread({}, data[resourceID]), {}, {\n      webhooks_enabled: false\n    })\n  });\n\n  dispatch(setResourcesData({\n    data: updated_data,\n    by_id,\n    meta\n  }));\n  return response.data;\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/thunks/resources.ts"],"names":["buildAppsURL","client","fetchDataModels","fetchSegments","setResourcesData","setResourcesLoading","sendAmplitudeData","requestResourceAuth","resourceName","resourceType","response","method","params","name","data","requestAppResourceAuth","type","url","auth_url","submitAppResourceAuth","payload","dispatch","getState","resources","meta","by_id","resource","updated_data","id","updated_by_id","updated_meta","count_total","testResourceConnection","message","createResource","fetchResources","forEach","i","push","e","updateResource","resourceID","deleteResource","filter","reduce","acc","fetchResourceSchema","provider","fetchAppEndpoints","fetchAppEndpointSchema","endpointID","enableResourceWebhook","updatedData","webhooks_enabled","disableResourceWebhook"],"mappings":"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","sourcesContent":["import { AppThunk } from '../../../../root';\nimport { buildAppsURL, client } from '../../../../utils';\nimport {\n  fetchDataModels,\n  fetchSegments,\n  setResourcesData,\n  setResourcesLoading,\n} from '../lists.reducer';\nimport { sendAmplitudeData } from '../../../../utils/amplitude';\n\nexport const requestResourceAuth = (\n  resourceName: string,\n  resourceType: string,\n): AppThunk => async () => {\n  const response = await client(`lists/resource/${resourceType}/auth/request`, {\n    method: 'GET',\n    params: {\n      name: resourceName,\n    },\n  });\n  return response.data['auth_url'];\n};\n\nexport const requestAppResourceAuth = (type: string, params: {}): AppThunk => async () => {\n  const response = await client('', {\n    url: buildAppsURL(`/${type}/auth/request`),\n    method: 'GET',\n    params,\n  });\n  return response.data.auth_url;\n};\n\nexport const submitAppResourceAuth = (\n  type: string,\n  payload: { username: string; password: string },\n  params: { organisation_account_name: string },\n): AppThunk => async (dispatch, getState) => {\n  sendAmplitudeData('createResource');\n  const response = await client('', {\n    url: buildAppsURL(`/${type}/auth/request`),\n    method: 'POST',\n    params,\n    data: payload,\n  });\n  const {\n    resources: { data, meta, by_id },\n  } = getState();\n  const resource = response.data;\n\n  const updated_data = { ...data, [resource.id]: resource };\n  const updated_by_id = [...by_id, resource.id];\n  const updated_meta = { ...meta, count_total: meta.count_total + 1 };\n\n  dispatch(setResourcesData({ data: updated_data, by_id: updated_by_id, meta: updated_meta }));\n  return response.data;\n};\n\nexport const testResourceConnection = (\n  payload: {\n    host: string;\n    port: string;\n    dbname: string;\n    username: string;\n    password: string;\n    string: string;\n    ssh: boolean;\n    ssh_config?: {\n      bastion_host: string;\n      bastion_port: string;\n      bastion_user: string;\n    };\n  },\n  resourceType: string,\n): AppThunk => async () => {\n  sendAmplitudeData('testResourceConnection');\n  const response = await client(`lists/resource/${resourceType}/auth`, {\n    method: 'POST',\n    data: payload,\n  });\n  return response.message;\n};\n\nexport const createResource = (\n  payload: {\n    host: string;\n    port: string;\n    dbname: string;\n    username: string;\n    password: string;\n    string: string;\n    ssh: boolean;\n    ssh_config?: {\n      bastion_host: string;\n      bastion_port: string;\n      bastion_user: string;\n    };\n  },\n  resourceType: string,\n): AppThunk => async (dispatch, getState) => {\n  sendAmplitudeData('createResource');\n  const {\n    resources: { data, meta, by_id },\n  } = getState();\n\n  const response = await client(`lists/resource/${resourceType}/`, {\n    method: 'POST',\n    data: payload,\n  });\n\n  const updated_data = { ...data, [response.data.id]: response.data };\n  const updated_by_id = [...by_id, response.data.id];\n  const updated_meta = { ...meta, count_total: meta.count_total + 1 };\n\n  dispatch(\n    setResourcesData({\n      data: updated_data,\n      by_id: updated_by_id,\n      meta: updated_meta,\n    }),\n  );\n\n  return response.data;\n};\n\nexport const fetchResources = (): AppThunk => async dispatch => {\n  try {\n    dispatch(setResourcesLoading(true));\n    const response = await client('lists/resource/', {\n      method: 'GET',\n    });\n\n    const data: { [key: string]: any } = {};\n    const by_id: string[] = [];\n\n    response.data.forEach((i: any) => {\n      data[i.id] = i;\n      by_id.push(i.id);\n    });\n\n    dispatch(setResourcesData({ data, by_id, meta: {} }));\n    dispatch(setResourcesLoading(false));\n  } catch (e) {\n    dispatch(setResourcesLoading(false));\n\n    return null;\n  }\n};\n\nexport const updateResource = (resourceID: string, payload: {}): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  sendAmplitudeData('updateResource');\n  const {\n    resources: { by_id, data, meta },\n  } = getState();\n\n  const response = await client(`lists/resource/${resourceID}`, {\n    method: 'PATCH',\n    data: payload,\n  });\n\n  const updated_data = { ...data, [resourceID]: response.data };\n\n  dispatch(setResourcesData({ data: updated_data, by_id, meta }));\n\n  return response.data;\n};\n\nexport const deleteResource = (resourceID: string): AppThunk => async (dispatch, getState) => {\n  const {\n    resources: { by_id, data, meta },\n  } = getState();\n  sendAmplitudeData('deleteResource');\n\n  const response = await client(`lists/resource/${resourceID}`, {\n    method: 'DELETE',\n  });\n\n  dispatch(fetchDataModels());\n  dispatch(fetchSegments());\n\n  const updated_by_id = by_id.filter((i: string) => i !== resourceID);\n  const updated_data = updated_by_id.reduce((acc, i) => ({ ...acc, [i]: data[i] }), {});\n  const updated_meta = { ...meta, count_total: meta.count_total - 1 };\n\n  dispatch(setResourcesData({ data: updated_data, by_id: updated_by_id, meta: updated_meta }));\n\n  return response.data;\n};\n\nexport const fetchResourceSchema = (resourceID: string): AppThunk => async (dispatch, getState) => {\n  const {\n    resources: { data },\n  } = getState();\n\n  // @ts-ignore\n  const resource = data[resourceID];\n\n  const response = await client(`lists/resource/${resource?.provider}/schema/${resourceID}`, {\n    method: 'GET',\n  });\n  return response.data;\n};\n\nexport const fetchAppEndpoints = (type: string): AppThunk => async () => {\n  const response = await client('', {\n    url: buildAppsURL(`/${type}/endpoints`),\n    method: 'GET',\n  });\n  return response['data'];\n};\n\nexport const fetchAppEndpointSchema = (type: string, endpointID: string): AppThunk => async () => {\n  const response = await client('', {\n    url: buildAppsURL(`/${type}/endpoints/${endpointID}`),\n    method: 'GET',\n  });\n  return response['data']['schema'];\n};\n\nexport const enableResourceWebhook = (resourceID: string, type: string): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  const {\n    resources: { by_id, data, meta },\n  } = getState();\n  const response = await client('', {\n    url: buildAppsURL(`/${type}/webhooks`),\n    method: 'POST',\n    data: {\n      resource: resourceID,\n    },\n  });\n\n  // @ts-ignore\n  const updatedData = { ...data, [resourceID]: { ...data[resourceID], webhooks_enabled: true } };\n  dispatch(setResourcesData({ data: updatedData, by_id, meta }));\n  return response.data;\n};\n\nexport const disableResourceWebhook = (resourceID: string, type: string): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  const {\n    resources: { by_id, data, meta },\n  } = getState();\n  const response = await client('', {\n    url: buildAppsURL(`/${type}/webhooks/${resourceID}`),\n    method: 'DELETE',\n  });\n  // @ts-ignore\n  const updated_data = { ...data, [resourceID]: { ...data[resourceID], webhooks_enabled: false } };\n  dispatch(setResourcesData({ data: updated_data, by_id, meta }));\n  return response.data;\n};\n"]},"metadata":{},"sourceType":"module"}