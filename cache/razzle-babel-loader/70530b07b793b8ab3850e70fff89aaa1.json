{"ast":null,"code":"var _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/unauthenticated-app/authentication/components/forms/ResetPasswordForm.tsx\";\nvar __jsx = React.createElement;\nimport { Box, Text } from '@chakra-ui/core';\nimport { Button, Input } from 'app/components';\nimport { useFormik } from 'formik';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as yup from 'yup';\nconst validationSchema = yup.object().shape({\n  newPassword: yup.string().required('New password is required'),\n  confirmPassword: yup.string().required('Password confirmation is required').oneOf([yup.ref('newPassword'), null], 'Passwords must match')\n});\nexport function ResetPasswordForm({\n  onSubmit,\n  isLoading\n}) {\n  const formik = useFormik({\n    validationSchema,\n    initialValues: {\n      newPassword: '',\n      confirmPassword: ''\n    },\n    onSubmit: values => onSubmit(values)\n  });\n  return __jsx(\"form\", {\n    onSubmit: formik.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    mb: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    id: \"newPassword\",\n    type: \"password\",\n    name: \"newPassword\",\n    label: \"New password\",\n    onChange: formik.handleChange,\n    value: formik.values.newPassword,\n    errorMessage: formik.errors.newPassword,\n    isInvalid: !!formik.errors.newPassword && !!formik.touched.newPassword,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  })), __jsx(Box, {\n    mb: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    id: \"confirmPassword\",\n    type: \"password\",\n    name: \"confirmPassword\",\n    label: \"Confirm Password\",\n    onChange: formik.handleChange,\n    value: formik.values.confirmPassword,\n    errorMessage: formik.errors.confirmPassword,\n    isInvalid: !!formik.errors.confirmPassword && !!formik.errors.confirmPassword,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  })), __jsx(Button, {\n    mb: \"2rem\",\n    width: \"100%\",\n    type: \"submit\",\n    variantColor: \"blue\",\n    isLoading: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, \"Reset your password\"), __jsx(Box, {\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"Already have an account?\", ' ', __jsx(Link, {\n    to: \"/login\",\n    style: {\n      color: '#2034c5'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, \"Log in here\"))));\n}","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/unauthenticated-app/authentication/components/forms/ResetPasswordForm.tsx"],"names":["Box","Text","Button","Input","useFormik","React","Link","yup","validationSchema","object","shape","newPassword","string","required","confirmPassword","oneOf","ref","ResetPasswordForm","onSubmit","isLoading","formik","initialValues","values","handleSubmit","handleChange","errors","touched","color"],"mappings":"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","sourcesContent":["import { Box, Text } from '@chakra-ui/core';\nimport { Button, Input } from 'app/components';\nimport { useFormik } from 'formik';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as yup from 'yup';\n\nconst validationSchema = yup.object().shape({\n  newPassword: yup.string().required('New password is required'),\n  confirmPassword: yup\n    .string()\n    .required('Password confirmation is required')\n    .oneOf([yup.ref('newPassword'), null], 'Passwords must match'),\n});\n\nexport type ResetPasswordFormInitialValuesProps = yup.InferType<typeof validationSchema>;\n\nexport interface ResetPasswordFormProps {\n  onSubmit: (values: ResetPasswordFormInitialValuesProps) => void;\n  isLoading?: boolean;\n}\n\nexport function ResetPasswordForm({ onSubmit, isLoading }: ResetPasswordFormProps) {\n  const formik = useFormik({\n    validationSchema,\n    initialValues: { newPassword: '', confirmPassword: '' },\n    onSubmit: (values: ResetPasswordFormInitialValuesProps) => onSubmit(values),\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <Box mb=\"2rem\">\n        <Input\n          id=\"newPassword\"\n          type=\"password\"\n          name=\"newPassword\"\n          label=\"New password\"\n          onChange={formik.handleChange}\n          value={formik.values.newPassword}\n          errorMessage={formik.errors.newPassword}\n          isInvalid={!!formik.errors.newPassword && !!formik.touched.newPassword}\n        />\n      </Box>\n      <Box mb=\"2rem\">\n        <Input\n          id=\"confirmPassword\"\n          type=\"password\"\n          name=\"confirmPassword\"\n          label=\"Confirm Password\"\n          onChange={formik.handleChange}\n          value={formik.values.confirmPassword}\n          errorMessage={formik.errors.confirmPassword}\n          isInvalid={!!formik.errors.confirmPassword && !!formik.errors.confirmPassword}\n        />\n      </Box>\n      <Button mb=\"2rem\" width=\"100%\" type=\"submit\" variantColor=\"blue\" isLoading={isLoading}>\n        Reset your password\n      </Button>\n\n      <Box textAlign=\"center\">\n        <Text>\n          Already have an account?{' '}\n          <Link to=\"/login\" style={{ color: '#2034c5' }}>\n            Log in here\n          </Link>\n        </Text>\n      </Box>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}