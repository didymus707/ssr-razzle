{"ast":null,"code":"const _excluded = [\"id\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { TextCellComponent, TextFieldComponent, EmailCell, EmailFieldComponent, NumberFieldComponent, PhoneCell, PhoneFieldComponent, SelectCell, SelectFieldComponent, MultiSelectCell, MultiSelectFieldComponent, URLCell, DateCell, DateFieldComponent, DNDCell, DNDFieldComponent, DNDFieldFilterComponent } from './components/cell-properties';\nimport { DateCustomizationMenu } from './components/cell-properties';\nimport { available_properties, select_option_colors, list_option_colors } from './list.data';\nimport { icons } from 'feather-icons';\nimport moment from 'moment';\nexport const getCellRenderer = columnType => {\n  if (columnType === 'MULTI SELECT') return MultiSelectCell;\n  if (columnType === 'SELECT') return SelectCell;\n  if (columnType === 'EMAIL') return EmailCell;\n  if (columnType === 'PHONE NUMBER') return PhoneCell;\n  if (columnType === 'URL') return URLCell;\n  if (columnType === 'DATE') return DateCell;\n  if (columnType === 'DND') return DNDCell;\n  return TextCellComponent;\n};\nexport const getFieldRenderer = columnType => {\n  if (columnType === 'TEXT') return TextFieldComponent;\n  if (columnType === 'EMAIL') return EmailFieldComponent;\n  if (columnType === 'NUMBER') return NumberFieldComponent;\n  if (columnType === 'PHONE NUMBER') return PhoneFieldComponent;\n  if (columnType === 'DATE') return DateFieldComponent;\n  if (columnType === 'MULTI SELECT') return MultiSelectFieldComponent;\n  if (columnType === 'SELECT') return SelectFieldComponent;\n  if (columnType === 'DND') return DNDFieldComponent;\n  return TextFieldComponent;\n};\nexport const getFilterFieldRenderer = columnType => {\n  if (columnType === 'TEXT') return TextFieldComponent;\n  if (columnType === 'EMAIL') return EmailFieldComponent;\n  if (columnType === 'NUMBER') return NumberFieldComponent;\n  if (columnType === 'PHONE NUMBER') return PhoneFieldComponent;\n  if (columnType === 'DATE') return DateFieldComponent;\n  if (columnType === 'MULTI SELECT') return MultiSelectFieldComponent;\n  if (columnType === 'SELECT') return MultiSelectFieldComponent;\n  if (columnType === 'DND') return DNDFieldFilterComponent;\n  return TextFieldComponent;\n};\nexport const getColumnCustomizationComponent = columnType => {\n  if (columnType === 'DATE') return DateCustomizationMenu;\n};\nexport const getColumnHeaderIcon = columnType => {\n  // @ts-ignore\n  if (available_properties[columnType]) return available_properties[columnType].icon;\n  return 'text';\n};\nexport const getRowApiValue = row => {\n  const {\n    id\n  } = row,\n        rest = _objectWithoutProperties(row, _excluded);\n\n  let result = {\n    id\n  };\n  Object.keys(rest).forEach(item => {\n    const columnId = rest[item].columnId;\n\n    if (columnId) {\n      result[columnId] = rest[item].value;\n    }\n  });\n  return result;\n};\nexport const generateUpdatedRows = (row_ids, rows, column_id_map) => {\n  const updated_rows = row_ids.map(i => {\n    // @ts-ignore\n    const row = rows[i];\n    const columns = Object.keys(row.columns).reduce((acc, col_uid) => _objectSpread(_objectSpread({}, acc), {}, {\n      // @ts-ignore\n      [column_id_map[col_uid]]: row.columns[col_uid]\n    }), {});\n\n    const updated_row = _objectSpread(_objectSpread({}, row), {}, {\n      columns\n    });\n\n    return updated_row;\n  });\n  return updated_rows;\n};\nexport const generateFilterPayload = (filters, filters_by_id, column_id_map, columns = {}) => {\n  const payload = filters_by_id.map(i => {\n    // @ts-ignore\n    const filter = filters[i];\n    const col_uid = filter['columnID'];\n\n    const filter_item = _objectSpread(_objectSpread({}, filter), {}, {\n      // @ts-ignore\n      columnID: column_id_map[col_uid],\n      // @ts-ignore\n      columnType: columns === null || columns === void 0 ? void 0 : columns[col_uid]['type']\n    });\n\n    if (filter_item.columnType === 'DATE') {\n      const {\n        subOperator\n      } = filter;\n      if (subOperator === 'today') filter_item['value'] = {\n        diff: '0',\n        period: 'day'\n      };\n      if (subOperator === 'tomorrow') filter_item['value'] = {\n        diff: '+1',\n        period: 'day'\n      };\n      if (subOperator === 'yesterday') filter_item['value'] = {\n        diff: '-1',\n        period: 'day'\n      };\n      if (subOperator === 'one week ago') filter_item['value'] = {\n        diff: '-7',\n        period: 'day'\n      };\n      if (subOperator === 'one week from now') filter_item['value'] = {\n        diff: '+7',\n        period: 'day'\n      };\n      if (subOperator === 'one month ago') filter_item['value'] = {\n        diff: '-1',\n        period: 'month'\n      };\n      if (subOperator === 'one month from now') filter_item['value'] = {\n        diff: '+1',\n        period: 'month'\n      };\n\n      if (subOperator === 'number of days from now') {\n        filter_item['value'] = {\n          diff: filter_item['value'] ? `+${filter_item['value']}` : '0',\n          period: 'day'\n        };\n      }\n    }\n\n    delete filter_item.uid;\n    return filter_item;\n  });\n  return payload;\n};\nexport const generateSortPayload = (sorts, sorts_by_id, column_id_map, columns = {}) => {\n  const payload = sorts_by_id.map(i => {\n    // @ts-ignore\n    const sort = sorts[i];\n\n    const sort_item = _objectSpread(_objectSpread({}, sort), {}, {\n      // @ts-ignore\n      columnType: columns === null || columns === void 0 ? void 0 : columns[sort.columnID]['type'],\n      // @ts-ignore\n      columnID: column_id_map === null || column_id_map === void 0 ? void 0 : column_id_map[sort.columnID]\n    });\n\n    delete sort_item.uid; // delete sort_item.columnID;\n\n    return sort_item;\n  });\n  return payload;\n};\nexport const generateRandomSelectColor = () => {\n  const index = Math.floor(Math.random() * select_option_colors.length);\n  return select_option_colors[index].color;\n};\nexport const generateRandomListColor = () => {\n  const index = Math.floor(Math.random() * list_option_colors.length);\n  return list_option_colors[index];\n};\nexport const generateRandomListIcon = () => {\n  const icon_options = Object.keys(icons);\n  const index = Math.floor(Math.random() * icon_options.length);\n  return icon_options[index];\n};\nexport const parseDate = raw => {\n  let parsed = moment(raw);\n  if (parsed.isValid()) return parsed;\n  parsed = moment(raw, 'D/MM/YYYY');\n  if (parsed.isValid()) return parsed;\n  parsed = moment(raw, 'D/MM/YY');\n  if (parsed.isValid()) return parsed;\n  parsed = moment(raw, 'D-MM-YYYY');\n  if (parsed.isValid()) return parsed;\n  parsed = moment(raw, 'D-MM-YY');\n  if (parsed.isValid()) return parsed;\n  if (parsed.isValid()) return parsed;\n  parsed = moment(raw, 'D MM YYYY');\n  if (parsed.isValid()) return parsed;\n  parsed = moment(raw, 'D MM YY');\n  return parsed;\n};\nexport const parseTime = raw => {\n  let parsed = moment(raw, 'hh:mm A');\n  if (parsed.isValid()) return parsed;\n  parsed = moment(raw, 'HH:mm A');\n  if (parsed.isValid()) return parsed;\n  parsed = moment(raw, 'h:mm A');\n  if (parsed.isValid()) return parsed;\n  parsed = moment(raw, 'H:mm A');\n  return parsed;\n};\nexport const sortListByTime = (a, b) => {\n  if (moment(a.created_datetime).isAfter(moment(b.created_datetime))) return 1;else return -1;\n};\nexport const getListResourceIcon = resource_provider => {\n  if (resource_provider === 'google-sheets') return 'g-sheets';\n  if (resource_provider === 'mysql') return 'mysql';\n  if (resource_provider === 'pgsql') return 'postgreSql';\n  if (resource_provider === 'shopify') return 'shopify';\n  if (resource_provider === 'woo-commerce') return 'woo-commerce';\n  if (resource_provider === 'mambu') return 'mambu';\n  return 'copy';\n};\nexport const getAllowCreateList = (activeSubscription, listCount) => {\n  var _activeSubscription$d, _activeSubscription$d2;\n\n  let allowCreateList = false;\n  if (!(activeSubscription !== null && activeSubscription !== void 0 && (_activeSubscription$d = activeSubscription.details) !== null && _activeSubscription$d !== void 0 && (_activeSubscription$d2 = _activeSubscription$d.lists) !== null && _activeSubscription$d2 !== void 0 && _activeSubscription$d2.lists)) allowCreateList = true;else if (activeSubscription.details.lists.lists > listCount) allowCreateList = true;\n  return allowCreateList;\n};\nexport const wait = timeout => {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout);\n  });\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/lists.utils.ts"],"names":["TextCellComponent","TextFieldComponent","EmailCell","EmailFieldComponent","NumberFieldComponent","PhoneCell","PhoneFieldComponent","SelectCell","SelectFieldComponent","MultiSelectCell","MultiSelectFieldComponent","URLCell","DateCell","DateFieldComponent","DNDCell","DNDFieldComponent","DNDFieldFilterComponent","DateCustomizationMenu","available_properties","select_option_colors","list_option_colors","icons","moment","getCellRenderer","columnType","getFieldRenderer","getFilterFieldRenderer","getColumnCustomizationComponent","getColumnHeaderIcon","icon","getRowApiValue","row","id","rest","result","Object","keys","forEach","item","columnId","value","generateUpdatedRows","row_ids","rows","column_id_map","updated_rows","map","i","columns","reduce","acc","col_uid","updated_row","generateFilterPayload","filters","filters_by_id","payload","filter","filter_item","columnID","subOperator","diff","period","uid","generateSortPayload","sorts","sorts_by_id","sort","sort_item","generateRandomSelectColor","index","Math","floor","random","length","color","generateRandomListColor","generateRandomListIcon","icon_options","parseDate","raw","parsed","isValid","parseTime","sortListByTime","a","b","created_datetime","isAfter","getListResourceIcon","resource_provider","getAllowCreateList","activeSubscription","listCount","allowCreateList","details","lists","wait","timeout","Promise","resolve","setTimeout"],"mappings":"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","sourcesContent":["import {\n  TextCellComponent,\n  TextFieldComponent,\n  EmailCell,\n  EmailFieldComponent,\n  NumberFieldComponent,\n  PhoneCell,\n  PhoneFieldComponent,\n  SelectCell,\n  SelectFieldComponent,\n  MultiSelectCell,\n  MultiSelectFieldComponent,\n  URLCell,\n  DateCell,\n  DateFieldComponent,\n  DNDCell,\n  DNDFieldComponent,\n  DNDFieldFilterComponent,\n} from './components/cell-properties';\nimport { DateCustomizationMenu } from './components/cell-properties';\nimport { available_properties, select_option_colors, list_option_colors } from './list.data';\nimport { icons } from 'feather-icons';\nimport moment from 'moment';\n\nexport const getCellRenderer = (columnType: string) => {\n  if (columnType === 'MULTI SELECT') return MultiSelectCell;\n  if (columnType === 'SELECT') return SelectCell;\n  if (columnType === 'EMAIL') return EmailCell;\n  if (columnType === 'PHONE NUMBER') return PhoneCell;\n  if (columnType === 'URL') return URLCell;\n  if (columnType === 'DATE') return DateCell;\n  if (columnType === 'DND') return DNDCell;\n  return TextCellComponent;\n};\n\nexport const getFieldRenderer = (columnType: string) => {\n  if (columnType === 'TEXT') return TextFieldComponent;\n  if (columnType === 'EMAIL') return EmailFieldComponent;\n  if (columnType === 'NUMBER') return NumberFieldComponent;\n  if (columnType === 'PHONE NUMBER') return PhoneFieldComponent;\n  if (columnType === 'DATE') return DateFieldComponent;\n  if (columnType === 'MULTI SELECT') return MultiSelectFieldComponent;\n  if (columnType === 'SELECT') return SelectFieldComponent;\n  if (columnType === 'DND') return DNDFieldComponent;\n  return TextFieldComponent;\n};\n\nexport const getFilterFieldRenderer = (columnType: string) => {\n  if (columnType === 'TEXT') return TextFieldComponent;\n  if (columnType === 'EMAIL') return EmailFieldComponent;\n  if (columnType === 'NUMBER') return NumberFieldComponent;\n  if (columnType === 'PHONE NUMBER') return PhoneFieldComponent;\n  if (columnType === 'DATE') return DateFieldComponent;\n  if (columnType === 'MULTI SELECT') return MultiSelectFieldComponent;\n  if (columnType === 'SELECT') return MultiSelectFieldComponent;\n  if (columnType === 'DND') return DNDFieldFilterComponent;\n  return TextFieldComponent;\n};\n\nexport const getColumnCustomizationComponent = (columnType: string) => {\n  if (columnType === 'DATE') return DateCustomizationMenu;\n};\n\nexport const getColumnHeaderIcon = (columnType: string) => {\n  // @ts-ignore\n  if (available_properties[columnType]) return available_properties[columnType].icon;\n  return 'text';\n};\n\nexport const getRowApiValue = (row: any) => {\n  const { id, ...rest } = row;\n  let result = { id } as any;\n  Object.keys(rest).forEach(item => {\n    const columnId = rest[item].columnId;\n    if (columnId) {\n      result[columnId] = rest[item].value;\n    }\n  });\n  return result;\n};\n\nexport const generateUpdatedRows = (row_ids: [], rows: {}, column_id_map: {}) => {\n  const updated_rows = row_ids.map((i: string) => {\n    // @ts-ignore\n    const row = rows[i];\n    const columns = Object.keys(row.columns).reduce(\n      (acc, col_uid) => ({\n        ...acc,\n        // @ts-ignore\n        [column_id_map[col_uid]]: row.columns[col_uid],\n      }),\n      {},\n    );\n    const updated_row = {\n      ...row,\n      columns,\n    };\n    return updated_row;\n  });\n  return updated_rows;\n};\n\nexport const generateFilterPayload = (\n  filters: {},\n  filters_by_id: any[],\n  column_id_map: {},\n  columns = {},\n) => {\n  const payload = filters_by_id.map((i: string) => {\n    // @ts-ignore\n    const filter = filters[i];\n    const col_uid = filter['columnID'];\n\n    const filter_item = {\n      ...filter,\n      // @ts-ignore\n      columnID: column_id_map[col_uid],\n      // @ts-ignore\n      columnType: columns?.[col_uid]['type'],\n    };\n\n    if (filter_item.columnType === 'DATE') {\n      const { subOperator } = filter;\n      if (subOperator === 'today') filter_item['value'] = { diff: '0', period: 'day' };\n      if (subOperator === 'tomorrow') filter_item['value'] = { diff: '+1', period: 'day' };\n      if (subOperator === 'yesterday') filter_item['value'] = { diff: '-1', period: 'day' };\n      if (subOperator === 'one week ago') filter_item['value'] = { diff: '-7', period: 'day' };\n      if (subOperator === 'one week from now') filter_item['value'] = { diff: '+7', period: 'day' };\n      if (subOperator === 'one month ago') filter_item['value'] = { diff: '-1', period: 'month' };\n      if (subOperator === 'one month from now')\n        filter_item['value'] = { diff: '+1', period: 'month' };\n      if (subOperator === 'number of days from now') {\n        filter_item['value'] = {\n          diff: filter_item['value'] ? `+${filter_item['value']}` : '0',\n          period: 'day',\n        };\n      }\n    }\n\n    delete filter_item.uid;\n    return filter_item;\n  });\n\n  return payload;\n};\n\nexport const generateSortPayload = (\n  sorts: {},\n  sorts_by_id: [],\n  column_id_map: {},\n  columns = {},\n) => {\n  const payload = sorts_by_id.map((i: string) => {\n    // @ts-ignore\n    const sort = sorts[i];\n    const sort_item = {\n      ...sort,\n      // @ts-ignore\n      columnType: columns?.[sort.columnID]['type'],\n      // @ts-ignore\n      columnID: column_id_map?.[sort.columnID],\n    };\n    delete sort_item.uid;\n    // delete sort_item.columnID;\n    return sort_item;\n  });\n  return payload;\n};\n\nexport const generateRandomSelectColor = () => {\n  const index = Math.floor(Math.random() * select_option_colors.length);\n  return select_option_colors[index].color;\n};\n\nexport const generateRandomListColor = () => {\n  const index = Math.floor(Math.random() * list_option_colors.length);\n  return list_option_colors[index];\n};\n\nexport const generateRandomListIcon = () => {\n  const icon_options = Object.keys(icons);\n  const index = Math.floor(Math.random() * icon_options.length);\n  return icon_options[index];\n};\n\nexport const parseDate = (raw: string) => {\n  let parsed = moment(raw);\n  if (parsed.isValid()) return parsed;\n  parsed = moment(raw, 'D/MM/YYYY');\n  if (parsed.isValid()) return parsed;\n  parsed = moment(raw, 'D/MM/YY');\n  if (parsed.isValid()) return parsed;\n  parsed = moment(raw, 'D-MM-YYYY');\n  if (parsed.isValid()) return parsed;\n  parsed = moment(raw, 'D-MM-YY');\n  if (parsed.isValid()) return parsed;\n  if (parsed.isValid()) return parsed;\n  parsed = moment(raw, 'D MM YYYY');\n  if (parsed.isValid()) return parsed;\n  parsed = moment(raw, 'D MM YY');\n  return parsed;\n};\n\nexport const parseTime = (raw: string) => {\n  let parsed = moment(raw, 'hh:mm A');\n  if (parsed.isValid()) return parsed;\n  parsed = moment(raw, 'HH:mm A');\n  if (parsed.isValid()) return parsed;\n  parsed = moment(raw, 'h:mm A');\n  if (parsed.isValid()) return parsed;\n  parsed = moment(raw, 'H:mm A');\n  return parsed;\n};\n\nexport const sortListByTime = (a: any, b: any) => {\n  if (moment(a.created_datetime).isAfter(moment(b.created_datetime))) return 1;\n  else return -1;\n};\n\nexport const getListResourceIcon = (resource_provider: string) => {\n  if (resource_provider === 'google-sheets') return 'g-sheets';\n  if (resource_provider === 'mysql') return 'mysql';\n  if (resource_provider === 'pgsql') return 'postgreSql';\n  if (resource_provider === 'shopify') return 'shopify';\n  if (resource_provider === 'woo-commerce') return 'woo-commerce';\n  if (resource_provider === 'mambu') return 'mambu';\n  return 'copy';\n};\n\nexport const getAllowCreateList = (activeSubscription: any, listCount: number) => {\n  let allowCreateList: boolean = false;\n  if (!activeSubscription?.details?.lists?.lists) allowCreateList = true;\n  else if (activeSubscription.details.lists.lists > listCount) allowCreateList = true;\n\n  return allowCreateList;\n};\n\nexport const wait = (timeout: number) => {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout);\n  });\n};\n"]},"metadata":{},"sourceType":"module"}