{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit';\nimport { selectOrgMembers } from '../../settings/slices';\nimport { assignThread, fetchThreadAssignments, onWebSocketAccountDisconnected, sendMessage } from './global';\nconst assignmentsAdapter = createEntityAdapter({\n  selectId: assignment => assignment.uuid\n});\n\nconst upsertManyCallback = (state, action) => {\n  const {\n    assignments\n  } = action.payload;\n  assignments && assignmentsAdapter.upsertMany(state, assignments);\n};\n\nexport const assignmentsSlice = createSlice({\n  name: \"assignments\",\n  initialState: assignmentsAdapter.getInitialState(),\n  reducers: {},\n\n  extraReducers(builder) {\n    builder.addCase(assignThread.fulfilled, upsertManyCallback).addCase(sendMessage.fulfilled, upsertManyCallback).addCase(onWebSocketAccountDisconnected, (state, action) => {\n      const {\n        assignmentIDs\n      } = action.payload;\n      (assignmentIDs === null || assignmentIDs === void 0 ? void 0 : assignmentIDs.length) > 0 && assignmentsAdapter.removeMany(state, assignmentIDs);\n    }).addCase(fetchThreadAssignments.fulfilled, upsertManyCallback);\n  }\n\n});\nexport const assignmentsReducer = assignmentsSlice.reducer;\nexport const {\n  selectById: selectAssignmentById,\n  selectIds: selectAssignmentIds,\n  selectEntities: selectAssignmentEntities,\n  selectAll: selectAllAssignments,\n  selectTotal: selectTotalAssignments\n} = assignmentsAdapter.getSelectors(state => state.inbox.entities.assignments);\nexport const selectAssignmentsByThreadID = createSelector((_, payload) => payload, selectAllAssignments, selectOrgMembers, (payload, assignments, orgMembers) => assignments.filter(({\n  thread_id\n}) => payload.thread_id === thread_id).map(item => {\n  const {\n    assignee_id,\n    assigner_id\n  } = item;\n  const assignee = orgMembers.find(({\n    id\n  }) => id === assignee_id);\n  const assigner = orgMembers.find(({\n    id\n  }) => id === assigner_id);\n  return _objectSpread(_objectSpread({}, item), {}, {\n    assignee,\n    assigner\n  });\n}));\nexport const selectThreadAssignmentIDs = createSelector((_, payload) => payload.thread_id, selectAllAssignments, (thread_id, assignments) => assignments.reduce((acc, {\n  uuid,\n  thread_id: tID\n}) => {\n  if (thread_id === tID) {\n    acc.push(uuid);\n  }\n\n  return acc;\n}, []));","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/slices/assignment.ts"],"names":["createEntityAdapter","createSelector","createSlice","selectOrgMembers","assignThread","fetchThreadAssignments","onWebSocketAccountDisconnected","sendMessage","assignmentsAdapter","selectId","assignment","uuid","upsertManyCallback","state","action","assignments","payload","upsertMany","assignmentsSlice","name","initialState","getInitialState","reducers","extraReducers","builder","addCase","fulfilled","assignmentIDs","length","removeMany","assignmentsReducer","reducer","selectById","selectAssignmentById","selectIds","selectAssignmentIds","selectEntities","selectAssignmentEntities","selectAll","selectAllAssignments","selectTotal","selectTotalAssignments","getSelectors","inbox","entities","selectAssignmentsByThreadID","_","orgMembers","filter","thread_id","map","item","assignee_id","assigner_id","assignee","find","id","assigner","selectThreadAssignmentIDs","reduce","acc","tID","push"],"mappings":"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","sourcesContent":["import { createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../../../root'\nimport { selectOrgMembers } from '../../settings/slices';\nimport { AssignmentSchema } from '../inbox.types';\nimport {\n  assignThread, fetchThreadAssignments, onWebSocketAccountDisconnected, sendMessage\n} from './global';\n\nconst assignmentsAdapter = createEntityAdapter<AssignmentSchema>({\n  selectId: assignment => assignment.uuid,\n});\n\nconst upsertManyCallback = (state: any, action: any) => {\n  const { assignments } = action.payload;\n  assignments && assignmentsAdapter.upsertMany(state, assignments);\n};\n\nexport const assignmentsSlice = createSlice({\n  name: \"assignments\",\n  initialState: assignmentsAdapter.getInitialState(),\n  reducers: {},\n  extraReducers(builder) {\n    builder\n      .addCase(assignThread.fulfilled, upsertManyCallback)\n      .addCase(sendMessage.fulfilled, upsertManyCallback)\n      .addCase(onWebSocketAccountDisconnected, (state, action) => {\n        const { assignmentIDs } = action.payload;\n        \n        assignmentIDs?.length > 0 && assignmentsAdapter.removeMany(state, assignmentIDs);\n      })\n      .addCase(fetchThreadAssignments.fulfilled, upsertManyCallback);\n  },\n});\n\nexport const assignmentsReducer = assignmentsSlice.reducer;\n\nexport const {\n  selectById: selectAssignmentById,\n  selectIds: selectAssignmentIds,\n  selectEntities: selectAssignmentEntities,\n  selectAll: selectAllAssignments,\n  selectTotal: selectTotalAssignments,\n} = assignmentsAdapter.getSelectors<RootState>((state) => state.inbox.entities.assignments);\n\nexport const selectAssignmentsByThreadID = createSelector(\n  (_: RootState, payload: Pick<AssignmentSchema, 'thread_id'>) => payload,\n  selectAllAssignments,\n  selectOrgMembers,\n  (payload, assignments, orgMembers) => assignments.filter(\n    ({ thread_id }) => payload.thread_id === thread_id\n  ).map((item) => {\n    const { assignee_id, assigner_id } = item;\n    const assignee = orgMembers.find(({ id }) => id === assignee_id);\n    const assigner = orgMembers.find(({ id }) => id === assigner_id);\n\n    return { ...item, assignee, assigner }\n  })\n);\n\nexport const selectThreadAssignmentIDs = createSelector(\n  (_: RootState, payload: Pick<AssignmentSchema, 'thread_id'>) => payload.thread_id,\n  selectAllAssignments,\n  (thread_id, assignments) => assignments.reduce((acc, { uuid, thread_id: tID }) => {\n    if (thread_id === tID) {\n      acc.push(uuid);\n    }\n    \n    return acc;\n  }, ([] as string[]))\n);\n"]},"metadata":{},"sourceType":"module"}