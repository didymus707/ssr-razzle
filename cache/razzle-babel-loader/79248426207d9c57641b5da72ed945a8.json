{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/lists/component/lists/components/segments/list-segments/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Box, Icon, Menu, MenuButton, MenuItem, MenuList, SimpleGrid, useDisclosure } from '@chakra-ui/core';\nimport { Button, EmptyState } from 'app/components';\nimport { useSelector } from 'react-redux';\nimport { selectSegments } from '../../../../../lists.selectors';\nimport noResources from '../../../../../assets/no-resources.svg';\nimport { icons } from 'feather-icons';\nimport { DeleteSegmentDialog } from './delete-segment-dialog';\n\nconst SegmentItem = props => {\n  return __jsx(Menu, {\n    closeOnSelect: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, ({\n    isOpen\n  }) => __jsx(React.Fragment, null, __jsx(MenuButton, {\n    as: Box,\n    className: `list-item--list ${isOpen && 'active'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    className: \"box\",\n    bg: \"#02AAA4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 15\n    }\n  }, __jsx(\"img\", {\n    alt: \"list-icon\",\n    src: `data:image/svg+xml;utf8,${icons['pie-chart'].toSvg({\n      color: 'white'\n    })}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  })), __jsx(Box, {\n    className: \"label\" // @ts-ignore\n    ,\n    flexDirection: \"column !important\",\n    alignItems: \"flex-start !important\",\n    maxWidth: \"260px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    overflow: \"hidden\" // @ts-ignore\n    ,\n    textOverflow: \"ellipsis\",\n    maxWidth: \"260px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, props.name))), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    className: \"action-btn-bg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  }, __jsx(Icon, {\n    name: \"chevron-down\",\n    color: \"white\",\n    size: \"12px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }))), __jsx(MenuList, {\n    minWidth: \"150px\",\n    placement: \"bottom-end\",\n    color: \"#333333\",\n    fontSize: \"12px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, __jsx(MenuItem, {\n    onClick: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }, __jsx(Icon, {\n    name: \"edit\",\n    size: \"14px\",\n    mr: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }), \"Update segment\"), __jsx(MenuItem, {\n    color: \"#E73D51\",\n    onClick: () => props.onDeleteClicked(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }, __jsx(Icon, {\n    name: \"trash\",\n    size: \"14px\",\n    mr: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }), \"Delete segment\")))));\n};\n\nexport const ListSegments = props => {\n  const {\n    0: selectedSegment,\n    1: setSelectedSegment\n  } = useState(null);\n  const routerHistory = useHistory();\n  const segments = useSelector(selectSegments);\n  const {\n    isOpen: isDeleteDialogOpen,\n    onClose: closeDeleteDialog,\n    onOpen: openDeleteDialog\n  } = useDisclosure();\n  const {\n    searchValue,\n    deleteSegment\n  } = props;\n  const filteredSegments = segments.filter(i => i.name.toLowerCase().includes(searchValue.toLowerCase()));\n  return __jsx(React.Fragment, null, __jsx(DeleteSegmentDialog, {\n    isOpen: isDeleteDialogOpen,\n    onClose: closeDeleteDialog,\n    selectedSegment: selectedSegment,\n    deleteSegment: deleteSegment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }), __jsx(Box, {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, !searchValue && __jsx(Box, {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 28\n    }\n  }, \"Segments\"), !!searchValue && __jsx(React.Fragment, null, !!filteredSegments.length ? __jsx(Box, {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, \"Segments found matching \\\"\", searchValue, \"\\\"\") : __jsx(Box, {\n    className: \"title inactive\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, \"No Segments found\")), __jsx(Button, {\n    variantColor: \"blue\",\n    size: \"sm\",\n    variant: \"solid\",\n    onClick: () => routerHistory.push('/s/lists/segments/new'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, \"Create Segment\")), segments.length === 0 && __jsx(EmptyState, {\n    image: noResources,\n    paddingY: \"15vh\",\n    heading: \"Oops, no segments here\",\n    subheading: 'Setup a segment from data models to run even more powerful campaigns',\n    subheadingProps: {\n      width: '500px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }), filteredSegments.length > 0 && __jsx(SimpleGrid, {\n    columns: 2,\n    spacing: \"5px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }, filteredSegments.map((i, index) => __jsx(SegmentItem, {\n    key: index,\n    name: i.name,\n    description: i.description,\n    onDeleteClicked: () => {\n      setSelectedSegment(i.id);\n      openDeleteDialog();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  })))));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/lists/component/lists/components/segments/list-segments/index.tsx"],"names":["React","useState","useHistory","Box","Icon","Menu","MenuButton","MenuItem","MenuList","SimpleGrid","useDisclosure","Button","EmptyState","useSelector","selectSegments","noResources","icons","DeleteSegmentDialog","SegmentItem","props","isOpen","toSvg","color","name","onDeleteClicked","ListSegments","selectedSegment","setSelectedSegment","routerHistory","segments","isDeleteDialogOpen","onClose","closeDeleteDialog","onOpen","openDeleteDialog","searchValue","deleteSegment","filteredSegments","filter","i","toLowerCase","includes","length","push","width","map","index","description","id"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useHistory } from 'react-router';\nimport {\n  Box,\n  Icon,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n  SimpleGrid,\n  useDisclosure,\n} from '@chakra-ui/core';\nimport { Button, EmptyState } from 'app/components';\nimport { useSelector } from 'react-redux';\nimport { selectSegments } from '../../../../../lists.selectors';\nimport noResources from '../../../../../assets/no-resources.svg';\nimport { icons } from 'feather-icons';\nimport { Segment } from '../../../../../lists.types';\nimport { DeleteSegmentDialog } from './delete-segment-dialog';\n\ninterface ItemProps {\n  name: string;\n  description: string;\n  onDeleteClicked: Function;\n}\n\nconst SegmentItem = (props: ItemProps) => {\n  return (\n    <Menu closeOnSelect>\n      {({ isOpen }) => (\n        <>\n          <MenuButton as={Box} className={`list-item--list ${isOpen && 'active'}`}>\n            <Box display=\"flex\" alignItems=\"center\">\n              <Box className=\"box\" bg=\"#02AAA4\">\n                <img\n                  alt=\"list-icon\"\n                  src={`data:image/svg+xml;utf8,${icons['pie-chart'].toSvg({\n                    color: 'white',\n                  })}`}\n                />\n              </Box>\n              <Box\n                className=\"label\"\n                // @ts-ignore\n                flexDirection=\"column !important\"\n                alignItems=\"flex-start !important\"\n                maxWidth=\"260px\"\n              >\n                <Box\n                  overflow=\"hidden\"\n                  // @ts-ignore\n                  textOverflow=\"ellipsis\"\n                  maxWidth=\"260px\"\n                >\n                  {props.name}\n                </Box>\n              </Box>\n            </Box>\n            <Box>\n              <Box className=\"action-btn-bg\">\n                <Icon name=\"chevron-down\" color=\"white\" size=\"12px\" />\n              </Box>\n            </Box>\n\n            <MenuList minWidth=\"150px\" placement=\"bottom-end\" color=\"#333333\" fontSize=\"12px\">\n              <MenuItem onClick={() => {}}>\n                <Icon name=\"edit\" size=\"14px\" mr=\"10px\" />\n                Update segment\n              </MenuItem>\n              <MenuItem color=\"#E73D51\" onClick={() => props.onDeleteClicked()}>\n                <Icon name=\"trash\" size=\"14px\" mr=\"10px\" />\n                Delete segment\n              </MenuItem>\n            </MenuList>\n          </MenuButton>\n        </>\n      )}\n    </Menu>\n  );\n};\n\ninterface Props {\n  searchValue: string;\n  deleteSegment: Function;\n}\n\nexport const ListSegments = (props: Props) => {\n  const [selectedSegment, setSelectedSegment] = useState<string | null>(null);\n\n  const routerHistory = useHistory();\n  const segments: Segment[] = useSelector(selectSegments);\n\n  const {\n    isOpen: isDeleteDialogOpen,\n    onClose: closeDeleteDialog,\n    onOpen: openDeleteDialog,\n  } = useDisclosure();\n\n  const { searchValue, deleteSegment } = props;\n\n  const filteredSegments = segments.filter((i: Segment) =>\n    i.name.toLowerCase().includes(searchValue.toLowerCase()),\n  );\n\n  return (\n    <>\n      <DeleteSegmentDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        selectedSegment={selectedSegment}\n        deleteSegment={deleteSegment}\n      />\n\n      <Box className=\"content\">\n        <Box className=\"section-title\">\n          {!searchValue && <Box className=\"title\">Segments</Box>}\n          {!!searchValue && (\n            <>\n              {!!filteredSegments.length ? (\n                <Box className=\"title\">Segments found matching \"{searchValue}\"</Box>\n              ) : (\n                <Box className=\"title inactive\">No Segments found</Box>\n              )}\n            </>\n          )}\n          <Button\n            variantColor=\"blue\"\n            size=\"sm\"\n            variant=\"solid\"\n            onClick={() => routerHistory.push('/s/lists/segments/new')}\n          >\n            Create Segment\n          </Button>\n        </Box>\n\n        {segments.length === 0 && (\n          <EmptyState\n            image={noResources}\n            paddingY=\"15vh\"\n            heading=\"Oops, no segments here\"\n            subheading={'Setup a segment from data models to run even more powerful campaigns'}\n            subheadingProps={{\n              width: '500px',\n            }}\n          />\n        )}\n\n        {filteredSegments.length > 0 && (\n          <SimpleGrid columns={2} spacing=\"5px\">\n            {filteredSegments.map((i: any, index: number) => (\n              <SegmentItem\n                key={index}\n                name={i.name}\n                description={i.description}\n                onDeleteClicked={() => {\n                  setSelectedSegment(i.id);\n                  openDeleteDialog();\n                }}\n              />\n            ))}\n          </SimpleGrid>\n        )}\n      </Box>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}