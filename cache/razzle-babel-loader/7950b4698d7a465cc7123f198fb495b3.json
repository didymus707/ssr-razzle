{"ast":null,"code":"import _extends from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nconst _excluded = [\"isOpen\", \"onClose\", \"children\"];\nvar _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/components/conversation/ConnectionWarningPrompt.tsx\";\nvar __jsx = React.createElement;\nimport { Box, Icon, ModalCloseButton, Stack, useDisclosure, useToast } from '@chakra-ui/core';\nimport { useHere as onUseCredentialHere } from 'app/authenticated-app/channels';\nimport { BodyText, Button, ToastBox, XSmallText } from 'app/components';\nimport React, { useState } from 'react';\nimport { prompts } from '../../inbox.data';\nimport { useInbox } from '../Provider';\nimport { ConnectionWarningPromptModal } from './ConnectionWarningPromptModal';\nexport function ConnectionWarningPrompt({\n  credentialsWithIssue\n}) {\n  const toast = useToast();\n  const {\n    onOpenWhatsappModal,\n    setQrCodeChannelId\n  } = useInbox();\n  const {\n    isOpen: isConnectionWarningModalOpen,\n    onOpen: onOpenConnectionWarningModal,\n    onClose: onCloseConnectionWarningModal\n  } = useDisclosure();\n  const {\n    isOpen: isAlertOpen,\n    onClose: onCloseAlert\n  } = useDisclosure(!credentialsWithIssue || (credentialsWithIssue === null || credentialsWithIssue === void 0 ? void 0 : credentialsWithIssue.length) !== 0);\n  const {\n    0: isConnecting,\n    1: setIsConnecting\n  } = useState(false);\n\n  if (!credentialsWithIssue || (credentialsWithIssue === null || credentialsWithIssue === void 0 ? void 0 : credentialsWithIssue.length) === 0) {\n    return null;\n  }\n\n  if ((credentialsWithIssue === null || credentialsWithIssue === void 0 ? void 0 : credentialsWithIssue.length) === 1) {\n    const [{\n      status,\n      uuid,\n      user\n    }] = credentialsWithIssue;\n    const {\n      text = '',\n      btn = '',\n      title = ''\n    } = prompts[status] || {};\n    let onClick = undefined;\n\n    const handleUseHere = async () => {\n      try {\n        setIsConnecting(true);\n        await onUseCredentialHere({\n          credentialID: uuid\n        });\n        setIsConnecting(false);\n        onCloseAlert();\n        toast({\n          position: 'bottom-left',\n          render: ({\n            onClose\n          }) => __jsx(ToastBox, {\n            status: \"success\",\n            onClose: onClose,\n            message: \"Channel reconnection successful\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 13\n            }\n          })\n        });\n      } catch (error) {\n        setIsConnecting(false);\n        toast({\n          position: 'bottom-left',\n          render: ({\n            onClose\n          }) => __jsx(ToastBox, {\n            onClose: onClose,\n            message: error.message,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 36\n            }\n          })\n        });\n      }\n    };\n\n    switch (status) {\n      case 'replaced':\n        onClick = handleUseHere;\n        break;\n\n      case 'invalid_token':\n        onClick = () => {\n          setQrCodeChannelId(user.channel_id);\n          onOpenWhatsappModal();\n        };\n\n        break;\n\n      default:\n        onClick = undefined;\n        break;\n    }\n\n    return __jsx(Container, {\n      isOpen: isAlertOpen,\n      onClose: onCloseAlert,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, __jsx(Stack, {\n      isInline: true,\n      spacing: \"1.125rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, __jsx(Icon, {\n      size: \"1.5rem\",\n      color: \"#D84910\",\n      name: \"alert-error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }), __jsx(Box, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, __jsx(BodyText, {\n      color: \"#D84910\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, title), __jsx(XSmallText, {\n      color: \"#D84910\",\n      opacity: 0.6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, text), btn && __jsx(Button, {\n      px: \"0\",\n      size: \"sm\",\n      variant: \"link\",\n      color: \"#D84910\",\n      onClick: onClick,\n      isLoading: isConnecting,\n      textDecoration: \"underline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 15\n      }\n    }, btn))));\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Container, {\n    padding: \".875rem\",\n    fontSize: \".875rem\",\n    isOpen: isAlertOpen,\n    onClose: onCloseAlert,\n    lineHeight: \"1.1875rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    isInline: true,\n    spacing: \"1.125rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, __jsx(Icon, {\n    size: \"1.5rem\",\n    color: \"#D84910\",\n    name: \"alert-error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, __jsx(BodyText, {\n    color: \"#D84910\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, \"Whatsapp Connection Errors\"), __jsx(XSmallText, {\n    color: \"#D84910\",\n    opacity: 0.6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, \"One or more of your whatsapp accounts have been disconnected\"), __jsx(Button, {\n    px: \"0\",\n    size: \"sm\",\n    variant: \"link\",\n    color: \"#D84910\",\n    textDecoration: \"underline\",\n    onClick: onOpenConnectionWarningModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, \"Connect now\")))), __jsx(ConnectionWarningPromptModal, {\n    isOpen: isConnectionWarningModalOpen,\n    onClose: onCloseConnectionWarningModal,\n    credentialsWithIssue: credentialsWithIssue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }));\n}\n\nconst Container = _ref => {\n  let {\n    isOpen,\n    onClose,\n    children\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return isOpen ? __jsx(Box, _extends({\n    mb: \"1rem\",\n    px: \"1rem\",\n    bg: \"#F8E9E3\",\n    py: \"0.875rem\",\n    rounded: \"0.5rem\",\n    position: \"relative\"\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }\n  }), children, __jsx(ModalCloseButton, {\n    size: \"sm\",\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  })) : null;\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/components/conversation/ConnectionWarningPrompt.tsx"],"names":["Box","Icon","ModalCloseButton","Stack","useDisclosure","useToast","useHere","onUseCredentialHere","BodyText","Button","ToastBox","XSmallText","React","useState","prompts","useInbox","ConnectionWarningPromptModal","ConnectionWarningPrompt","credentialsWithIssue","toast","onOpenWhatsappModal","setQrCodeChannelId","isOpen","isConnectionWarningModalOpen","onOpen","onOpenConnectionWarningModal","onClose","onCloseConnectionWarningModal","isAlertOpen","onCloseAlert","length","isConnecting","setIsConnecting","status","uuid","user","text","btn","title","onClick","undefined","handleUseHere","credentialID","position","render","error","message","channel_id","Container","children","rest"],"mappings":"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","sourcesContent":["import {\n  Box,\n  BoxProps,\n  Icon,\n  ModalCloseButton,\n  Stack,\n  useDisclosure,\n  useToast,\n} from '@chakra-ui/core';\nimport { useHere as onUseCredentialHere } from 'app/authenticated-app/channels';\nimport { BodyText, Button, ToastBox, XSmallText } from 'app/components';\nimport React, { useState } from 'react';\nimport { prompts } from '../../inbox.data';\nimport { UserChannelSchema } from '../../inbox.types';\nimport { useInbox } from '../Provider';\nimport { ConnectionWarningPromptModal } from './ConnectionWarningPromptModal';\n\nexport type ConnectionWarningPromptProps = {\n  credentialsWithIssue?: UserChannelSchema[];\n};\n\nexport function ConnectionWarningPrompt({ credentialsWithIssue }: ConnectionWarningPromptProps) {\n  const toast = useToast();\n  const { onOpenWhatsappModal, setQrCodeChannelId } = useInbox();\n  const {\n    isOpen: isConnectionWarningModalOpen,\n    onOpen: onOpenConnectionWarningModal,\n    onClose: onCloseConnectionWarningModal,\n  } = useDisclosure();\n\n  const { isOpen: isAlertOpen, onClose: onCloseAlert } = useDisclosure(\n    !credentialsWithIssue || credentialsWithIssue?.length !== 0,\n  );\n\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  if (!credentialsWithIssue || credentialsWithIssue?.length === 0) {\n    return null;\n  }\n\n  if (credentialsWithIssue?.length === 1) {\n    const [{ status, uuid, user }] = credentialsWithIssue;\n    const { text = '', btn = '', title = '' } = prompts[status] || {};\n\n    let onClick = undefined;\n\n    const handleUseHere = async () => {\n      try {\n        setIsConnecting(true);\n        await onUseCredentialHere({ credentialID: uuid });\n        setIsConnecting(false);\n        onCloseAlert();\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => (\n            <ToastBox\n              status=\"success\"\n              onClose={onClose}\n              message=\"Channel reconnection successful\"\n            />\n          ),\n        });\n      } catch (error) {\n        setIsConnecting(false);\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => <ToastBox onClose={onClose} message={error.message} />,\n        });\n      }\n    };\n\n    switch (status) {\n      case 'replaced':\n        onClick = handleUseHere;\n        break;\n      case 'invalid_token':\n        onClick = () => {\n          setQrCodeChannelId(user.channel_id);\n          onOpenWhatsappModal();\n        };\n        break;\n      default:\n        onClick = undefined;\n        break;\n    }\n\n    return (\n      <Container isOpen={isAlertOpen} onClose={onCloseAlert}>\n        <Stack isInline spacing=\"1.125rem\">\n          <Icon size=\"1.5rem\" color=\"#D84910\" name=\"alert-error\" />\n          <Box>\n            <BodyText color=\"#D84910\">{title}</BodyText>\n            <XSmallText color=\"#D84910\" opacity={0.6}>\n              {text}\n            </XSmallText>\n            {btn && (\n              <Button\n                px=\"0\"\n                size=\"sm\"\n                variant=\"link\"\n                color=\"#D84910\"\n                onClick={onClick}\n                isLoading={isConnecting}\n                textDecoration=\"underline\"\n              >\n                {btn}\n              </Button>\n            )}\n          </Box>\n        </Stack>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      <Container\n        padding=\".875rem\"\n        fontSize=\".875rem\"\n        isOpen={isAlertOpen}\n        onClose={onCloseAlert}\n        lineHeight=\"1.1875rem\"\n      >\n        <Stack isInline spacing=\"1.125rem\">\n          <Icon size=\"1.5rem\" color=\"#D84910\" name=\"alert-error\" />\n          <Box>\n            <BodyText color=\"#D84910\">Whatsapp Connection Errors</BodyText>\n            <XSmallText color=\"#D84910\" opacity={0.6}>\n              One or more of your whatsapp accounts have been disconnected\n            </XSmallText>\n            <Button\n              px=\"0\"\n              size=\"sm\"\n              variant=\"link\"\n              color=\"#D84910\"\n              textDecoration=\"underline\"\n              onClick={onOpenConnectionWarningModal}\n            >\n              Connect now\n            </Button>\n          </Box>\n        </Stack>\n      </Container>\n      <ConnectionWarningPromptModal\n        isOpen={isConnectionWarningModalOpen}\n        onClose={onCloseConnectionWarningModal}\n        credentialsWithIssue={credentialsWithIssue}\n      />\n    </>\n  );\n}\n\nconst Container = ({\n  isOpen,\n  onClose,\n  children,\n  ...rest\n}: BoxProps & { isOpen?: boolean; onClose?(): void }) => {\n  return isOpen ? (\n    <Box\n      mb=\"1rem\"\n      px=\"1rem\"\n      bg=\"#F8E9E3\"\n      py=\"0.875rem\"\n      rounded=\"0.5rem\"\n      position=\"relative\"\n      {...rest}\n    >\n      {children}\n      <ModalCloseButton size=\"sm\" onClick={onClose} />\n    </Box>\n  ) : null;\n};\n"]},"metadata":{},"sourceType":"module"}