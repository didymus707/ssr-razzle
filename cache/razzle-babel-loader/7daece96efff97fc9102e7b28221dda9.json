{"ast":null,"code":"import _objectSpread from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/marketing/reports/index.tsx\";\nvar __jsx = React.createElement;\nimport { Box, Heading, Stack, Text, useDisclosure, useToast } from '@chakra-ui/core';\nimport { ToastBox } from 'app/components';\nimport { format } from 'date-fns';\nimport React, { useState } from 'react';\nimport { generateMarketingReport } from '../campaigns';\nimport { GenerateReportModal, ReportCard } from './components';\nexport const MarketingReports = () => {\n  const {\n    0: selectedReport,\n    1: setSelectedReport\n  } = useState();\n  const toast = useToast();\n  const {\n    isOpen,\n    onClose,\n    onOpen\n  } = useDisclosure();\n  const reportTypes = {\n    1: 'marketing.schedule',\n    2: 'marketing.onetime',\n    3: 'marketing.billable'\n  };\n\n  const handleOpenModal = type => {\n    onOpen();\n    setSelectedReport(type);\n  };\n\n  const handleCloseModal = () => {\n    setSelectedReport(undefined);\n    onClose();\n  };\n\n  const handleGenerateReport = async (values, formikBag) => {\n    try {\n      if (selectedReport) {\n        formikBag.setSubmitting(true);\n        await generateMarketingReport(_objectSpread(_objectSpread({}, values), {}, {\n          type: reportTypes[selectedReport],\n          to: format(values.to ? new Date(values.to) : new Date(), 'yyyy-MM-dd'),\n          from: format(values.from ? new Date(values.from) : new Date(), 'yyyy-MM-dd')\n        }));\n        formikBag.setSubmitting(false);\n        onClose();\n        toast({\n          position: 'bottom-left',\n          render: ({\n            onClose\n          }) => __jsx(ToastBox, {\n            status: \"success\",\n            onClose: onClose,\n            message: \"Report generated successfully\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 13\n            }\n          })\n        });\n      }\n    } catch (error) {\n      formikBag.setSubmitting(false);\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  };\n\n  return __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    pb: \"2.5rem\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, __jsx(Heading, {\n    as: \"h4\",\n    pb: \"0.2rem\",\n    fontSize: \"1.2rem\",\n    fontWeight: 600,\n    color: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, \"Generate a Report\"), __jsx(Text, {\n    maxW: \"500px\",\n    color: \"#4f4f4f\",\n    fontSize: \"0.875rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, \"Select a report below to get started.\"))), __jsx(Stack, {\n    isInline: true,\n    spacing: \"1rem\",\n    alignItems: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    width: ['100%', '100%', 'calc(50% - 1rem)', 'calc(50% - 1rem)'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, __jsx(ReportCard, {\n    onClick: () => handleOpenModal(1),\n    heading: \"Scheduled Message Performance\",\n    caption: \"See how each of your scheduled messages is performing by day\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  })), __jsx(Box, {\n    width: ['100%', '100%', 'calc(50% - 1rem)', 'calc(50% - 1rem)'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, __jsx(ReportCard, {\n    onClick: () => handleOpenModal(2),\n    heading: \"One-Time Message Performance\",\n    caption: \"See your aggregated one-time message performance across a specified date range\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  })), __jsx(Box, {\n    width: ['100%', '100%', 'calc(50% - 1rem)', 'calc(50% - 1rem)'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, __jsx(ReportCard, {\n    heading: \"Billable Spend\",\n    onClick: () => handleOpenModal(3),\n    caption: \"Break down invoices with estimated message costs and carrier fees\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }))), __jsx(GenerateReportModal, {\n    isOpen: isOpen,\n    onClose: handleCloseModal,\n    onSubmit: handleGenerateReport,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/marketing/reports/index.tsx"],"names":["Box","Heading","Stack","Text","useDisclosure","useToast","ToastBox","format","React","useState","generateMarketingReport","GenerateReportModal","ReportCard","MarketingReports","selectedReport","setSelectedReport","toast","isOpen","onClose","onOpen","reportTypes","handleOpenModal","type","handleCloseModal","undefined","handleGenerateReport","values","formikBag","setSubmitting","to","Date","from","position","render","error","message"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,OAAd,EAAuBC,KAAvB,EAA8BC,IAA9B,EAAoCC,aAApC,EAAmDC,QAAnD,QAAmE,iBAAnE;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,uBAAT,QAAwC,cAAxC;AAEA,SAASC,mBAAT,EAA8BC,UAA9B,QAAgD,cAAhD;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AACpC,QAAM;AAAA,OAACC,cAAD;AAAA,OAAiBC;AAAjB,MAAsCN,QAAQ,EAApD;AAEA,QAAMO,KAAK,GAAGX,QAAQ,EAAtB;AACA,QAAM;AAAEY,IAAAA,MAAF;AAAUC,IAAAA,OAAV;AAAmBC,IAAAA;AAAnB,MAA8Bf,aAAa,EAAjD;AAEA,QAAMgB,WAAsC,GAAG;AAC7C,OAAG,oBAD0C;AAE7C,OAAG,mBAF0C;AAG7C,OAAG;AAH0C,GAA/C;;AAMA,QAAMC,eAAe,GAAIC,IAAD,IAAkB;AACxCH,IAAAA,MAAM;AACNJ,IAAAA,iBAAiB,CAACO,IAAD,CAAjB;AACD,GAHD;;AAKA,QAAMC,gBAAgB,GAAG,MAAM;AAC7BR,IAAAA,iBAAiB,CAACS,SAAD,CAAjB;AACAN,IAAAA,OAAO;AACR,GAHD;;AAKA,QAAMO,oBAAoB,GAAG,OAC3BC,MAD2B,EAE3BC,SAF2B,KAGxB;AACH,QAAI;AACF,UAAIb,cAAJ,EAAoB;AAClBa,QAAAA,SAAS,CAACC,aAAV,CAAwB,IAAxB;AACA,cAAMlB,uBAAuB,iCACxBgB,MADwB;AAE3BJ,UAAAA,IAAI,EAAEF,WAAW,CAACN,cAAD,CAFU;AAG3Be,UAAAA,EAAE,EAAEtB,MAAM,CAACmB,MAAM,CAACG,EAAP,GAAY,IAAIC,IAAJ,CAASJ,MAAM,CAACG,EAAhB,CAAZ,GAAkC,IAAIC,IAAJ,EAAnC,EAA+C,YAA/C,CAHiB;AAI3BC,UAAAA,IAAI,EAAExB,MAAM,CAACmB,MAAM,CAACK,IAAP,GAAc,IAAID,IAAJ,CAASJ,MAAM,CAACK,IAAhB,CAAd,GAAsC,IAAID,IAAJ,EAAvC,EAAmD,YAAnD;AAJe,WAA7B;AAMAH,QAAAA,SAAS,CAACC,aAAV,CAAwB,KAAxB;AACAV,QAAAA,OAAO;AACPF,QAAAA,KAAK,CAAC;AACJgB,UAAAA,QAAQ,EAAE,aADN;AAEJC,UAAAA,MAAM,EAAE,CAAC;AAAEf,YAAAA;AAAF,WAAD,KACN,MAAC,QAAD;AAAU,YAAA,MAAM,EAAC,SAAjB;AAA2B,YAAA,OAAO,EAAEA,OAApC;AAA6C,YAAA,OAAO,EAAC,+BAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHE,SAAD,CAAL;AAMD;AACF,KAlBD,CAkBE,OAAOgB,KAAP,EAAc;AACdP,MAAAA,SAAS,CAACC,aAAV,CAAwB,KAAxB;AACAZ,MAAAA,KAAK,CAAC;AACJgB,QAAAA,QAAQ,EAAE,aADN;AAEJC,QAAAA,MAAM,EAAE,CAAC;AAAEf,UAAAA;AAAF,SAAD,KAAiB,MAAC,QAAD;AAAU,UAAA,OAAO,EAAEA,OAAnB;AAA4B,UAAA,OAAO,EAAEgB,KAAK,CAACC,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFrB,OAAD,CAAL;AAID;AACF,GA7BD;;AA+BA,SACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAC,QAAR;AAAiB,IAAA,UAAU,EAAC,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAS,IAAA,EAAE,EAAC,IAAZ;AAAiB,IAAA,EAAE,EAAC,QAApB;AAA6B,IAAA,QAAQ,EAAC,QAAtC;AAA+C,IAAA,UAAU,EAAE,GAA3D;AAAgE,IAAA,KAAK,EAAC,OAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAIE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,OAAX;AAAmB,IAAA,KAAK,EAAC,SAAzB;AAAmC,IAAA,QAAQ,EAAC,UAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAJF,CADF,CADF,EAWE,MAAC,KAAD;AAAO,IAAA,QAAQ,MAAf;AAAgB,IAAA,OAAO,EAAC,MAAxB;AAA+B,IAAA,UAAU,EAAC,QAA1C;AAAmD,IAAA,QAAQ,EAAC,MAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,KAAK,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,kBAAjB,EAAqC,kBAArC,CAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,OAAO,EAAE,MAAMd,eAAe,CAAC,CAAD,CADhC;AAEE,IAAA,OAAO,EAAC,+BAFV;AAGE,IAAA,OAAO,EAAC,8DAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAQE,MAAC,GAAD;AAAK,IAAA,KAAK,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,kBAAjB,EAAqC,kBAArC,CAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,OAAO,EAAE,MAAMA,eAAe,CAAC,CAAD,CADhC;AAEE,IAAA,OAAO,EAAC,8BAFV;AAGE,IAAA,OAAO,EAAC,gFAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CARF,EAeE,MAAC,GAAD;AAAK,IAAA,KAAK,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,kBAAjB,EAAqC,kBAArC,CAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,OAAO,EAAC,gBADV;AAEE,IAAA,OAAO,EAAE,MAAMA,eAAe,CAAC,CAAD,CAFhC;AAGE,IAAA,OAAO,EAAC,mEAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAfF,CAXF,EAkCE,MAAC,mBAAD;AACE,IAAA,MAAM,EAAEJ,MADV;AAEE,IAAA,OAAO,EAAEM,gBAFX;AAGE,IAAA,QAAQ,EAAEE,oBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlCF,CADF;AA0CD,CA/FM","sourcesContent":["import { Box, Heading, Stack, Text, useDisclosure, useToast } from '@chakra-ui/core';\nimport { ToastBox } from 'app/components';\nimport { format } from 'date-fns';\nimport { FormikHelpers } from 'formik';\nimport React, { useState } from 'react';\nimport { generateMarketingReport } from '../campaigns';\nimport { MarketingReportSchema } from '../campaigns/campaigns.types';\nimport { GenerateReportModal, ReportCard } from './components';\n\nexport const MarketingReports = () => {\n  const [selectedReport, setSelectedReport] = useState<number | undefined>();\n\n  const toast = useToast();\n  const { isOpen, onClose, onOpen } = useDisclosure();\n\n  const reportTypes: { [key: number]: string } = {\n    1: 'marketing.schedule',\n    2: 'marketing.onetime',\n    3: 'marketing.billable',\n  };\n\n  const handleOpenModal = (type: number) => {\n    onOpen();\n    setSelectedReport(type);\n  };\n\n  const handleCloseModal = () => {\n    setSelectedReport(undefined);\n    onClose();\n  };\n\n  const handleGenerateReport = async (\n    values: Pick<MarketingReportSchema, 'from' | 'recipient' | 'to'>,\n    formikBag: FormikHelpers<Pick<MarketingReportSchema, 'from' | 'recipient' | 'to'>>,\n  ) => {\n    try {\n      if (selectedReport) {\n        formikBag.setSubmitting(true);\n        await generateMarketingReport({\n          ...values,\n          type: reportTypes[selectedReport],\n          to: format(values.to ? new Date(values.to) : new Date(), 'yyyy-MM-dd'),\n          from: format(values.from ? new Date(values.from) : new Date(), 'yyyy-MM-dd'),\n        });\n        formikBag.setSubmitting(false);\n        onClose();\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => (\n            <ToastBox status=\"success\" onClose={onClose} message=\"Report generated successfully\" />\n          ),\n        });\n      }\n    } catch (error) {\n      formikBag.setSubmitting(false);\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error.message} />,\n      });\n    }\n  };\n\n  return (\n    <Box>\n      <Box pb=\"2.5rem\" alignItems=\"center\">\n        <Box>\n          <Heading as=\"h4\" pb=\"0.2rem\" fontSize=\"1.2rem\" fontWeight={600} color=\"black\">\n            Generate a Report\n          </Heading>\n          <Text maxW=\"500px\" color=\"#4f4f4f\" fontSize=\"0.875rem\">\n            Select a report below to get started.\n          </Text>\n        </Box>\n      </Box>\n      <Stack isInline spacing=\"1rem\" alignItems=\"center\" flexWrap=\"wrap\">\n        <Box width={['100%', '100%', 'calc(50% - 1rem)', 'calc(50% - 1rem)']}>\n          <ReportCard\n            onClick={() => handleOpenModal(1)}\n            heading=\"Scheduled Message Performance\"\n            caption=\"See how each of your scheduled messages is performing by day\"\n          />\n        </Box>\n        <Box width={['100%', '100%', 'calc(50% - 1rem)', 'calc(50% - 1rem)']}>\n          <ReportCard\n            onClick={() => handleOpenModal(2)}\n            heading=\"One-Time Message Performance\"\n            caption=\"See your aggregated one-time message performance across a specified date range\"\n          />\n        </Box>\n        <Box width={['100%', '100%', 'calc(50% - 1rem)', 'calc(50% - 1rem)']}>\n          <ReportCard\n            heading=\"Billable Spend\"\n            onClick={() => handleOpenModal(3)}\n            caption=\"Break down invoices with estimated message costs and carrier fees\"\n          />\n        </Box>\n      </Stack>\n      <GenerateReportModal\n        isOpen={isOpen}\n        onClose={handleCloseModal}\n        onSubmit={handleGenerateReport}\n      />\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}