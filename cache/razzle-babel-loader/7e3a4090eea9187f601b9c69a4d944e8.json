{"ast":null,"code":"import * as React from 'react';\nimport { arrayMove } from 'react-sortable-hoc';\nimport useControllableProp from './use-controllable-props';\nexport function useArray({\n  max,\n  array,\n  onChange,\n  defaultValue,\n  keepWithinMax\n}) {\n  const [data, setData] = React.useState(defaultValue || []);\n  const [isControlled, value] = useControllableProp(array, data);\n  const isAtMax = Boolean(max && value.length === max);\n  const isOutOfRange = Boolean(max && value.length > max);\n  const updateState = React.useCallback(nextState => {\n    if (max && nextState.length > max && keepWithinMax) {\n      return;\n    }\n\n    if (!isControlled) setData(nextState);\n    if (onChange) onChange(nextState);\n  }, [isControlled, max, onChange, keepWithinMax]);\n  const add = React.useCallback(item => {\n    updateState([...value, item]);\n  }, [value, updateState]);\n  const update = React.useCallback((item, index) => {\n    const newData = [...value];\n    newData[index] = item;\n    updateState([...newData]);\n  }, [value, updateState]);\n  const remove = React.useCallback(index => {\n    const newData = value.filter((x, idx) => index !== idx);\n    updateState(newData);\n  }, [value, updateState]);\n  const reorder = React.useCallback((oldIndex, newIndex) => {\n    const newData = arrayMove(value, oldIndex, newIndex);\n    updateState(newData);\n  }, [value, updateState]);\n  return {\n    data: value,\n    isAtMax,\n    isOutOfRange,\n    add,\n    reorder,\n    update,\n    remove\n  };\n}","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/hooks/use-array.ts"],"names":["React","arrayMove","useControllableProp","useArray","max","array","onChange","defaultValue","keepWithinMax","data","setData","useState","isControlled","value","isAtMax","Boolean","length","isOutOfRange","updateState","useCallback","nextState","add","item","update","index","newData","remove","filter","x","idx","reorder","oldIndex","newIndex"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,mBAAP,MAAgC,0BAAhC;AAEA,OAAO,SAASC,QAAT,CAAsB;AAC3BC,EAAAA,GAD2B;AAE3BC,EAAAA,KAF2B;AAG3BC,EAAAA,QAH2B;AAI3BC,EAAAA,YAJ2B;AAK3BC,EAAAA;AAL2B,CAAtB,EAYJ;AACD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,KAAK,CAACW,QAAN,CAAoBJ,YAAY,IAAI,EAApC,CAAxB;AACA,QAAM,CAACK,YAAD,EAAeC,KAAf,IAAwBX,mBAAmB,CAACG,KAAD,EAAQI,IAAR,CAAjD;AAEA,QAAMK,OAAO,GAAGC,OAAO,CAACX,GAAG,IAAIS,KAAK,CAACG,MAAN,KAAiBZ,GAAzB,CAAvB;AACA,QAAMa,YAAY,GAAGF,OAAO,CAACX,GAAG,IAAIS,KAAK,CAACG,MAAN,GAAeZ,GAAvB,CAA5B;AAEA,QAAMc,WAAW,GAAGlB,KAAK,CAACmB,WAAN,CAClBC,SAAS,IAAI;AACX,QAAIhB,GAAG,IAAIgB,SAAS,CAACJ,MAAV,GAAmBZ,GAA1B,IAAiCI,aAArC,EAAoD;AAClD;AACD;;AACD,QAAI,CAACI,YAAL,EAAmBF,OAAO,CAACU,SAAD,CAAP;AACnB,QAAId,QAAJ,EAAcA,QAAQ,CAACc,SAAD,CAAR;AACf,GAPiB,EAQlB,CAACR,YAAD,EAAeR,GAAf,EAAoBE,QAApB,EAA8BE,aAA9B,CARkB,CAApB;AAWA,QAAMa,GAAG,GAAGrB,KAAK,CAACmB,WAAN,CACTG,IAAD,IAAa;AACXJ,IAAAA,WAAW,CAAC,CAAC,GAAGL,KAAJ,EAAWS,IAAX,CAAD,CAAX;AACD,GAHS,EAIV,CAACT,KAAD,EAAQK,WAAR,CAJU,CAAZ;AAOA,QAAMK,MAAM,GAAGvB,KAAK,CAACmB,WAAN,CACb,CAACG,IAAD,EAAUE,KAAV,KAA4B;AAC1B,UAAMC,OAAO,GAAG,CAAC,GAAGZ,KAAJ,CAAhB;AACAY,IAAAA,OAAO,CAACD,KAAD,CAAP,GAAiBF,IAAjB;AACAJ,IAAAA,WAAW,CAAC,CAAC,GAAGO,OAAJ,CAAD,CAAX;AACD,GALY,EAMb,CAACZ,KAAD,EAAQK,WAAR,CANa,CAAf;AASA,QAAMQ,MAAM,GAAG1B,KAAK,CAACmB,WAAN,CACZK,KAAD,IAAmB;AACjB,UAAMC,OAAO,GAAGZ,KAAK,CAACc,MAAN,CAAa,CAACC,CAAD,EAAOC,GAAP,KAAuBL,KAAK,KAAKK,GAA9C,CAAhB;AACAX,IAAAA,WAAW,CAACO,OAAD,CAAX;AACD,GAJY,EAKb,CAACZ,KAAD,EAAQK,WAAR,CALa,CAAf;AAQA,QAAMY,OAAO,GAAG9B,KAAK,CAACmB,WAAN,CACd,CAACY,QAAD,EAAmBC,QAAnB,KAAwC;AACtC,UAAMP,OAAO,GAAGxB,SAAS,CAACY,KAAD,EAAQkB,QAAR,EAAkBC,QAAlB,CAAzB;AACAd,IAAAA,WAAW,CAACO,OAAD,CAAX;AACD,GAJa,EAKd,CAACZ,KAAD,EAAQK,WAAR,CALc,CAAhB;AAQA,SAAO;AAAET,IAAAA,IAAI,EAAEI,KAAR;AAAeC,IAAAA,OAAf;AAAwBG,IAAAA,YAAxB;AAAsCI,IAAAA,GAAtC;AAA2CS,IAAAA,OAA3C;AAAoDP,IAAAA,MAApD;AAA4DG,IAAAA;AAA5D,GAAP;AACD","sourcesContent":["import * as React from 'react'\nimport { arrayMove } from 'react-sortable-hoc'\nimport useControllableProp from './use-controllable-props'\n\nexport function useArray<T> ({\n  max,\n  array,\n  onChange,\n  defaultValue,\n  keepWithinMax\n}: {\n  max?: number\n  array?: T[]\n  defaultValue?: T[]\n  keepWithinMax?: boolean\n  onChange?: (nextValue: T[]) => void\n}) {\n  const [data, setData] = React.useState<T[]>(defaultValue || [])\n  const [isControlled, value] = useControllableProp(array, data)\n\n  const isAtMax = Boolean(max && value.length === max)\n  const isOutOfRange = Boolean(max && value.length > max)\n\n  const updateState = React.useCallback(\n    nextState => {\n      if (max && nextState.length > max && keepWithinMax) {\n        return\n      }\n      if (!isControlled) setData(nextState)\n      if (onChange) onChange(nextState)\n    },\n    [isControlled, max, onChange, keepWithinMax]\n  )\n\n  const add = React.useCallback(\n    (item: T) => {\n      updateState([...value, item])\n    },\n    [value, updateState]\n  )\n\n  const update = React.useCallback(\n    (item: T, index: number) => {\n      const newData = [...value]\n      newData[index] = item\n      updateState([...newData])\n    },\n    [value, updateState]\n  )\n\n  const remove = React.useCallback(\n    (index: number) => {\n      const newData = value.filter((x: T, idx: number) => index !== idx)\n      updateState(newData)\n    },\n    [value, updateState]\n  )\n\n  const reorder = React.useCallback(\n    (oldIndex: number, newIndex: number) => {\n      const newData = arrayMove(value, oldIndex, newIndex)\n      updateState(newData)\n    },\n    [value, updateState]\n  )\n\n  return { data: value, isAtMax, isOutOfRange, add, reorder, update, remove }\n}\n"]},"metadata":{},"sourceType":"module"}