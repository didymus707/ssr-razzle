{"ast":null,"code":"import _extends from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nconst _excluded = [\"sender_id\", \"receiver_id\"],\n      _excluded2 = [\"isModalOpened\", \"setIsModalOpened\"],\n      _excluded3 = [\"currentThreadID\", \"isModalOpened\", \"setIsModalOpened\"],\n      _excluded4 = [\"isModalOpened\", \"setIsModalOpened\"],\n      _excluded5 = [\"user_id\", \"thread_id\", \"isModalOpened\", \"setIsModalOpened\"],\n      _excluded6 = [\"initialFocusRef\", \"icon\", \"text\"],\n      _excluded7 = [\"sender_id\", \"canAssign\", \"canResolve\", \"openAssignModal\", \"openNoteModal\", \"openResolveModal\"],\n      _excluded8 = [\"sender_id\", \"currentThreadID\"],\n      _excluded9 = [\"currentThreadID\", \"receiver_id\", \"sender_id\"];\nvar _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/components/messages/Header.tsx\";\nvar __jsx = React.createElement;\nimport { Avatar, Box, Button, Flex, Grid, IconButton, Input, Modal, Text, ModalCloseButton, ModalContent, ModalOverlay, Popover, PopoverCloseButton, PopoverContent, PopoverTrigger, Radio, Stack, useToast, Icon, Textarea } from '@chakra-ui/core';\nimport React, { useState, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { ConfirmModal, ToastBox } from '../../../../components';\nimport { selectProfile, selectUserID } from '../../../../unauthenticated-app/authentication';\nimport { selectCredentialById } from '../../../channels';\nimport { selectOtherOrgMembers } from '../../../settings/slices';\nimport { INBOX_INIT } from '../../inbox.data';\nimport { assignThread, resolveThread, selectAssignmentsByThreadID, selectCustomerById, selectCustomerByID, selectThreadDetailByID, sendThreadNote, selectContactTableID } from '../../slices';\n\nfunction Left(_ref) {\n  let {\n    sender_id,\n    receiver_id\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  const receiver = useSelector(state => selectCredentialById(state, receiver_id));\n  const {\n    platform_name: receiverName\n  } = useSelector(state => selectCustomerById(state, (receiver === null || receiver === void 0 ? void 0 : receiver.user_id) || '')) || INBOX_INIT.customer;\n  const sender_name = '';\n  return __jsx(Box, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }), sender_name && __jsx(Text, {\n    pb: \"0.5rem\",\n    fontWeight: 600,\n    lineHeight: 1,\n    fontSize: \"1.25rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, sender_name), receiverName && __jsx(Text, {\n    color: \"#828282\",\n    fontSize: \".875rem\",\n    lineHeight: \".875rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, receiverName));\n}\n\nfunction InternalModal(_ref2) {\n  let {\n    isModalOpened,\n    setIsModalOpened\n  } = _ref2,\n      props = _objectWithoutProperties(_ref2, _excluded2);\n\n  const closeModal = () => setIsModalOpened(false);\n\n  return __jsx(Modal, _extends({\n    isCentered: true,\n    size: \"xl\",\n    isOpen: isModalOpened,\n    onClose: closeModal,\n    closeOnOverlayClick: false\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }), __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }), __jsx(ModalContent, {\n    width: \"auto\",\n    paddingTop: \"2rem\",\n    borderRadius: \".3125rem\",\n    boxShadow: \"0px 0px 1px rgba(67, 90, 111, 0.47)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, __jsx(ModalCloseButton, {\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }), props.children));\n}\n\nfunction Assign(_ref3) {\n  let {\n    currentThreadID,\n    isModalOpened,\n    setIsModalOpened\n  } = _ref3,\n      props = _objectWithoutProperties(_ref3, _excluded3);\n\n  const {\n    0: radioText,\n    1: setRadioText\n  } = useState('Unassign');\n  const {\n    0: search,\n    1: setSearch\n  } = useState('');\n  const {\n    0: assignmentLoading,\n    1: setAssignmentLoading\n  } = useState(false);\n  const initialFocusRef = useRef();\n  const dispatch = useDispatch();\n  const toast = useToast();\n  const user_id = useSelector(selectUserID);\n  const otherOrgMembers = useSelector(state => selectOtherOrgMembers(state, {\n    user_id: user_id || ''\n  }));\n  let members = otherOrgMembers.filter(({\n    first_name,\n    last_name\n  }) => first_name.toLocaleLowerCase().includes(search.toLocaleLowerCase()) || last_name.toLocaleLowerCase().includes(search.toLocaleLowerCase()));\n\n  const handleMemberSelected = async () => {\n    const selectedMember = members.find(({\n      id\n    }) => id === radioText);\n\n    if (selectedMember) {\n      setAssignmentLoading(true);\n\n      try {\n        await dispatch(assignThread({\n          thread_id: currentThreadID,\n          assignee_id: selectedMember.id\n        }));\n      } catch (error) {\n        toast({\n          position: 'bottom-left',\n          render: ({\n            onClose\n          }) => __jsx(ToastBox, {\n            onClose: onClose,\n            message: error,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 36\n            }\n          })\n        });\n      }\n\n      setAssignmentLoading(false);\n    }\n\n    setIsModalOpened(false);\n  };\n\n  const handleModalClose = value => {\n    setSearch('');\n    setIsModalOpened(value);\n  };\n\n  return __jsx(InternalModal, {\n    isModalOpened: isModalOpened,\n    setIsModalOpened: handleModalClose,\n    initialFocusRef: initialFocusRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    paddingX: \"1.5rem\",\n    paddingBottom: \"1.25rem\",\n    minWidth: ['300px', '393px', '393px', '393px'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }, __jsx(Text, {\n    fontWeight: 500,\n    fontSize: \"1.25rem\",\n    lineHeight: \"1.625rem\",\n    color: \"#000\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }, \"Assign To\"), __jsx(Input, {\n    marginTop: \"1.25rem\",\n    lineHeight: \"1rem\",\n    borderRadius: \"3px\",\n    fontSize: \".8675rem\",\n    padding: \".625rem 1rem\",\n    backgroundColor: \"#f2f2f2\" // @ts-ignore\n    ,\n    ref: initialFocusRef,\n    placeholder: \"Search users\",\n    _placeholder: {\n      color: 'rgba(51, 51, 51, 0.5)'\n    },\n    value: search,\n    onChange: e => setSearch(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }), __jsx(Stack, {\n    marginTop: \"1rem\",\n    spacing: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }, members.map(({\n    id,\n    first_name,\n    last_name\n  }, index) => __jsx(Flex, {\n    key: id,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }\n  }, __jsx(Avatar, {\n    name: `${first_name} ${last_name}`,\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 15\n    }\n  }), __jsx(Text, {\n    color: \"#000\",\n    fontWeight: 600,\n    lineHeight: \"1.25rem\",\n    fontSize: \"1rem\",\n    marginLeft: \"1rem\",\n    marginRight: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 15\n    }\n  }, `${first_name} ${last_name}`), __jsx(Radio, {\n    onChange: () => setRadioText(id),\n    name: \"assign-to\",\n    value: id,\n    size: \"md\",\n    isChecked: radioText === id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 15\n    }\n  })))), __jsx(Stack, {\n    isInline: true,\n    spacing: \".5rem\",\n    marginTop: \"2rem\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    variant: \"ghost\",\n    variantColor: \"blue\",\n    color: \"#828282\",\n    fontSize: \".75rem\",\n    padding: \".25rem .625rem\",\n    height: \"auto\",\n    onClick: () => setIsModalOpened(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  }, \"Cancel\"), __jsx(Button, {\n    variant: \"solid\",\n    variantColor: \"blue\",\n    fontSize: \".75rem\",\n    padding: \".25rem .625rem\",\n    height: \"auto\",\n    onClick: () => handleMemberSelected(),\n    loadingText: \"Assigning\",\n    isLoading: assignmentLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 11\n    }\n  }, \"Save\"))));\n}\n\nfunction Note(_ref4) {\n  let {\n    isModalOpened,\n    setIsModalOpened\n  } = _ref4,\n      props = _objectWithoutProperties(_ref4, _excluded4);\n\n  const {\n    0: note,\n    1: setNote\n  } = useState('');\n  const {\n    0: isSending,\n    1: setIsSending\n  } = useState(false);\n  const initialFocusRef = useRef();\n  const dispatch = useDispatch();\n  const params = useParams();\n  const toast = useToast();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (note.trim() && params.id !== 'start') {\n      setIsSending(true);\n\n      try {\n        await dispatch(sendThreadNote({\n          content: note,\n          thread_id: params.id\n        }));\n        setNote('');\n      } catch (message) {\n        toast({\n          position: 'bottom-left',\n          render: ({\n            onClose\n          }) => __jsx(ToastBox, {\n            onClose: onClose,\n            message: message,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 36\n            }\n          })\n        });\n      }\n\n      setIsSending(false);\n    }\n  };\n\n  const handleModalClose = value => {\n    if (!value) {\n      setNote('');\n    }\n\n    setIsModalOpened(value);\n  };\n\n  return __jsx(InternalModal, {\n    isModalOpened: isModalOpened,\n    setIsModalOpened: handleModalClose,\n    initialFocusRef: initialFocusRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    padding: \"1.25rem\",\n    minWidth: \"300px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }\n  }, __jsx(Text, {\n    color: \"#000\",\n    fontSize: \"1.25rem\",\n    fontWeight: 500,\n    lineHeight: \"1.6125rem\",\n    marginBottom: \".625rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 9\n    }\n  }, \"Add Note\"), __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 9\n    }\n  }, __jsx(Textarea, {\n    placeholder: \"Add an internal note to give more context to this conversation....\",\n    resize: \"none\",\n    fontSize: \".8675rem\",\n    lineHeight: \"1rem\",\n    padding: \".5rem .625rem\",\n    value: note,\n    border: \"1px solid #0015FF\" // @ts-ignores\n    ,\n    ref: initialFocusRef,\n    onChange: ({\n      target: {\n        value\n      }\n    }) => setNote(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 11\n    }\n  }), __jsx(Stack, {\n    isInline: true,\n    marginTop: \"1.375rem\",\n    spacing: \".625rem\",\n    justifyContent: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    type: \"button\",\n    variant: \"ghost\",\n    variantColor: \"blue\",\n    fontSize: \".875rem\",\n    marginTop: \".5rem\",\n    paddingX: \".625rem\",\n    onClick: () => handleModalClose(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 13\n    }\n  }, \"Cancel\"), __jsx(Button, {\n    type: \"submit\",\n    variant: \"solid\",\n    variantColor: \"blue\",\n    fontSize: \".875rem\",\n    color: \"white\",\n    marginTop: \".5rem\",\n    paddingX: \".625rem\",\n    isLoading: isSending,\n    loadingText: \"Adding Note\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }\n  }, \"Add Note\")))));\n}\n\nfunction Resolve(_ref5) {\n  let {\n    user_id,\n    thread_id,\n    isModalOpened,\n    setIsModalOpened\n  } = _ref5,\n      props = _objectWithoutProperties(_ref5, _excluded5);\n\n  const history = useHistory();\n  const toast = useToast();\n  const dispatch = useDispatch();\n  const {\n    0: isBtnLoading,\n    1: setIsBtnLoading\n  } = useState(false);\n\n  const handleThreadResolve = async (thread_id, receiver_id) => {\n    try {\n      if (thread_id && receiver_id) {\n        setIsBtnLoading(true);\n        await dispatch(resolveThread({\n          thread_id\n        }));\n        setIsModalOpened(false);\n        setIsBtnLoading(false);\n        history.push('/s/inbox');\n      }\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  };\n\n  return __jsx(ConfirmModal, {\n    isOpen: isModalOpened,\n    onClose: () => setIsModalOpened(false),\n    title: \"Resolve conversation\",\n    isLoading: isBtnLoading,\n    onConfirm: () => handleThreadResolve(thread_id || '', user_id || ''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 5\n    }\n  });\n}\n\nfunction MenuItem(_ref6) {\n  let {\n    initialFocusRef,\n    icon,\n    text\n  } = _ref6,\n      props = _objectWithoutProperties(_ref6, _excluded6);\n\n  return __jsx(Button, _extends({}, props, {\n    variant: \"ghost\",\n    variantColor: \"blue\",\n    color: \"#333\",\n    fontSize: \".8675rem\",\n    fontWeight: \"normal\",\n    lineHeight: \"1rem\",\n    minWidth: \"auto\",\n    alignItems: \"center\",\n    padding: \".5rem\",\n    marginLeft: \"-.5rem\",\n    justifyContent: \"start\",\n    ref: initialFocusRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 5\n    }\n  }), __jsx(Icon, {\n    name: icon,\n    size: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 7\n    }\n  }), __jsx(Text, {\n    marginLeft: \".5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 7\n    }\n  }, text));\n}\n\nfunction More(_ref7) {\n  let {\n    sender_id,\n    canAssign,\n    canResolve,\n    openAssignModal,\n    openNoteModal,\n    openResolveModal\n  } = _ref7,\n      props = _objectWithoutProperties(_ref7, _excluded7);\n\n  // const history = useHistory();\n  const initialFocusRef = useRef(null);\n  const {\n    platform_name: sender_name\n  } = useSelector(state => selectCustomerByID(state, sender_id)) || INBOX_INIT.customer;\n  const contactTableID = useSelector(selectContactTableID);\n  const actions = [{\n    icon: 'template',\n    text: 'Add Notes',\n    onClick: openNoteModal,\n    isVisible: true\n  }, {\n    icon: 'check',\n    text: 'Resolve',\n    onClick: openResolveModal,\n    isVisible: canResolve\n  }, {\n    icon: 'warning-2',\n    text: 'Blacklist',\n    onClick: undefined,\n    isVisible: true\n  }, // { icon: 'user-2', text: 'Contact', onClick: () => history.push(`/s/lists/${contactTableID}`), isVisible: true },\n  {\n    icon: 'user-2',\n    text: 'Contact',\n    onClick: () => window.open(`/s/lists/${contactTableID}`, '_blank'),\n    isVisible: true\n  }, {\n    icon: 'chat',\n    text: 'Mark Unread',\n    onClick: undefined,\n    isVisible: true\n  }, {\n    icon: 'multi-user',\n    text: 'Assign Conversation',\n    onClick: openAssignModal,\n    isVisible: canAssign\n  }];\n  return __jsx(Popover, _extends({\n    initialFocusRef: initialFocusRef\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 5\n    }\n  }), __jsx(PopoverTrigger, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 7\n    }\n  }, props.children), __jsx(PopoverContent, {\n    zIndex: 1500,\n    padding: \"1.5rem\",\n    minWidth: ['320px', '380px', '380px', '380px'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 7\n    }\n  }, __jsx(PopoverCloseButton, {\n    right: \".25rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 9\n    }\n  }), __jsx(Text, {\n    fontWeight: 500,\n    lineHeight: \"1rem\",\n    fontSize: \".75rem\",\n    letterSpacing: \".05em\",\n    textTransform: \"uppercase\",\n    color: \"rgba(0, 0, 0, 0.5)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 9\n    }\n  }, `Conversation with ${sender_name}`), __jsx(Grid, {\n    marginTop: \"2rem\",\n    templateColumns: \"repeat(2, 1fr)\",\n    gap: \"1.875rem 4.5rem\",\n    justifyContent: \"start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 9\n    }\n  }, actions.filter(({\n    isVisible\n  }) => isVisible).map(({\n    text,\n    icon,\n    onClick\n  }, index) => __jsx(MenuItem, {\n    icon: icon,\n    key: `${text}-${icon}`,\n    text: text,\n    initialFocusRef: index === 0 ? initialFocusRef : null,\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 15\n    }\n  })))));\n}\n\nfunction Right(_ref8) {\n  let {\n    sender_id,\n    currentThreadID\n  } = _ref8,\n      props = _objectWithoutProperties(_ref8, _excluded8);\n\n  const {\n    0: isAssignModalOpened,\n    1: setIsAssignModalOpened\n  } = useState(false);\n  const {\n    0: isResolveModalOpened,\n    1: setIsResolveModalOpened\n  } = useState(false);\n  const {\n    0: isNoteModalOpened,\n    1: setIsNoteModalOpened\n  } = useState(false);\n  const {\n    0: isAssignUsersHover,\n    1: setIsAssignUsersHover\n  } = useState(false);\n  const {\n    state: threadState\n  } = useSelector(state => selectThreadDetailByID(state, currentThreadID)) || INBOX_INIT.thread;\n  const assignments = useSelector(state => selectAssignmentsByThreadID(state, {\n    thread_id: currentThreadID\n  })) || [];\n  const profile = useSelector(selectProfile);\n  const lastAssignment = assignments[assignments.length - 1];\n  const canAssign = assignments.length < 2 && threadState !== 'resolved';\n  const canResolve = threadState === 'assigned' && (lastAssignment === null || lastAssignment === void 0 ? void 0 : lastAssignment.assignee_id) === (profile === null || profile === void 0 ? void 0 : profile.user_id);\n  return __jsx(React.Fragment, null, __jsx(Stack, _extends({}, props, {\n    spacing: \"1.25rem\",\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 7\n    }\n  }), assignments.length > 1 && __jsx(Box, {\n    position: \"relative\",\n    cursor: \"pointer\",\n    marginLeft: \".625rem\",\n    minWidth: \"2.8125rem\",\n    onMouseEnter: () => setIsAssignUsersHover(true),\n    onMouseLeave: () => setIsAssignUsersHover(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 568,\n      columnNumber: 11\n    }\n  }, assignments.map((item, index) => {\n    let currentItem = {\n      first_name: '',\n      last_name: '',\n      id: ''\n    };\n\n    if (item && item.assignee) {\n      currentItem = item.assignee;\n    }\n\n    const {\n      first_name,\n      last_name,\n      id: avatarID\n    } = currentItem;\n    return __jsx(Avatar, {\n      key: `${index}-${avatarID}`,\n      height: \"1.875rem\",\n      width: \"1.875rem\",\n      fontSize: \"calc(1.875rem / 2.5)\",\n      name: `${first_name} ${last_name}`,\n      marginRight: isAssignUsersHover ? '.125rem' : '0',\n      left: index === 0 ? '0' : isAssignUsersHover ? '0' : '.9375rem',\n      position: index === 0 ? 'unset' : isAssignUsersHover ? 'relative' : 'absolute',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 17\n      }\n    });\n  })), canAssign && __jsx(Button, {\n    height: \"auto\",\n    display: \"flex\",\n    variant: \"ghost\",\n    padding: \".5rem\",\n    minWidth: \"auto\",\n    variantColor: \"blue\",\n    alignItems: \"center\",\n    marginRight: \"1.25rem\",\n    onClick: () => setIsAssignModalOpened(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 11\n    }\n  }, __jsx(Avatar, {\n    height: \"1.5rem\",\n    width: \"1.5rem\",\n    fontSize: \"calc(1.5rem / 2.5)\",\n    marginRight: \".25rem\",\n    name: `${profile === null || profile === void 0 ? void 0 : profile.first_name} ${profile === null || profile === void 0 ? void 0 : profile.last_name}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 612,\n      columnNumber: 13\n    }\n  }), __jsx(Text, {\n    fontSize: \".8675rem\",\n    color: \"#000\",\n    fontWeight: \"normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 13\n    }\n  }, \"Assign to someone\"), __jsx(Icon, {\n    name: isAssignModalOpened ? 'chevron-down' : 'chevron-right',\n    fontSize: \"1rem\",\n    color: \"#333\",\n    marginLeft: \".625rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 13\n    }\n  })), __jsx(Box, {\n    backgroundColor: \"rgba(0, 0, 0, 0.06)\",\n    width: \"1px\",\n    height: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 9\n    }\n  }), canResolve && __jsx(IconButton // @ts-ignore\n  , {\n    icon: \"fat-check\",\n    size: \"sm\",\n    padding: \".5rem\",\n    variant: \"ghost\",\n    variantColor: \"blue\",\n    height: \"auto\",\n    minWidth: \"auto\",\n    marginRight: \"1.25rem\",\n    onClick: () => setIsResolveModalOpened(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 636,\n      columnNumber: 11\n    }\n  }), __jsx(More, {\n    sender_id: sender_id,\n    canAssign: canAssign,\n    canResolve: canResolve,\n    openAssignModal: () => setIsAssignModalOpened(true),\n    openResolveModal: () => setIsResolveModalOpened(true),\n    openNoteModal: () => setIsNoteModalOpened(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 650,\n      columnNumber: 9\n    }\n  }, __jsx(IconButton // @ts-ignore\n  , {\n    icon: \"overflow\",\n    size: \"sm\",\n    padding: \".5rem\",\n    variant: \"ghost\",\n    variantColor: \"blue\",\n    height: \"auto\",\n    minWidth: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 658,\n      columnNumber: 11\n    }\n  }))), __jsx(Assign, {\n    currentThreadID: currentThreadID,\n    isModalOpened: isAssignModalOpened,\n    setIsModalOpened: setIsAssignModalOpened,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 7\n    }\n  }), __jsx(Note, {\n    isModalOpened: isNoteModalOpened,\n    setIsModalOpened: setIsNoteModalOpened,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 676,\n      columnNumber: 7\n    }\n  }), (profile === null || profile === void 0 ? void 0 : profile.user_id) && __jsx(Resolve, {\n    user_id: profile.user_id,\n    thread_id: currentThreadID,\n    isModalOpened: isResolveModalOpened,\n    setIsModalOpened: setIsResolveModalOpened,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 678,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport function Header(_ref9) {\n  let {\n    currentThreadID,\n    receiver_id,\n    sender_id\n  } = _ref9,\n      props = _objectWithoutProperties(_ref9, _excluded9);\n\n  return __jsx(Flex, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 5\n    }\n  }), __jsx(Left, {\n    sender_id: sender_id,\n    receiver_id: receiver_id,\n    fontWeight: 500,\n    textAlign: \"left\",\n    letterSpacing: \"0.05rem\",\n    mr: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 7\n    }\n  }), __jsx(Right, {\n    sender_id: sender_id,\n    currentThreadID: currentThreadID,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 701,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/components/messages/Header.tsx"],"names":["Avatar","Box","Button","Flex","Grid","IconButton","Input","Modal","Text","ModalCloseButton","ModalContent","ModalOverlay","Popover","PopoverCloseButton","PopoverContent","PopoverTrigger","Radio","Stack","useToast","Icon","Textarea","React","useState","useRef","useDispatch","useSelector","useHistory","useParams","ConfirmModal","ToastBox","selectProfile","selectUserID","selectCredentialById","selectOtherOrgMembers","INBOX_INIT","assignThread","resolveThread","selectAssignmentsByThreadID","selectCustomerById","selectCustomerByID","selectThreadDetailByID","sendThreadNote","selectContactTableID","Left","sender_id","receiver_id","props","receiver","state","platform_name","receiverName","user_id","customer","sender_name","InternalModal","isModalOpened","setIsModalOpened","closeModal","children","Assign","currentThreadID","radioText","setRadioText","search","setSearch","assignmentLoading","setAssignmentLoading","initialFocusRef","dispatch","toast","otherOrgMembers","members","filter","first_name","last_name","toLocaleLowerCase","includes","handleMemberSelected","selectedMember","find","id","thread_id","assignee_id","error","position","render","onClose","handleModalClose","value","color","e","target","map","index","Note","note","setNote","isSending","setIsSending","params","handleSubmit","preventDefault","trim","content","message","Resolve","history","isBtnLoading","setIsBtnLoading","handleThreadResolve","push","MenuItem","icon","text","More","canAssign","canResolve","openAssignModal","openNoteModal","openResolveModal","contactTableID","actions","onClick","isVisible","undefined","window","open","Right","isAssignModalOpened","setIsAssignModalOpened","isResolveModalOpened","setIsResolveModalOpened","isNoteModalOpened","setIsNoteModalOpened","isAssignUsersHover","setIsAssignUsersHover","threadState","thread","assignments","profile","lastAssignment","length","item","currentItem","assignee","avatarID","Header"],"mappings":"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","sourcesContent":["import {\n  Avatar,\n  Box,\n  BoxProps,\n  Button,\n  Flex,\n  Grid,\n  IconButton,\n  Input,\n  Modal,\n  Text,\n  ModalCloseButton,\n  ModalContent,\n  ModalOverlay,\n  Popover,\n  PopoverCloseButton,\n  PopoverContent,\n  PopoverProps,\n  PopoverTrigger,\n  Radio,\n  Stack,\n  StackProps,\n  useToast,\n  Icon,\n  ButtonProps,\n  IconProps,\n  Textarea,\n} from '@chakra-ui/core';\nimport React, { useState, useRef, RefObject, ChangeEvent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { RootState } from '../../../../../root';\nimport { ConfirmModal, ToastBox } from '../../../../components';\nimport { selectProfile, selectUserID } from '../../../../unauthenticated-app/authentication';\nimport { selectCredentialById } from '../../../channels';\nimport { TeamMember } from '../../../settings/settings.types';\nimport { selectOtherOrgMembers } from '../../../settings/slices';\nimport { INBOX_INIT } from '../../inbox.data';\nimport { MessageHeaderProps } from '../../inbox.types';\nimport {\n  assignThread,\n  resolveThread,\n  selectAssignmentsByThreadID,\n  selectCustomerById,\n  selectCustomerByID,\n  selectThreadDetailByID,\n  sendThreadNote,\n  selectContactTableID,\n} from '../../slices';\n\nfunction Left({\n  sender_id,\n  receiver_id,\n  ...props\n}: BoxProps & Pick<MessageHeaderProps, 'sender_id' | 'receiver_id'>) {\n  const receiver = useSelector((state: RootState) => selectCredentialById(state, receiver_id));\n  const { platform_name: receiverName } =\n    useSelector((state: RootState) => selectCustomerById(state, receiver?.user_id || '')) ||\n    INBOX_INIT.customer;\n\n  const sender_name = '';\n\n  return (\n    <Box {...props}>\n      {sender_name && (\n        <Text pb=\"0.5rem\" fontWeight={600} lineHeight={1} fontSize=\"1.25rem\">\n          {sender_name}\n        </Text>\n      )}\n\n      {receiverName && (\n        <Text color=\"#828282\" fontSize=\".875rem\" lineHeight=\".875rem\">\n          {receiverName}\n        </Text>\n      )}\n    </Box>\n  );\n}\n\nfunction InternalModal({ isModalOpened, setIsModalOpened, ...props }: any) {\n  const closeModal = () => setIsModalOpened(false);\n\n  return (\n    <Modal\n      isCentered\n      size=\"xl\"\n      isOpen={isModalOpened}\n      onClose={closeModal}\n      closeOnOverlayClick={false}\n      {...props}\n    >\n      <ModalOverlay />\n      <ModalContent\n        width=\"auto\"\n        paddingTop=\"2rem\"\n        borderRadius=\".3125rem\"\n        boxShadow=\"0px 0px 1px rgba(67, 90, 111, 0.47)\"\n      >\n        <ModalCloseButton size=\"sm\" />\n\n        {props.children}\n      </ModalContent>\n    </Modal>\n  );\n}\n\nfunction Assign({\n  currentThreadID,\n  isModalOpened,\n  setIsModalOpened,\n  ...props\n}: BoxProps & {\n  currentThreadID: string;\n  isModalOpened: boolean;\n  setIsModalOpened: (v: boolean) => void;\n}) {\n  const [radioText, setRadioText] = useState('Unassign');\n  const [search, setSearch] = useState('');\n  const [assignmentLoading, setAssignmentLoading] = useState(false);\n  const initialFocusRef = useRef<HTMLElement>();\n  const dispatch = useDispatch();\n  const toast = useToast();\n\n  const user_id = useSelector(selectUserID);\n  const otherOrgMembers = useSelector((state: RootState) =>\n    selectOtherOrgMembers(state, { user_id: user_id || '' }),\n  );\n\n  let members: TeamMember[] = otherOrgMembers.filter(\n    ({ first_name, last_name }) =>\n      first_name.toLocaleLowerCase().includes(search.toLocaleLowerCase()) ||\n      last_name.toLocaleLowerCase().includes(search.toLocaleLowerCase()),\n  );\n\n  const handleMemberSelected = async () => {\n    const selectedMember = members.find(({ id }) => id === radioText);\n\n    if (selectedMember) {\n      setAssignmentLoading(true);\n\n      try {\n        await dispatch(\n          assignThread({\n            thread_id: currentThreadID,\n            assignee_id: selectedMember.id,\n          }),\n        );\n      } catch (error) {\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n        });\n      }\n\n      setAssignmentLoading(false);\n    }\n\n    setIsModalOpened(false);\n  };\n\n  const handleModalClose = (value: boolean) => {\n    setSearch('');\n    setIsModalOpened(value);\n  };\n\n  return (\n    <InternalModal\n      isModalOpened={isModalOpened}\n      setIsModalOpened={handleModalClose}\n      initialFocusRef={initialFocusRef}\n    >\n      <Box\n        paddingX=\"1.5rem\"\n        paddingBottom=\"1.25rem\"\n        minWidth={['300px', '393px', '393px', '393px']}\n      >\n        <Text fontWeight={500} fontSize=\"1.25rem\" lineHeight=\"1.625rem\" color=\"#000\">\n          Assign To\n        </Text>\n\n        <Input\n          marginTop=\"1.25rem\"\n          lineHeight=\"1rem\"\n          borderRadius=\"3px\"\n          fontSize=\".8675rem\"\n          padding=\".625rem 1rem\"\n          backgroundColor=\"#f2f2f2\"\n          // @ts-ignore\n          ref={initialFocusRef}\n          placeholder=\"Search users\"\n          _placeholder={{ color: 'rgba(51, 51, 51, 0.5)' }}\n          value={search}\n          onChange={(e: any) => setSearch(e.target.value)}\n        />\n\n        <Stack marginTop=\"1rem\" spacing=\"1rem\">\n          {members.map(({ id, first_name, last_name }, index) => (\n            <Flex key={id} alignItems=\"center\">\n              <Avatar name={`${first_name} ${last_name}`} size=\"sm\" />\n\n              <Text\n                color=\"#000\"\n                fontWeight={600}\n                lineHeight=\"1.25rem\"\n                fontSize=\"1rem\"\n                marginLeft=\"1rem\"\n                marginRight=\"auto\"\n              >\n                {`${first_name} ${last_name}`}\n              </Text>\n\n              <Radio\n                onChange={() => setRadioText(id)}\n                name=\"assign-to\"\n                value={id}\n                size=\"md\"\n                isChecked={radioText === id}\n              />\n            </Flex>\n          ))}\n        </Stack>\n\n        <Stack\n          isInline\n          spacing=\".5rem\"\n          marginTop=\"2rem\"\n          alignItems=\"center\"\n          justifyContent=\"flex-end\"\n        >\n          <Button\n            variant=\"ghost\"\n            variantColor=\"blue\"\n            color=\"#828282\"\n            fontSize=\".75rem\"\n            padding=\".25rem .625rem\"\n            height=\"auto\"\n            onClick={() => setIsModalOpened(false)}\n          >\n            Cancel\n          </Button>\n\n          <Button\n            variant=\"solid\"\n            variantColor=\"blue\"\n            fontSize=\".75rem\"\n            padding=\".25rem .625rem\"\n            height=\"auto\"\n            onClick={() => handleMemberSelected()}\n            loadingText=\"Assigning\"\n            isLoading={assignmentLoading}\n          >\n            Save\n          </Button>\n        </Stack>\n      </Box>\n    </InternalModal>\n  );\n}\n\nfunction Note({\n  isModalOpened,\n  setIsModalOpened,\n  ...props\n}: BoxProps & {\n  isModalOpened: boolean;\n  setIsModalOpened: (v: boolean) => void;\n}) {\n  const [note, setNote] = useState('');\n  const [isSending, setIsSending] = useState(false);\n  const initialFocusRef = useRef<HTMLElement>();\n  const dispatch = useDispatch();\n  const params = useParams<{ id: string }>();\n  const toast = useToast();\n\n  const handleSubmit = async (e: any) => {\n    e.preventDefault();\n\n    if (note.trim() && params.id !== 'start') {\n      setIsSending(true);\n      try {\n        await dispatch(\n          sendThreadNote({\n            content: note,\n            thread_id: params.id,\n          }),\n        );\n        setNote('');\n      } catch (message) {\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => <ToastBox onClose={onClose} message={message} />,\n        });\n      }\n      setIsSending(false);\n    }\n  };\n\n  const handleModalClose = (value: boolean) => {\n    if (!value) {\n      setNote('');\n    }\n\n    setIsModalOpened(value);\n  };\n\n  return (\n    <InternalModal\n      isModalOpened={isModalOpened}\n      setIsModalOpened={handleModalClose}\n      initialFocusRef={initialFocusRef}\n    >\n      <Box padding=\"1.25rem\" minWidth=\"300px\">\n        <Text\n          color=\"#000\"\n          fontSize=\"1.25rem\"\n          fontWeight={500}\n          lineHeight=\"1.6125rem\"\n          marginBottom=\".625rem\"\n        >\n          Add Note\n        </Text>\n\n        <form onSubmit={handleSubmit}>\n          <Textarea\n            placeholder=\"Add an internal note to give more context to this conversation....\"\n            resize=\"none\"\n            fontSize=\".8675rem\"\n            lineHeight=\"1rem\"\n            padding=\".5rem .625rem\"\n            value={note}\n            border=\"1px solid #0015FF\"\n            // @ts-ignores\n            ref={initialFocusRef}\n            onChange={({ target: { value } }: ChangeEvent<HTMLInputElement>) => setNote(value)}\n          />\n\n          <Stack isInline marginTop=\"1.375rem\" spacing=\".625rem\" justifyContent=\"flex-end\">\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              variantColor=\"blue\"\n              fontSize=\".875rem\"\n              marginTop=\".5rem\"\n              paddingX=\".625rem\"\n              onClick={() => handleModalClose(false)}\n            >\n              Cancel\n            </Button>\n\n            <Button\n              type=\"submit\"\n              variant=\"solid\"\n              variantColor=\"blue\"\n              fontSize=\".875rem\"\n              color=\"white\"\n              marginTop=\".5rem\"\n              paddingX=\".625rem\"\n              isLoading={isSending}\n              loadingText=\"Adding Note\"\n            >\n              Add Note\n            </Button>\n          </Stack>\n        </form>\n      </Box>\n    </InternalModal>\n  );\n}\n\nfunction Resolve({\n  user_id,\n  thread_id,\n  isModalOpened,\n  setIsModalOpened,\n  ...props\n}: BoxProps & {\n  user_id?: string;\n  thread_id: string;\n  isModalOpened: boolean;\n  setIsModalOpened: (v: boolean) => void;\n}) {\n  const history = useHistory();\n  const toast = useToast();\n  const dispatch = useDispatch();\n\n  const [isBtnLoading, setIsBtnLoading] = useState(false);\n\n  const handleThreadResolve = async (thread_id: string, receiver_id: string) => {\n    try {\n      if (thread_id && receiver_id) {\n        setIsBtnLoading(true);\n\n        await dispatch(resolveThread({ thread_id }));\n\n        setIsModalOpened(false);\n        setIsBtnLoading(false);\n        history.push('/s/inbox');\n      }\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n  };\n\n  return (\n    <ConfirmModal\n      isOpen={isModalOpened}\n      onClose={() => setIsModalOpened(false)}\n      title=\"Resolve conversation\"\n      isLoading={isBtnLoading}\n      onConfirm={() => handleThreadResolve(thread_id || '', user_id || '')}\n    />\n  );\n}\n\nfunction MenuItem({\n  initialFocusRef,\n  icon,\n  text,\n  ...props\n}: Omit<ButtonProps, 'children'> & {\n  icon: IconProps['name'];\n  text: string;\n  initialFocusRef?: RefObject<HTMLElement> | null;\n}) {\n  return (\n    <Button\n      {...props}\n      variant=\"ghost\"\n      variantColor=\"blue\"\n      color=\"#333\"\n      fontSize=\".8675rem\"\n      fontWeight=\"normal\"\n      lineHeight=\"1rem\"\n      minWidth=\"auto\"\n      alignItems=\"center\"\n      padding=\".5rem\"\n      marginLeft=\"-.5rem\"\n      justifyContent=\"start\"\n      ref={initialFocusRef}\n    >\n      <Icon name={icon} size=\"1rem\" />\n      <Text marginLeft=\".5rem\">{text}</Text>\n    </Button>\n  );\n}\n\nfunction More({\n  sender_id,\n  canAssign,\n  canResolve,\n  openAssignModal,\n  openNoteModal,\n  openResolveModal,\n  ...props\n}: PopoverProps & {\n  sender_id: string;\n  canAssign: boolean;\n  canResolve: boolean;\n  openAssignModal: () => void;\n  openResolveModal: () => void;\n  openNoteModal: () => void;\n}) {\n  // const history = useHistory();\n  const initialFocusRef = useRef<HTMLElement>(null);\n\n  const { platform_name: sender_name } =\n    useSelector((state: RootState) => selectCustomerByID(state, sender_id)) || INBOX_INIT.customer;\n  const contactTableID = useSelector(selectContactTableID);\n\n  const actions = [\n    { icon: 'template', text: 'Add Notes', onClick: openNoteModal, isVisible: true },\n    { icon: 'check', text: 'Resolve', onClick: openResolveModal, isVisible: canResolve },\n    { icon: 'warning-2', text: 'Blacklist', onClick: undefined, isVisible: true },\n    // { icon: 'user-2', text: 'Contact', onClick: () => history.push(`/s/lists/${contactTableID}`), isVisible: true },\n    {\n      icon: 'user-2',\n      text: 'Contact',\n      onClick: () => window.open(`/s/lists/${contactTableID}`, '_blank'),\n      isVisible: true,\n    },\n    { icon: 'chat', text: 'Mark Unread', onClick: undefined, isVisible: true },\n    {\n      icon: 'multi-user',\n      text: 'Assign Conversation',\n      onClick: openAssignModal,\n      isVisible: canAssign,\n    },\n  ];\n\n  return (\n    <Popover initialFocusRef={initialFocusRef} {...props}>\n      <PopoverTrigger>{props.children}</PopoverTrigger>\n\n      <PopoverContent\n        zIndex={1500}\n        padding=\"1.5rem\"\n        minWidth={['320px', '380px', '380px', '380px']}\n      >\n        <PopoverCloseButton right=\".25rem\" />\n\n        <Text\n          fontWeight={500}\n          lineHeight=\"1rem\"\n          fontSize=\".75rem\"\n          letterSpacing=\".05em\"\n          textTransform=\"uppercase\"\n          color=\"rgba(0, 0, 0, 0.5)\"\n        >\n          {`Conversation with ${sender_name}`}\n        </Text>\n\n        <Grid\n          marginTop=\"2rem\"\n          templateColumns=\"repeat(2, 1fr)\"\n          gap=\"1.875rem 4.5rem\"\n          justifyContent=\"start\"\n        >\n          {actions\n            .filter(({ isVisible }) => isVisible)\n            .map(({ text, icon, onClick }, index) => (\n              <MenuItem\n                icon={icon}\n                key={`${text}-${icon}`}\n                text={text}\n                initialFocusRef={index === 0 ? initialFocusRef : null}\n                onClick={onClick}\n              />\n            ))}\n        </Grid>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\nfunction Right({\n  sender_id,\n  currentThreadID,\n  ...props\n}: StackProps & {\n  currentThreadID: string;\n  sender_id: string;\n}) {\n  const [isAssignModalOpened, setIsAssignModalOpened] = useState(false);\n  const [isResolveModalOpened, setIsResolveModalOpened] = useState(false);\n  const [isNoteModalOpened, setIsNoteModalOpened] = useState(false);\n  const [isAssignUsersHover, setIsAssignUsersHover] = useState(false);\n\n  const { state: threadState } =\n    useSelector((state: RootState) => selectThreadDetailByID(state, currentThreadID)) ||\n    INBOX_INIT.thread;\n  const assignments =\n    useSelector((state: RootState) =>\n      selectAssignmentsByThreadID(state, { thread_id: currentThreadID }),\n    ) || [];\n  const profile = useSelector(selectProfile);\n  const lastAssignment = assignments[assignments.length - 1];\n\n  const canAssign = assignments.length < 2 && threadState !== 'resolved';\n  const canResolve = threadState === 'assigned' && lastAssignment?.assignee_id === profile?.user_id;\n\n  return (\n    <>\n      <Stack {...props} spacing=\"1.25rem\" isInline alignItems=\"center\">\n        {assignments.length > 1 && (\n          <Box\n            position=\"relative\"\n            cursor=\"pointer\"\n            marginLeft=\".625rem\"\n            minWidth=\"2.8125rem\"\n            onMouseEnter={() => setIsAssignUsersHover(true)}\n            onMouseLeave={() => setIsAssignUsersHover(false)}\n          >\n            {assignments.map((item, index) => {\n              let currentItem = { first_name: '', last_name: '', id: '' };\n\n              if (item && item.assignee) {\n                currentItem = item.assignee as any;\n              }\n\n              const { first_name, last_name, id: avatarID } = currentItem;\n              return (\n                <Avatar\n                  key={`${index}-${avatarID}`}\n                  height=\"1.875rem\"\n                  width=\"1.875rem\"\n                  fontSize=\"calc(1.875rem / 2.5)\"\n                  name={`${first_name} ${last_name}`}\n                  marginRight={isAssignUsersHover ? '.125rem' : '0'}\n                  left={index === 0 ? '0' : isAssignUsersHover ? '0' : '.9375rem'}\n                  position={index === 0 ? 'unset' : isAssignUsersHover ? 'relative' : 'absolute'}\n                />\n              );\n            })}\n          </Box>\n        )}\n\n        {canAssign && (\n          <Button\n            height=\"auto\"\n            display=\"flex\"\n            variant=\"ghost\"\n            padding=\".5rem\"\n            minWidth=\"auto\"\n            variantColor=\"blue\"\n            alignItems=\"center\"\n            marginRight=\"1.25rem\"\n            onClick={() => setIsAssignModalOpened(true)}\n          >\n            <Avatar\n              height=\"1.5rem\"\n              width=\"1.5rem\"\n              fontSize=\"calc(1.5rem / 2.5)\"\n              marginRight=\".25rem\"\n              name={`${profile?.first_name} ${profile?.last_name}`}\n            />\n\n            <Text fontSize=\".8675rem\" color=\"#000\" fontWeight=\"normal\">\n              Assign to someone\n            </Text>\n\n            <Icon\n              name={isAssignModalOpened ? 'chevron-down' : 'chevron-right'}\n              fontSize=\"1rem\"\n              color=\"#333\"\n              marginLeft=\".625rem\"\n            />\n          </Button>\n        )}\n\n        <Box backgroundColor=\"rgba(0, 0, 0, 0.06)\" width=\"1px\" height=\"1.5rem\" />\n\n        {canResolve && (\n          <IconButton\n            // @ts-ignore\n            icon=\"fat-check\"\n            size=\"sm\"\n            padding=\".5rem\"\n            variant=\"ghost\"\n            variantColor=\"blue\"\n            height=\"auto\"\n            minWidth=\"auto\"\n            marginRight=\"1.25rem\"\n            onClick={() => setIsResolveModalOpened(true)}\n          />\n        )}\n\n        <More\n          sender_id={sender_id}\n          canAssign={canAssign}\n          canResolve={canResolve}\n          openAssignModal={() => setIsAssignModalOpened(true)}\n          openResolveModal={() => setIsResolveModalOpened(true)}\n          openNoteModal={() => setIsNoteModalOpened(true)}\n        >\n          <IconButton\n            // @ts-ignore\n            icon=\"overflow\"\n            size=\"sm\"\n            padding=\".5rem\"\n            variant=\"ghost\"\n            variantColor=\"blue\"\n            height=\"auto\"\n            minWidth=\"auto\"\n          />\n        </More>\n      </Stack>\n\n      <Assign\n        currentThreadID={currentThreadID}\n        isModalOpened={isAssignModalOpened}\n        setIsModalOpened={setIsAssignModalOpened}\n      />\n      <Note isModalOpened={isNoteModalOpened} setIsModalOpened={setIsNoteModalOpened} />\n      {profile?.user_id && (\n        <Resolve\n          user_id={profile.user_id}\n          thread_id={currentThreadID}\n          isModalOpened={isResolveModalOpened}\n          setIsModalOpened={setIsResolveModalOpened}\n        />\n      )}\n    </>\n  );\n}\n\nexport function Header({ currentThreadID, receiver_id, sender_id, ...props }: MessageHeaderProps) {\n  return (\n    <Flex {...props}>\n      <Left\n        sender_id={sender_id}\n        receiver_id={receiver_id}\n        fontWeight={500}\n        textAlign=\"left\"\n        letterSpacing=\"0.05rem\"\n        mr=\"auto\"\n      />\n\n      <Right sender_id={sender_id} currentThreadID={currentThreadID} />\n    </Flex>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}