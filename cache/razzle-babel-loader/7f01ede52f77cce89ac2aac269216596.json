{"ast":null,"code":"import _extends from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/marketing/campaigns/create-campaign.component.tsx\";\nvar __jsx = React.createElement;\nimport { useToast } from '@chakra-ui/core';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useLoading } from '../../../../hooks';\nimport { sendAmplitudeData } from '../../../../utils/amplitude';\nimport { ToastBox } from '../../../components';\nimport { selectOrganisationID } from '../../../unauthenticated-app/authentication';\nimport { Planner, TestPlanner } from './components';\nimport { plannerConnector } from './planner.connector';\n\nconst CreateCampaignUI = props => {\n  const {\n    addCampaign,\n    history,\n    fetchWallet,\n    match\n  } = props;\n  const {\n    type: campaignType\n  } = match.params;\n  const toast = useToast();\n  const {\n    loading,\n    dispatch\n  } = useLoading();\n  const organisation_id = useSelector(selectOrganisationID);\n\n  const handleCreateCampaign = async payload => {\n    try {\n      dispatch({\n        type: 'LOADING_STARTED'\n      });\n      await addCampaign(payload);\n      dispatch({\n        type: 'LOADING_RESOLVED'\n      });\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          status: \"success\",\n          onClose: onClose,\n          message: \"Campaign created successfully\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 11\n          }\n        })\n      });\n      organisation_id && (await fetchWallet(organisation_id));\n      sendAmplitudeData('campaignCreated', {\n        data: payload\n      });\n      history.push('/s/marketing/campaigns');\n    } catch (error) {\n      dispatch({\n        type: 'LOADING_RESOLVED'\n      });\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  };\n\n  return campaignType === 'one-time-campaign' ? __jsx(Planner, _extends({}, props, {\n    campaign: {},\n    isSaving: loading === 'pending',\n    addCampaign: handleCreateCampaign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  })) : __jsx(TestPlanner, _extends({}, props, {\n    campaign: {},\n    isSaving: loading === 'pending',\n    addCampaign: handleCreateCampaign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport const CreateCampaign = plannerConnector(CreateCampaignUI);","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/marketing/campaigns/create-campaign.component.tsx"],"names":["useToast","React","useSelector","useLoading","sendAmplitudeData","ToastBox","selectOrganisationID","Planner","TestPlanner","plannerConnector","CreateCampaignUI","props","addCampaign","history","fetchWallet","match","type","campaignType","params","toast","loading","dispatch","organisation_id","handleCreateCampaign","payload","position","render","onClose","data","push","error","CreateCampaign"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,iBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,iBAAT,QAAkC,6BAAlC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,oBAAT,QAAqC,6CAArC;AACA,SAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,cAAtD;AACA,SAASC,gBAAT,QAAiC,qBAAjC;;AAGA,MAAMC,gBAAgB,GAAIC,KAAD,IAAyB;AAChD,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA,WAAxB;AAAqCC,IAAAA;AAArC,MAA+CJ,KAArD;AAEA,QAAM;AAAEK,IAAAA,IAAI,EAAEC;AAAR,MAAyBF,KAAK,CAACG,MAArC;AAEA,QAAMC,KAAK,GAAGnB,QAAQ,EAAtB;AACA,QAAM;AAAEoB,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAwBlB,UAAU,EAAxC;AACA,QAAMmB,eAAe,GAAGpB,WAAW,CAACI,oBAAD,CAAnC;;AAEA,QAAMiB,oBAAoB,GAAG,MAAOC,OAAP,IAA6C;AACxE,QAAI;AACFH,MAAAA,QAAQ,CAAC;AAAEL,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACA,YAAMJ,WAAW,CAACY,OAAD,CAAjB;AACAH,MAAAA,QAAQ,CAAC;AAAEL,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACAG,MAAAA,KAAK,CAAC;AACJM,QAAAA,QAAQ,EAAE,aADN;AAEJC,QAAAA,MAAM,EAAE,CAAC;AAAEC,UAAAA;AAAF,SAAD,KACN,MAAC,QAAD;AAAU,UAAA,MAAM,EAAC,SAAjB;AAA2B,UAAA,OAAO,EAAEA,OAApC;AAA6C,UAAA,OAAO,EAAC,+BAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHE,OAAD,CAAL;AAMAL,MAAAA,eAAe,KAAK,MAAMR,WAAW,CAACQ,eAAD,CAAtB,CAAf;AACAlB,MAAAA,iBAAiB,CAAC,iBAAD,EAAoB;AAAEwB,QAAAA,IAAI,EAAEJ;AAAR,OAApB,CAAjB;AACAX,MAAAA,OAAO,CAACgB,IAAR,CAAa,wBAAb;AACD,KAbD,CAaE,OAAOC,KAAP,EAAc;AACdT,MAAAA,QAAQ,CAAC;AAAEL,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACAG,MAAAA,KAAK,CAAC;AACJM,QAAAA,QAAQ,EAAE,aADN;AAEJC,QAAAA,MAAM,EAAE,CAAC;AAAEC,UAAAA;AAAF,SAAD,KAAiB,MAAC,QAAD;AAAU,UAAA,OAAO,EAAEA,OAAnB;AAA4B,UAAA,OAAO,EAAEG,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFrB,OAAD,CAAL;AAID;AACF,GArBD;;AAuBA,SAAOb,YAAY,KAAK,mBAAjB,GACL,MAAC,OAAD,eACMN,KADN;AAEE,IAAA,QAAQ,EAAE,EAFZ;AAGE,IAAA,QAAQ,EAAES,OAAO,KAAK,SAHxB;AAIE,IAAA,WAAW,EAAEG,oBAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADK,GAQL,MAAC,WAAD,eACMZ,KADN;AAEE,IAAA,QAAQ,EAAE,EAFZ;AAGE,IAAA,QAAQ,EAAES,OAAO,KAAK,SAHxB;AAIE,IAAA,WAAW,EAAEG,oBAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KARF;AAeD,CA/CD;;AAiDA,OAAO,MAAMQ,cAAc,GAAGtB,gBAAgB,CAACC,gBAAD,CAAvC","sourcesContent":["import { useToast } from '@chakra-ui/core';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useLoading } from '../../../../hooks';\nimport { sendAmplitudeData } from '../../../../utils/amplitude';\nimport { ToastBox } from '../../../components';\nimport { selectOrganisationID } from '../../../unauthenticated-app/authentication';\nimport { CampaignPayload, Planner, TestPlanner } from './components';\nimport { plannerConnector } from './planner.connector';\nimport { PlannerProps } from './planner.types';\n\nconst CreateCampaignUI = (props: PlannerProps) => {\n  const { addCampaign, history, fetchWallet, match } = props;\n\n  const { type: campaignType } = match.params;\n\n  const toast = useToast();\n  const { loading, dispatch } = useLoading();\n  const organisation_id = useSelector(selectOrganisationID);\n\n  const handleCreateCampaign = async (payload: Partial<CampaignPayload>) => {\n    try {\n      dispatch({ type: 'LOADING_STARTED' });\n      await addCampaign(payload);\n      dispatch({ type: 'LOADING_RESOLVED' });\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox status=\"success\" onClose={onClose} message=\"Campaign created successfully\" />\n        ),\n      });\n      organisation_id && (await fetchWallet(organisation_id));\n      sendAmplitudeData('campaignCreated', { data: payload });\n      history.push('/s/marketing/campaigns');\n    } catch (error) {\n      dispatch({ type: 'LOADING_RESOLVED' });\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n  };\n\n  return campaignType === 'one-time-campaign' ? (\n    <Planner\n      {...props}\n      campaign={{}}\n      isSaving={loading === 'pending'}\n      addCampaign={handleCreateCampaign}\n    />\n  ) : (\n    <TestPlanner\n      {...props}\n      campaign={{}}\n      isSaving={loading === 'pending'}\n      addCampaign={handleCreateCampaign}\n    />\n  );\n};\n\nexport const CreateCampaign = plannerConnector(CreateCampaignUI);\n"]},"metadata":{},"sourceType":"module"}