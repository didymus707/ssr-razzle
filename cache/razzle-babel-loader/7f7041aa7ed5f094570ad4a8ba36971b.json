{"ast":null,"code":"const _excluded = [\"data\", \"options\", \"onChange\", \"multiple\"],\n      _excluded2 = [\"data\", \"options\", \"onChange\"],\n      _excluded3 = [\"data\", \"options\", \"onChange\"],\n      _excluded4 = [\"value\", \"onChange\"];\nvar _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/tables/components/filter/filter.item.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Box, Button, Checkbox, CheckboxGroup, IconButton, Input, Popover, PopoverBody, PopoverContent, PopoverTrigger, Select, Stack } from '@chakra-ui/core';\nimport format from 'date-fns/format';\nimport * as React from 'react';\nimport { SortableElement } from 'react-sortable-hoc';\nimport { DatePickerComponent, DragHandle } from '../../../../components';\nimport { DATE_FIELD_SUB_FILTERS, FILTER_CONJUCTIONS, PROPERTY_TYPE_OPERATORS } from './filter.data';\n\nfunction FilterItemSelect(_ref) {\n  let {\n    data,\n    options,\n    onChange,\n    multiple\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  let [value, setValue] = React.useState(data || '');\n\n  function handleSelect(e) {\n    let value = e.target.value;\n    setValue(value);\n    onChange && onChange(value);\n  }\n\n  return __jsx(Select, _extends({\n    multiple: multiple\n  }, rest, {\n    value: value,\n    onChange: handleSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }), __jsx(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, \"Select option\"), options && options.map(({\n    label,\n    value\n  }, index) => __jsx(\"option\", {\n    key: index,\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, label)));\n}\n\nfunction FilterItemMultiSelect({\n  data,\n  options,\n  onChange\n}) {\n  let [value, setValue] = React.useState(data || []);\n\n  function handleSelect(data) {\n    setValue(data);\n    onChange && onChange(data);\n  }\n\n  return __jsx(Popover, {\n    placement: \"bottom-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, __jsx(PopoverTrigger, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    size: \"sm\",\n    isFullWidth: true,\n    variant: \"outline\",\n    fontWeight: \"normal\",\n    borderRadius: \"0.125rem\",\n    rightIcon: \"chevron-down\",\n    _hover: {\n      bg: 'none',\n      borderColor: '#CBD5E0'\n    },\n    _focus: {\n      borderColor: 'blue.500',\n      boxShadow: '0 0 0 1px #3182ce'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, value.length, \" Selected\")), __jsx(PopoverContent, {\n    maxWidth: \"10rem\",\n    zIndex: 99999,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, __jsx(PopoverBody, {\n    padding: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, __jsx(CheckboxGroup, {\n    size: \"sm\",\n    value: value,\n    variantColor: \"blue\",\n    onChange: handleSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, options === null || options === void 0 ? void 0 : options.map((option, i) => __jsx(Checkbox, {\n    key: i,\n    width: \"100%\",\n    marginBottom: \"0\",\n    padding: \"0.4rem\",\n    paddingBottom: \"0\",\n    value: option.value,\n    isChecked: value.includes(option.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }\n  }, option.label))))));\n}\n\nexport function FilterItemOperator(_ref2) {\n  let {\n    data,\n    options,\n    onChange\n  } = _ref2,\n      rest = _objectWithoutProperties(_ref2, _excluded2);\n\n  return __jsx(FilterItemSelect, _extends({}, rest, {\n    data: data,\n    options: options,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }));\n}\nexport function FilterItemConjuction(_ref3) {\n  let {\n    data,\n    options,\n    onChange\n  } = _ref3,\n      rest = _objectWithoutProperties(_ref3, _excluded3);\n\n  return __jsx(FilterItemSelect, _extends({}, rest, {\n    data: data,\n    options: options,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  }));\n}\nexport function FilterItemInput(_ref4) {\n  let {\n    value: valueProp,\n    onChange\n  } = _ref4,\n      rest = _objectWithoutProperties(_ref4, _excluded4);\n\n  const [value, setValue] = React.useState(valueProp || '');\n\n  function handleChange(e) {\n    let value = e.target.value;\n    setValue(value);\n    onChange && onChange(value);\n  }\n\n  return __jsx(Input, _extends({}, rest, {\n    value: value,\n    placeholder: \"value\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }\n  }));\n}\nexport const FilterItem = SortableElement(({\n  filter,\n  onRemove,\n  onChange,\n  properties,\n  isFirst = false\n}) => {\n  const [filterValue, setFilterValue] = React.useState(filter || null);\n  const [exactValue, setExactValue] = React.useState(false);\n  const [propertyOptions, setPropertyOptions] = React.useState();\n  const PROPERTIES = properties && properties.map(({\n    label,\n    name\n  }) => ({\n    label,\n    value: name\n  }));\n  React.useEffect(() => {\n    if (filterValue) {\n      var _property$options;\n\n      const {\n        name\n      } = filterValue;\n      const property = properties === null || properties === void 0 ? void 0 : properties.find(item => item.name === name);\n      const options = property === null || property === void 0 ? void 0 : (_property$options = property.options) === null || _property$options === void 0 ? void 0 : _property$options.map(({\n        name\n      }) => ({\n        label: name,\n        value: name\n      }));\n      setPropertyOptions(options);\n    }\n  }, [filterValue, properties]);\n\n  function handleConjuctionChange(conjunction) {\n    let data = _objectSpread(_objectSpread({}, filterValue), {}, {\n      conjunction\n    });\n\n    setFilterValue(data);\n    onChange && onChange(data);\n  }\n\n  function handleOperatorChange(operator) {\n    let data = _objectSpread(_objectSpread({}, filterValue), {}, {\n      operator\n    });\n\n    setFilterValue(data);\n    onChange && onChange(data);\n  }\n\n  function handleNameChange(name) {\n    const property = properties === null || properties === void 0 ? void 0 : properties.find(item => item.name === name);\n\n    if (property) {\n      let data = _objectSpread(_objectSpread({}, filterValue), {}, {\n        name,\n        value: '',\n        columnID: property === null || property === void 0 ? void 0 : property.id,\n        operator: PROPERTY_TYPE_OPERATORS[property.type.toLowerCase()][0].value\n      });\n\n      setFilterValue(data);\n      onChange && onChange(data);\n    }\n  }\n\n  function handleInputChange(value) {\n    const data = _objectSpread(_objectSpread({}, filterValue), {}, {\n      value\n    });\n\n    setFilterValue(data);\n\n    if (value === 'exact date') {\n      setExactValue(true);\n    } else {\n      onChange && onChange(data);\n    }\n  }\n\n  function handleMultiSelectChange(value) {\n    const data = _objectSpread(_objectSpread({}, filterValue), {}, {\n      value\n    });\n\n    setFilterValue(data);\n    onChange && onChange(data);\n  }\n\n  function handleDatePickerChange(date) {\n    const value = format(date, 'dd-MM-yyyy');\n\n    const data = _objectSpread(_objectSpread({}, filterValue), {}, {\n      value\n    });\n\n    setFilterValue(data);\n    onChange && onChange(data);\n  }\n\n  function getOperatorList() {\n    let operatorList = [];\n\n    if (filterValue && filterValue.name) {\n      const propertyType = properties && properties.find(({\n        name\n      }) => name === filterValue.name);\n      const type = propertyType && propertyType.type.toLowerCase();\n\n      if (type) {\n        operatorList = PROPERTY_TYPE_OPERATORS[type];\n      }\n    }\n\n    return operatorList;\n  }\n\n  function renderFilterInputComponent() {\n    /**\n     * this method will handle rendering the sub-filters component and filter value\n     * component\n     *\n     * Also account for the date based filter scenarios where you don't have\n     * to show the filter value component\n     */\n    if (filterValue && filterValue.name) {\n      const propertyType = properties && properties.find(({\n        name\n      }) => name === filterValue.name);\n      const type = propertyType && propertyType.type.toLowerCase();\n\n      switch (type) {\n        case 'select':\n          return __jsx(FilterItemSelect, {\n            size: \"sm\",\n            options: propertyOptions,\n            onChange: handleInputChange,\n            data: filter && filter.value,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 15\n            }\n          });\n\n        case 'multi select':\n          return __jsx(FilterItemMultiSelect, {\n            options: propertyOptions,\n            data: filter && filter.value,\n            onChange: handleMultiSelectChange,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 15\n            }\n          });\n\n        case 'date':\n          return __jsx(Stack, {\n            width: \"100%\",\n            isInline: true,\n            alignItems: \"center\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 15\n            }\n          }, __jsx(Box, {\n            width: filterValue.value ? '100%' : '50%',\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 17\n            }\n          }, __jsx(FilterItemSelect, {\n            size: \"sm\",\n            onChange: handleInputChange,\n            data: filter && filter.value,\n            options: DATE_FIELD_SUB_FILTERS,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 19\n            }\n          })), (!filterValue.value || exactValue) && __jsx(Box, {\n            width: \"50%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 19\n            }\n          }, __jsx(DatePickerComponent, {\n            size: \"sm\",\n            showIcon: false,\n            value: filter && filter.value,\n            onDayChange: handleDatePickerChange,\n            dayPickerProps: {\n              disabledDays: {\n                before: new Date()\n              }\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 21\n            }\n          })));\n\n        default:\n          return __jsx(FilterItemInput, {\n            size: \"sm\",\n            onChange: handleInputChange,\n            value: filter && filter.value,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 15\n            }\n          });\n      }\n    }\n  }\n\n  return __jsx(Stack, {\n    isInline: true,\n    zIndex: 100000000,\n    spacing: \"0.25rem\",\n    marginBottom: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 9\n    }\n  }, __jsx(DragHandle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 11\n    }\n  })), !isFirst && __jsx(Box, {\n    flex: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 11\n    }\n  }, __jsx(FilterItemConjuction, {\n    size: \"sm\",\n    options: FILTER_CONJUCTIONS,\n    onChange: handleConjuctionChange,\n    data: filter && filter.conjunction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 13\n    }\n  })), __jsx(Box, {\n    flex: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 9\n    }\n  }, __jsx(FilterItemConjuction, {\n    size: \"sm\",\n    options: PROPERTIES,\n    onChange: handleNameChange,\n    data: filter && filter.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 11\n    }\n  })), __jsx(Box, {\n    flex: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 9\n    }\n  }, __jsx(FilterItemOperator, {\n    size: \"sm\",\n    options: getOperatorList(),\n    onChange: handleOperatorChange,\n    data: filter && filter.operator,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 11\n    }\n  })), !((filterValue === null || filterValue === void 0 ? void 0 : filterValue.operator) === 'empty' || (filterValue === null || filterValue === void 0 ? void 0 : filterValue.operator) === 'notEmpty') && __jsx(Box, {\n    flex: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 14\n    }\n  }, renderFilterInputComponent()), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 9\n    }\n  }, __jsx(IconButton, {\n    size: \"xs\",\n    icon: \"close\",\n    fontSize: \"8px\",\n    variant: \"ghost\",\n    \"aria-label\": \"ghost\",\n    onClick: onRemove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 11\n    }\n  })));\n});","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/tables/components/filter/filter.item.tsx"],"names":["Box","Button","Checkbox","CheckboxGroup","IconButton","Input","Popover","PopoverBody","PopoverContent","PopoverTrigger","Select","Stack","format","React","SortableElement","DatePickerComponent","DragHandle","DATE_FIELD_SUB_FILTERS","FILTER_CONJUCTIONS","PROPERTY_TYPE_OPERATORS","FilterItemSelect","data","options","onChange","multiple","rest","value","setValue","useState","handleSelect","e","target","map","label","index","FilterItemMultiSelect","bg","borderColor","boxShadow","length","option","i","includes","FilterItemOperator","FilterItemConjuction","FilterItemInput","valueProp","handleChange","FilterItem","filter","onRemove","properties","isFirst","filterValue","setFilterValue","exactValue","setExactValue","propertyOptions","setPropertyOptions","PROPERTIES","name","useEffect","property","find","item","handleConjuctionChange","conjunction","handleOperatorChange","operator","handleNameChange","columnID","id","type","toLowerCase","handleInputChange","handleMultiSelectChange","handleDatePickerChange","date","getOperatorList","operatorList","propertyType","renderFilterInputComponent","disabledDays","before","Date"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Button,\n  Checkbox,\n  CheckboxGroup,\n  IconButton,\n  Input,\n  Popover,\n  PopoverBody,\n  PopoverContent,\n  PopoverTrigger,\n  Select,\n  Stack,\n} from '@chakra-ui/core';\nimport format from 'date-fns/format';\nimport * as React from 'react';\nimport { SortableElement } from 'react-sortable-hoc';\nimport { DatePickerComponent, DragHandle } from '../../../../components';\nimport { SelectOptions } from '../../tables.types';\nimport {\n  DATE_FIELD_SUB_FILTERS,\n  FILTER_CONJUCTIONS,\n  PROPERTY_TYPE_OPERATORS,\n} from './filter.data';\nimport {\n  FilterItemInputProps,\n  FilterItemProps,\n  FilterItemSelectProps,\n  FilterProps,\n} from './filter.types';\n\nfunction FilterItemSelect({\n  data,\n  options,\n  onChange,\n  multiple,\n  ...rest\n}: FilterItemSelectProps) {\n  let [value, setValue] = React.useState(data || '');\n\n  function handleSelect(e: React.ChangeEvent<HTMLSelectElement>) {\n    let value = e.target.value;\n    setValue(value);\n    onChange && onChange(value);\n  }\n\n  return (\n    <Select multiple={multiple} {...rest} value={value} onChange={handleSelect}>\n      <option value=\"\">Select option</option>\n      {options &&\n        options.map(({ label, value }, index) => (\n          <option key={index} value={value}>\n            {label}\n          </option>\n        ))}\n    </Select>\n  );\n}\n\nfunction FilterItemMultiSelect({\n  data,\n  options,\n  onChange,\n}: {\n  data: string[];\n  options?: SelectOptions[];\n  onChange(data: (string | number | undefined)[]): void;\n}) {\n  let [value, setValue] = React.useState<(string | number | undefined)[]>(\n    data || []\n  );\n\n  function handleSelect(data: (string | number | undefined)[]) {\n    setValue(data);\n    onChange && onChange(data);\n  }\n\n  return (\n    <Popover placement=\"bottom-start\">\n      <PopoverTrigger>\n        <Button\n          size=\"sm\"\n          isFullWidth\n          variant=\"outline\"\n          fontWeight=\"normal\"\n          borderRadius=\"0.125rem\"\n          rightIcon=\"chevron-down\"\n          _hover={{\n            bg: 'none',\n            borderColor: '#CBD5E0',\n          }}\n          _focus={{\n            borderColor: 'blue.500',\n            boxShadow: '0 0 0 1px #3182ce',\n          }}\n        >\n          {value.length} Selected\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent maxWidth=\"10rem\" zIndex={99999}>\n        <PopoverBody padding=\"0\">\n          <CheckboxGroup\n            size=\"sm\"\n            value={value}\n            variantColor=\"blue\"\n            onChange={handleSelect}\n          >\n            {options?.map((option, i) => (\n              <Checkbox\n                key={i}\n                width=\"100%\"\n                marginBottom=\"0\"\n                padding=\"0.4rem\"\n                paddingBottom=\"0\"\n                value={option.value}\n                isChecked={value.includes(option.value)}\n              >\n                {option.label}\n              </Checkbox>\n            ))}\n          </CheckboxGroup>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\nexport function FilterItemOperator({\n  data,\n  options,\n  onChange,\n  ...rest\n}: FilterItemSelectProps) {\n  return (\n    <FilterItemSelect\n      {...rest}\n      data={data}\n      options={options}\n      onChange={onChange}\n    />\n  );\n}\n\nexport function FilterItemConjuction({\n  data,\n  options,\n  onChange,\n  ...rest\n}: FilterItemSelectProps) {\n  return (\n    <FilterItemSelect\n      {...rest}\n      data={data}\n      options={options}\n      onChange={onChange}\n    />\n  );\n}\n\nexport function FilterItemInput({\n  value: valueProp,\n  onChange,\n  ...rest\n}: FilterItemInputProps) {\n  const [value, setValue] = React.useState(valueProp || '');\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    let value = e.target.value;\n    setValue(value);\n    onChange && onChange(value);\n  }\n\n  return (\n    <Input\n      {...rest}\n      value={value}\n      placeholder=\"value\"\n      onChange={handleChange}\n    />\n  );\n}\n\nexport const FilterItem = SortableElement(\n  ({\n    filter,\n    onRemove,\n    onChange,\n    properties,\n    isFirst = false,\n  }: FilterItemProps<FilterProps>) => {\n    const [filterValue, setFilterValue] = React.useState<FilterProps | null>(\n      filter || null\n    );\n    const [exactValue, setExactValue] = React.useState(false);\n\n    const [propertyOptions, setPropertyOptions] = React.useState<\n      SelectOptions[] | undefined\n    >();\n\n    const PROPERTIES =\n      properties &&\n      (properties.map(({ label, name }) => ({\n        label,\n        value: name,\n      })) as SelectOptions[]);\n\n    React.useEffect(() => {\n      if (filterValue) {\n        const { name } = filterValue;\n        const property = properties?.find((item) => item.name === name);\n        const options = property?.options?.map(({ name }) => ({\n          label: name,\n          value: name,\n        }));\n\n        setPropertyOptions(options);\n      }\n    }, [filterValue, properties]);\n\n    function handleConjuctionChange(conjunction: string) {\n      let data = { ...filterValue, conjunction };\n      setFilterValue(data);\n      onChange && onChange(data);\n    }\n\n    function handleOperatorChange(operator: string) {\n      let data = { ...filterValue, operator };\n      setFilterValue(data);\n      onChange && onChange(data);\n    }\n\n    function handleNameChange(name: string) {\n      const property = properties?.find((item) => item.name === name);\n      if (property) {\n        let data = {\n          ...filterValue,\n          name,\n          value: '',\n          columnID: property?.id,\n          operator:\n            PROPERTY_TYPE_OPERATORS[property.type.toLowerCase()][0].value,\n        };\n        setFilterValue(data);\n        onChange && onChange(data);\n      }\n    }\n\n    function handleInputChange(value: string) {\n      const data = { ...filterValue, value };\n      setFilterValue(data);\n      if (value === 'exact date') {\n        setExactValue(true);\n      } else {\n        onChange && onChange(data);\n      }\n    }\n\n    function handleMultiSelectChange(value: string[]) {\n      const data = { ...filterValue, value };\n      setFilterValue(data);\n      onChange && onChange(data);\n    }\n\n    function handleDatePickerChange(date: any) {\n      const value = format(date, 'dd-MM-yyyy');\n      const data = { ...filterValue, value };\n      setFilterValue(data);\n      onChange && onChange(data);\n    }\n\n    function getOperatorList() {\n      let operatorList: SelectOptions[] = [];\n      if (filterValue && filterValue.name) {\n        const propertyType =\n          properties &&\n          properties.find(({ name }) => name === filterValue.name);\n        const type = propertyType && propertyType.type.toLowerCase();\n        if (type) {\n          operatorList = PROPERTY_TYPE_OPERATORS[type];\n        }\n      }\n      return operatorList;\n    }\n\n    function renderFilterInputComponent() {\n      /**\n       * this method will handle rendering the sub-filters component and filter value\n       * component\n       *\n       * Also account for the date based filter scenarios where you don't have\n       * to show the filter value component\n       */\n      if (filterValue && filterValue.name) {\n        const propertyType =\n          properties &&\n          properties.find(({ name }) => name === filterValue.name);\n        const type = propertyType && propertyType.type.toLowerCase();\n        switch (type) {\n          case 'select':\n            return (\n              <FilterItemSelect\n                size=\"sm\"\n                options={propertyOptions}\n                onChange={handleInputChange}\n                data={filter && filter.value}\n              />\n            );\n\n          case 'multi select':\n            return (\n              <FilterItemMultiSelect\n                options={propertyOptions}\n                data={filter && filter.value}\n                onChange={handleMultiSelectChange}\n              />\n            );\n\n          case 'date':\n            return (\n              <Stack width=\"100%\" isInline alignItems=\"center\">\n                <Box width={filterValue.value ? '100%' : '50%'}>\n                  <FilterItemSelect\n                    size=\"sm\"\n                    onChange={handleInputChange}\n                    data={filter && filter.value}\n                    options={DATE_FIELD_SUB_FILTERS}\n                  />\n                </Box>\n                {(!filterValue.value || exactValue) && (\n                  <Box width=\"50%\">\n                    <DatePickerComponent\n                      size=\"sm\"\n                      showIcon={false}\n                      value={filter && filter.value}\n                      onDayChange={handleDatePickerChange}\n                      dayPickerProps={{ disabledDays: { before: new Date() } }}\n                    />\n                  </Box>\n                )}\n              </Stack>\n            );\n\n          default:\n            return (\n              <FilterItemInput\n                size=\"sm\"\n                onChange={handleInputChange}\n                value={filter && filter.value}\n              />\n            );\n        }\n      }\n    }\n\n    return (\n      <Stack\n        isInline\n        zIndex={100000000}\n        spacing=\"0.25rem\"\n        marginBottom=\"0.5rem\"\n      >\n        <Box>\n          <DragHandle />\n        </Box>\n        {!isFirst && (\n          <Box flex=\"1\">\n            <FilterItemConjuction\n              size=\"sm\"\n              options={FILTER_CONJUCTIONS}\n              onChange={handleConjuctionChange}\n              data={filter && filter.conjunction}\n            />\n          </Box>\n        )}\n        <Box flex=\"1\">\n          <FilterItemConjuction\n            size=\"sm\"\n            options={PROPERTIES}\n            onChange={handleNameChange}\n            data={filter && filter.name}\n          />\n        </Box>\n        <Box flex=\"1\">\n          <FilterItemOperator\n            size=\"sm\"\n            options={getOperatorList()}\n            onChange={handleOperatorChange}\n            data={filter && filter.operator}\n          />\n        </Box>\n        {!(\n          filterValue?.operator === 'empty' ||\n          filterValue?.operator === 'notEmpty'\n        ) && <Box flex=\"1\">{renderFilterInputComponent()}</Box>}\n        <Box>\n          <IconButton\n            size=\"xs\"\n            icon=\"close\"\n            fontSize=\"8px\"\n            variant=\"ghost\"\n            aria-label=\"ghost\"\n            onClick={onRemove}\n          />\n        </Box>\n      </Stack>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}