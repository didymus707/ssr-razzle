{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/components/messages/compose/Template.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Flex, Icon, Input, Modal, ModalCloseButton, ModalContent, ModalOverlay, PseudoBox, Stack } from '@chakra-ui/core';\nimport { getQuickReplies } from 'app/authenticated-app/inbox/inbox.service';\nimport { BodyText, Button, Heading3, SmallText } from 'app/components';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useQuery } from 'react-query';\nimport { useSelector } from 'react-redux';\nimport { selectOrganisationID } from '../../../../../unauthenticated-app/authentication';\nimport { parseTemplate, transformSenderToContact } from '../../../inbox.utils';\nimport { selectAddressBookByOrgIDAndCustomerID, selectColumnById, selectContactTable, selectCustomerByID } from '../../../slices';\nexport function Template({\n  isOpen,\n  setText,\n  contact_id,\n  setIsOpen,\n  sender_id,\n  setIsTemplateMode\n}) {\n  const [page] = React.useState(1);\n  const {\n    0: search,\n    1: setSearch\n  } = useState('');\n  let {\n    0: isOpened,\n    1: setIsOpened\n  } = useState(false);\n  const initialFocusRef = useRef();\n  const {\n    0: filteredTemplates,\n    1: setFilteredTemplates\n  } = useState([]);\n  const {\n    data\n  } = useQuery(['quick-replies', page], () => getQuickReplies({\n    page\n  }));\n  const isModalOpened = isOpen || isOpened;\n  const setIsModalOpened = setIsOpen || setIsOpened;\n  const contactTable = useSelector(selectContactTable);\n  const organisation_id = useSelector(selectOrganisationID) || '';\n  const sender = useSelector(state => selectCustomerByID(state, sender_id || ''));\n  const addressBook = useSelector(state => selectAddressBookByOrgIDAndCustomerID(state, {\n    organisation_id,\n    customer_id: sender_id\n  }));\n  const contact = useSelector(state => selectColumnById(state, contact_id || (addressBook === null || addressBook === void 0 ? void 0 : addressBook.contact_id) || ''));\n\n  const handleClose = () => {\n    setIsModalOpened(false);\n    setSearch('');\n  };\n\n  const handleClick = (template, subject) => {\n    handleClose();\n    let con = contact;\n\n    if (!con && contactTable && sender) {\n      const [, c] = transformSenderToContact(contactTable, sender);\n      con = c;\n    }\n\n    setIsTemplateMode === null || setIsTemplateMode === void 0 ? void 0 : setIsTemplateMode(true);\n    setText(parseTemplate(template || '', contactTable, con), true, subject);\n  };\n\n  const handleChange = value => {\n    var _data$quick_replies;\n\n    setSearch(value);\n    setFilteredTemplates(data === null || data === void 0 ? void 0 : (_data$quick_replies = data.quick_replies) === null || _data$quick_replies === void 0 ? void 0 : _data$quick_replies.map(reply => _objectSpread(_objectSpread({}, reply), {}, {\n      is_favourite: false\n    })).filter(({\n      name,\n      template\n    }) => {\n      var _template$subject, _template$content;\n\n      return name.toLowerCase().includes(value.toLowerCase()) || (template === null || template === void 0 ? void 0 : (_template$subject = template.subject) === null || _template$subject === void 0 ? void 0 : _template$subject.toLowerCase().includes(value.toLowerCase())) || (template === null || template === void 0 ? void 0 : (_template$content = template.content) === null || _template$content === void 0 ? void 0 : _template$content.toLowerCase().includes(value.toLowerCase()));\n    }));\n  };\n\n  useEffect(() => {\n    var _data$quick_replies2;\n\n    setFilteredTemplates(data === null || data === void 0 ? void 0 : (_data$quick_replies2 = data.quick_replies) === null || _data$quick_replies2 === void 0 ? void 0 : _data$quick_replies2.map(reply => _objectSpread(_objectSpread({}, reply), {}, {\n      is_favourite: false\n    })));\n  }, [data]);\n  return __jsx(React.Fragment, null, !setIsOpen && __jsx(Button, {\n    size: \"xs\",\n    variant: \"ghost\",\n    onClick: () => setIsModalOpened(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, __jsx(Icon, {\n    size: \"24px\",\n    name: \"inbox-compose-quote\",\n    color: \"gray.600\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  })), __jsx(Modal, {\n    isCentered: true,\n    size: \"xl\",\n    isOpen: isModalOpened // @ts-ignore\n    ,\n    initialFocusRef: initialFocusRef,\n    onClose: () => handleClose(),\n    closeOnOverlayClick: false,\n    scrollBehavior: \"inside\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }), __jsx(ModalContent, {\n    width: \"auto\",\n    paddingTop: \"2.5rem\",\n    borderRadius: \".3125rem\",\n    boxShadow: \"0px 0px 1px rgba(67, 90, 111, 0.47)\",\n    minWidth: ['300px', '400px', '567px', '567px'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, __jsx(ModalCloseButton, {\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }), __jsx(Flex, {\n    flexDirection: \"column\",\n    paddingX: \"1.875rem\",\n    paddingBottom: \"3.125rem\",\n    overflowY: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, __jsx(Heading3, {\n    color: \"gray.900\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, \"Quick Replies\"), __jsx(Box, {\n    marginTop: \"1.5rem\",\n    position: \"relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, __jsx(Input, {\n    value: search,\n    placeholder: \"Search Templates\",\n    borderRadius: \"2rem\",\n    backgroundColor: \"#F6FAFD\",\n    paddingY: \".625rem\",\n    paddingLeft: \"2.625rem\",\n    paddingRight: \"1rem\",\n    onChange: e => handleChange(e.target.value),\n    border: \"0.5px solid rgba(163, 177, 194, 0.35)\" // @ts-ignore\n    ,\n    ref: initialFocusRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 15\n    }\n  }), __jsx(Icon, {\n    size: \"1rem\",\n    name: \"search-2\",\n    position: \"absolute\",\n    top: \".75rem\",\n    left: \"1rem\",\n    zIndex: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 15\n    }\n  })), __jsx(Stack, {\n    flex: 1,\n    spacing: \".625rem\",\n    overflowY: \"auto\",\n    marginTop: \"1.875rem\",\n    marginX: \"-1.875rem\",\n    paddingX: \"1.875rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, (filteredTemplates || []).map(({\n    is_favourite,\n    name,\n    template,\n    id,\n    uuid\n  }) => __jsx(PseudoBox, {\n    key: uuid,\n    as: \"button\",\n    display: \"flex\",\n    borderRadius: \"5px\",\n    alignItems: \"flex-start\",\n    padding: \".75rem .625rem\",\n    border: \"1px solid rgba(213, 219, 230, 0.5)\",\n    onClick: () => handleClick(template.content, template.subject),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  }, __jsx(Icon, {\n    name: \"star\",\n    size: \"1rem\",\n    color: is_favourite ? '#F2C94C' : '#fff',\n    stroke: is_favourite ? undefined : '#828282',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 19\n    }\n  }), __jsx(Box, {\n    marginLeft: \".625rem\",\n    fontSize: \".875rem\",\n    lineHeight: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 19\n    }\n  }, __jsx(BodyText, {\n    textAlign: \"left\",\n    color: \"gray.900\",\n    marginBottom: \".75rem\",\n    fontWeight: \"bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 21\n    }\n  }, name), __jsx(SmallText, {\n    width: \"250px\",\n    textAlign: \"left\",\n    color: \"gray.500\",\n    overflow: \"hidden\",\n    whiteSpace: \"nowrap\",\n    style: {\n      textOverflow: 'ellipsis'\n    },\n    dangerouslySetInnerHTML: {\n      __html: template.content\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 21\n    }\n  })))))))));\n}","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/components/messages/compose/Template.tsx"],"names":["Box","Flex","Icon","Input","Modal","ModalCloseButton","ModalContent","ModalOverlay","PseudoBox","Stack","getQuickReplies","BodyText","Button","Heading3","SmallText","React","useEffect","useRef","useState","useQuery","useSelector","selectOrganisationID","parseTemplate","transformSenderToContact","selectAddressBookByOrgIDAndCustomerID","selectColumnById","selectContactTable","selectCustomerByID","Template","isOpen","setText","contact_id","setIsOpen","sender_id","setIsTemplateMode","page","search","setSearch","isOpened","setIsOpened","initialFocusRef","filteredTemplates","setFilteredTemplates","data","isModalOpened","setIsModalOpened","contactTable","organisation_id","sender","state","addressBook","customer_id","contact","handleClose","handleClick","template","subject","con","c","handleChange","value","quick_replies","map","reply","is_favourite","filter","name","toLowerCase","includes","content","e","target","id","uuid","undefined","textOverflow","__html"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Flex,\n  Icon,\n  Input,\n  Modal,\n  ModalCloseButton,\n  ModalContent,\n  ModalOverlay,\n  PseudoBox,\n  Stack,\n} from '@chakra-ui/core';\nimport { getQuickReplies } from 'app/authenticated-app/inbox/inbox.service';\nimport { BodyText, Button, Heading3, SmallText } from 'app/components';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useQuery } from 'react-query';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../../../../root';\nimport { selectOrganisationID } from '../../../../../unauthenticated-app/authentication';\nimport { QuickReplySchema } from '../../../inbox.types';\nimport { parseTemplate, transformSenderToContact } from '../../../inbox.utils';\nimport {\n  selectAddressBookByOrgIDAndCustomerID,\n  selectColumnById,\n  selectContactTable,\n  selectCustomerByID,\n} from '../../../slices';\n\ntype Template = QuickReplySchema & { is_favourite: boolean };\n\nexport function Template({\n  isOpen,\n  setText,\n  contact_id,\n  setIsOpen,\n  sender_id,\n  setIsTemplateMode,\n}: {\n  sender_id: string;\n  contact_id?: string;\n  isOpen?: boolean;\n  setIsOpen?: (v: boolean) => void;\n  setIsTemplateMode?: React.Dispatch<React.SetStateAction<boolean>>;\n  setText: (text: string, isTemplateMode?: boolean, subject?: string) => void;\n}) {\n  const [page] = React.useState(1);\n  const [search, setSearch] = useState('');\n  let [isOpened, setIsOpened] = useState(false);\n  const initialFocusRef = useRef<HTMLElement>();\n  const [filteredTemplates, setFilteredTemplates] = useState<Template[] | undefined>([]);\n\n  const { data } = useQuery<{ quick_replies: QuickReplySchema[] }, any>(\n    ['quick-replies', page],\n    () => getQuickReplies({ page }),\n  );\n\n  const isModalOpened = isOpen || isOpened;\n  const setIsModalOpened = setIsOpen || setIsOpened;\n\n  const contactTable = useSelector(selectContactTable);\n  const organisation_id = useSelector(selectOrganisationID) || '';\n  const sender = useSelector((state: RootState) => selectCustomerByID(state, sender_id || ''));\n  const addressBook = useSelector((state: RootState) =>\n    selectAddressBookByOrgIDAndCustomerID(state, { organisation_id, customer_id: sender_id }),\n  );\n  const contact = useSelector((state: RootState) =>\n    selectColumnById(state, contact_id || addressBook?.contact_id || ''),\n  );\n\n  const handleClose = () => {\n    setIsModalOpened(false);\n    setSearch('');\n  };\n\n  const handleClick = (template: string, subject?: string) => {\n    handleClose();\n    let con = contact;\n    if (!con && contactTable && sender) {\n      const [, c] = transformSenderToContact(contactTable, sender);\n      con = c;\n    }\n\n    setIsTemplateMode?.(true);\n    setText(parseTemplate(template || '', contactTable, con), true, subject);\n  };\n\n  const handleChange = (value: string) => {\n    setSearch(value);\n\n    setFilteredTemplates(\n      data?.quick_replies\n        ?.map(reply => ({ ...reply, is_favourite: false }))\n        .filter(\n          ({ name, template }) =>\n            name.toLowerCase().includes(value.toLowerCase()) ||\n            template?.subject?.toLowerCase().includes(value.toLowerCase()) ||\n            template?.content?.toLowerCase().includes(value.toLowerCase()),\n        ),\n    );\n  };\n\n  useEffect(() => {\n    setFilteredTemplates(data?.quick_replies?.map(reply => ({ ...reply, is_favourite: false })));\n  }, [data]);\n\n  return (\n    <>\n      {!setIsOpen && (\n        <Button size=\"xs\" variant=\"ghost\" onClick={() => setIsModalOpened(true)}>\n          <Icon size=\"24px\" name=\"inbox-compose-quote\" color=\"gray.600\" />\n        </Button>\n      )}\n\n      <Modal\n        isCentered\n        size=\"xl\"\n        isOpen={isModalOpened}\n        // @ts-ignore\n        initialFocusRef={initialFocusRef}\n        onClose={() => handleClose()}\n        closeOnOverlayClick={false}\n        scrollBehavior=\"inside\"\n      >\n        <ModalOverlay />\n        <ModalContent\n          width=\"auto\"\n          paddingTop=\"2.5rem\"\n          borderRadius=\".3125rem\"\n          boxShadow=\"0px 0px 1px rgba(67, 90, 111, 0.47)\"\n          minWidth={['300px', '400px', '567px', '567px']}\n        >\n          <ModalCloseButton size=\"sm\" />\n\n          <Flex\n            flexDirection=\"column\"\n            paddingX=\"1.875rem\"\n            paddingBottom=\"3.125rem\"\n            overflowY=\"hidden\"\n          >\n            <Heading3 color=\"gray.900\">Quick Replies</Heading3>\n\n            <Box marginTop=\"1.5rem\" position=\"relative\">\n              <Input\n                value={search}\n                placeholder=\"Search Templates\"\n                borderRadius=\"2rem\"\n                backgroundColor=\"#F6FAFD\"\n                paddingY=\".625rem\"\n                paddingLeft=\"2.625rem\"\n                paddingRight=\"1rem\"\n                onChange={(e: any) => handleChange(e.target.value)}\n                border=\"0.5px solid rgba(163, 177, 194, 0.35)\"\n                // @ts-ignore\n                ref={initialFocusRef}\n              />\n\n              <Icon\n                size=\"1rem\"\n                name=\"search-2\"\n                position=\"absolute\"\n                top=\".75rem\"\n                left=\"1rem\"\n                zIndex={2}\n              />\n            </Box>\n\n            <Stack\n              flex={1}\n              spacing=\".625rem\"\n              overflowY=\"auto\"\n              marginTop=\"1.875rem\"\n              marginX=\"-1.875rem\"\n              paddingX=\"1.875rem\"\n            >\n              {(filteredTemplates || []).map(({ is_favourite, name, template, id, uuid }) => (\n                <PseudoBox\n                  key={uuid}\n                  as=\"button\"\n                  display=\"flex\"\n                  borderRadius=\"5px\"\n                  alignItems=\"flex-start\"\n                  padding=\".75rem .625rem\"\n                  border=\"1px solid rgba(213, 219, 230, 0.5)\"\n                  onClick={() => handleClick(template.content, template.subject)}\n                >\n                  <Icon\n                    name=\"star\"\n                    size=\"1rem\"\n                    color={is_favourite ? '#F2C94C' : '#fff'}\n                    stroke={is_favourite ? undefined : '#828282'}\n                  />\n\n                  <Box marginLeft=\".625rem\" fontSize=\".875rem\" lineHeight=\"1rem\">\n                    <BodyText\n                      textAlign=\"left\"\n                      color=\"gray.900\"\n                      marginBottom=\".75rem\"\n                      fontWeight=\"bold\"\n                    >\n                      {name}\n                    </BodyText>\n\n                    <SmallText\n                      width=\"250px\"\n                      textAlign=\"left\"\n                      color=\"gray.500\"\n                      overflow=\"hidden\"\n                      whiteSpace=\"nowrap\"\n                      style={{ textOverflow: 'ellipsis' }}\n                      dangerouslySetInnerHTML={{ __html: template.content }}\n                    />\n                  </Box>\n                </PseudoBox>\n              ))}\n            </Stack>\n          </Flex>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}