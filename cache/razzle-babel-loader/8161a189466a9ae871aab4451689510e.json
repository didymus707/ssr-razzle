{"ast":null,"code":"const _excluded = [\"text\", \"setText\", \"channels\", \"showCompose\", \"twoWayPayload\", \"setShowCompose\", \"setActiveThread\", \"setActiveFilter\", \"setTwoWayPayload\"],\n      _excluded2 = [\"setSelected\", \"channels\"],\n      _excluded3 = [\"thread\", \"setText\", \"showCompose\", \"setReceiver\", \"twoWayPayload\", \"setShowCompose\", \"setTwoWayPayload\", \"setIsTemplateMode\", \"setContactSelected\"];\nvar _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/components/messages/ThreadStarter.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Box, Button, Flex, FormControl, FormErrorMessage, FormLabel, Icon, Input, PseudoBox, Stack, Text } from '@chakra-ui/core';\nimport { selectUserID } from 'app/unauthenticated-app/authentication';\nimport { parsePhoneNumberFromString } from 'libphonenumber-js/mobile';\nimport React, { useEffect, useState } from 'react';\nimport { useMemo } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { validateEmail } from 'utils';\nimport { HighlightableText, Menu, SmallText, SocialIcon, XSmallText } from '../../../../components';\nimport { selectContactList } from '../../../lists/lists.slice';\nimport { INBOX_INIT } from '../../inbox.data';\nimport { transformSenderToContact } from '../../inbox.utils';\nimport { searchContactList, selectColumnById, selectContactTable, selectThreadById } from '../../slices';\nimport { Template as TemplateModal } from './compose/Template';\nimport { ConversationThreadFooter } from './ConversationThreadFooter';\nexport function ThreadStarter(_ref) {\n  let {\n    text,\n    setText,\n    channels,\n    showCompose,\n    twoWayPayload,\n    setShowCompose,\n    setActiveThread,\n    setActiveFilter,\n    setTwoWayPayload\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  const history = useHistory();\n  const user_id = useSelector(selectUserID);\n  const {\n    0: receiver,\n    1: setReceiver\n  } = useState({});\n  const {\n    0: credential_id,\n    1: setCredentialId\n  } = useState('');\n  const {\n    0: isTemplateMode,\n    1: setIsTemplateMode\n  } = useState(false);\n  const {\n    0: sender,\n    1: setSender\n  } = useState();\n\n  const handleAcctSelected = value => {\n    const {\n      credential_id\n    } = value;\n    setSender(value);\n    setCredentialId(credential_id);\n    twoWayPayload && setTwoWayPayload(_objectSpread({}, twoWayPayload));\n  };\n\n  const handleContactSelect = payload => {\n    setReceiver({\n      platform_nick: payload.senderPlatformNick,\n      platform_name: payload.contactName\n    });\n  };\n\n  useEffect(() => {\n    return history.listen(() => {\n      setTwoWayPayload(_objectSpread(_objectSpread({}, twoWayPayload), {}, {\n        contactName: '',\n        contact_id: undefined,\n        senderPlatformNick: ''\n      }));\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n  const thread = useMemo(() => {\n    return {\n      sender,\n      receiver_id: user_id,\n      receiver: _objectSpread({\n        uuid: user_id\n      }, receiver)\n    };\n  }, [sender, user_id, receiver]);\n  return __jsx(Flex, _extends({\n    bg: \"white\",\n    overflowY: \"hidden\",\n    flexDirection: \"column\"\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }), __jsx(Flex, {\n    h: \"calc(100vh - 60px)\",\n    p: \"1rem\",\n    overflowY: \"hidden\",\n    flexDirection: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, __jsx(Header, {\n    channels: channels,\n    setSelectedAcct: handleAcctSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }), __jsx(Middle, {\n    flex: 1,\n    thread: thread,\n    setText: setText,\n    marginTop: \"2.8125rem\",\n    showCompose: showCompose,\n    setReceiver: setReceiver,\n    twoWayPayload: twoWayPayload,\n    setShowCompose: setShowCompose,\n    setIsTemplateMode: setIsTemplateMode,\n    setContactSelected: handleContactSelect,\n    setTwoWayPayload: v => setTwoWayPayload(_objectSpread(_objectSpread({}, twoWayPayload), v)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }), __jsx(ConversationThreadFooter, {\n    text: text //@ts-ignore\n    ,\n    thread: thread,\n    isTemplateMode: isTemplateMode,\n    setActiveFilter: setActiveFilter,\n    setActiveThread: setActiveThread,\n    setTwoWayPayload: setTwoWayPayload,\n    twoWayPayload: _objectSpread(_objectSpread({}, twoWayPayload), {}, {\n      credential_id\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  })));\n}\n\nfunction Account({\n  index,\n  channel,\n  selectedAcct,\n  onAccountChange\n}) {\n  const {\n    uuid: credential_id,\n    user\n  } = channel;\n  const {\n    channel_name,\n    platform_name,\n    platform_nick\n  } = user;\n  useEffect(() => {\n    if (!selectedAcct && index === 0) {\n      onAccountChange({\n        credential_id,\n        channel_name,\n        platform_name,\n        platform_nick\n      });\n    }\n  }, [channel_name, index, onAccountChange, platform_name, selectedAcct, credential_id, platform_nick]);\n  return __jsx(PseudoBox, {\n    p: \"0.5rem\",\n    as: \"button\",\n    tabIndex: 0,\n    width: \"100%\",\n    display: \"flex\",\n    cursor: \"pointer\",\n    alignItems: \"center\",\n    _hover: {\n      bg: '#F2F2F2',\n      cursor: 'pointer',\n      outline: 0,\n      border: '3px'\n    },\n    _focus: {\n      bg: '#F2F2F2',\n      outline: 0,\n      cursor: 'pointer',\n      border: '3px'\n    },\n    _active: {\n      bg: '#F2F2F2',\n      outline: 0,\n      cursor: 'pointer',\n      border: '3px'\n    },\n    onClick: () => onAccountChange({\n      credential_id,\n      channel_name,\n      platform_name,\n      platform_nick\n    }),\n    bg: (selectedAcct === null || selectedAcct === void 0 ? void 0 : selectedAcct.credential_id) === credential_id ? 'rgba(61, 80, 223, 0.05)' : 'initial',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }, __jsx(SocialIcon, {\n    which: channel_name,\n    size: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 11\n    }\n  })), __jsx(XSmallText, {\n    color: \"gray.900\",\n    fontWeight: \"medium\",\n    textTransform: \"uppercase\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, `${platform_name !== null && platform_name !== void 0 ? platform_name : ''}${platform_name && platform_name !== platform_nick ? ':' : ''}`), platform_name !== platform_nick && __jsx(XSmallText, {\n    color: \"gray.400\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }, platform_nick || '')));\n}\n\nfunction AccountPicker(_ref2) {\n  var _firstAccount$user, _ref3, _selectedAcct$platfor;\n\n  let {\n    setSelected,\n    channels\n  } = _ref2,\n      rest = _objectWithoutProperties(_ref2, _excluded2);\n\n  const {\n    0: selectedAcct,\n    1: setSelectedAcct\n  } = useState(null);\n  const [firstAccount] = channels !== null && channels !== void 0 ? channels : [];\n  const {\n    channel_name,\n    platform_name,\n    platform_nick\n  } = (_firstAccount$user = firstAccount === null || firstAccount === void 0 ? void 0 : firstAccount.user) !== null && _firstAccount$user !== void 0 ? _firstAccount$user : {};\n\n  const handleSelectAcct = value => {\n    setSelectedAcct(value);\n    setSelected(value);\n  };\n\n  useEffect(() => {\n    const onSelectAcct = value => {\n      setSelectedAcct(value);\n      setSelected(value);\n    };\n\n    if (!selectedAcct && firstAccount) {\n      onSelectAcct(_objectSpread(_objectSpread({}, firstAccount), {}, {\n        channel_name,\n        platform_nick,\n        platform_name,\n        credential_id: firstAccount.uuid\n      }));\n    }\n  }, [channel_name, firstAccount, platform_name, platform_nick, selectedAcct, setSelected]);\n\n  const renderItem = (channel, index) => {\n    return __jsx(Box, {\n      key: channel.uuid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 7\n      }\n    }, __jsx(Account, {\n      channel: channel,\n      index: index !== null && index !== void 0 ? index : 0,\n      selectedAcct: selectedAcct,\n      onAccountChange: handleSelectAcct,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return __jsx(Menu, {\n    menuListProps: {\n      width: 'auto'\n    },\n    renderItem: renderItem //TODO: Remove filter when endpoint for sending new message is available on other channels\n    ,\n    options: channels,\n    menuButtonProps: {\n      px: '0',\n      minW: 'unset',\n      children: __jsx(Stack, {\n        isInline: true,\n        alignItems: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }\n      }, (selectedAcct === null || selectedAcct === void 0 ? void 0 : selectedAcct.channel_name) && __jsx(Box, {\n        position: \"relative\",\n        top: \"-3px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 15\n        }\n      }, __jsx(SocialIcon, {\n        which: selectedAcct === null || selectedAcct === void 0 ? void 0 : selectedAcct.channel_name,\n        size: \"1rem\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 17\n        }\n      })), __jsx(SmallText, {\n        fontWeight: \"bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }\n      }, (_ref3 = (_selectedAcct$platfor = selectedAcct === null || selectedAcct === void 0 ? void 0 : selectedAcct.platform_name) !== null && _selectedAcct$platfor !== void 0 ? _selectedAcct$platfor : selectedAcct === null || selectedAcct === void 0 ? void 0 : selectedAcct.platform_nick) !== null && _ref3 !== void 0 ? _ref3 : 'Click to select'), __jsx(Icon, {\n        size: \"1rem\",\n        color: \"#333333\",\n        marginLeft: \".75rem\",\n        name: \"chevron-down\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }\n      }))\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 5\n    }\n  });\n}\n\nfunction Header({\n  setSelectedAcct,\n  channels\n}) {\n  return __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 5\n    }\n  }, __jsx(Text, {\n    fontWeight: 600,\n    fontSize: \".9375rem\",\n    lineHeight: \"22px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }\n  }, \"New Message from:\"), __jsx(AccountPicker, {\n    channels: channels,\n    marginLeft: \"1.125rem\",\n    setSelected: setSelectedAcct,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction ContactSearchResult({\n  setSelectedContact,\n  searchQuery,\n  matchedContacts\n}) {\n  if (matchedContacts.length === 0) {\n    return __jsx(Box, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 12\n      }\n    });\n  }\n\n  const searchText = (searchQuery === null || searchQuery === void 0 ? void 0 : searchQuery.replaceAll('+', '')) || '';\n  return __jsx(React.Fragment, null, __jsx(Text, {\n    color: \"#828282\",\n    fontWeight: 500,\n    lineHeight: \"16px\",\n    fontSize: \".6875rem\",\n    textTransform: \"uppercase\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }\n  }, \"matched contacts:\"), __jsx(Stack, {\n    flex: 1,\n    spacing: \"1rem\",\n    overflowY: \"auto\",\n    marginTop: \"1.25rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }\n  }, matchedContacts.map(({\n    key,\n    name,\n    nick\n  }, index) => __jsx(PseudoBox, {\n    key: key,\n    as: \"button\",\n    tabIndex: 0,\n    rounded: \"8px\",\n    display: \"flex\",\n    padding: \".25rem\",\n    cursor: \"pointer\",\n    alignItems: \"center\",\n    onClick: () => setSelectedContact(matchedContacts[index]),\n    _hover: {\n      bg: '#F2F2F2',\n      cursor: 'pointer',\n      outline: 0,\n      border: '3px'\n    },\n    _focus: {\n      bg: '#F2F2F2',\n      outline: 0,\n      cursor: 'pointer',\n      border: '3px'\n    },\n    _active: {\n      bg: '#F2F2F2',\n      outline: 0,\n      cursor: 'pointer',\n      border: '3px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 11\n    }\n  }, name && __jsx(HighlightableText, {\n    text: name,\n    highlight: searchText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 22\n    }\n  }), nick && __jsx(HighlightableText, {\n    text: nick,\n    color: name ? '#828282' : 'inherit',\n    highlight: searchText,\n    marginLeft: name ? '.5rem' : '0',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 15\n    }\n  })))));\n}\n\nfunction Template({\n  setText,\n  twoWayPayload,\n  setIsTemplateMode\n}) {\n  const params = useParams();\n  const currentThreadID = params.id;\n  let {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n  const queryClient = useQueryClient();\n  const data = queryClient.getQueryData(['quick-replies', 1]);\n  const thread = useSelector(state => selectThreadById(state, currentThreadID === 'start' ? '' : currentThreadID)) || INBOX_INIT.thread;\n  const contactTable = useSelector(selectContactTable);\n  const contact = useSelector(state => selectColumnById(state, (twoWayPayload === null || twoWayPayload === void 0 ? void 0 : twoWayPayload.contact_id) || ''));\n  let suggestedTemplates = data === null || data === void 0 ? void 0 : data.quick_replies.slice(0, 3);\n\n  if (suggestedTemplates && (suggestedTemplates === null || suggestedTemplates === void 0 ? void 0 : suggestedTemplates.length) > 0) {\n    suggestedTemplates === null || suggestedTemplates === void 0 ? void 0 : suggestedTemplates.push({\n      id: Date.now(),\n      uuid: 'seealltemplates',\n      name: 'See All Templates...',\n      template: {\n        content: 'seealltemplates',\n        subject: ''\n      }\n    });\n  }\n\n  const handleClick = template => {\n    if (template !== 'seealltemplates') {\n      let con = contact;\n\n      if (!con && contactTable && twoWayPayload) {\n        const {\n          contactName: platform_name,\n          senderPlatformNick: platform_nick\n        } = twoWayPayload;\n        const [, c] = transformSenderToContact(contactTable, _objectSpread(_objectSpread({}, INBOX_INIT.customer), {}, {\n          platform_nick,\n          channel: 'sms',\n          platform_name: platform_name || platform_nick\n        }));\n        con = c;\n      }\n\n      setIsTemplateMode === null || setIsTemplateMode === void 0 ? void 0 : setIsTemplateMode(true);\n      return setText(template); // return setText(parseTemplate(template || '', contactTable, con), true);\n    }\n\n    setIsOpen(true);\n  };\n\n  return (suggestedTemplates === null || suggestedTemplates === void 0 ? void 0 : suggestedTemplates.length) === 0 ? __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 5\n    }\n  }) : __jsx(Box, {\n    marginBottom: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 5\n    }\n  }, __jsx(Text, {\n    color: \"#828282\",\n    fontWeight: 500,\n    lineHeight: \"16px\",\n    fontSize: \".6875rem\",\n    textTransform: \"uppercase\",\n    letterSpacing: \"0.05rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }\n  }, \"Suggested templates:\"), __jsx(Stack, {\n    marginTop: \".75rem\",\n    spacing: \"1rem\",\n    isInline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 7\n    }\n  }, suggestedTemplates === null || suggestedTemplates === void 0 ? void 0 : suggestedTemplates.map(({\n    name,\n    id,\n    template\n  }) => __jsx(Button, {\n    key: id,\n    height: \"auto\",\n    minWidth: \"auto\",\n    paddingX: \".5rem\",\n    variant: \"outline\",\n    paddingY: \"0.25rem\",\n    variantColor: \"blue\",\n    _focus: {\n      boxShadow: 'none'\n    },\n    _active: {\n      boxShadow: 'none'\n    },\n    onClick: () => handleClick(template.content),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    marginLeft: \"0\",\n    fontSize: \".75rem\",\n    lineHeight: \"14px\",\n    fontWeight: \"normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 13\n    }\n  }, name)))), __jsx(TemplateModal, {\n    setText: setText,\n    isOpen: isOpen,\n    setIsOpen: setIsOpen,\n    sender_id: thread.sender_id,\n    contact_id: twoWayPayload === null || twoWayPayload === void 0 ? void 0 : twoWayPayload.contact_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Middle(_ref4) {\n  var _parsePhoneNumberFrom, _thread$sender;\n\n  let {\n    thread,\n    setText,\n    showCompose,\n    setReceiver,\n    twoWayPayload,\n    setShowCompose,\n    setTwoWayPayload,\n    setIsTemplateMode,\n    setContactSelected\n  } = _ref4,\n      rest = _objectWithoutProperties(_ref4, _excluded3);\n\n  const dispatch = useDispatch();\n  const contactList = useSelector(selectContactList); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  const {\n    0: sendToError,\n    1: setSendToError\n  } = useState('');\n  const {\n    0: filterContacts,\n    1: setFilterContacts\n  } = useState([]);\n  const isValidSendTo = validateEmail(twoWayPayload.senderPlatformNick) || ((_parsePhoneNumberFrom = parsePhoneNumberFromString(twoWayPayload.senderPlatformNick || '')) === null || _parsePhoneNumberFrom === void 0 ? void 0 : _parsePhoneNumberFrom.isValid());\n  const channel_name = thread === null || thread === void 0 ? void 0 : (_thread$sender = thread.sender) === null || _thread$sender === void 0 ? void 0 : _thread$sender.channel_name;\n\n  const getPlaceholder = () => {\n    if (channel_name && channel_name === 'email') {\n      return 'Enter name or email';\n    }\n\n    if (channel_name && (channel_name === 'phone' || channel_name.includes('whatsapp'))) {\n      return 'Enter name or phone number';\n    }\n\n    return 'Enter name';\n  };\n\n  const handleContactSelect = value => {\n    const {\n      name,\n      nick,\n      key\n    } = value;\n    const twoWayPayload = {\n      senderPlatformNick: nick,\n      contactName: name,\n      contact_id: key\n    };\n    setTwoWayPayload(twoWayPayload);\n    setContactSelected(twoWayPayload);\n    setFilterContacts([]);\n  };\n\n  const handleContactSearch = async value => {\n    var _parsePhoneNumberFrom2;\n\n    let newTwoWayPayload = {\n      senderPlatformNick: value\n    };\n    const c = (_parsePhoneNumberFrom2 = parsePhoneNumberFromString(value || '')) === null || _parsePhoneNumberFrom2 === void 0 ? void 0 : _parsePhoneNumberFrom2.isValid();\n\n    if (isValidSendTo && twoWayPayload.contact_id && !c) {\n      newTwoWayPayload = _objectSpread(_objectSpread({}, newTwoWayPayload), {}, {\n        contactName: '',\n        contact_id: undefined\n      });\n    } else if (c && filterContacts.length > 0) {\n      const [{\n        phone,\n        email,\n        id: key,\n        name\n      }] = filterContacts;\n\n      if (phone === value || email === value) {\n        newTwoWayPayload = _objectSpread(_objectSpread({}, newTwoWayPayload), {}, {\n          contactName: name,\n          contact_id: key\n        });\n      }\n    }\n\n    setReceiver({\n      platform_name: '',\n      platform_nick: value !== null && value !== void 0 ? value : ''\n    });\n    setTwoWayPayload(newTwoWayPayload);\n\n    if (!value) {\n      return setFilterContacts([]);\n    }\n\n    const fc = await dispatch(searchContactList({\n      page: 1,\n      limit: 20,\n      sorts: [],\n      filters: [],\n      query: value,\n      table_id: contactList.id\n    }));\n\n    if (searchContactList.fulfilled.match(fc)) {\n      const f = {};\n\n      for (let item of contactList.columns) {\n        f[item.id] = item.name;\n      }\n\n      const getKeyFunc = key => {\n        if (key.includes('phone')) {\n          return 'phone';\n        }\n\n        if (key.includes('email')) {\n          return 'email';\n        }\n\n        return key;\n      };\n\n      const newPayload = fc.payload.map(item => {\n        const columnsWithValues = {};\n        Object.keys(f).forEach(key => {\n          columnsWithValues[getKeyFunc(f[key])] = item.columns[key];\n        });\n        return _objectSpread(_objectSpread({}, item), columnsWithValues);\n      });\n      setFilterContacts(newPayload);\n    } else {\n      console.log(fc.error.message);\n    }\n  };\n\n  const formItems = [{\n    isRequired: true,\n    title: 'send to',\n    isReadOnly: false,\n    name: 'senderPlatformNick',\n    placeholder: getPlaceholder(),\n    onChange: e => handleContactSearch(e.target.value)\n  }];\n\n  if (isValidSendTo) {\n    formItems.push({\n      title: 'name',\n      isRequired: false,\n      placeholder: 'Name',\n      name: 'contactName',\n      isReadOnly: !!twoWayPayload.contact_id,\n      onChange: e => setTwoWayPayload({\n        contactName: e.target.value\n      })\n    });\n  }\n\n  return __jsx(Stack, _extends({}, rest, {\n    spacing: \"1.5625rem\",\n    overflowY: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 5\n    }\n  }), formItems.map(({\n    title,\n    placeholder,\n    name,\n    isRequired,\n    onChange,\n    isReadOnly\n  }) => __jsx(FormControl, {\n    key: name,\n    isRequired: isRequired,\n    isInvalid: name === 'sendTo' ? !!sendToError : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: title,\n    color: \"#828282\",\n    fontWeight: 500,\n    lineHeight: \"16px\",\n    fontSize: \".6875rem\",\n    textTransform: \"uppercase\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 11\n    }\n  }, title, \":\"), __jsx(Input, {\n    type: \"text\",\n    border: \"none\",\n    paddingLeft: \"0\",\n    borderRadius: \"0\",\n    fontWeight: 500,\n    lineHeight: \"34px\",\n    marginTop: \"1.25rem\",\n    onChange: onChange,\n    fontSize: \"1.6875rem\",\n    paddingBottom: \"1rem\",\n    paddingRight: \"0.75rem\",\n    isReadOnly: isReadOnly,\n    placeholder: placeholder,\n    value: twoWayPayload[name],\n    className: \"input-no-error-border\",\n    _focus: {\n      boxShadow: 'none',\n      borderColor: 'transparent',\n      borderBottom: '1px solid #E0E0E0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 577,\n      columnNumber: 11\n    }\n  }), name === 'sendTo' && sendToError && __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 48\n    }\n  }, sendToError))), __jsx(Flex, {\n    flex: 1,\n    overflowY: \"hidden\",\n    flexDirection: \"column\",\n    justifyContent: isValidSendTo ? 'flex-end' : 'flex-start',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 603,\n      columnNumber: 7\n    }\n  }, isValidSendTo ? __jsx(Template, {\n    setText: setText,\n    twoWayPayload: twoWayPayload,\n    setIsTemplateMode: setIsTemplateMode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 11\n    }\n  }) : __jsx(ContactSearchResult, {\n    searchQuery: twoWayPayload === null || twoWayPayload === void 0 ? void 0 : twoWayPayload.senderPlatformNick,\n    setSelectedContact: handleContactSelect,\n    matchedContacts: (filterContacts || []).filter(({\n      phone,\n      email\n    }) => channel_name === 'phone' && phone || channel_name === 'email' && email).map(({\n      id: key,\n      name,\n      phone,\n      email\n    }) => ({\n      key,\n      name,\n      nick: channel_name === 'phone' ? phone : email\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 11\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/components/messages/ThreadStarter.tsx"],"names":["Box","Button","Flex","FormControl","FormErrorMessage","FormLabel","Icon","Input","PseudoBox","Stack","Text","selectUserID","parsePhoneNumberFromString","React","useEffect","useState","useMemo","useQueryClient","useDispatch","useSelector","useHistory","useParams","validateEmail","HighlightableText","Menu","SmallText","SocialIcon","XSmallText","selectContactList","INBOX_INIT","transformSenderToContact","searchContactList","selectColumnById","selectContactTable","selectThreadById","Template","TemplateModal","ConversationThreadFooter","ThreadStarter","text","setText","channels","showCompose","twoWayPayload","setShowCompose","setActiveThread","setActiveFilter","setTwoWayPayload","rest","history","user_id","receiver","setReceiver","credential_id","setCredentialId","isTemplateMode","setIsTemplateMode","sender","setSender","handleAcctSelected","value","handleContactSelect","payload","platform_nick","senderPlatformNick","platform_name","contactName","listen","contact_id","undefined","thread","receiver_id","uuid","v","Account","index","channel","selectedAcct","onAccountChange","user","channel_name","bg","cursor","outline","border","AccountPicker","setSelected","setSelectedAcct","firstAccount","handleSelectAcct","onSelectAcct","renderItem","width","px","minW","children","Header","ContactSearchResult","setSelectedContact","searchQuery","matchedContacts","length","searchText","replaceAll","map","key","name","nick","params","currentThreadID","id","isOpen","setIsOpen","queryClient","data","getQueryData","state","contactTable","contact","suggestedTemplates","quick_replies","slice","push","Date","now","template","content","subject","handleClick","con","c","customer","boxShadow","sender_id","Middle","setContactSelected","dispatch","contactList","sendToError","setSendToError","filterContacts","setFilterContacts","isValidSendTo","isValid","getPlaceholder","includes","handleContactSearch","newTwoWayPayload","phone","email","fc","page","limit","sorts","filters","query","table_id","fulfilled","match","f","item","columns","getKeyFunc","newPayload","columnsWithValues","Object","keys","forEach","console","log","error","message","formItems","isRequired","title","isReadOnly","placeholder","onChange","e","target","borderColor","borderBottom","filter"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Icon,\n  Input,\n  PseudoBox,\n  Stack,\n  Text,\n} from '@chakra-ui/core';\nimport { selectUserID } from 'app/unauthenticated-app/authentication';\nimport { parsePhoneNumberFromString } from 'libphonenumber-js/mobile';\nimport React, { useEffect, useState } from 'react';\nimport { useMemo } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { validateEmail } from 'utils';\nimport { RootState } from '../../../../../root';\nimport { HighlightableText, Menu, SmallText, SocialIcon, XSmallText } from '../../../../components';\nimport { selectContactList } from '../../../lists/lists.slice';\nimport { TableContactOptions } from '../../../tables';\nimport { INBOX_INIT } from '../../inbox.data';\nimport { QuickReplySchema, ThreadSchema, ThreadStarterProps } from '../../inbox.types';\nimport { transformSenderToContact } from '../../inbox.utils';\nimport {\n  searchContactList,\n  selectColumnById,\n  selectContactTable,\n  selectThreadById,\n} from '../../slices';\nimport { Template as TemplateModal } from './compose/Template';\nimport { ConversationThreadFooter } from './ConversationThreadFooter';\n\nexport function ThreadStarter({\n  text,\n  setText,\n  channels,\n  showCompose,\n  twoWayPayload,\n  setShowCompose,\n  setActiveThread,\n  setActiveFilter,\n  setTwoWayPayload,\n  ...rest\n}: ThreadStarterProps) {\n  const history = useHistory();\n  const user_id = useSelector(selectUserID);\n  const [receiver, setReceiver] = useState({});\n  const [credential_id, setCredentialId] = useState('');\n  const [isTemplateMode, setIsTemplateMode] = useState(false);\n  const [sender, setSender] = useState<ThreadSchema['sender']>();\n\n  const handleAcctSelected = (value: any) => {\n    const { credential_id } = value;\n    setSender(value);\n    setCredentialId(credential_id);\n    twoWayPayload && setTwoWayPayload({ ...twoWayPayload });\n  };\n\n  const handleContactSelect = (payload: {\n    senderPlatformNick: string;\n    contact_id?: string;\n    contactName?: string;\n  }) => {\n    setReceiver({\n      platform_nick: payload.senderPlatformNick,\n      platform_name: payload.contactName,\n    });\n  };\n\n  useEffect(() => {\n    return history.listen(() => {\n      setTwoWayPayload({\n        ...twoWayPayload,\n        contactName: '',\n        contact_id: undefined,\n        senderPlatformNick: '',\n      });\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  const thread = useMemo(() => {\n    return {\n      sender,\n      receiver_id: user_id,\n      receiver: { uuid: user_id, ...receiver },\n    };\n  }, [sender, user_id, receiver]);\n\n  return (\n    <Flex bg=\"white\" overflowY=\"hidden\" flexDirection=\"column\" {...rest}>\n      <Flex h=\"calc(100vh - 60px)\" p=\"1rem\" overflowY=\"hidden\" flexDirection=\"column\">\n        <Header channels={channels} setSelectedAcct={handleAcctSelected} />\n\n        <Middle\n          flex={1}\n          thread={thread}\n          setText={setText}\n          marginTop=\"2.8125rem\"\n          showCompose={showCompose}\n          setReceiver={setReceiver}\n          twoWayPayload={twoWayPayload}\n          setShowCompose={setShowCompose}\n          setIsTemplateMode={setIsTemplateMode}\n          setContactSelected={handleContactSelect}\n          setTwoWayPayload={(v: any) => setTwoWayPayload({ ...twoWayPayload, ...v })}\n        />\n        <ConversationThreadFooter\n          text={text}\n          //@ts-ignore\n          thread={thread}\n          isTemplateMode={isTemplateMode}\n          setActiveFilter={setActiveFilter}\n          setActiveThread={setActiveThread}\n          setTwoWayPayload={setTwoWayPayload}\n          twoWayPayload={{ ...twoWayPayload, credential_id }}\n        />\n      </Flex>\n    </Flex>\n  );\n}\n\nfunction Account({\n  index,\n  channel,\n  selectedAcct,\n  onAccountChange,\n}: {\n  channel: any;\n  index: number;\n  selectedAcct: any;\n  onAccountChange: (v: any) => void;\n}) {\n  const { uuid: credential_id, user } = channel;\n  const { channel_name, platform_name, platform_nick } = user;\n\n  useEffect(() => {\n    if (!selectedAcct && index === 0) {\n      onAccountChange({ credential_id, channel_name, platform_name, platform_nick });\n    }\n  }, [\n    channel_name,\n    index,\n    onAccountChange,\n    platform_name,\n    selectedAcct,\n    credential_id,\n    platform_nick,\n  ]);\n\n  return (\n    <PseudoBox\n      p=\"0.5rem\"\n      as=\"button\"\n      tabIndex={0}\n      width=\"100%\"\n      display=\"flex\"\n      cursor=\"pointer\"\n      alignItems=\"center\"\n      _hover={{ bg: '#F2F2F2', cursor: 'pointer', outline: 0, border: '3px' }}\n      _focus={{ bg: '#F2F2F2', outline: 0, cursor: 'pointer', border: '3px' }}\n      _active={{ bg: '#F2F2F2', outline: 0, cursor: 'pointer', border: '3px' }}\n      onClick={() => onAccountChange({ credential_id, channel_name, platform_name, platform_nick })}\n      bg={selectedAcct?.credential_id === credential_id ? 'rgba(61, 80, 223, 0.05)' : 'initial'}\n    >\n      <Stack isInline alignItems=\"center\">\n        <Box>\n          <SocialIcon which={channel_name} size=\"1rem\" />\n        </Box>\n        <XSmallText color=\"gray.900\" fontWeight=\"medium\" textTransform=\"uppercase\">\n          {`${platform_name ?? ''}${platform_name && platform_name !== platform_nick ? ':' : ''}`}\n        </XSmallText>\n        {platform_name !== platform_nick && (\n          <XSmallText color=\"gray.400\">{platform_nick || ''}</XSmallText>\n        )}\n      </Stack>\n    </PseudoBox>\n  );\n}\n\nfunction AccountPicker({ setSelected, channels, ...rest }: any) {\n  const [selectedAcct, setSelectedAcct] = useState<any>(null);\n\n  const [firstAccount] = channels ?? [];\n\n  const { channel_name, platform_name, platform_nick } = firstAccount?.user ?? {};\n\n  const handleSelectAcct = (value: any) => {\n    setSelectedAcct(value);\n    setSelected(value);\n  };\n\n  useEffect(() => {\n    const onSelectAcct = (value: any) => {\n      setSelectedAcct(value);\n      setSelected(value);\n    };\n\n    if (!selectedAcct && firstAccount) {\n      onSelectAcct({\n        ...firstAccount,\n        channel_name,\n        platform_nick,\n        platform_name,\n        credential_id: firstAccount.uuid,\n      });\n    }\n  }, [channel_name, firstAccount, platform_name, platform_nick, selectedAcct, setSelected]);\n\n  const renderItem = (channel: any, index?: number) => {\n    return (\n      <Box key={channel.uuid}>\n        <Account\n          channel={channel}\n          index={index ?? 0}\n          selectedAcct={selectedAcct}\n          onAccountChange={handleSelectAcct}\n        />\n      </Box>\n    );\n  };\n\n  return (\n    <Menu\n      menuListProps={{\n        width: 'auto',\n      }}\n      renderItem={renderItem}\n      //TODO: Remove filter when endpoint for sending new message is available on other channels\n      options={channels}\n      menuButtonProps={{\n        px: '0',\n        minW: 'unset',\n        children: (\n          <Stack isInline alignItems=\"center\">\n            {selectedAcct?.channel_name && (\n              <Box position=\"relative\" top=\"-3px\">\n                <SocialIcon which={selectedAcct?.channel_name} size=\"1rem\" />\n              </Box>\n            )}\n            <SmallText fontWeight=\"bold\">\n              {selectedAcct?.platform_name ?? selectedAcct?.platform_nick ?? 'Click to select'}\n            </SmallText>\n            <Icon size=\"1rem\" color=\"#333333\" marginLeft=\".75rem\" name=\"chevron-down\" />\n          </Stack>\n        ),\n      }}\n    />\n  );\n}\n\nfunction Header({ setSelectedAcct, channels }: any) {\n  return (\n    <Stack isInline alignItems=\"center\">\n      <Text fontWeight={600} fontSize=\".9375rem\" lineHeight=\"22px\">\n        New Message from:\n      </Text>\n\n      <AccountPicker channels={channels} marginLeft=\"1.125rem\" setSelected={setSelectedAcct} />\n    </Stack>\n  );\n}\n\nfunction ContactSearchResult({ setSelectedContact, searchQuery, matchedContacts }: any) {\n  if (matchedContacts.length === 0) {\n    return <Box />;\n  }\n\n  const searchText = searchQuery?.replaceAll('+', '') || '';\n\n  return (\n    <>\n      <Text\n        color=\"#828282\"\n        fontWeight={500}\n        lineHeight=\"16px\"\n        fontSize=\".6875rem\"\n        textTransform=\"uppercase\"\n      >\n        matched contacts:\n      </Text>\n\n      <Stack flex={1} spacing=\"1rem\" overflowY=\"auto\" marginTop=\"1.25rem\">\n        {matchedContacts.map(({ key, name, nick }: any, index: number) => (\n          <PseudoBox\n            key={key}\n            as=\"button\"\n            tabIndex={0}\n            rounded=\"8px\"\n            display=\"flex\"\n            padding=\".25rem\"\n            cursor=\"pointer\"\n            alignItems=\"center\"\n            onClick={() => setSelectedContact(matchedContacts[index])}\n            _hover={{ bg: '#F2F2F2', cursor: 'pointer', outline: 0, border: '3px' }}\n            _focus={{ bg: '#F2F2F2', outline: 0, cursor: 'pointer', border: '3px' }}\n            _active={{ bg: '#F2F2F2', outline: 0, cursor: 'pointer', border: '3px' }}\n          >\n            {name && <HighlightableText text={name} highlight={searchText} />}\n            {nick && (\n              <HighlightableText\n                text={nick}\n                color={name ? '#828282' : 'inherit'}\n                highlight={searchText}\n                marginLeft={name ? '.5rem' : '0'}\n              />\n            )}\n          </PseudoBox>\n        ))}\n      </Stack>\n    </>\n  );\n}\n\nfunction Template({\n  setText,\n  twoWayPayload,\n  setIsTemplateMode,\n}: Pick<ThreadStarterProps, 'setText' | 'twoWayPayload'> & {\n  setIsTemplateMode: React.Dispatch<React.SetStateAction<boolean>>;\n}) {\n  const params = useParams<{ id: string }>();\n  const currentThreadID = params.id;\n\n  let [isOpen, setIsOpen] = useState(false);\n\n  const queryClient = useQueryClient();\n  const data: { quick_replies: QuickReplySchema[] } | undefined = queryClient.getQueryData([\n    'quick-replies',\n    1,\n  ]);\n\n  const thread =\n    useSelector((state: RootState) =>\n      selectThreadById(state, currentThreadID === 'start' ? '' : currentThreadID),\n    ) || INBOX_INIT.thread;\n  const contactTable = useSelector(selectContactTable);\n\n  const contact = useSelector((state: RootState) =>\n    selectColumnById(state, twoWayPayload?.contact_id || ''),\n  );\n\n  let suggestedTemplates = data?.quick_replies.slice(0, 3);\n\n  if (suggestedTemplates && suggestedTemplates?.length > 0) {\n    suggestedTemplates?.push({\n      id: Date.now(),\n      uuid: 'seealltemplates',\n      name: 'See All Templates...',\n      template: { content: 'seealltemplates', subject: '' },\n    });\n  }\n\n  const handleClick = (template: string) => {\n    if (template !== 'seealltemplates') {\n      let con = contact;\n      if (!con && contactTable && twoWayPayload) {\n        const { contactName: platform_name, senderPlatformNick: platform_nick } = twoWayPayload;\n        const [, c] = transformSenderToContact(contactTable, {\n          ...INBOX_INIT.customer,\n          platform_nick,\n          channel: 'sms',\n          platform_name: platform_name || platform_nick,\n        });\n        con = c;\n      }\n\n      setIsTemplateMode?.(true);\n\n      return setText(template);\n      // return setText(parseTemplate(template || '', contactTable, con), true);\n    }\n\n    setIsOpen(true);\n  };\n\n  return suggestedTemplates?.length === 0 ? (\n    <Box />\n  ) : (\n    <Box marginBottom=\"0.5rem\">\n      <Text\n        color=\"#828282\"\n        fontWeight={500}\n        lineHeight=\"16px\"\n        fontSize=\".6875rem\"\n        textTransform=\"uppercase\"\n        letterSpacing=\"0.05rem\"\n      >\n        Suggested templates:\n      </Text>\n\n      <Stack marginTop=\".75rem\" spacing=\"1rem\" isInline>\n        {suggestedTemplates?.map(({ name, id, template }) => (\n          <Button\n            key={id}\n            height=\"auto\"\n            minWidth=\"auto\"\n            paddingX=\".5rem\"\n            variant=\"outline\"\n            paddingY=\"0.25rem\"\n            variantColor=\"blue\"\n            _focus={{ boxShadow: 'none' }}\n            _active={{ boxShadow: 'none' }}\n            onClick={() => handleClick(template.content)}\n          >\n            <Text marginLeft=\"0\" fontSize=\".75rem\" lineHeight=\"14px\" fontWeight=\"normal\">\n              {name}\n            </Text>\n          </Button>\n        ))}\n      </Stack>\n\n      <TemplateModal\n        setText={setText}\n        isOpen={isOpen}\n        setIsOpen={setIsOpen}\n        sender_id={thread.sender_id}\n        contact_id={twoWayPayload?.contact_id}\n      />\n    </Box>\n  );\n}\n\nfunction Middle({\n  thread,\n  setText,\n  showCompose,\n  setReceiver,\n  twoWayPayload,\n  setShowCompose,\n  setTwoWayPayload,\n  setIsTemplateMode,\n  setContactSelected,\n  ...rest\n}: any) {\n  const dispatch = useDispatch();\n  const contactList = useSelector(selectContactList);\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [sendToError, setSendToError] = useState('');\n  const [filterContacts, setFilterContacts] = useState<TableContactOptions[]>([]);\n\n  const isValidSendTo =\n    validateEmail(twoWayPayload.senderPlatformNick) ||\n    parsePhoneNumberFromString(twoWayPayload.senderPlatformNick || '')?.isValid();\n  const channel_name = thread?.sender?.channel_name;\n\n  const getPlaceholder = () => {\n    if (channel_name && channel_name === 'email') {\n      return 'Enter name or email';\n    }\n    if (channel_name && (channel_name === 'phone' || channel_name.includes('whatsapp'))) {\n      return 'Enter name or phone number';\n    }\n    return 'Enter name';\n  };\n\n  const handleContactSelect = (value: any) => {\n    const { name, nick, key } = value;\n    const twoWayPayload = {\n      senderPlatformNick: nick,\n      contactName: name,\n      contact_id: key,\n    };\n    setTwoWayPayload(twoWayPayload);\n    setContactSelected(twoWayPayload);\n    setFilterContacts([]);\n  };\n\n  const handleContactSearch = async (value: string) => {\n    let newTwoWayPayload: any = { senderPlatformNick: value };\n    const c = parsePhoneNumberFromString(value || '')?.isValid();\n\n    if (isValidSendTo && twoWayPayload.contact_id && !c) {\n      newTwoWayPayload = { ...newTwoWayPayload, contactName: '', contact_id: undefined };\n    } else if (c && filterContacts.length > 0) {\n      const [{ phone, email, id: key, name }] = filterContacts;\n      if (phone === value || email === value) {\n        newTwoWayPayload = { ...newTwoWayPayload, contactName: name, contact_id: key };\n      }\n    }\n\n    setReceiver({\n      platform_name: '',\n      platform_nick: value ?? '',\n    });\n    setTwoWayPayload(newTwoWayPayload);\n\n    if (!value) {\n      return setFilterContacts([]);\n    }\n\n    const fc: any = await dispatch(\n      searchContactList({\n        page: 1,\n        limit: 20,\n        sorts: [],\n        filters: [],\n        query: value,\n        table_id: contactList.id,\n      }),\n    );\n    if (searchContactList.fulfilled.match(fc)) {\n      const f: { [key: string]: string } = {};\n      for (let item of contactList.columns) {\n        f[item.id] = item.name;\n      }\n\n      const getKeyFunc = (key: string) => {\n        if (key.includes('phone')) {\n          return 'phone';\n        }\n        if (key.includes('email')) {\n          return 'email';\n        }\n        return key;\n      };\n\n      const newPayload = fc.payload.map((item: any) => {\n        const columnsWithValues: { [key: string]: any } = {};\n        Object.keys(f).forEach(key => {\n          columnsWithValues[getKeyFunc(f[key])] = item.columns[key];\n        });\n        return { ...item, ...columnsWithValues };\n      });\n      setFilterContacts(newPayload);\n    } else {\n      console.log(fc.error.message);\n    }\n  };\n\n  const formItems = [\n    {\n      isRequired: true,\n      title: 'send to',\n      isReadOnly: false,\n      name: 'senderPlatformNick',\n      placeholder: getPlaceholder(),\n      onChange: (e: any) => handleContactSearch(e.target.value),\n    },\n  ];\n\n  if (isValidSendTo) {\n    formItems.push({\n      title: 'name',\n      isRequired: false,\n      placeholder: 'Name',\n      name: 'contactName',\n      isReadOnly: !!twoWayPayload.contact_id,\n      onChange: (e: any) => setTwoWayPayload({ contactName: e.target.value }),\n    });\n  }\n\n  return (\n    <Stack {...rest} spacing=\"1.5625rem\" overflowY=\"hidden\">\n      {formItems.map(({ title, placeholder, name, isRequired, onChange, isReadOnly }) => (\n        <FormControl\n          key={name}\n          isRequired={isRequired}\n          isInvalid={name === 'sendTo' ? !!sendToError : undefined}\n        >\n          <FormLabel\n            htmlFor={title}\n            color=\"#828282\"\n            fontWeight={500}\n            lineHeight=\"16px\"\n            fontSize=\".6875rem\"\n            textTransform=\"uppercase\"\n          >\n            {title}:\n          </FormLabel>\n\n          <Input\n            type=\"text\"\n            border=\"none\"\n            paddingLeft=\"0\"\n            borderRadius=\"0\"\n            fontWeight={500}\n            lineHeight=\"34px\"\n            marginTop=\"1.25rem\"\n            onChange={onChange}\n            fontSize=\"1.6875rem\"\n            paddingBottom=\"1rem\"\n            paddingRight=\"0.75rem\"\n            isReadOnly={isReadOnly}\n            placeholder={placeholder}\n            value={twoWayPayload[name]}\n            className=\"input-no-error-border\"\n            _focus={{\n              boxShadow: 'none',\n              borderColor: 'transparent',\n              borderBottom: '1px solid #E0E0E0',\n            }}\n          />\n          {name === 'sendTo' && sendToError && <FormErrorMessage>{sendToError}</FormErrorMessage>}\n        </FormControl>\n      ))}\n\n      <Flex\n        flex={1}\n        overflowY=\"hidden\"\n        flexDirection=\"column\"\n        justifyContent={isValidSendTo ? 'flex-end' : 'flex-start'}\n      >\n        {isValidSendTo ? (\n          <Template\n            setText={setText}\n            twoWayPayload={twoWayPayload}\n            setIsTemplateMode={setIsTemplateMode}\n          />\n        ) : (\n          <ContactSearchResult\n            searchQuery={twoWayPayload?.senderPlatformNick}\n            setSelectedContact={handleContactSelect}\n            matchedContacts={(filterContacts || [])\n              //TODO: Remove filter when endpoint for filtering contacts is available\n              .filter(\n                ({ phone, email }) =>\n                  (channel_name === 'phone' && phone) || (channel_name === 'email' && email),\n              )\n              .map(({ id: key, name, phone, email }) => ({\n                key,\n                name,\n                nick: channel_name === 'phone' ? phone : email,\n              }))}\n          />\n        )}\n      </Flex>\n    </Stack>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}