{"ast":null,"code":"import { buildPaymentURL, client } from '../../../../utils';\nimport { setManagedAccountData, setManagedAccountLoading, setWalletData, setManagedAccountTransactionsLoading, setManagedAccountTransactionsData } from '../reducers';\nimport { sendAmplitudeData } from '../../../../utils/amplitude';\nconst initial_meta = {\n  page: 0,\n  per_page: 10,\n  count_total: 0,\n  page_total: 1,\n  prev_page: false,\n  next_page: true\n};\nexport const fetchManagedAccount = () => async dispatch => {\n  dispatch(setManagedAccountLoading(true));\n\n  try {\n    const response = await client('', {\n      url: buildPaymentURL(`/bank_account/managed/`),\n      method: 'GET'\n    });\n    dispatch(setManagedAccountData({\n      data: response.data\n    }));\n    dispatch(setManagedAccountLoading(false));\n    return response.data;\n  } catch (e) {\n    dispatch(setManagedAccountLoading(false));\n    return null;\n  }\n};\nexport const requestCreateManagedAccount = () => async () => {\n  try {\n    const response = await client('', {\n      url: buildPaymentURL('/bank_account/managed/request'),\n      method: 'POST'\n    });\n    return response.data;\n  } catch (e) {\n    return null;\n  }\n};\nexport const validateCreateManagedAccount = (transaction_ref, otp) => async dispatch => {\n  try {\n    const payload = {\n      transaction_ref,\n      otp\n    };\n    const response = await client('', {\n      url: buildPaymentURL('/bank_account/managed/validate'),\n      method: 'POST',\n      data: payload\n    });\n    const updated_wallet_payload = {\n      payment_setup_status: 'completed',\n      managed_bank_account_id: response.data['id']\n    };\n    dispatch(setWalletData(updated_wallet_payload));\n    dispatch(setManagedAccountData({\n      data: response.data\n    }));\n    return response.data;\n  } catch (e) {\n    return null;\n  }\n};\nexport const fetchManagedAccountTransactions = (page = 1, trx_type = 'all', search_query = '', date_range = {\n  from: null,\n  to: null,\n  on: null\n}) => async dispatch => {\n  dispatch(setManagedAccountTransactionsLoading(true));\n  dispatch(resetManagedAccountTransactionsData());\n\n  try {\n    const params = {\n      page,\n      per_page: 15,\n      query: search_query,\n      trx_type\n    };\n    if (date_range['from']) params['date_from'] = date_range['from'];\n    if (date_range['to']) params['date_to'] = date_range['to'];\n    if (date_range['on']) params['date_on'] = date_range['on'];\n    const response = await client('', {\n      url: buildPaymentURL(`/bank_account/managed/transactions`),\n      method: 'GET',\n      params\n    });\n    const {\n      meta\n    } = response;\n    const data = {};\n    const by_id = [];\n    response.data.forEach(i => {\n      data[i.id] = i;\n      if (!by_id.includes(i.id)) by_id.push(i.id);\n    });\n    dispatch(setManagedAccountTransactionsData({\n      data,\n      by_id,\n      meta\n    }));\n    dispatch(setManagedAccountTransactionsLoading(false));\n    return response['data'];\n  } catch (e) {\n    dispatch(setManagedAccountTransactionsLoading(false));\n    return null;\n  }\n};\nexport const resetManagedAccountTransactionsData = () => async dispatch => {\n  dispatch(setManagedAccountTransactionsData({\n    data: {},\n    by_id: [],\n    meta: initial_meta\n  }));\n};\nexport const transferFunds = payload => async dispatch => {\n  sendAmplitudeData('transferFunds');\n\n  try {\n    const response = await client('', {\n      url: buildPaymentURL('/bank_account/managed/transfer'),\n      method: 'POST',\n      data: payload\n    });\n    dispatch(fetchManagedAccount());\n    return response.data;\n  } catch (e) {\n    return null;\n  }\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/payments/thunks/managed_account.ts"],"names":["buildPaymentURL","client","setManagedAccountData","setManagedAccountLoading","setWalletData","setManagedAccountTransactionsLoading","setManagedAccountTransactionsData","sendAmplitudeData","initial_meta","page","per_page","count_total","page_total","prev_page","next_page","fetchManagedAccount","dispatch","response","url","method","data","e","requestCreateManagedAccount","validateCreateManagedAccount","transaction_ref","otp","payload","updated_wallet_payload","payment_setup_status","managed_bank_account_id","fetchManagedAccountTransactions","trx_type","search_query","date_range","from","to","on","resetManagedAccountTransactionsData","params","query","meta","by_id","forEach","i","id","includes","push","transferFunds"],"mappings":"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","sourcesContent":["import { buildPaymentURL, client } from '../../../../utils';\nimport {\n  setManagedAccountData,\n  setManagedAccountLoading,\n  setWalletData,\n  setManagedAccountTransactionsLoading,\n  setManagedAccountTransactionsData,\n} from '../reducers';\nimport { AppThunk } from '../../../../root';\nimport { ManagedAccountTransaction, Meta } from '../payments.types';\nimport { sendAmplitudeData } from '../../../../utils/amplitude';\n\nconst initial_meta: Meta = {\n  page: 0,\n  per_page: 10,\n  count_total: 0,\n  page_total: 1,\n  prev_page: false,\n  next_page: true,\n};\n\nexport const fetchManagedAccount = (): AppThunk => async dispatch => {\n  dispatch(setManagedAccountLoading(true));\n  try {\n    const response = await client('', {\n      url: buildPaymentURL(`/bank_account/managed/`),\n      method: 'GET',\n    });\n    dispatch(setManagedAccountData({ data: response.data }));\n    dispatch(setManagedAccountLoading(false));\n    return response.data;\n  } catch (e) {\n    dispatch(setManagedAccountLoading(false));\n    return null;\n  }\n};\n\nexport const requestCreateManagedAccount = (): AppThunk => async () => {\n  try {\n    const response = await client('', {\n      url: buildPaymentURL('/bank_account/managed/request'),\n      method: 'POST',\n    });\n    return response.data;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const validateCreateManagedAccount = (\n  transaction_ref: string,\n  otp: string,\n): AppThunk => async dispatch => {\n  try {\n    const payload = { transaction_ref, otp };\n    const response = await client('', {\n      url: buildPaymentURL('/bank_account/managed/validate'),\n      method: 'POST',\n      data: payload,\n    });\n\n    const updated_wallet_payload = {\n      payment_setup_status: 'completed',\n      managed_bank_account_id: response.data['id'],\n    };\n\n    dispatch(setWalletData(updated_wallet_payload));\n    dispatch(setManagedAccountData({ data: response.data }));\n    return response.data;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const fetchManagedAccountTransactions = (\n  page = 1,\n  trx_type = 'all',\n  search_query = '',\n  date_range = { from: null, to: null, on: null },\n): AppThunk => async dispatch => {\n  dispatch(setManagedAccountTransactionsLoading(true));\n  dispatch(resetManagedAccountTransactionsData());\n\n  try {\n    const params: { [key: string]: any } = {\n      page,\n      per_page: 15,\n      query: search_query,\n      trx_type,\n    };\n\n    if (date_range['from']) params['date_from'] = date_range['from'];\n    if (date_range['to']) params['date_to'] = date_range['to'];\n    if (date_range['on']) params['date_on'] = date_range['on'];\n\n    const response = await client('', {\n      url: buildPaymentURL(`/bank_account/managed/transactions`),\n      method: 'GET',\n      params,\n    });\n\n    const { meta } = response;\n    const data: { [key: string]: ManagedAccountTransaction } = {};\n    const by_id: string[] = [];\n\n    response.data.forEach((i: ManagedAccountTransaction) => {\n      data[i.id] = i;\n      if (!by_id.includes(i.id)) by_id.push(i.id);\n    });\n\n    dispatch(setManagedAccountTransactionsData({ data, by_id, meta }));\n    dispatch(setManagedAccountTransactionsLoading(false));\n    return response['data'];\n  } catch (e) {\n    dispatch(setManagedAccountTransactionsLoading(false));\n    return null;\n  }\n};\n\nexport const resetManagedAccountTransactionsData = (): AppThunk => async dispatch => {\n  dispatch(setManagedAccountTransactionsData({ data: {}, by_id: [], meta: initial_meta }));\n};\n\nexport const transferFunds = (payload: {\n  account_number: string;\n  bank_code: string;\n  bank_name: string;\n  amount: number;\n  save_beneficiary: boolean;\n}): AppThunk => async dispatch => {\n  sendAmplitudeData('transferFunds');\n  try {\n    const response = await client('', {\n      url: buildPaymentURL('/bank_account/managed/transfer'),\n      method: 'POST',\n      data: payload,\n    });\n    dispatch(fetchManagedAccount());\n    return response.data;\n  } catch (e) {\n    return null;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}