{"ast":null,"code":"import _objectSpread from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/payments/component/payments/components/payment-requests/filter-popover/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Button, Select } from 'app/components';\nimport { Popover, PopoverTrigger, PopoverContent, PopoverBody, PopoverArrow } from '@chakra-ui/core';\nimport { Box, Divider, useDisclosure } from '@chakra-ui/core/dist';\nimport { DateFieldComponent } from '../../../../../../lists/components/cell-properties';\nimport moment from 'moment';\nexport const FilterPopover = props => {\n  const {\n    0: selectedOption,\n    1: setSelectedOption\n  } = useState('all');\n  const {\n    0: tempValue,\n    1: setTempValue\n  } = useState({\n    value: null,\n    from: null,\n    to: null\n  });\n  const {\n    isOpen,\n    onClose,\n    onOpen\n  } = useDisclosure();\n  const inputProps = {\n    size: 'sm',\n    height: '30px'\n  };\n\n  const handleReset = () => {\n    setSelectedOption('all');\n    setTempValue({\n      value: null,\n      from: null,\n      to: null\n    });\n    props.handleDateRangeChange({\n      from: null,\n      to: null,\n      on: null\n    });\n    onClose();\n  };\n\n  const dateFormat = 'YYYY-MM-DD';\n\n  const applyFilter = () => {\n    if (selectedOption === 'all') {\n      props.handleDateRangeChange({\n        from: null,\n        to: null\n      });\n    } else if (selectedOption === 'today') {\n      const date = moment().format('YYYY-MM-DD');\n      props.handleDateRangeChange({\n        on: date\n      });\n    } else if (selectedOption === 'day') {\n      let date = null;\n      if (tempValue.value) date = moment(tempValue.value).format(dateFormat);\n      props.handleDateRangeChange({\n        on: date\n      });\n    } else if (selectedOption === 'range') {\n      let from = null;\n      if (tempValue.from) from = moment(tempValue.from).format(dateFormat);\n      let to = null;\n      if (tempValue.to) to = moment(tempValue.to).format(dateFormat);\n      props.handleDateRangeChange({\n        from,\n        to\n      });\n    }\n\n    onClose();\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Popover, {\n    isOpen,\n    onClose,\n    onOpen,\n    closeOnBlur: true,\n    closeOnEsc: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, __jsx(PopoverTrigger, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    variant: \"ghost\",\n    color: props.filterActive ? 'green' : '#4f4f4f',\n    fontWeight: \"500\",\n    size: \"xs\",\n    backgroundColor: props.filterActive ? '#c3f7c3' : 'inherit' // @ts-ignore\n    ,\n    leftIcon: \"filter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, \"Filters\")), __jsx(PopoverContent, {\n    zIndex: 4,\n    width: \"250px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, __jsx(PopoverArrow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }), __jsx(PopoverBody, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    padding: \"1rem 0.75rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    mb: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    mb: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 15\n    }\n  }, \"Date Period\"), __jsx(Select, {\n    label: \"\",\n    size: \"sm\",\n    height: \"30px\",\n    onChange: event => {\n      setTempValue({\n        value: null,\n        from: null,\n        to: null\n      });\n      setSelectedOption(event.target.value);\n    },\n    value: selectedOption,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, __jsx(\"option\", {\n    value: \"all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, \"All Time\"), __jsx(\"option\", {\n    value: \"today\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, \"Today\"), __jsx(\"option\", {\n    value: \"day\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, \"Specific day\"), __jsx(\"option\", {\n    value: \"range\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, \"Date range\"))), selectedOption === 'day' && __jsx(Box, {\n    my: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    mb: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, \"Choose a day\"), __jsx(DateFieldComponent, {\n    value: tempValue.value,\n    inputProps: _objectSpread({}, inputProps),\n    updateCellValue: value => setTempValue({\n      value,\n      from: null,\n      to: null\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  })), selectedOption === 'range' && __jsx(Box, {\n    my: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    mb: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }, \"Choose range\"), __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, __jsx(DateFieldComponent, {\n    value: tempValue.from,\n    inputProps: _objectSpread(_objectSpread({}, inputProps), {}, {\n      width: '97.5%',\n      placeholder: 'From'\n    }),\n    updateCellValue: value => setTempValue(_objectSpread(_objectSpread({}, tempValue), {}, {\n      from: value\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 19\n    }\n  }), __jsx(DateFieldComponent, {\n    value: tempValue.to,\n    inputProps: _objectSpread(_objectSpread({}, inputProps), {}, {\n      width: '97.5%',\n      placeholder: 'To'\n    }),\n    updateCellValue: value => setTempValue(_objectSpread(_objectSpread({}, tempValue), {}, {\n      to: value\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 19\n    }\n  }))), __jsx(Divider, {\n    width: \"100%\",\n    my: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }), __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    size: \"sm\",\n    variant: \"outline\",\n    fontWeight: \"500\",\n    onClick: handleReset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 15\n    }\n  }, \"Reset\"), __jsx(Button, {\n    size: \"sm\",\n    variant: \"solid\",\n    variantColor: \"green\",\n    fontWeight: \"500\",\n    onClick: applyFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  }, \"Filter\"))))));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/payments/component/payments/components/payment-requests/filter-popover/index.tsx"],"names":["React","useState","Button","Select","Popover","PopoverTrigger","PopoverContent","PopoverBody","PopoverArrow","Box","Divider","useDisclosure","DateFieldComponent","moment","FilterPopover","props","selectedOption","setSelectedOption","tempValue","setTempValue","value","from","to","isOpen","onClose","onOpen","inputProps","size","height","handleReset","handleDateRangeChange","on","dateFormat","applyFilter","date","format","closeOnBlur","closeOnEsc","filterActive","event","target","width","placeholder"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Select } from 'app/components';\nimport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverBody,\n  PopoverArrow,\n} from '@chakra-ui/core';\nimport { Box, Divider, useDisclosure } from '@chakra-ui/core/dist';\nimport { DateFieldComponent } from '../../../../../../lists/components/cell-properties';\nimport moment from 'moment';\n\ninterface Props {\n  filterActive: boolean;\n  handleDateRangeChange: Function;\n}\n\nexport const FilterPopover = (props: Props) => {\n  const [selectedOption, setSelectedOption] = useState('all');\n  const [tempValue, setTempValue] = useState({\n    value: null,\n    from: null,\n    to: null,\n  });\n\n  const { isOpen, onClose, onOpen } = useDisclosure();\n\n  const inputProps = {\n    size: 'sm',\n    height: '30px',\n  };\n\n  const handleReset = () => {\n    setSelectedOption('all');\n    setTempValue({\n      value: null,\n      from: null,\n      to: null,\n    });\n    props.handleDateRangeChange({ from: null, to: null, on: null });\n    onClose();\n  };\n\n  const dateFormat = 'YYYY-MM-DD';\n\n  const applyFilter = () => {\n    if (selectedOption === 'all') {\n      props.handleDateRangeChange({ from: null, to: null });\n    } else if (selectedOption === 'today') {\n      const date = moment().format('YYYY-MM-DD');\n      props.handleDateRangeChange({ on: date });\n    } else if (selectedOption === 'day') {\n      let date = null;\n      if (tempValue.value) date = moment(tempValue.value).format(dateFormat);\n      props.handleDateRangeChange({ on: date });\n    } else if (selectedOption === 'range') {\n      let from = null;\n      if (tempValue.from) from = moment(tempValue.from).format(dateFormat);\n      let to = null;\n      if (tempValue.to) to = moment(tempValue.to).format(dateFormat);\n      props.handleDateRangeChange({ from, to });\n    }\n    onClose();\n  };\n\n  return (\n    <>\n      <Popover {...{ isOpen, onClose, onOpen, closeOnBlur: true, closeOnEsc: true }}>\n        <PopoverTrigger>\n          <Button\n            variant=\"ghost\"\n            color={props.filterActive ? 'green' : '#4f4f4f'}\n            fontWeight=\"500\"\n            size=\"xs\"\n            backgroundColor={props.filterActive ? '#c3f7c3' : 'inherit'}\n            // @ts-ignore\n            leftIcon=\"filter\"\n          >\n            Filters\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent zIndex={4} width=\"250px\">\n          <PopoverArrow />\n          <PopoverBody display=\"flex\" flexDirection=\"column\" padding=\"1rem 0.75rem\">\n            <Box mb=\"0.5rem\">\n              <Box fontSize=\"12px\" fontWeight=\"500\" mb=\"0.5rem\">\n                Date Period\n              </Box>\n              <Select\n                label=\"\"\n                size=\"sm\"\n                height=\"30px\"\n                onChange={event => {\n                  setTempValue({\n                    value: null,\n                    from: null,\n                    to: null,\n                  });\n                  setSelectedOption(event.target.value);\n                }}\n                value={selectedOption}\n              >\n                <option value=\"all\">All Time</option>\n                <option value=\"today\">Today</option>\n                <option value=\"day\">Specific day</option>\n                <option value=\"range\">Date range</option>\n              </Select>\n            </Box>\n\n            {selectedOption === 'day' && (\n              <Box my=\"0.5rem\">\n                <Box fontSize=\"12px\" fontWeight=\"500\" mb=\"0.5rem\">\n                  Choose a day\n                </Box>\n\n                <DateFieldComponent\n                  value={tempValue.value}\n                  inputProps={{ ...inputProps }}\n                  updateCellValue={(value: any) => setTempValue({ value, from: null, to: null })}\n                />\n              </Box>\n            )}\n\n            {selectedOption === 'range' && (\n              <Box my=\"0.5rem\">\n                <Box fontSize=\"12px\" fontWeight=\"500\" mb=\"0.5rem\">\n                  Choose range\n                </Box>\n\n                <Box display=\"flex\" justifyContent=\"space-between\">\n                  <DateFieldComponent\n                    value={tempValue.from}\n                    inputProps={{ ...inputProps, width: '97.5%', placeholder: 'From' }}\n                    updateCellValue={(value: any) => setTempValue({ ...tempValue, from: value })}\n                  />\n                  <DateFieldComponent\n                    value={tempValue.to}\n                    inputProps={{ ...inputProps, width: '97.5%', placeholder: 'To' }}\n                    updateCellValue={(value: any) => setTempValue({ ...tempValue, to: value })}\n                  />\n                </Box>\n              </Box>\n            )}\n\n            <Divider width=\"100%\" my=\"1rem\" />\n            <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\" width=\"100%\">\n              <Button size=\"sm\" variant=\"outline\" fontWeight=\"500\" onClick={handleReset}>\n                Reset\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"solid\"\n                variantColor=\"green\"\n                fontWeight=\"500\"\n                onClick={applyFilter}\n              >\n                Filter\n              </Button>\n            </Box>\n          </PopoverBody>\n        </PopoverContent>\n      </Popover>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}