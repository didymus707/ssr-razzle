{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { createTemplate, deleteTemplate, getTemplateData, listSampleTemplates, listTemplateCategories, listTemplates, searchTemplates, updateTemplate } from './templates.service';\nimport { sortTemplatesFunc } from './templates.utils'; ////////////////////////////////////////////////////////////////////////////////////\n\nconst initialState = {\n  templates: [],\n  sampleTemplates: [],\n  template: {},\n  templateCategories: []\n}; ////////////////////////////////////////////////////////////////////////////////////\n\nconst templatesSlice = createSlice({\n  name: 'templates',\n  initialState,\n  reducers: {\n    getTemplates(state, action) {\n      const {\n        templates\n      } = action.payload;\n      state.templates = templates;\n    },\n\n    getTemplateCategories(state, action) {\n      const {\n        categories\n      } = action.payload;\n      state.templateCategories = categories;\n    },\n\n    getSampleTemplates(state, action) {\n      const {\n        templates\n      } = action.payload;\n      state.sampleTemplates = templates;\n    },\n\n    getTemplate(state, action) {\n      const {\n        template\n      } = action.payload;\n      state.template = template;\n    },\n\n    createTemplateItem(state, action) {\n      var _state$templates;\n\n      const {\n        template\n      } = action.payload;\n      (_state$templates = state.templates) === null || _state$templates === void 0 ? void 0 : _state$templates.unshift(template);\n    },\n\n    editTemplateItem(state, action) {\n      const {\n        template\n      } = action.payload;\n      const index = state.templates.findIndex(item => item.id === template.id);\n      state.templates[index] = template;\n    },\n\n    deleteTemplateItem(state, action) {\n      const {\n        id\n      } = action.payload;\n      state.templates = state.templates.filter(item => item.id !== id);\n    }\n\n  }\n});\nexport const {\n  getTemplate,\n  getTemplates,\n  editTemplateItem,\n  deleteTemplateItem,\n  createTemplateItem,\n  getSampleTemplates,\n  getTemplateCategories\n} = templatesSlice.actions; ////////////////////////////////////////////////////////////////////////////////////\n\nexport const templatesReducer = templatesSlice.reducer; ////////////////////////////////////////////////////////////////////////////////////\n// Template Thunks\n\nexport const fetchTemplates = params => async dispatch => {\n  const response = await listTemplates(params);\n  const {\n    templates\n  } = response.data;\n  /**\n   * sort templates based on created datetime\n   * this sort should come from API actually\n   */\n\n  const sortedTemplates = templates.sort(sortTemplatesFunc);\n  dispatch(getTemplates({\n    templates: sortedTemplates\n  }));\n  return response.data;\n};\nexport const templatesSearchResults = query => async dispatch => {\n  const response = await searchTemplates(query);\n  const {\n    templates\n  } = response.data;\n  const sortedTemplates = templates.sort(sortTemplatesFunc);\n  dispatch(getTemplates({\n    templates: sortedTemplates\n  }));\n  return response.data;\n};\nexport const addTemplate = payload => async dispatch => {\n  const response = await createTemplate(payload);\n  const {\n    template\n  } = response.data;\n  dispatch(createTemplateItem({\n    template\n  }));\n  return response.data;\n};\nexport const editTemplate = payload => async dispatch => {\n  const response = await updateTemplate(payload);\n  const {\n    template\n  } = response.data;\n  dispatch(editTemplateItem({\n    template\n  }));\n  return response.data;\n};\nexport const removeTemplate = payload => async dispatch => {\n  const response = await deleteTemplate(payload);\n  dispatch(deleteTemplateItem({\n    id: payload\n  }));\n  return response;\n};\nexport const fetchSampleTemplates = params => async dispatch => {\n  const response = await listSampleTemplates(params);\n  const {\n    templates\n  } = response.data;\n  /**\n   * sort templates based on created datetime\n   * this sort should come from API actually\n   */\n\n  const sortedTemplates = templates.sort(sortTemplatesFunc);\n  dispatch(getSampleTemplates({\n    templates: sortedTemplates\n  }));\n  return response.data;\n};\nexport const sampleTemplatesSearchResults = query => async dispatch => {\n  const response = await searchTemplates(query);\n  const {\n    templates\n  } = response.data;\n  const sortedTemplates = templates.sort(sortTemplatesFunc);\n  dispatch(getSampleTemplates({\n    templates: sortedTemplates\n  }));\n  return response.data;\n};\nexport const fetchTemplateCategories = () => async dispatch => {\n  const response = await listTemplateCategories();\n  const {\n    categories\n  } = response.data;\n  dispatch(getTemplateCategories({\n    categories\n  }));\n  return response.data;\n};\nexport const fetchTemplate = id => async dispatch => {\n  const response = await getTemplateData(id);\n  const {\n    template\n  } = response.data;\n  dispatch(getTemplate({\n    template\n  }));\n  return response.data;\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/marketing/templates/templates.reducers.ts"],"names":["createSlice","createTemplate","deleteTemplate","getTemplateData","listSampleTemplates","listTemplateCategories","listTemplates","searchTemplates","updateTemplate","sortTemplatesFunc","initialState","templates","sampleTemplates","template","templateCategories","templatesSlice","name","reducers","getTemplates","state","action","payload","getTemplateCategories","categories","getSampleTemplates","getTemplate","createTemplateItem","unshift","editTemplateItem","index","findIndex","item","id","deleteTemplateItem","filter","actions","templatesReducer","reducer","fetchTemplates","params","dispatch","response","data","sortedTemplates","sort","templatesSearchResults","query","addTemplate","editTemplate","removeTemplate","fetchSampleTemplates","sampleTemplatesSearchResults","fetchTemplateCategories","fetchTemplate"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk } from '../../../../root';\nimport {\n  createTemplate,\n  deleteTemplate,\n  getTemplateData,\n  listSampleTemplates,\n  listTemplateCategories,\n  listTemplates,\n  searchTemplates,\n  updateTemplate,\n} from './templates.service';\nimport { TemplateCategory, TemplateData, TemplatesState } from './templates.types';\nimport { sortTemplatesFunc } from './templates.utils';\n\n////////////////////////////////////////////////////////////////////////////////////\n\nconst initialState: TemplatesState = {\n  templates: [],\n  sampleTemplates: [],\n  template: {} as TemplateData,\n  templateCategories: [],\n};\n\n////////////////////////////////////////////////////////////////////////////////////\n\nconst templatesSlice = createSlice({\n  name: 'templates',\n  initialState,\n  reducers: {\n    getTemplates(state, action: PayloadAction<{ templates: TemplateData[] }>) {\n      const { templates } = action.payload;\n      state.templates = templates;\n    },\n    getTemplateCategories(state, action: PayloadAction<{ categories: TemplateCategory[] }>) {\n      const { categories } = action.payload;\n      state.templateCategories = categories;\n    },\n    getSampleTemplates(state, action: PayloadAction<{ templates: TemplateData[] }>) {\n      const { templates } = action.payload;\n      state.sampleTemplates = templates;\n    },\n    getTemplate(state, action: PayloadAction<{ template: TemplateData }>) {\n      const { template } = action.payload;\n      state.template = template;\n    },\n    createTemplateItem(state, action: PayloadAction<{ template: TemplateData }>) {\n      const { template } = action.payload;\n      state.templates?.unshift(template);\n    },\n    editTemplateItem(state, action: PayloadAction<{ template: TemplateData }>) {\n      const { template } = action.payload;\n      const index = state.templates.findIndex(item => item.id === template.id);\n      state.templates[index] = template;\n    },\n    deleteTemplateItem(state, action: PayloadAction<{ id: TemplateData['id'] }>) {\n      const { id } = action.payload;\n      state.templates = state.templates.filter(item => item.id !== id);\n    },\n  },\n});\n\nexport const {\n  getTemplate,\n  getTemplates,\n  editTemplateItem,\n  deleteTemplateItem,\n  createTemplateItem,\n  getSampleTemplates,\n  getTemplateCategories,\n} = templatesSlice.actions;\n\n////////////////////////////////////////////////////////////////////////////////////\n\nexport const templatesReducer = templatesSlice.reducer;\n\n////////////////////////////////////////////////////////////////////////////////////\n// Template Thunks\n\nexport const fetchTemplates = (params?: any): AppThunk => async dispatch => {\n  const response = await listTemplates(params);\n  const { templates } = response.data;\n  /**\n   * sort templates based on created datetime\n   * this sort should come from API actually\n   */\n  const sortedTemplates = templates.sort(sortTemplatesFunc);\n  dispatch(getTemplates({ templates: sortedTemplates }));\n  return response.data;\n};\n\nexport const templatesSearchResults = (query: string): AppThunk => async dispatch => {\n  const response = await searchTemplates(query);\n  const { templates } = response.data;\n  const sortedTemplates = templates.sort(sortTemplatesFunc);\n  dispatch(getTemplates({ templates: sortedTemplates }));\n  return response.data;\n};\n\nexport const addTemplate = (payload: TemplateData): AppThunk => async dispatch => {\n  const response = await createTemplate(payload);\n  const { template } = response.data;\n  dispatch(createTemplateItem({ template }));\n  return response.data;\n};\n\nexport const editTemplate = (payload: TemplateData): AppThunk => async dispatch => {\n  const response = await updateTemplate(payload);\n  const { template } = response.data;\n  dispatch(editTemplateItem({ template }));\n  return response.data;\n};\n\nexport const removeTemplate = (payload: TemplateData['id']): AppThunk => async dispatch => {\n  const response = await deleteTemplate(payload);\n  dispatch(deleteTemplateItem({ id: payload }));\n  return response;\n};\n\nexport const fetchSampleTemplates = (params?: any): AppThunk => async dispatch => {\n  const response = await listSampleTemplates(params);\n  const { templates } = response.data;\n  /**\n   * sort templates based on created datetime\n   * this sort should come from API actually\n   */\n  const sortedTemplates = templates.sort(sortTemplatesFunc);\n  dispatch(getSampleTemplates({ templates: sortedTemplates }));\n  return response.data;\n};\n\nexport const sampleTemplatesSearchResults = (query: string): AppThunk => async dispatch => {\n  const response = await searchTemplates(query);\n  const { templates } = response.data;\n  const sortedTemplates = templates.sort(sortTemplatesFunc);\n  dispatch(getSampleTemplates({ templates: sortedTemplates }));\n  return response.data;\n};\n\nexport const fetchTemplateCategories = (): AppThunk => async dispatch => {\n  const response = await listTemplateCategories();\n  const { categories } = response.data;\n  dispatch(getTemplateCategories({ categories }));\n  return response.data;\n};\n\nexport const fetchTemplate = (id: string): AppThunk => async dispatch => {\n  const response = await getTemplateData(id);\n  const { template } = response.data;\n  dispatch(getTemplate({ template }));\n  return response.data;\n};\n"]},"metadata":{},"sourceType":"module"}