{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice } from '@reduxjs/toolkit';\nimport { listCampaigns, importBulkItem, searchCampaigns, fetchCampaignItem, updateCampaignItem, createCampaignItem, deleteCampaignItem, getCampaignBudgetItem, saveCampaignItemState, updateCampaignContentItem, updateCampaignBudgetItem, updateCampaignScheduleItem, updateCampaignAudienceItem, fetchCampaignReport, filterCampaigns, identityGraphDistinctValues } from './campaigns.service';\nimport { sortCampaignsFunc } from './campaigns.utils';\nconst initialState = {\n  budget: 0,\n  campaign: {},\n  total_count: 0,\n  allCampaigns: [],\n  campaignsList: [],\n  importedData: null,\n  audience: {\n    count: 0\n  },\n  states: [],\n  genders: [],\n  ethnicGroups: [],\n  religions: []\n};\nconst campaignsSlice = createSlice({\n  name: 'campaigns',\n  initialState: initialState,\n  reducers: {\n    getAllCampaigns(state, action) {\n      const {\n        campaigns\n      } = action.payload;\n      state.allCampaigns = campaigns;\n    },\n\n    getCampaigns(state, action) {\n      const {\n        campaigns,\n        total_count\n      } = action.payload;\n      state.campaignsList = campaigns;\n      state.total_count = total_count ? total_count : 0;\n    },\n\n    getCampaign(state, action) {\n      const {\n        campaign\n      } = action.payload;\n      state.campaign = campaign;\n    },\n\n    createCampaign(state, action) {\n      const {\n        campaign\n      } = action.payload;\n      state.campaign = campaign;\n      state.campaignsList.unshift(campaign);\n    },\n\n    editCampaign(state, action) {\n      var _state$campaignsList;\n\n      const {\n        campaign\n      } = action.payload;\n      const campaignId = (_state$campaignsList = state.campaignsList) === null || _state$campaignsList === void 0 ? void 0 : _state$campaignsList.findIndex(item => item.id === campaign.id);\n      state.campaign = campaign;\n      state.campaignsList[campaignId] = campaign;\n    },\n\n    editCampaignAudience(state, action) {\n      var _state$campaignsList2;\n\n      const {\n        campaign\n      } = action.payload;\n      const campaignId = (_state$campaignsList2 = state.campaignsList) === null || _state$campaignsList2 === void 0 ? void 0 : _state$campaignsList2.findIndex(item => item.id === campaign.id);\n      state.campaign = campaign;\n      state.campaignsList[campaignId] = campaign;\n    },\n\n    editCampaignBudget(state, action) {\n      var _state$campaignsList3;\n\n      const {\n        campaign\n      } = action.payload;\n      const campaignId = (_state$campaignsList3 = state.campaignsList) === null || _state$campaignsList3 === void 0 ? void 0 : _state$campaignsList3.findIndex(item => item.id === campaign.id);\n      state.campaign = campaign;\n      state.campaignsList[campaignId] = campaign;\n    },\n\n    getCampaignBudget(state, action) {\n      const {\n        campaign,\n        budget\n      } = action.payload;\n      const campaignId = state.campaignsList.findIndex(item => item.id === campaign.id);\n\n      if (!campaign.budget) {\n        campaign.budget = budget;\n      }\n\n      state.budget = budget;\n      state.campaign = campaign;\n      state.campaignsList[campaignId] = campaign;\n    },\n\n    editCampaignSchedule(state, action) {\n      var _state$campaignsList4;\n\n      const {\n        campaign\n      } = action.payload;\n      const campaignId = (_state$campaignsList4 = state.campaignsList) === null || _state$campaignsList4 === void 0 ? void 0 : _state$campaignsList4.findIndex(item => item.id === campaign.id);\n\n      const campaignPayload = _objectSpread(_objectSpread({}, campaign), {}, {\n        budget: state.budget\n      });\n\n      state.campaign = campaignPayload;\n      state.campaignsList[campaignId] = campaignPayload;\n    },\n\n    editCampaignContent(state, action) {\n      var _state$campaignsList5;\n\n      const {\n        campaign\n      } = action.payload;\n      const campaignId = (_state$campaignsList5 = state.campaignsList) === null || _state$campaignsList5 === void 0 ? void 0 : _state$campaignsList5.findIndex(item => item.id === campaign.id);\n\n      const campaignPayload = _objectSpread(_objectSpread({}, campaign), {}, {\n        budget: state.budget\n      });\n\n      state.campaign = campaignPayload;\n      state.campaignsList[campaignId] = campaignPayload;\n    },\n\n    saveCampaignState(state, action) {\n      var _state$campaignsList6;\n\n      const {\n        campaign\n      } = action.payload;\n      const campaignId = (_state$campaignsList6 = state.campaignsList) === null || _state$campaignsList6 === void 0 ? void 0 : _state$campaignsList6.findIndex(item => item.id === campaign.id);\n\n      const campaignPayload = _objectSpread(_objectSpread({}, campaign), {}, {\n        budget: state.budget\n      });\n\n      state.campaign = campaignPayload;\n      state.campaignsList[campaignId] = campaignPayload;\n    },\n\n    importCampaignBulk(state, action) {\n      const {\n        campaign\n      } = action.payload;\n      state.campaign = campaign;\n    },\n\n    deleteCampaign(state, action) {\n      var _state$campaignsList7;\n\n      const {\n        id\n      } = action.payload;\n      state.campaignsList = (_state$campaignsList7 = state.campaignsList) === null || _state$campaignsList7 === void 0 ? void 0 : _state$campaignsList7.filter(item => item.id !== id);\n    },\n\n    getStates(state, action) {\n      const {\n        states\n      } = action.payload;\n      state.states = states;\n    },\n\n    getGenders(state, action) {\n      const {\n        genders\n      } = action.payload;\n      state.genders = genders;\n    },\n\n    getReligions(state, action) {\n      const {\n        religions\n      } = action.payload;\n      state.religions = religions;\n    },\n\n    getEthnicGroups(state, action) {\n      const {\n        ethnicGroups\n      } = action.payload;\n      state.ethnicGroups = ethnicGroups;\n    }\n\n  }\n});\nexport const {\n  getCampaign,\n  editCampaign,\n  getCampaigns,\n  deleteCampaign,\n  createCampaign,\n  getAllCampaigns,\n  getCampaignBudget,\n  saveCampaignState,\n  importCampaignBulk,\n  editCampaignBudget,\n  editCampaignContent,\n  editCampaignSchedule,\n  editCampaignAudience,\n  getStates,\n  getGenders,\n  getReligions,\n  getEthnicGroups\n} = campaignsSlice.actions;\nexport const campaignReducer = campaignsSlice.reducer; //////////////////////////////////////////////////////\n// Campaign Thunks\n\nexport const fetchCampaigns = params => async dispatch => {\n  const response = await listCampaigns(params);\n  const {\n    campaigns\n  } = response.data;\n  /**\n   * sort campaigns based on created datetime\n   * this sort should come from API actually\n   */\n\n  const sortedCampaigns = campaigns.sort(sortCampaignsFunc).map(item => _objectSpread({}, item));\n  dispatch(getAllCampaigns({\n    campaigns: sortedCampaigns\n  }));\n  return response.data;\n};\nexport const fetchCampaign = (id, populateReport = false) => async dispatch => {\n  var _campaign$audience;\n\n  const response = await fetchCampaignItem(id);\n  let reports = undefined;\n  let campaignWithReportData = undefined;\n\n  if (populateReport) {\n    const reportResponse = await fetchCampaignReport(id);\n    ({\n      reports,\n      campaign: campaignWithReportData\n    } = reportResponse.data);\n  }\n\n  const {\n    campaign\n  } = response.data;\n  const count = campaign.audience_type === 2 ? campaign === null || campaign === void 0 ? void 0 : (_campaign$audience = campaign.audience) === null || _campaign$audience === void 0 ? void 0 : _campaign$audience.count : campaign.count;\n  dispatch(getCampaign({\n    campaign: _objectSpread(_objectSpread({}, campaign), {}, {\n      count,\n      reports\n    }, campaignWithReportData)\n  }));\n  return response.data;\n};\nexport const addCampaign = payload => async dispatch => {\n  const response = await createCampaignItem(payload);\n  const {\n    campaign\n  } = response.data;\n  dispatch(createCampaign({\n    campaign\n  }));\n  return response.data;\n};\nexport const saveCampaignDraft = payload => async dispatch => {\n  const response = await createCampaignItem(_objectSpread(_objectSpread({}, payload), {}, {\n    state: 'draft'\n  }));\n  const {\n    campaign\n  } = response.data;\n  dispatch(createCampaign({\n    campaign\n  }));\n  return response.data;\n};\nexport const updateCampaign = payload => async dispatch => {\n  const response = await updateCampaignItem(payload);\n  const {\n    campaign\n  } = response.data;\n  dispatch(editCampaign({\n    campaign\n  }));\n  return response.data;\n};\nexport const updateCampaignSchedule = payload => async dispatch => {\n  const response = await updateCampaignScheduleItem(payload);\n  const {\n    campaign\n  } = response.data;\n  dispatch(editCampaignSchedule({\n    campaign\n  }));\n  return response.data;\n};\nexport const updateCampaignContent = payload => async dispatch => {\n  const response = await updateCampaignContentItem(payload);\n  const {\n    campaign\n  } = response.data;\n  dispatch(editCampaignContent({\n    campaign\n  }));\n  return response.data;\n};\nexport const updateCampaignAudience = payload => async dispatch => {\n  const response = await updateCampaignAudienceItem(payload);\n  const {\n    campaign\n  } = response.data;\n  dispatch(editCampaignAudience({\n    campaign\n  }));\n  return response.data;\n};\nexport const fetchCampaignBudget = id => async dispatch => {\n  const response = await getCampaignBudgetItem(id);\n  const {\n    campaign,\n    budget\n  } = response.data;\n  dispatch(getCampaignBudget({\n    campaign,\n    budget\n  }));\n  return response.data;\n};\nexport const updateCampaignBudget = payload => async dispatch => {\n  const response = await updateCampaignBudgetItem(payload);\n  const {\n    campaign\n  } = response.data;\n  dispatch(editCampaignBudget({\n    campaign\n  }));\n  return response.data;\n};\nexport const importBulkUpload = payload => async dispatch => {\n  const response = await importBulkItem(payload);\n  const {\n    campaign\n  } = response.data;\n  dispatch(importCampaignBulk({\n    campaign\n  }));\n  return response.data;\n};\nexport const updateCampaignItemState = payload => async dispatch => {\n  const response = await saveCampaignItemState(payload);\n  const {\n    campaign\n  } = response.data;\n  dispatch(saveCampaignState({\n    campaign\n  }));\n  return response.data;\n};\nexport const removeCampaign = payload => async dispatch => {\n  const response = await deleteCampaignItem(payload);\n  dispatch(deleteCampaign(payload));\n  return response;\n};\nexport const campaignsSearchResults = ({\n  query,\n  state\n}) => async dispatch => {\n  const response = await searchCampaigns({\n    query,\n    state\n  });\n  const {\n    campaigns\n  } = response.data;\n  const sortedCampaigns = campaigns.sort(sortCampaignsFunc).map(item => _objectSpread({}, item));\n  dispatch(getCampaigns({\n    campaigns: sortedCampaigns\n  }));\n  return response.data;\n};\nexport const campaignsFilterResults = ({\n  query,\n  page\n}) => async dispatch => {\n  const response = await filterCampaigns({\n    query,\n    page\n  });\n  const {\n    campaigns,\n    total_count\n  } = response.data;\n  const sortedCampaigns = campaigns.sort(sortCampaignsFunc).map(item => _objectSpread({}, item));\n  dispatch(getCampaigns({\n    campaigns: sortedCampaigns,\n    total_count\n  }));\n  return response.data;\n};\nexport const fetchStates = () => async dispatch => {\n  const response = await identityGraphDistinctValues(['state']);\n  dispatch(getStates({\n    states: response\n  }));\n  return response;\n};\nexport const fetchGenders = () => async dispatch => {\n  const response = await identityGraphDistinctValues(['gender']);\n  dispatch(getGenders({\n    genders: response\n  }));\n  return response;\n};\nexport const fetchReligions = () => async dispatch => {\n  const response = await identityGraphDistinctValues(['predicted_religion']);\n  dispatch(getReligions({\n    religions: response\n  }));\n  return response;\n};\nexport const fetchEthnicGroups = () => async dispatch => {\n  const response = await identityGraphDistinctValues(['predicted_ethnicity']);\n  dispatch(getEthnicGroups({\n    ethnicGroups: response\n  }));\n  return response;\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/marketing/campaigns/campaigns.reducer.tsx"],"names":["createSlice","listCampaigns","importBulkItem","searchCampaigns","fetchCampaignItem","updateCampaignItem","createCampaignItem","deleteCampaignItem","getCampaignBudgetItem","saveCampaignItemState","updateCampaignContentItem","updateCampaignBudgetItem","updateCampaignScheduleItem","updateCampaignAudienceItem","fetchCampaignReport","filterCampaigns","identityGraphDistinctValues","sortCampaignsFunc","initialState","budget","campaign","total_count","allCampaigns","campaignsList","importedData","audience","count","states","genders","ethnicGroups","religions","campaignsSlice","name","reducers","getAllCampaigns","state","action","campaigns","payload","getCampaigns","getCampaign","createCampaign","unshift","editCampaign","campaignId","findIndex","item","id","editCampaignAudience","editCampaignBudget","getCampaignBudget","editCampaignSchedule","campaignPayload","editCampaignContent","saveCampaignState","importCampaignBulk","deleteCampaign","filter","getStates","getGenders","getReligions","getEthnicGroups","actions","campaignReducer","reducer","fetchCampaigns","params","dispatch","response","data","sortedCampaigns","sort","map","fetchCampaign","populateReport","reports","undefined","campaignWithReportData","reportResponse","audience_type","addCampaign","saveCampaignDraft","updateCampaign","updateCampaignSchedule","updateCampaignContent","updateCampaignAudience","fetchCampaignBudget","updateCampaignBudget","importBulkUpload","updateCampaignItemState","removeCampaign","campaignsSearchResults","query","campaignsFilterResults","page","fetchStates","fetchGenders","fetchReligions","fetchEthnicGroups"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { CampaignState, CampaignData, CampaignTypes } from './campaigns.types';\nimport { AppDispatch, AppThunk } from '../../../../root/root.types';\nimport {\n  listCampaigns,\n  importBulkItem,\n  searchCampaigns,\n  fetchCampaignItem,\n  updateCampaignItem,\n  createCampaignItem,\n  deleteCampaignItem,\n  getCampaignBudgetItem,\n  saveCampaignItemState,\n  updateCampaignContentItem,\n  updateCampaignBudgetItem,\n  updateCampaignScheduleItem,\n  updateCampaignAudienceItem,\n  fetchCampaignReport,\n  filterCampaigns,\n  identityGraphDistinctValues,\n} from './campaigns.service';\nimport { sortCampaignsFunc } from './campaigns.utils';\n\nconst initialState: CampaignState = {\n  budget: 0,\n  campaign: {},\n  total_count: 0,\n  allCampaigns: [],\n  campaignsList: [],\n  importedData: null,\n  audience: { count: 0 },\n  states: [],\n  genders: [],\n  ethnicGroups: [],\n  religions: [],\n};\n\nconst campaignsSlice = createSlice({\n  name: 'campaigns',\n  initialState: initialState,\n  reducers: {\n    getAllCampaigns(state, action: PayloadAction<{ campaigns: CampaignData[] }>) {\n      const { campaigns } = action.payload;\n      state.allCampaigns = campaigns;\n    },\n    getCampaigns(\n      state,\n      action: PayloadAction<{ campaigns: CampaignData[]; total_count?: number }>,\n    ) {\n      const { campaigns, total_count } = action.payload;\n      state.campaignsList = campaigns;\n      state.total_count = total_count ? total_count : 0;\n    },\n    getCampaign(state, action: PayloadAction<{ campaign: CampaignData }>) {\n      const { campaign } = action.payload;\n      state.campaign = campaign;\n    },\n    createCampaign(state, action: PayloadAction<{ campaign: CampaignData }>) {\n      const { campaign } = action.payload;\n      state.campaign = campaign;\n      state.campaignsList.unshift(campaign);\n    },\n    editCampaign(state, action: PayloadAction<{ campaign: CampaignData }>) {\n      const { campaign } = action.payload;\n      const campaignId = state.campaignsList?.findIndex(item => item.id === campaign.id);\n      state.campaign = campaign;\n      state.campaignsList[campaignId] = campaign;\n    },\n    editCampaignAudience(state, action: PayloadAction<{ campaign: CampaignData }>) {\n      const { campaign } = action.payload;\n      const campaignId = state.campaignsList?.findIndex(item => item.id === campaign.id);\n      state.campaign = campaign;\n      state.campaignsList[campaignId] = campaign;\n    },\n    editCampaignBudget(state, action: PayloadAction<{ campaign: CampaignData }>) {\n      const { campaign } = action.payload;\n      const campaignId = state.campaignsList?.findIndex(item => item.id === campaign.id);\n      state.campaign = campaign;\n      state.campaignsList[campaignId] = campaign;\n    },\n    getCampaignBudget(\n      state,\n      action: PayloadAction<{\n        budget: number;\n        campaign: CampaignData;\n      }>,\n    ) {\n      const { campaign, budget } = action.payload;\n      const campaignId = state.campaignsList.findIndex(item => item.id === campaign.id);\n      if (!campaign.budget) {\n        campaign.budget = budget;\n      }\n      state.budget = budget;\n      state.campaign = campaign;\n      state.campaignsList[campaignId] = campaign;\n    },\n    editCampaignSchedule(state, action: PayloadAction<{ campaign: CampaignData }>) {\n      const { campaign } = action.payload;\n      const campaignId = state.campaignsList?.findIndex(item => item.id === campaign.id);\n      const campaignPayload = { ...campaign, budget: state.budget };\n      state.campaign = campaignPayload;\n      state.campaignsList[campaignId] = campaignPayload;\n    },\n    editCampaignContent(state, action: PayloadAction<{ campaign: CampaignData }>) {\n      const { campaign } = action.payload;\n      const campaignId = state.campaignsList?.findIndex(item => item.id === campaign.id);\n      const campaignPayload = { ...campaign, budget: state.budget };\n      state.campaign = campaignPayload;\n      state.campaignsList[campaignId] = campaignPayload;\n    },\n    saveCampaignState(state, action: PayloadAction<{ campaign: CampaignData }>) {\n      const { campaign } = action.payload;\n      const campaignId = state.campaignsList?.findIndex(item => item.id === campaign.id);\n      const campaignPayload = { ...campaign, budget: state.budget };\n      state.campaign = campaignPayload;\n      state.campaignsList[campaignId] = campaignPayload;\n    },\n    importCampaignBulk(state, action: PayloadAction<{ campaign: CampaignData }>) {\n      const { campaign } = action.payload;\n      state.campaign = campaign;\n    },\n    deleteCampaign(state, action: PayloadAction<{ id: CampaignData['id'] }>) {\n      const { id } = action.payload;\n      state.campaignsList = state.campaignsList?.filter(item => item.id !== id);\n    },\n    getStates(state, action: PayloadAction<{ states: string[] }>) {\n      const { states } = action.payload;\n      state.states = states;\n    },\n    getGenders(state, action: PayloadAction<{ genders: string[] }>) {\n      const { genders } = action.payload;\n      state.genders = genders;\n    },\n    getReligions(state, action: PayloadAction<{ religions: string[] }>) {\n      const { religions } = action.payload;\n      state.religions = religions;\n    },\n    getEthnicGroups(state, action: PayloadAction<{ ethnicGroups: string[] }>) {\n      const { ethnicGroups } = action.payload;\n      state.ethnicGroups = ethnicGroups;\n    },\n  },\n});\n\nexport const {\n  getCampaign,\n  editCampaign,\n  getCampaigns,\n  deleteCampaign,\n  createCampaign,\n  getAllCampaigns,\n  getCampaignBudget,\n  saveCampaignState,\n  importCampaignBulk,\n  editCampaignBudget,\n  editCampaignContent,\n  editCampaignSchedule,\n  editCampaignAudience,\n  getStates,\n  getGenders,\n  getReligions,\n  getEthnicGroups,\n} = campaignsSlice.actions;\n\nexport const campaignReducer = campaignsSlice.reducer;\n\n//////////////////////////////////////////////////////\n// Campaign Thunks\n\nexport const fetchCampaigns = (params?: any): AppThunk => async dispatch => {\n  const response = await listCampaigns(params);\n  const { campaigns } = response.data;\n  /**\n   * sort campaigns based on created datetime\n   * this sort should come from API actually\n   */\n  const sortedCampaigns = campaigns.sort(sortCampaignsFunc).map((item: any) => ({\n    ...item,\n  }));\n  dispatch(getAllCampaigns({ campaigns: sortedCampaigns }));\n  return response.data;\n};\n\nexport const fetchCampaign = (id: CampaignData['id'], populateReport: boolean = false) => async (\n  dispatch: AppDispatch,\n) => {\n  const response = await fetchCampaignItem(id);\n  let reports = undefined;\n  let campaignWithReportData = undefined;\n  if (populateReport) {\n    const reportResponse = await fetchCampaignReport(id);\n    ({ reports, campaign: campaignWithReportData } = reportResponse.data);\n  }\n  const { campaign } = response.data;\n  const count = campaign.audience_type === 2 ? campaign?.audience?.count : campaign.count;\n  dispatch(\n    getCampaign({\n      campaign: {\n        ...campaign,\n        count,\n        reports,\n        ...campaignWithReportData,\n      },\n    }),\n  );\n  return response.data;\n};\n\nexport const addCampaign = (payload: CampaignData) => async (dispatch: AppDispatch) => {\n  const response = await createCampaignItem(payload);\n  const { campaign } = response.data;\n  dispatch(createCampaign({ campaign }));\n  return response.data;\n};\n\nexport const saveCampaignDraft = (payload: CampaignData) => async (dispatch: AppDispatch) => {\n  const response = await createCampaignItem({ ...payload, state: 'draft' });\n  const { campaign } = response.data;\n  dispatch(createCampaign({ campaign }));\n  return response.data;\n};\n\nexport const updateCampaign = (payload: CampaignData) => async (dispatch: AppDispatch) => {\n  const response = await updateCampaignItem(payload);\n  const { campaign } = response.data;\n  dispatch(editCampaign({ campaign }));\n  return response.data;\n};\n\nexport const updateCampaignSchedule = (payload: CampaignData) => async (dispatch: AppDispatch) => {\n  const response = await updateCampaignScheduleItem(payload);\n  const { campaign } = response.data;\n  dispatch(editCampaignSchedule({ campaign }));\n  return response.data;\n};\n\nexport const updateCampaignContent = (payload: CampaignData) => async (dispatch: AppDispatch) => {\n  const response = await updateCampaignContentItem(payload);\n  const { campaign } = response.data;\n  dispatch(editCampaignContent({ campaign }));\n  return response.data;\n};\n\nexport const updateCampaignAudience = (payload: CampaignData) => async (dispatch: AppDispatch) => {\n  const response = await updateCampaignAudienceItem(payload);\n  const { campaign } = response.data;\n  dispatch(editCampaignAudience({ campaign }));\n  return response.data;\n};\n\nexport const fetchCampaignBudget = (id: CampaignData['id']) => async (dispatch: AppDispatch) => {\n  const response = await getCampaignBudgetItem(id);\n  const { campaign, budget } = response.data;\n  dispatch(getCampaignBudget({ campaign, budget }));\n  return response.data;\n};\n\nexport const updateCampaignBudget = (payload: {\n  id: CampaignData['id'];\n  budget: CampaignData['budget'];\n}) => async (dispatch: AppDispatch) => {\n  const response = await updateCampaignBudgetItem(payload);\n  const { campaign } = response.data;\n  dispatch(editCampaignBudget({ campaign }));\n  return response.data;\n};\n\nexport const importBulkUpload = (payload: any) => async (dispatch: AppDispatch) => {\n  const response = await importBulkItem(payload);\n  const { campaign } = response.data;\n  dispatch(importCampaignBulk({ campaign }));\n  return response.data;\n};\n\nexport const updateCampaignItemState = (payload: {\n  id: CampaignData['id'];\n  state: CampaignData['state'];\n}) => async (dispatch: AppDispatch) => {\n  const response = await saveCampaignItemState(payload);\n  const { campaign } = response.data;\n  dispatch(saveCampaignState({ campaign }));\n  return response.data;\n};\n\nexport const removeCampaign = (payload: { id: CampaignData['id'] }) => async (\n  dispatch: AppDispatch,\n) => {\n  const response = await deleteCampaignItem(payload);\n  dispatch(deleteCampaign(payload));\n  return response;\n};\n\nexport const campaignsSearchResults = ({\n  query,\n  state,\n}: {\n  query?: string;\n  state?: CampaignTypes;\n}): AppThunk => async dispatch => {\n  const response = await searchCampaigns({ query, state });\n  const { campaigns } = response.data;\n  const sortedCampaigns = campaigns.sort(sortCampaignsFunc).map((item: any) => ({\n    ...item,\n  }));\n  dispatch(getCampaigns({ campaigns: sortedCampaigns }));\n  return response.data;\n};\n\nexport const campaignsFilterResults = ({\n  query,\n  page,\n}: {\n  query?: string;\n  page?: number;\n}): AppThunk => async dispatch => {\n  const response = await filterCampaigns({ query, page });\n  const { campaigns, total_count } = response.data;\n  const sortedCampaigns = campaigns.sort(sortCampaignsFunc).map((item: any) => ({\n    ...item,\n  }));\n  dispatch(getCampaigns({ campaigns: sortedCampaigns, total_count }));\n  return response.data;\n};\n\nexport const fetchStates = () => async (dispatch: AppDispatch) => {\n  const response = await identityGraphDistinctValues(['state']);\n  dispatch(getStates({ states: response }));\n  return response;\n};\n\nexport const fetchGenders = () => async (dispatch: AppDispatch) => {\n  const response = await identityGraphDistinctValues(['gender']);\n  dispatch(getGenders({ genders: response }));\n  return response;\n};\n\nexport const fetchReligions = () => async (dispatch: AppDispatch) => {\n  const response = await identityGraphDistinctValues(['predicted_religion']);\n  dispatch(getReligions({ religions: response }));\n  return response;\n};\n\nexport const fetchEthnicGroups = () => async (dispatch: AppDispatch) => {\n  const response = await identityGraphDistinctValues(['predicted_ethnicity']);\n  dispatch(getEthnicGroups({ ethnicGroups: response }));\n  return response;\n};\n"]},"metadata":{},"sourceType":"module"}