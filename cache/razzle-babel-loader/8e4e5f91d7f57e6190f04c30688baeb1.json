{"ast":null,"code":"import { createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport { connectChannelAcct, fetchSupportedChannels, setChannelName } from '../../channels/channel.thunks';\nimport { fetchThreadMessages, fetchThreadsByState, onWebSocketAssignedThread, onWebSocketNewMessage, onWebSocketNewThread, onWebSocketResolvedThread, onWebSocketWhatsAppAccountStatusChange, fetchThreadByID, sendMessage, searchInbox } from './global';\nconst platformContactsAdapter = createEntityAdapter({\n  selectId: platformContact => platformContact.uuid\n});\n\nconst platformContactsUpsertCallback = (state, action) => {\n  const {\n    platformContacts\n  } = action.payload;\n  platformContacts && platformContactsAdapter.upsertMany(state, platformContacts);\n};\n\nexport const platformContactsSlice = createSlice({\n  name: 'platformContacts',\n  initialState: platformContactsAdapter.getInitialState(),\n  reducers: {},\n\n  extraReducers(builder) {\n    builder.addCase(fetchThreadsByState.fulfilled, platformContactsUpsertCallback).addCase(fetchThreadMessages.fulfilled, platformContactsUpsertCallback).addCase(searchInbox.fulfilled, platformContactsUpsertCallback).addCase(sendMessage.fulfilled, platformContactsUpsertCallback).addCase(onWebSocketNewThread, platformContactsUpsertCallback).addCase(onWebSocketResolvedThread, platformContactsUpsertCallback).addCase(onWebSocketAssignedThread, platformContactsUpsertCallback).addCase(onWebSocketNewMessage, platformContactsUpsertCallback).addCase(fetchSupportedChannels.fulfilled, platformContactsUpsertCallback).addCase(connectChannelAcct.fulfilled, platformContactsUpsertCallback).addCase(setChannelName.fulfilled, platformContactsUpsertCallback).addCase(fetchThreadByID.fulfilled, platformContactsUpsertCallback).addCase(onWebSocketWhatsAppAccountStatusChange, platformContactsUpsertCallback);\n  }\n\n});\nexport const platformContactsReducer = platformContactsSlice.reducer;\nexport const {\n  selectById: selectPlatformContactById,\n  selectIds: selectPlatformContactIds,\n  selectEntities: selectPlatformContactEntities,\n  selectAll: selectAllPlatformContacts,\n  selectTotal: selectTotalPlatformContacts\n} = platformContactsAdapter.getSelectors(state => state.inbox.entities.platformContacts); // export const selectPlatformContact = createSelector(\n//   (_: RootState, payload: { id: string }) => payload.id,\n//   (_: RootState, payload: { credentialUserID?: string }) => payload.credentialUserID,\n//   selectOrganisationID,\n//   selectAllPlatformContacts,\n//   selectCustomerEntities,\n//   (cusID, credentialUserID, orgID, platformContacts, customersObj) => {\n//     const platformContact =\n//       platformContacts.find(\n//         ({ organisation_id, customer_id, receiver_platform_id }) =>\n//           orgID === organisation_id &&\n//           customer_id === cusID &&\n//           (!receiver_platform_id ||\n//             !credentialUserID ||\n//             customersObj[credentialUserID]?.platform_nick === receiver_platform_id),\n//       ) || INBOX_INIT.platformContact;\n//     return platformContact;\n//   },\n// );\n// export const selectPlatformContactName = createSelector(\n//   selectPlatformContact,\n//   p => p.name\n// );","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/slices/platformContact.ts"],"names":["createEntityAdapter","createSlice","connectChannelAcct","fetchSupportedChannels","setChannelName","fetchThreadMessages","fetchThreadsByState","onWebSocketAssignedThread","onWebSocketNewMessage","onWebSocketNewThread","onWebSocketResolvedThread","onWebSocketWhatsAppAccountStatusChange","fetchThreadByID","sendMessage","searchInbox","platformContactsAdapter","selectId","platformContact","uuid","platformContactsUpsertCallback","state","action","platformContacts","payload","upsertMany","platformContactsSlice","name","initialState","getInitialState","reducers","extraReducers","builder","addCase","fulfilled","platformContactsReducer","reducer","selectById","selectPlatformContactById","selectIds","selectPlatformContactIds","selectEntities","selectPlatformContactEntities","selectAll","selectAllPlatformContacts","selectTotal","selectTotalPlatformContacts","getSelectors","inbox","entities"],"mappings":"AAAA,SAASA,mBAAT,EAA8CC,WAA9C,QAAiE,kBAAjE;AAGA,SACEC,kBADF,EAEEC,sBAFF,EAGEC,cAHF,QAIO,+BAJP;AAQA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,yBAHF,EAIEC,qBAJF,EAKEC,oBALF,EAMEC,yBANF,EAOEC,sCAPF,EAQEC,eARF,EASEC,WATF,EAUEC,WAVF,QAWO,UAXP;AAaA,MAAMC,uBAAuB,GAAGf,mBAAmB,CAAwB;AACzEgB,EAAAA,QAAQ,EAAEC,eAAe,IAAIA,eAAe,CAACC;AAD4B,CAAxB,CAAnD;;AAIA,MAAMC,8BAA8B,GAAG,CAACC,KAAD,EAAaC,MAAb,KAA6B;AAClE,QAAM;AAAEC,IAAAA;AAAF,MAAuBD,MAAM,CAACE,OAApC;AACAD,EAAAA,gBAAgB,IAAIP,uBAAuB,CAACS,UAAxB,CAAmCJ,KAAnC,EAA0CE,gBAA1C,CAApB;AACD,CAHD;;AAKA,OAAO,MAAMG,qBAAqB,GAAGxB,WAAW,CAAC;AAC/CyB,EAAAA,IAAI,EAAE,kBADyC;AAE/CC,EAAAA,YAAY,EAAEZ,uBAAuB,CAACa,eAAxB,EAFiC;AAG/CC,EAAAA,QAAQ,EAAE,EAHqC;;AAI/CC,EAAAA,aAAa,CAACC,OAAD,EAAU;AACrBA,IAAAA,OAAO,CACJC,OADH,CACW1B,mBAAmB,CAAC2B,SAD/B,EAC0Cd,8BAD1C,EAEGa,OAFH,CAEW3B,mBAAmB,CAAC4B,SAF/B,EAE0Cd,8BAF1C,EAGGa,OAHH,CAGWlB,WAAW,CAACmB,SAHvB,EAGkCd,8BAHlC,EAIGa,OAJH,CAIWnB,WAAW,CAACoB,SAJvB,EAIkCd,8BAJlC,EAKGa,OALH,CAKWvB,oBALX,EAKiCU,8BALjC,EAMGa,OANH,CAMWtB,yBANX,EAMsCS,8BANtC,EAOGa,OAPH,CAOWzB,yBAPX,EAOsCY,8BAPtC,EAQGa,OARH,CAQWxB,qBARX,EAQkCW,8BARlC,EASGa,OATH,CASW7B,sBAAsB,CAAC8B,SATlC,EAS6Cd,8BAT7C,EAUGa,OAVH,CAUW9B,kBAAkB,CAAC+B,SAV9B,EAUyCd,8BAVzC,EAWGa,OAXH,CAWW5B,cAAc,CAAC6B,SAX1B,EAWqCd,8BAXrC,EAYGa,OAZH,CAYWpB,eAAe,CAACqB,SAZ3B,EAYsCd,8BAZtC,EAaGa,OAbH,CAaWrB,sCAbX,EAamDQ,8BAbnD;AAcD;;AAnB8C,CAAD,CAAzC;AAsBP,OAAO,MAAMe,uBAAuB,GAAGT,qBAAqB,CAACU,OAAtD;AAEP,OAAO,MAAM;AACXC,EAAAA,UAAU,EAAEC,yBADD;AAEXC,EAAAA,SAAS,EAAEC,wBAFA;AAGXC,EAAAA,cAAc,EAAEC,6BAHL;AAIXC,EAAAA,SAAS,EAAEC,yBAJA;AAKXC,EAAAA,WAAW,EAAEC;AALF,IAMT9B,uBAAuB,CAAC+B,YAAxB,CAAgD1B,KAAK,IAAIA,KAAK,CAAC2B,KAAN,CAAYC,QAAZ,CAAqB1B,gBAA9E,CANG,C,CAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import { createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../../../root';\nimport { selectOrganisationID } from '../../../unauthenticated-app/authentication';\nimport {\n  connectChannelAcct,\n  fetchSupportedChannels,\n  setChannelName,\n} from '../../channels/channel.thunks';\nimport { INBOX_INIT } from '../inbox.data';\nimport { PlatformContactSchema } from '../inbox.types';\nimport { selectCustomerEntities } from './customer';\nimport {\n  fetchThreadMessages,\n  fetchThreadsByState,\n  onWebSocketAssignedThread,\n  onWebSocketNewMessage,\n  onWebSocketNewThread,\n  onWebSocketResolvedThread,\n  onWebSocketWhatsAppAccountStatusChange,\n  fetchThreadByID,\n  sendMessage,\n  searchInbox,\n} from './global';\n\nconst platformContactsAdapter = createEntityAdapter<PlatformContactSchema>({\n  selectId: platformContact => platformContact.uuid,\n});\n\nconst platformContactsUpsertCallback = (state: any, action: any) => {\n  const { platformContacts } = action.payload;\n  platformContacts && platformContactsAdapter.upsertMany(state, platformContacts);\n};\n\nexport const platformContactsSlice = createSlice({\n  name: 'platformContacts',\n  initialState: platformContactsAdapter.getInitialState(),\n  reducers: {},\n  extraReducers(builder) {\n    builder\n      .addCase(fetchThreadsByState.fulfilled, platformContactsUpsertCallback)\n      .addCase(fetchThreadMessages.fulfilled, platformContactsUpsertCallback)\n      .addCase(searchInbox.fulfilled, platformContactsUpsertCallback)\n      .addCase(sendMessage.fulfilled, platformContactsUpsertCallback)\n      .addCase(onWebSocketNewThread, platformContactsUpsertCallback)\n      .addCase(onWebSocketResolvedThread, platformContactsUpsertCallback)\n      .addCase(onWebSocketAssignedThread, platformContactsUpsertCallback)\n      .addCase(onWebSocketNewMessage, platformContactsUpsertCallback)\n      .addCase(fetchSupportedChannels.fulfilled, platformContactsUpsertCallback)\n      .addCase(connectChannelAcct.fulfilled, platformContactsUpsertCallback)\n      .addCase(setChannelName.fulfilled, platformContactsUpsertCallback)\n      .addCase(fetchThreadByID.fulfilled, platformContactsUpsertCallback)\n      .addCase(onWebSocketWhatsAppAccountStatusChange, platformContactsUpsertCallback);\n  },\n});\n\nexport const platformContactsReducer = platformContactsSlice.reducer;\n\nexport const {\n  selectById: selectPlatformContactById,\n  selectIds: selectPlatformContactIds,\n  selectEntities: selectPlatformContactEntities,\n  selectAll: selectAllPlatformContacts,\n  selectTotal: selectTotalPlatformContacts,\n} = platformContactsAdapter.getSelectors<RootState>(state => state.inbox.entities.platformContacts);\n\n// export const selectPlatformContact = createSelector(\n//   (_: RootState, payload: { id: string }) => payload.id,\n//   (_: RootState, payload: { credentialUserID?: string }) => payload.credentialUserID,\n//   selectOrganisationID,\n//   selectAllPlatformContacts,\n//   selectCustomerEntities,\n//   (cusID, credentialUserID, orgID, platformContacts, customersObj) => {\n//     const platformContact =\n//       platformContacts.find(\n//         ({ organisation_id, customer_id, receiver_platform_id }) =>\n//           orgID === organisation_id &&\n//           customer_id === cusID &&\n//           (!receiver_platform_id ||\n//             !credentialUserID ||\n//             customersObj[credentialUserID]?.platform_nick === receiver_platform_id),\n//       ) || INBOX_INIT.platformContact;\n\n//     return platformContact;\n//   },\n// );\n\n// export const selectPlatformContactName = createSelector(\n//   selectPlatformContact,\n//   p => p.name\n// );\n"]},"metadata":{},"sourceType":"module"}