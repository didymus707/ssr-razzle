{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/marketing/campaigns/components/campaign-list-item.tsx\";\nvar __jsx = React.createElement;\nimport { Badge, Flex, Heading, PseudoBox, Stack } from '@chakra-ui/core';\nimport * as React from 'react';\nimport { getZonedTime, numberWithCommas } from '../../../../../utils';\nimport { SmallText, TableDropdown, XSmallText } from '../../../../components';\nexport function CampaignListItem(props) {\n  var _campaign$audience;\n\n  const {\n    campaign,\n    isLoading,\n    getTableActions\n  } = props;\n  const campaignStatusColors = {\n    draft: 'gray',\n    pristine: 'gray',\n    stopped: 'red',\n    started: 'green',\n    paused: 'yellow'\n  };\n  const campaignStateLabel = {\n    draft: 'Draft',\n    pristine: 'Not Started',\n    stopped: 'Stopped',\n    started: 'Started',\n    paused: 'Paused'\n  };\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const open = () => setIsOpen(true);\n\n  const close = () => setIsOpen(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return __jsx(PseudoBox, {\n    cursor: \"pointer\",\n    _hover: {\n      bg: '#f9f9f9'\n    },\n    onClick: !isLoading ? toggle : () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, __jsx(Stack, {\n    isInline: true,\n    pt: \"1rem\",\n    spacing: \"1rem\",\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    borderTopWidth: \"1px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    pl: \"1rem\" // minW=\"200px\"\n    ,\n    spacing: \"0.2rem\",\n    marginBottom: \"1rem\",\n    width: ['calc(33.33% - 1rem)', 'calc(50% - 1rem)', 'calc(33.33% - 1rem)'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, __jsx(Heading, {\n    fontSize: \"1rem\",\n    color: \"blue.500\",\n    textTransform: \"capitalize\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, campaign.name), __jsx(SmallText, {\n    color: \"#595e8a\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, campaign.created_datetime && getZonedTime(campaign.created_datetime, 'dd MMM yyyy, hh:mm:a')), __jsx(XSmallText, {\n    color: \"#4f4f4f\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, \"Audience Nos: \", numberWithCommas(campaign === null || campaign === void 0 ? void 0 : (_campaign$audience = campaign.audience) === null || _campaign$audience === void 0 ? void 0 : _campaign$audience.count))), campaign.state && __jsx(Flex, {\n    marginBottom: \"1rem\",\n    justifyContent: \"flex-end\",\n    width: ['calc(33.33% - 1rem)', 'calc(50% - 1rem)', 'calc(33.33% - 1rem)'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, __jsx(Badge, {\n    rounded: \"100px\",\n    variantColor: campaignStatusColors[campaign.state],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, campaignStateLabel[campaign.state])), __jsx(Flex, {\n    marginBottom: \"1rem\",\n    justifyContent: \"flex-end\",\n    width: ['calc(33.33% - 1rem)', 'calc(50% - 1rem)', 'calc(33.33% - 1rem)'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, __jsx(TableDropdown, {\n    data: campaign,\n    isOpen: isOpen,\n    close: close,\n    open: open,\n    actions: getTableActions(campaign),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/marketing/campaigns/components/campaign-list-item.tsx"],"names":["Badge","Flex","Heading","PseudoBox","Stack","React","getZonedTime","numberWithCommas","SmallText","TableDropdown","XSmallText","CampaignListItem","props","campaign","isLoading","getTableActions","campaignStatusColors","draft","pristine","stopped","started","paused","campaignStateLabel","isOpen","setIsOpen","useState","open","close","toggle","bg","name","created_datetime","audience","count","state"],"mappings":";;AAAA,SAASA,KAAT,EAAgBC,IAAhB,EAAsBC,OAAtB,EAA+BC,SAA/B,EAA0CC,KAA1C,QAAuD,iBAAvD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,sBAA/C;AACA,SAASC,SAAT,EAAoBC,aAApB,EAAmCC,UAAnC,QAAqD,wBAArD;AASA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAwD;AAAA;;AAC7D,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,SAAZ;AAAuBC,IAAAA;AAAvB,MAA2CH,KAAjD;AACA,QAAMI,oBAA+C,GAAG;AACtDC,IAAAA,KAAK,EAAE,MAD+C;AAEtDC,IAAAA,QAAQ,EAAE,MAF4C;AAGtDC,IAAAA,OAAO,EAAE,KAH6C;AAItDC,IAAAA,OAAO,EAAE,OAJ6C;AAKtDC,IAAAA,MAAM,EAAE;AAL8C,GAAxD;AAOA,QAAMC,kBAA6C,GAAG;AACpDL,IAAAA,KAAK,EAAE,OAD6C;AAEpDC,IAAAA,QAAQ,EAAE,aAF0C;AAGpDC,IAAAA,OAAO,EAAE,SAH2C;AAIpDC,IAAAA,OAAO,EAAE,SAJ2C;AAKpDC,IAAAA,MAAM,EAAE;AAL4C,GAAtD;AAQA,QAAM,CAACE,MAAD,EAASC,SAAT,IAAsBnB,KAAK,CAACoB,QAAN,CAAe,KAAf,CAA5B;;AAEA,QAAMC,IAAI,GAAG,MAAMF,SAAS,CAAC,IAAD,CAA5B;;AACA,QAAMG,KAAK,GAAG,MAAMH,SAAS,CAAC,KAAD,CAA7B;;AACA,QAAMI,MAAM,GAAG,MAAMJ,SAAS,CAAC,CAACD,MAAF,CAA9B;;AAEA,SACE,MAAC,SAAD;AAAW,IAAA,MAAM,EAAC,SAAlB;AAA4B,IAAA,MAAM,EAAE;AAAEM,MAAAA,EAAE,EAAE;AAAN,KAApC;AAAuD,IAAA,OAAO,EAAE,CAACf,SAAD,GAAac,MAAb,GAAsB,MAAM,CAAE,CAA9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,QAAQ,MADV;AAEE,IAAA,EAAE,EAAC,MAFL;AAGE,IAAA,OAAO,EAAC,MAHV;AAIE,IAAA,QAAQ,EAAC,MAJX;AAKE,IAAA,UAAU,EAAC,QALb;AAME,IAAA,cAAc,EAAC,KANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,MAAC,KAAD;AACE,IAAA,EAAE,EAAC,MADL,CAEE;AAFF;AAGE,IAAA,OAAO,EAAC,QAHV;AAIE,IAAA,YAAY,EAAC,MAJf;AAKE,IAAA,KAAK,EAAE,CAAC,qBAAD,EAAwB,kBAAxB,EAA4C,qBAA5C,CALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,MAAC,OAAD;AAAS,IAAA,QAAQ,EAAC,MAAlB;AAAyB,IAAA,KAAK,EAAC,UAA/B;AAA0C,IAAA,aAAa,EAAC,YAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGf,QAAQ,CAACiB,IADZ,CAPF,EAUE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGjB,QAAQ,CAACkB,gBAAT,IACCzB,YAAY,CAACO,QAAQ,CAACkB,gBAAV,EAA4B,sBAA5B,CAFhB,CAVF,EAcE,MAAC,UAAD;AAAY,IAAA,KAAK,EAAC,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACiBxB,gBAAgB,CAACM,QAAD,aAACA,QAAD,6CAACA,QAAQ,CAAEmB,QAAX,uDAAC,mBAAoBC,KAArB,CADjC,CAdF,CARF,EA0BGpB,QAAQ,CAACqB,KAAT,IACC,MAAC,IAAD;AACE,IAAA,YAAY,EAAC,MADf;AAEE,IAAA,cAAc,EAAC,UAFjB;AAGE,IAAA,KAAK,EAAE,CAAC,qBAAD,EAAwB,kBAAxB,EAA4C,qBAA5C,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,MAAC,KAAD;AAAO,IAAA,OAAO,EAAC,OAAf;AAAuB,IAAA,YAAY,EAAElB,oBAAoB,CAACH,QAAQ,CAACqB,KAAV,CAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,kBAAkB,CAACT,QAAQ,CAACqB,KAAV,CADrB,CALF,CA3BJ,EAqCE,MAAC,IAAD;AACE,IAAA,YAAY,EAAC,MADf;AAEE,IAAA,cAAc,EAAC,UAFjB;AAGE,IAAA,KAAK,EAAE,CAAC,qBAAD,EAAwB,kBAAxB,EAA4C,qBAA5C,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,MAAC,aAAD;AACE,IAAA,IAAI,EAAErB,QADR;AAEE,IAAA,MAAM,EAAEU,MAFV;AAGE,IAAA,KAAK,EAAEI,KAHT;AAIE,IAAA,IAAI,EAAED,IAJR;AAKE,IAAA,OAAO,EAAEX,eAAe,CAACF,QAAD,CAL1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CArCF,CADF,CADF;AAuDD","sourcesContent":["import { Badge, Flex, Heading, PseudoBox, Stack } from '@chakra-ui/core';\nimport * as React from 'react';\nimport { getZonedTime, numberWithCommas } from '../../../../../utils';\nimport { SmallText, TableDropdown, XSmallText } from '../../../../components';\nimport { CampaignData } from '../campaigns.types';\n\ntype CampaignListItemProps = {\n  isLoading?: boolean;\n  getTableActions: any;\n  campaign: CampaignData;\n};\n\nexport function CampaignListItem(props: CampaignListItemProps) {\n  const { campaign, isLoading, getTableActions } = props;\n  const campaignStatusColors: { [key: string]: string } = {\n    draft: 'gray',\n    pristine: 'gray',\n    stopped: 'red',\n    started: 'green',\n    paused: 'yellow',\n  };\n  const campaignStateLabel: { [key: string]: string } = {\n    draft: 'Draft',\n    pristine: 'Not Started',\n    stopped: 'Stopped',\n    started: 'Started',\n    paused: 'Paused',\n  };\n\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const open = () => setIsOpen(true);\n  const close = () => setIsOpen(false);\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <PseudoBox cursor=\"pointer\" _hover={{ bg: '#f9f9f9' }} onClick={!isLoading ? toggle : () => {}}>\n      <Stack\n        isInline\n        pt=\"1rem\"\n        spacing=\"1rem\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        borderTopWidth=\"1px\"\n      >\n        <Stack\n          pl=\"1rem\"\n          // minW=\"200px\"\n          spacing=\"0.2rem\"\n          marginBottom=\"1rem\"\n          width={['calc(33.33% - 1rem)', 'calc(50% - 1rem)', 'calc(33.33% - 1rem)']}\n        >\n          <Heading fontSize=\"1rem\" color=\"blue.500\" textTransform=\"capitalize\">\n            {campaign.name}\n          </Heading>\n          <SmallText color=\"#595e8a\">\n            {campaign.created_datetime &&\n              getZonedTime(campaign.created_datetime, 'dd MMM yyyy, hh:mm:a')}\n          </SmallText>\n          <XSmallText color=\"#4f4f4f\">\n            Audience Nos: {numberWithCommas(campaign?.audience?.count)}\n          </XSmallText>\n        </Stack>\n        {campaign.state && (\n          <Flex\n            marginBottom=\"1rem\"\n            justifyContent=\"flex-end\"\n            width={['calc(33.33% - 1rem)', 'calc(50% - 1rem)', 'calc(33.33% - 1rem)']}\n          >\n            <Badge rounded=\"100px\" variantColor={campaignStatusColors[campaign.state]}>\n              {campaignStateLabel[campaign.state]}\n            </Badge>\n          </Flex>\n        )}\n        <Flex\n          marginBottom=\"1rem\"\n          justifyContent=\"flex-end\"\n          width={['calc(33.33% - 1rem)', 'calc(50% - 1rem)', 'calc(33.33% - 1rem)']}\n        >\n          <TableDropdown<CampaignData>\n            data={campaign}\n            isOpen={isOpen}\n            close={close}\n            open={open}\n            actions={getTableActions(campaign)}\n          />\n        </Flex>\n      </Stack>\n    </PseudoBox>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}