{"ast":null,"code":"import { createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit';\nimport { connectChannelAcct, fetchSupportedChannels, setChannelName } from '../../channels/channel.thunks';\nimport { INBOX_INIT } from '../inbox.data';\nimport { fetchThreadMessages, fetchThreadsByState, onWebSocketAssignedThread, onWebSocketNewMessage, onWebSocketNewThread, onWebSocketResolvedThread, onWebSocketWhatsAppAccountStatusChange, fetchThreadByID, sendMessage, searchInbox } from './global';\nconst customersAdapter = createEntityAdapter({\n  selectId: customer => customer.uuid\n});\n\nconst websocketCallback = (state, action) => {\n  const {\n    customers\n  } = action.payload;\n  customers && customersAdapter.upsertMany(state, customers);\n};\n\nconst upsertCallback = (state, action) => {\n  const {\n    customers\n  } = action.payload;\n  customers && customersAdapter.upsertMany(state, customers);\n};\n\nexport const customersSlice = createSlice({\n  name: \"customers\",\n  initialState: customersAdapter.getInitialState(),\n  reducers: {},\n\n  extraReducers(builder) {\n    builder.addCase(fetchThreadsByState.fulfilled, websocketCallback).addCase(fetchThreadMessages.fulfilled, websocketCallback).addCase(searchInbox.fulfilled, websocketCallback).addCase(sendMessage.fulfilled, websocketCallback).addCase(onWebSocketNewThread, websocketCallback).addCase(onWebSocketResolvedThread, websocketCallback).addCase(onWebSocketAssignedThread, websocketCallback).addCase(onWebSocketNewMessage, websocketCallback).addCase(fetchSupportedChannels.fulfilled, upsertCallback).addCase(connectChannelAcct.fulfilled, upsertCallback).addCase(setChannelName.fulfilled, upsertCallback).addCase(fetchThreadByID.fulfilled, upsertCallback).addCase(onWebSocketWhatsAppAccountStatusChange, websocketCallback);\n  }\n\n});\nexport const customersReducer = customersSlice.reducer;\nexport const {\n  selectById: selectCustomerById,\n  selectIds: selectCustomerIds,\n  selectEntities: selectCustomerEntities,\n  selectAll: selectAllCustomers,\n  selectTotal: selectTotalCustomers\n} = customersAdapter.getSelectors(state => state.inbox.entities.customers);\nexport const selectCustomerByID = createSelector(selectCustomerEntities, (_, sender_id) => sender_id, (customers, sender_id) => !sender_id ? null : customers[sender_id]);\nexport const makeSelectCustomerByID = () => selectCustomerByID;\nexport const selectCustomer = createSelector((_, payload) => payload.id, selectCustomerEntities, (cusID, customers) => customers[cusID] || INBOX_INIT.customer);\nexport const selectCustomerName = createSelector(selectCustomer, c => c.platform_name || c.platform_nick);","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/slices/customer.ts"],"names":["createEntityAdapter","createSelector","createSlice","connectChannelAcct","fetchSupportedChannels","setChannelName","INBOX_INIT","fetchThreadMessages","fetchThreadsByState","onWebSocketAssignedThread","onWebSocketNewMessage","onWebSocketNewThread","onWebSocketResolvedThread","onWebSocketWhatsAppAccountStatusChange","fetchThreadByID","sendMessage","searchInbox","customersAdapter","selectId","customer","uuid","websocketCallback","state","action","customers","payload","upsertMany","upsertCallback","customersSlice","name","initialState","getInitialState","reducers","extraReducers","builder","addCase","fulfilled","customersReducer","reducer","selectById","selectCustomerById","selectIds","selectCustomerIds","selectEntities","selectCustomerEntities","selectAll","selectAllCustomers","selectTotal","selectTotalCustomers","getSelectors","inbox","entities","selectCustomerByID","_","sender_id","makeSelectCustomerByID","selectCustomer","id","cusID","selectCustomerName","c","platform_name","platform_nick"],"mappings":"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","sourcesContent":["import {\n    createEntityAdapter, createSelector, createSlice\n  } from '@reduxjs/toolkit'\nimport { RootState } from '../../../../root'\nimport { connectChannelAcct, fetchSupportedChannels, setChannelName } from '../../channels/channel.thunks';\nimport { INBOX_INIT } from '../inbox.data';\nimport { CustomerSchema } from '../inbox.types';\nimport {\n  fetchThreadMessages, fetchThreadsByState, onWebSocketAssignedThread,\n  onWebSocketNewMessage, onWebSocketNewThread, onWebSocketResolvedThread,\n  onWebSocketWhatsAppAccountStatusChange, fetchThreadByID, sendMessage, searchInbox\n} from './global';\n\nconst customersAdapter = createEntityAdapter<CustomerSchema>({\n  selectId: customer => customer.uuid,\n});\n\nconst websocketCallback = (state: any, action: any) => {\n  const { customers } = action.payload;\n  customers && customersAdapter.upsertMany(state, customers);\n};\n\nconst upsertCallback = (state: any, action: any) => {\n  const { customers } = action.payload;\n  customers && customersAdapter.upsertMany(state, customers);\n};\n\nexport const customersSlice = createSlice({\n  name: \"customers\",\n  initialState: customersAdapter.getInitialState(),\n  reducers: {},\n  extraReducers(builder) {\n    builder\n      .addCase(fetchThreadsByState.fulfilled, websocketCallback)\n      .addCase(fetchThreadMessages.fulfilled, websocketCallback)\n      .addCase(searchInbox.fulfilled, websocketCallback)\n      .addCase(sendMessage.fulfilled, websocketCallback)\n      .addCase(onWebSocketNewThread, websocketCallback)\n      .addCase(onWebSocketResolvedThread, websocketCallback)\n      .addCase(onWebSocketAssignedThread, websocketCallback)\n      .addCase(onWebSocketNewMessage, websocketCallback)\n      .addCase(fetchSupportedChannels.fulfilled, upsertCallback)\n      .addCase(connectChannelAcct.fulfilled, upsertCallback)\n      .addCase(setChannelName.fulfilled, upsertCallback)\n      .addCase(fetchThreadByID.fulfilled, upsertCallback)\n      .addCase(onWebSocketWhatsAppAccountStatusChange, websocketCallback);\n  },\n});\n\nexport const customersReducer = customersSlice.reducer;\n\nexport const {\n  selectById: selectCustomerById,\n  selectIds: selectCustomerIds,\n  selectEntities: selectCustomerEntities,\n  selectAll: selectAllCustomers,\n  selectTotal: selectTotalCustomers,\n} = customersAdapter.getSelectors<RootState>((state) => state.inbox.entities.customers);\n\nexport const selectCustomerByID = createSelector(\n  selectCustomerEntities,\n  (_: RootState, sender_id: string) => sender_id,\n  (customers, sender_id) => !sender_id ? null : customers[sender_id]\n);\n\nexport const makeSelectCustomerByID = () => selectCustomerByID;\n\nexport const selectCustomer = createSelector(\n  (_: RootState, payload: { id: string }) => payload.id,\n  selectCustomerEntities,\n  (cusID, customers) => customers[cusID] || INBOX_INIT.customer\n)\n\nexport const selectCustomerName = createSelector(\n  selectCustomer,\n  c => c.platform_name || c.platform_nick,\n);\n"]},"metadata":{},"sourceType":"module"}