{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit';\nimport { fetchThreadMessages, fetchThreadsByState, onWebSocketAssignedThread, onWebSocketNewMessage, onWebSocketNewThread, onWebSocketResolvedThread, sendInboxTemplate, fetchThreadByID, sendMessage, searchInbox, retrySendingMessage, onWebSocketAccountDisconnected } from './global';\nconst messageMetasAdapter = createEntityAdapter({\n  selectId: messageMeta => messageMeta.message_id\n});\n\nconst maWebsocketCallback = (state, action) => {\n  const {\n    messageMetas\n  } = action.payload;\n  messageMetas && messageMetasAdapter.upsertMany(state, messageMetas);\n};\n\nexport const messageMetasSlice = createSlice({\n  name: \"messageMetas\",\n  initialState: messageMetasAdapter.getInitialState(),\n  reducers: {},\n\n  extraReducers(builder) {\n    builder.addCase(fetchThreadsByState.fulfilled, maWebsocketCallback).addCase(fetchThreadMessages.fulfilled, maWebsocketCallback).addCase(fetchThreadByID.fulfilled, maWebsocketCallback).addCase(sendInboxTemplate.fulfilled, maWebsocketCallback).addCase(searchInbox.fulfilled, maWebsocketCallback).addCase(sendMessage.fulfilled, maWebsocketCallback).addCase(onWebSocketNewThread, maWebsocketCallback).addCase(onWebSocketResolvedThread, maWebsocketCallback).addCase(onWebSocketAssignedThread, maWebsocketCallback).addCase(onWebSocketAccountDisconnected, (state, action) => {\n      const {\n        messageIDs\n      } = action.payload;\n      (messageIDs === null || messageIDs === void 0 ? void 0 : messageIDs.length) > 0 && messageMetasAdapter.removeMany(state, messageIDs);\n    }).addCase(onWebSocketNewMessage, maWebsocketCallback);\n  }\n\n});\nexport const messageMetasReducer = messageMetasSlice.reducer;\nexport const {\n  selectById: selectMessageMetaById,\n  selectIds: selectMessageMetaIds,\n  selectEntities: selectMessageMetaEntities,\n  selectAll: selectAllMessageMetas,\n  selectTotal: selectTotalMessageMetas\n} = messageMetasAdapter.getSelectors(state => state.inbox.entities.messageMetas); // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nconst attachmentDataAdapter = createEntityAdapter({\n  selectId: attachmentData => attachmentData.attachment_id\n});\n\nconst adWebsocketCallback = (state, action) => {\n  const {\n    attachmentData\n  } = action.payload;\n  attachmentData && attachmentDataAdapter.upsertMany(state, attachmentData);\n};\n\nexport const attachmentDataSlice = createSlice({\n  name: \"inbox_attachmentData\",\n  initialState: attachmentDataAdapter.getInitialState(),\n  reducers: {},\n\n  extraReducers(builder) {\n    builder.addCase(fetchThreadsByState.fulfilled, adWebsocketCallback).addCase(fetchThreadMessages.fulfilled, adWebsocketCallback).addCase(sendMessage.fulfilled, adWebsocketCallback).addCase(fetchThreadByID.fulfilled, adWebsocketCallback).addCase(searchInbox.fulfilled, adWebsocketCallback).addCase(onWebSocketNewThread, adWebsocketCallback).addCase(onWebSocketResolvedThread, adWebsocketCallback).addCase(onWebSocketAssignedThread, adWebsocketCallback).addCase(onWebSocketNewMessage, adWebsocketCallback);\n  }\n\n});\nexport const attachmentDataReducer = attachmentDataSlice.reducer;\nexport const {\n  selectById: selectAttachmentDataById,\n  selectIds: selectAttachmentDataIds,\n  selectEntities: selectAttachmentDataEntities,\n  selectAll: selectAllAttachmentDatas,\n  selectTotal: selectTotalAttachmentDatas\n} = attachmentDataAdapter.getSelectors(state => state.inbox.entities.attachmentData); // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nconst attachmentsAdapter = createEntityAdapter();\n\nconst aWebsocketCallback = (state, action) => {\n  const {\n    attachments\n  } = action.payload;\n  attachments && attachmentsAdapter.upsertMany(state, attachments);\n};\n\nexport const attachmentsSlice = createSlice({\n  name: \"inbox_attachments\",\n  initialState: attachmentsAdapter.getInitialState(),\n  reducers: {},\n\n  extraReducers(builder) {\n    builder.addCase(fetchThreadsByState.fulfilled, aWebsocketCallback).addCase(fetchThreadMessages.fulfilled, aWebsocketCallback).addCase(fetchThreadByID.fulfilled, aWebsocketCallback).addCase(sendMessage.fulfilled, aWebsocketCallback).addCase(searchInbox.fulfilled, aWebsocketCallback).addCase(onWebSocketNewThread, aWebsocketCallback).addCase(onWebSocketResolvedThread, aWebsocketCallback).addCase(onWebSocketAssignedThread, aWebsocketCallback).addCase(onWebSocketNewMessage, aWebsocketCallback);\n  }\n\n});\nexport const attachmentsReducer = attachmentsSlice.reducer;\nexport const {\n  selectById: selectAttachmentById,\n  selectIds: selectAttachmentIds,\n  selectEntities: selectAttachmentEntities,\n  selectAll: selectAllAttachments,\n  selectTotal: selectTotalAttachments\n} = attachmentsAdapter.getSelectors(state => state.inbox.entities.attachments);\nexport const selectMessageAttahments = createSelector(selectAllAttachments, selectAttachmentDataEntities, (_, payload) => payload.message_id, (attactments, data, message_id) => attactments.filter(({\n  message_id: mid\n}) => mid === message_id).map(item => {\n  const itemData = data[item.id];\n  return _objectSpread(_objectSpread({}, item), {}, {\n    data: itemData\n  });\n})); // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nconst messagesAdapter = createEntityAdapter({\n  selectId: message => message.uuid,\n  sortComparer: (a, b) => b.created_datetime.localeCompare(a.created_datetime)\n});\n\nconst messageWebsocketCallback = (state, action) => {\n  const {\n    messages\n  } = action.payload;\n  messages && messagesAdapter.upsertMany(state, messages);\n};\n\nexport const messagesSlice = createSlice({\n  name: \"messages\",\n  initialState: messagesAdapter.getInitialState(),\n  reducers: {\n    messageSend(state, action) {\n      const {\n        message_id\n      } = action.payload;\n      messagesAdapter.upsertOne(state, {\n        uuid: message_id,\n        status: 'loading',\n        created_datetime: new Date().toISOString()\n      });\n    }\n\n  },\n\n  extraReducers(builder) {\n    builder.addCase(fetchThreadsByState.fulfilled, messageWebsocketCallback).addCase(fetchThreadMessages.fulfilled, messageWebsocketCallback).addCase(sendInboxTemplate.fulfilled, messageWebsocketCallback).addCase(sendMessage.fulfilled, messageWebsocketCallback).addCase(retrySendingMessage.fulfilled, messageWebsocketCallback).addCase(searchInbox.fulfilled, messageWebsocketCallback).addCase(fetchThreadByID.fulfilled, messageWebsocketCallback).addCase(onWebSocketNewThread, messageWebsocketCallback).addCase(onWebSocketResolvedThread, messageWebsocketCallback).addCase(onWebSocketAssignedThread, messageWebsocketCallback).addCase(onWebSocketAccountDisconnected, (state, action) => {\n      const {\n        messageIDs\n      } = action.payload;\n      (messageIDs === null || messageIDs === void 0 ? void 0 : messageIDs.length) > 0 && messagesAdapter.removeMany(state, messageIDs);\n    }).addCase(onWebSocketNewMessage, messageWebsocketCallback);\n  }\n\n});\nexport const messagesReducer = messagesSlice.reducer;\nexport const {\n  messageSend\n} = messagesSlice.actions;\nexport const {\n  selectById: selectMessageById,\n  selectIds: selectMessageIds,\n  selectEntities: selectMessageEntities,\n  selectAll: selectAllMessages,\n  selectTotal: selectTotalMessages\n} = messagesAdapter.getSelectors(state => state.inbox.entities.messages);\nexport const selectThreadMessages = createSelector(selectAllMessages, (_, thread_id) => thread_id, (messages, tID) => {\n  return messages.filter(({\n    thread_id\n  }) => thread_id === tID);\n});\nexport const selectThreadMessageIDs = createSelector(selectThreadMessages, messages => messages.map(({\n  uuid\n}) => uuid));\nexport const selectLatestMessage = createSelector(selectThreadMessages, threadMessages => {\n  const lastMessage = threadMessages[0]; // const { content, attachments } = lastMessage;\n  // console.log(content);\n  // lastMessage.content = content ? content ? attachments && attachments ? '[Attachment]' : '';\n\n  return lastMessage;\n});\nexport const makeSelectLatestMessage = () => selectLatestMessage;","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/slices/message.ts"],"names":["createEntityAdapter","createSelector","createSlice","fetchThreadMessages","fetchThreadsByState","onWebSocketAssignedThread","onWebSocketNewMessage","onWebSocketNewThread","onWebSocketResolvedThread","sendInboxTemplate","fetchThreadByID","sendMessage","searchInbox","retrySendingMessage","onWebSocketAccountDisconnected","messageMetasAdapter","selectId","messageMeta","message_id","maWebsocketCallback","state","action","messageMetas","payload","upsertMany","messageMetasSlice","name","initialState","getInitialState","reducers","extraReducers","builder","addCase","fulfilled","messageIDs","length","removeMany","messageMetasReducer","reducer","selectById","selectMessageMetaById","selectIds","selectMessageMetaIds","selectEntities","selectMessageMetaEntities","selectAll","selectAllMessageMetas","selectTotal","selectTotalMessageMetas","getSelectors","inbox","entities","attachmentDataAdapter","attachmentData","attachment_id","adWebsocketCallback","attachmentDataSlice","attachmentDataReducer","selectAttachmentDataById","selectAttachmentDataIds","selectAttachmentDataEntities","selectAllAttachmentDatas","selectTotalAttachmentDatas","attachmentsAdapter","aWebsocketCallback","attachments","attachmentsSlice","attachmentsReducer","selectAttachmentById","selectAttachmentIds","selectAttachmentEntities","selectAllAttachments","selectTotalAttachments","selectMessageAttahments","_","attactments","data","filter","mid","map","item","itemData","id","messagesAdapter","message","uuid","sortComparer","a","b","created_datetime","localeCompare","messageWebsocketCallback","messages","messagesSlice","messageSend","upsertOne","status","Date","toISOString","messagesReducer","actions","selectMessageById","selectMessageIds","selectMessageEntities","selectAllMessages","selectTotalMessages","selectThreadMessages","thread_id","tID","selectThreadMessageIDs","selectLatestMessage","threadMessages","lastMessage","makeSelectLatestMessage"],"mappings":"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","sourcesContent":["import { createEntityAdapter, createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState } from '../../../../root';\nimport {\n  AttachmentSchema,  MessageSchema, AttachmentDataSchema, MessageMetaSchema\n} from '../inbox.types';\nimport {\n  fetchThreadMessages, fetchThreadsByState, onWebSocketAssignedThread,\n  onWebSocketNewMessage, onWebSocketNewThread, onWebSocketResolvedThread,\n  sendInboxTemplate, fetchThreadByID, sendMessage, searchInbox,\n  retrySendingMessage, onWebSocketAccountDisconnected\n} from './global';\n\nconst messageMetasAdapter = createEntityAdapter<MessageMetaSchema>({\n  selectId: messageMeta => messageMeta.message_id,\n});\n\nconst maWebsocketCallback = (state: any, action: any) => {\n  const { messageMetas } = action.payload;\n  messageMetas && messageMetasAdapter.upsertMany(state, messageMetas);\n};\n\nexport const messageMetasSlice = createSlice({\n  name: \"messageMetas\",\n  initialState: messageMetasAdapter.getInitialState(),\n  reducers: {},\n  extraReducers(builder) {\n    builder\n      .addCase(fetchThreadsByState.fulfilled, maWebsocketCallback)\n      .addCase(fetchThreadMessages.fulfilled, maWebsocketCallback)\n      .addCase(fetchThreadByID.fulfilled, maWebsocketCallback)\n      .addCase(sendInboxTemplate.fulfilled, maWebsocketCallback)\n      .addCase(searchInbox.fulfilled, maWebsocketCallback)\n      .addCase(sendMessage.fulfilled, maWebsocketCallback)\n      .addCase(onWebSocketNewThread, maWebsocketCallback)\n      .addCase(onWebSocketResolvedThread, maWebsocketCallback)\n      .addCase(onWebSocketAssignedThread, maWebsocketCallback)\n      .addCase(onWebSocketAccountDisconnected, (state, action) => {\n        const { messageIDs } = action.payload;\n        \n        messageIDs?.length > 0 && messageMetasAdapter.removeMany(state, messageIDs);\n      })\n      .addCase(onWebSocketNewMessage, maWebsocketCallback);\n  },\n});\n\nexport const messageMetasReducer = messageMetasSlice.reducer;\n\nexport const {\n  selectById: selectMessageMetaById,\n  selectIds: selectMessageMetaIds,\n  selectEntities: selectMessageMetaEntities,\n  selectAll: selectAllMessageMetas,\n  selectTotal: selectTotalMessageMetas,\n} = messageMetasAdapter.getSelectors<RootState>((state) => state.inbox.entities.messageMetas);\n\n// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nconst attachmentDataAdapter = createEntityAdapter<AttachmentDataSchema>({\n  selectId: (attachmentData) => attachmentData.attachment_id\n});\n\nconst adWebsocketCallback = (state: any, action: any) => {\n  const { attachmentData } = action.payload;\n  attachmentData && attachmentDataAdapter.upsertMany(state, attachmentData);\n};\n\nexport const attachmentDataSlice = createSlice({\n  name: \"inbox_attachmentData\",\n  initialState: attachmentDataAdapter.getInitialState(),\n  reducers: {},\n  extraReducers(builder) {\n    builder\n      .addCase(fetchThreadsByState.fulfilled, adWebsocketCallback)\n      .addCase(fetchThreadMessages.fulfilled, adWebsocketCallback)\n      .addCase(sendMessage.fulfilled, adWebsocketCallback)\n      .addCase(fetchThreadByID.fulfilled, adWebsocketCallback)\n      .addCase(searchInbox.fulfilled, adWebsocketCallback)\n      .addCase(onWebSocketNewThread, adWebsocketCallback)\n      .addCase(onWebSocketResolvedThread, adWebsocketCallback)\n      .addCase(onWebSocketAssignedThread, adWebsocketCallback)\n      .addCase(onWebSocketNewMessage, adWebsocketCallback);\n  },\n});\n\nexport const attachmentDataReducer = attachmentDataSlice.reducer;\n\nexport const {\n  selectById: selectAttachmentDataById,\n  selectIds: selectAttachmentDataIds,\n  selectEntities: selectAttachmentDataEntities,\n  selectAll: selectAllAttachmentDatas,\n  selectTotal: selectTotalAttachmentDatas,\n} = attachmentDataAdapter.getSelectors<RootState>((state) => state.inbox.entities.attachmentData);\n\n// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nconst attachmentsAdapter = createEntityAdapter<AttachmentSchema>();\n\nconst aWebsocketCallback = (state: any, action: any) => {\n  const { attachments } = action.payload;\n  attachments && attachmentsAdapter.upsertMany(state, attachments);\n};\n\nexport const attachmentsSlice = createSlice({\n  name: \"inbox_attachments\",\n  initialState: attachmentsAdapter.getInitialState(),\n  reducers: {},\n  extraReducers(builder) {\n    builder\n      .addCase(fetchThreadsByState.fulfilled, aWebsocketCallback)\n      .addCase(fetchThreadMessages.fulfilled, aWebsocketCallback)\n      .addCase(fetchThreadByID.fulfilled, aWebsocketCallback)\n      .addCase(sendMessage.fulfilled, aWebsocketCallback)\n      .addCase(searchInbox.fulfilled, aWebsocketCallback)\n      .addCase(onWebSocketNewThread, aWebsocketCallback)\n      .addCase(onWebSocketResolvedThread, aWebsocketCallback)\n      .addCase(onWebSocketAssignedThread, aWebsocketCallback)\n      .addCase(onWebSocketNewMessage, aWebsocketCallback);\n  },\n});\n\nexport const attachmentsReducer = attachmentsSlice.reducer;\n\nexport const {\n  selectById: selectAttachmentById,\n  selectIds: selectAttachmentIds,\n  selectEntities: selectAttachmentEntities,\n  selectAll: selectAllAttachments,\n  selectTotal: selectTotalAttachments,\n} = attachmentsAdapter.getSelectors<RootState>((state) => state.inbox.entities.attachments);\n\nexport const selectMessageAttahments = createSelector(\n  selectAllAttachments,\n  selectAttachmentDataEntities,\n  (_: RootState, payload: { message_id: string }) => payload.message_id,\n  (attactments, data, message_id) => attactments.filter(\n    ({ message_id: mid }) => mid === message_id\n  ).map((item) => {\n    const itemData = data[item.id];\n\n    return { ...item, data: itemData };\n  })\n);\n\n// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nconst messagesAdapter = createEntityAdapter<MessageSchema>({\n  selectId: message => message.uuid,\n  sortComparer: (a, b) => b.created_datetime.localeCompare(a.created_datetime),\n});\n\nconst messageWebsocketCallback = (state: any, action: any) => {\n  const { messages } = action.payload;\n  messages && messagesAdapter.upsertMany(state, messages);\n};\n\nexport const messagesSlice = createSlice({\n  name: \"messages\",\n  initialState: messagesAdapter.getInitialState(),\n  reducers: {\n    messageSend(state, action: PayloadAction<{ message_id: string }>) {\n      const { message_id } = action.payload;\n      messagesAdapter.upsertOne(state, ({\n        uuid: message_id,\n        status: 'loading',\n        created_datetime: (new Date()).toISOString(),\n      } as any));\n    },\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(fetchThreadsByState.fulfilled, messageWebsocketCallback)\n      .addCase(fetchThreadMessages.fulfilled, messageWebsocketCallback)\n      .addCase(sendInboxTemplate.fulfilled, messageWebsocketCallback)\n      .addCase(sendMessage.fulfilled, messageWebsocketCallback)\n      .addCase(retrySendingMessage.fulfilled, messageWebsocketCallback)\n      .addCase(searchInbox.fulfilled, messageWebsocketCallback)\n      .addCase(fetchThreadByID.fulfilled, messageWebsocketCallback)\n      .addCase(onWebSocketNewThread, messageWebsocketCallback)\n      .addCase(onWebSocketResolvedThread, messageWebsocketCallback)\n      .addCase(onWebSocketAssignedThread, messageWebsocketCallback)\n      .addCase(onWebSocketAccountDisconnected, (state, action) => {\n        const { messageIDs } = action.payload;\n        \n        messageIDs?.length > 0 && messagesAdapter.removeMany(state, messageIDs);\n      })\n      .addCase(onWebSocketNewMessage, messageWebsocketCallback);\n  },\n});\n\nexport const messagesReducer = messagesSlice.reducer;\nexport const { messageSend } = messagesSlice.actions;\n\nexport const {\n  selectById: selectMessageById,\n  selectIds: selectMessageIds,\n  selectEntities: selectMessageEntities,\n  selectAll: selectAllMessages,\n  selectTotal: selectTotalMessages,\n} = messagesAdapter.getSelectors<RootState>((state) => state.inbox.entities.messages);\n\nexport const selectThreadMessages = createSelector(\n  selectAllMessages,\n  (_: RootState, thread_id: string) => thread_id,\n  (messages, tID) => {\n    return messages.filter(({ thread_id }) => thread_id === tID);\n  }\n);\n\nexport const selectThreadMessageIDs = createSelector(\n  selectThreadMessages,\n  (messages) => messages.map(({ uuid }) => uuid)\n);\n\nexport const selectLatestMessage = createSelector(\n  selectThreadMessages,\n  (threadMessages) => {\n    const lastMessage = threadMessages[0];\n    // const { content, attachments } = lastMessage;\n    // console.log(content);\n    // lastMessage.content = content ? content ? attachments && attachments ? '[Attachment]' : '';\n\n    return lastMessage;\n  }\n);\n\nexport const makeSelectLatestMessage = () => selectLatestMessage;\n"]},"metadata":{},"sourceType":"module"}