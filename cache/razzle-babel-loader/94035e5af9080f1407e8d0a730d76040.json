{"ast":null,"code":"import _objectWithoutProperties from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nconst _excluded = [\"id\"];\nvar _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/tables/components/table/table.hooks/use-table.tsx\";\nvar __jsx = React.createElement;\nimport { Button, useToast } from '@chakra-ui/core';\nimport * as React from 'react';\nimport { useBlockLayout, useResizeColumns, useTable } from 'react-table';\nimport { ToastBox } from '../../../../../components';\nimport { getRowApiValue } from '../../../tables.utils';\nimport { PropertyDropdown } from '../../property';\nimport { EditableCell } from '../table.components';\nimport { usePropertiesAsync } from './use-columns-async';\nexport function useDataTable({\n  user,\n  tableId,\n  actions,\n  tableData,\n  loadingDispatch,\n  onPropertyChange,\n  properties: propertiesProp\n}) {\n  const {\n    addRow,\n    editRow,\n    editTable\n  } = actions;\n  const [data, setData] = React.useState(tableData);\n  const [columns, setColumns] = React.useState(propertiesProp);\n  const toast = useToast();\n  const properties = usePropertiesAsync({\n    user,\n    tableId,\n    properties: columns,\n    onChange: onPropertyChange\n  });\n  const tableColumns = React.useMemo(() => [{\n    width: 80,\n    accessor: '_opt'\n  }, ...properties.properties.filter(({\n    hidden\n  }) => !hidden).map(({\n    name,\n    label,\n    width\n  }) => ({\n    Header: label,\n    accessor: name,\n    width: width || 300\n  })), {\n    width: 220,\n    Header: () => __jsx(PropertyDropdown, {\n      onChange: properties.onPropertyAdd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    }, __jsx(Button, {\n      size: \"xs\",\n      alignItems: \"center\",\n      width: \"100%\",\n      height: 35,\n      leftIcon: \"add\",\n      variant: \"ghost\",\n      borderRadius: \"0\",\n      paddingY: \"0.5rem\",\n      _focus: {\n        boxShadow: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, \"New\")),\n    accessor: 'new'\n  }], // eslint-disable-next-line react-hooks/exhaustive-deps\n  [properties.properties]);\n  React.useEffect(() => {\n    setData(tableData);\n  }, [tableData]);\n  React.useEffect(() => {\n    setColumns(propertiesProp);\n  }, [propertiesProp]);\n\n  async function handleAddRow() {\n    const newRow = {};\n    const apiRow = {};\n    properties.properties.forEach(prop => {\n      if (prop.options) {\n        newRow[prop.name] = {\n          value: '',\n          options: prop.options,\n          type: prop.type.toLowerCase()\n        };\n      } else {\n        newRow[prop.name] = {\n          type: prop.type.toLowerCase(),\n          value: ''\n        };\n      }\n\n      if (prop.id) {\n        apiRow[prop.id] = '';\n      }\n    });\n    setData([...data, newRow]);\n\n    try {\n      loadingDispatch({\n        type: 'GLOBAL_LOADING_STARTED'\n      });\n      await addRow({\n        columns: apiRow,\n        table_id: tableId\n      });\n      loadingDispatch({\n        type: 'GLOBAL_LOADING_RESOLVED'\n      });\n    } catch (error) {\n      loadingDispatch({\n        type: 'GLOBAL_LOADING_RESOLVED'\n      });\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  }\n\n  async function handleEditTable(columnName, options) {\n    const updatedColumns = columns.map(column => {\n      if (column.name === columnName) {\n        return _objectSpread(_objectSpread({}, column), {}, {\n          options\n        });\n      }\n\n      return column;\n    });\n\n    try {\n      loadingDispatch({\n        type: 'GLOBAL_LOADING_STARTED'\n      });\n      await editTable({\n        id: tableId,\n        user_id: user === null || user === void 0 ? void 0 : user.id,\n        columns: updatedColumns\n      });\n      loadingDispatch({\n        type: 'GLOBAL_LOADING_RESOLVED'\n      });\n    } catch (error) {\n      loadingDispatch({\n        type: 'GLOBAL_LOADING_RESOLVED'\n      });\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  }\n\n  async function handleEditRow(row) {\n    const {\n      id\n    } = row,\n          columns = _objectWithoutProperties(row, _excluded);\n\n    try {\n      loadingDispatch({\n        type: 'GLOBAL_LOADING_STARTED'\n      });\n      await editRow({\n        id,\n        columns\n      });\n      loadingDispatch({\n        type: 'GLOBAL_LOADING_RESOLVED'\n      });\n    } catch (error) {\n      loadingDispatch({\n        type: 'GLOBAL_LOADING_RESOLVED'\n      });\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  }\n\n  function handleDataChange(rowIndex, columnId, value, options) {\n    let updatedRow = {};\n\n    if (options) {\n      updatedRow = _objectSpread(_objectSpread({}, data[rowIndex]), {}, {\n        [columnId]: _objectSpread(_objectSpread({}, data[rowIndex][columnId]), {}, {\n          value,\n          options\n        })\n      });\n    } else {\n      updatedRow = _objectSpread(_objectSpread({}, data[rowIndex]), {}, {\n        [columnId]: _objectSpread(_objectSpread({}, data[rowIndex][columnId]), {}, {\n          value\n        })\n      });\n    }\n\n    const newData = data.map((row, index) => {\n      if (index === rowIndex) {\n        return updatedRow;\n      }\n\n      return row;\n    });\n    setData(newData); // generate API payload and make update request\n\n    const apiRow = getRowApiValue(updatedRow);\n    handleEditRow(apiRow); // update table columns with options in case a new option has been created by user\n\n    if (options) {\n      const formatOptions = options.map(({\n        value\n      }) => ({\n        name: value,\n        type: 'option'\n      }));\n      handleEditTable(columnId, formatOptions);\n    }\n  }\n\n  const defaultColumn = {\n    Cell: EditableCell\n  };\n  const tableProps = useTable({\n    data,\n    defaultColumn,\n    columns: tableColumns,\n    //@ts-ignore\n    updateTableData: handleDataChange\n  }, useBlockLayout, useResizeColumns);\n  return {\n    tableProps,\n    properties,\n    handleAddRow\n  };\n}","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/tables/components/table/table.hooks/use-table.tsx"],"names":["Button","useToast","React","useBlockLayout","useResizeColumns","useTable","ToastBox","getRowApiValue","PropertyDropdown","EditableCell","usePropertiesAsync","useDataTable","user","tableId","actions","tableData","loadingDispatch","onPropertyChange","properties","propertiesProp","addRow","editRow","editTable","data","setData","useState","columns","setColumns","toast","onChange","tableColumns","useMemo","width","accessor","filter","hidden","map","name","label","Header","onPropertyAdd","boxShadow","useEffect","handleAddRow","newRow","apiRow","forEach","prop","options","value","type","toLowerCase","id","table_id","error","position","render","onClose","handleEditTable","columnName","updatedColumns","column","user_id","handleEditRow","row","handleDataChange","rowIndex","columnId","updatedRow","newData","index","formatOptions","defaultColumn","Cell","tableProps","updateTableData"],"mappings":"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","sourcesContent":["import { Button, useToast } from '@chakra-ui/core';\nimport * as React from 'react';\nimport { OptionTypeBase } from 'react-select';\nimport { useBlockLayout, useResizeColumns, useTable } from 'react-table';\nimport { LoadingActions } from '../../../../../../hooks';\nimport { ToastBox } from '../../../../../components';\nimport { User } from '../../../../../unauthenticated-app/authentication';\nimport { SelectOptions, TablePropertiesOptions } from '../../../tables.types';\nimport { getRowApiValue } from '../../../tables.utils';\nimport { PropertyDropdown, PropertySchema } from '../../property';\nimport { EditableCell } from '../table.components';\nimport { usePropertiesAsync } from './use-columns-async';\n\nexport function useDataTable({\n  user,\n  tableId,\n  actions,\n  tableData,\n  loadingDispatch,\n  onPropertyChange,\n  properties: propertiesProp,\n}: {\n  actions: any;\n  tableData: any;\n  tableId?: string;\n  user: User | null;\n  properties: PropertySchema[];\n  onPropertyChange?(payload: Pick<TablePropertiesOptions, 'columns' | 'id' | 'user_id'>): void;\n  loadingDispatch: React.Dispatch<LoadingActions>;\n}) {\n  const { addRow, editRow, editTable } = actions;\n  const [data, setData] = React.useState<OptionTypeBase[]>(tableData);\n  const [columns, setColumns] = React.useState<PropertySchema[]>(propertiesProp);\n  const toast = useToast();\n\n  const properties = usePropertiesAsync({\n    user,\n    tableId,\n    properties: columns,\n    onChange: onPropertyChange,\n  });\n\n  const tableColumns = React.useMemo(\n    () => [\n      {\n        width: 80,\n        accessor: '_opt',\n      },\n      ...properties.properties\n        .filter(({ hidden }: PropertySchema) => !hidden)\n        .map(({ name, label, width }: PropertySchema) => ({\n          Header: label,\n          accessor: name,\n          width: width || 300,\n        })),\n      {\n        width: 220,\n        Header: () => (\n          <PropertyDropdown onChange={properties.onPropertyAdd}>\n            <Button\n              size=\"xs\"\n              alignItems=\"center\"\n              width=\"100%\"\n              height={35}\n              leftIcon=\"add\"\n              variant=\"ghost\"\n              borderRadius=\"0\"\n              paddingY=\"0.5rem\"\n              _focus={{ boxShadow: 'none' }}\n            >\n              New\n            </Button>\n          </PropertyDropdown>\n        ),\n        accessor: 'new',\n      },\n    ],\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [properties.properties],\n  );\n\n  React.useEffect(() => {\n    setData(tableData);\n  }, [tableData]);\n\n  React.useEffect(() => {\n    setColumns(propertiesProp);\n  }, [propertiesProp]);\n\n  async function handleAddRow() {\n    const newRow = {} as any;\n    const apiRow = {} as any;\n\n    properties.properties.forEach((prop: PropertySchema) => {\n      if (prop.options) {\n        newRow[prop.name] = {\n          value: '',\n          options: prop.options,\n          type: prop.type.toLowerCase(),\n        };\n      } else {\n        newRow[prop.name] = { type: prop.type.toLowerCase(), value: '' };\n      }\n      if (prop.id) {\n        apiRow[prop.id] = '';\n      }\n    });\n    setData([...data, newRow]);\n\n    try {\n      loadingDispatch({ type: 'GLOBAL_LOADING_STARTED' });\n      await addRow({ columns: apiRow, table_id: tableId });\n      loadingDispatch({ type: 'GLOBAL_LOADING_RESOLVED' });\n    } catch (error) {\n      loadingDispatch({ type: 'GLOBAL_LOADING_RESOLVED' });\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n  }\n\n  async function handleEditTable(columnName: string | number, options: PropertySchema['options']) {\n    const updatedColumns = columns.map((column: PropertySchema) => {\n      if (column.name === columnName) {\n        return { ...column, options };\n      }\n      return column;\n    });\n    try {\n      loadingDispatch({ type: 'GLOBAL_LOADING_STARTED' });\n      await editTable({\n        id: tableId,\n        user_id: user?.id,\n        columns: updatedColumns,\n      });\n      loadingDispatch({ type: 'GLOBAL_LOADING_RESOLVED' });\n    } catch (error) {\n      loadingDispatch({ type: 'GLOBAL_LOADING_RESOLVED' });\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n  }\n\n  async function handleEditRow(row: OptionTypeBase) {\n    const { id, ...columns } = row;\n\n    try {\n      loadingDispatch({ type: 'GLOBAL_LOADING_STARTED' });\n      await editRow({ id, columns });\n      loadingDispatch({ type: 'GLOBAL_LOADING_RESOLVED' });\n    } catch (error) {\n      loadingDispatch({ type: 'GLOBAL_LOADING_RESOLVED' });\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n  }\n\n  function handleDataChange(\n    rowIndex: number,\n    columnId: string,\n    value: any,\n    options?: SelectOptions[],\n  ) {\n    let updatedRow = {};\n    if (options) {\n      updatedRow = {\n        ...data[rowIndex],\n        [columnId]: { ...data[rowIndex][columnId], value, options },\n      };\n    } else {\n      updatedRow = {\n        ...data[rowIndex],\n        [columnId]: { ...data[rowIndex][columnId], value },\n      };\n    }\n\n    const newData = data.map((row: any, index: number) => {\n      if (index === rowIndex) {\n        return updatedRow;\n      }\n      return row;\n    });\n    setData(newData);\n\n    // generate API payload and make update request\n    const apiRow = getRowApiValue(updatedRow);\n\n    handleEditRow(apiRow);\n\n    // update table columns with options in case a new option has been created by user\n    if (options) {\n      const formatOptions = options.map(({ value }) => ({\n        name: value,\n        type: 'option',\n      }));\n      handleEditTable(columnId, formatOptions);\n    }\n  }\n\n  const defaultColumn = {\n    Cell: EditableCell,\n  };\n\n  const tableProps = useTable(\n    {\n      data,\n      defaultColumn,\n      columns: tableColumns,\n      //@ts-ignore\n      updateTableData: handleDataChange,\n    },\n    useBlockLayout,\n    useResizeColumns,\n  );\n\n  return { tableProps, properties, handleAddRow };\n}\n"]},"metadata":{},"sourceType":"module"}