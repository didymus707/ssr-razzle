{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/lists/components/cell-properties/date/editor.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Box, Input } from '@chakra-ui/core/dist';\nimport DayPicker from 'react-day-picker';\nimport { parseDate, parseTime } from '../../../lists.utils';\nexport const DateCellEditor = props => {\n  const {\n    0: initialized,\n    1: setInitialized\n  } = useState(false);\n  const {\n    0: dummyValue,\n    1: setDummyValue\n  } = useState('');\n  const {\n    0: dummyTimeValue,\n    1: setDummyTimeValue\n  } = useState('');\n  const {\n    0: value,\n    1: setValue\n  } = useState('');\n  const {\n    customization\n  } = props;\n  const parsedValue = parseDate(value);\n\n  const handleChange = val => {\n    if (!val) return props.updateValue(null);\n    const parsed_date = parseDate(val);\n    const parsed_time = parseTime(dummyTimeValue);\n    parsed_date.set('hour', parsed_time.get('hour'));\n    parsed_date.set('minute', parsed_time.get('minute'));\n    parsed_date.set('second', parsed_time.get('second'));\n    setDummyValue(parsed_date.format('D MMMM YYYY'));\n    setValue(parsed_date.toISOString());\n    props.updateValue(parsed_date.toISOString());\n    props.close();\n  };\n\n  const handleClear = () => {\n    handleChange('');\n    props.close();\n  };\n\n  const handleDummyValueChanged = e => {\n    const val = e.target.value;\n    setDummyValue(val);\n  };\n\n  const handleDummyTimeValueChanged = e => {\n    const val = e.target.value;\n    setDummyTimeValue(val);\n  };\n\n  const handleEnterPressed = e => {\n    if (e.key !== 'Enter') return;\n    const parsed_time = parseTime(dummyTimeValue);\n    const parsed_date = parseDate(dummyValue);\n    parsed_date.set('hour', parsed_time.get('hour'));\n    parsed_date.set('minute', parsed_time.get('minute'));\n    parsed_date.set('second', parsed_time.get('second'));\n    setDummyValue(parsed_date.format('D MMMM YYYY'));\n    setDummyTimeValue(parsed_time.format('hh:mm A'));\n    setValue(parsed_date.toISOString());\n    props.updateValue(parsed_date.toISOString());\n    props.close();\n  };\n\n  const handleEditorInit = () => {\n    setValue(props.value);\n\n    if (!props.value) {\n      setDummyValue(parseDate(new Date().toString()).format('D MMMM YYYY'));\n      setDummyTimeValue(parseDate(new Date().toString()).format('hh:mm A'));\n      return;\n    }\n\n    const parsed_date = parseDate(props.value);\n\n    if (!parsed_date.isValid()) {\n      setDummyValue(parseDate(new Date().toString()).format('D MMMM YYYY'));\n      setDummyTimeValue(parseDate(new Date().toString()).format('hh:mm A'));\n      return;\n    }\n\n    setDummyValue(parsed_date.format('D MMMM YYYY'));\n    setDummyTimeValue(parsed_date.format('hh:mm A'));\n    setValue(parsed_date.toISOString());\n    setInitialized(true);\n  };\n\n  useEffect(() => {\n    handleEditorInit(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return __jsx(Box, {\n    className: \"date-editor\",\n    fontSize: \"13px !important\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    className: \"input-item\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    value: dummyValue,\n    isInvalid: !parseDate(dummyValue).isValid() && initialized,\n    variant: \"filled\",\n    height: 30,\n    fontSize: 13,\n    autoFocus: true,\n    onChange: handleDummyValueChanged,\n    onKeyPress: handleEnterPressed,\n    errorBorderColor: \"red.200\",\n    width: customization !== null && customization !== void 0 && customization.include_time ? '135px' : '100%',\n    _disabled: {\n      color: 'black'\n    },\n    _focus: {\n      outline: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }), (customization === null || customization === void 0 ? void 0 : customization.include_time) && __jsx(Input, {\n    variant: \"filled\",\n    height: 30,\n    fontSize: 13,\n    value: dummyTimeValue,\n    onChange: handleDummyTimeValueChanged,\n    onKeyPress: handleEnterPressed,\n    isInvalid: !parseTime(dummyTimeValue).isValid() && initialized,\n    width: \"95px\",\n    errorBorderColor: \"red.200\",\n    _disabled: {\n      color: 'black'\n    },\n    _focus: {\n      outline: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  })), __jsx(DayPicker, {\n    modifiers: {\n      selectedDay: parsedValue.toDate()\n    },\n    modifiersStyles: {\n      selectedDay: {\n        backgroundColor: '#3D43DF',\n        borderRadius: 5\n      }\n    },\n    showOutsideDays: true,\n    month: value && parsedValue.isValid() ? parsedValue.toDate() : new Date(),\n    onDayClick: handleChange,\n    selectedDays: parsedValue.toDate(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }), __jsx(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }), __jsx(Box, {\n    className: \"list-item\",\n    style: {\n      paddingLeft: 20\n    },\n    onClick: handleClear,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, \"Clear\"));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/lists/components/cell-properties/date/editor.tsx"],"names":["React","useEffect","useState","Box","Input","DayPicker","parseDate","parseTime","DateCellEditor","props","initialized","setInitialized","dummyValue","setDummyValue","dummyTimeValue","setDummyTimeValue","value","setValue","customization","parsedValue","handleChange","val","updateValue","parsed_date","parsed_time","set","get","format","toISOString","close","handleClear","handleDummyValueChanged","e","target","handleDummyTimeValueChanged","handleEnterPressed","key","handleEditorInit","Date","toString","isValid","include_time","color","outline","selectedDay","toDate","backgroundColor","borderRadius","paddingLeft"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Box, Input } from '@chakra-ui/core/dist';\nimport DayPicker from 'react-day-picker';\nimport { parseDate, parseTime } from '../../../lists.utils';\n\nexport const DateCellEditor = (props: any) => {\n  const [initialized, setInitialized] = useState<boolean>(false);\n  const [dummyValue, setDummyValue] = useState('');\n  const [dummyTimeValue, setDummyTimeValue] = useState('');\n  const [value, setValue] = useState('');\n\n  const { customization } = props;\n\n  const parsedValue = parseDate(value);\n\n  const handleChange = (val: any) => {\n    if (!val) return props.updateValue(null);\n    const parsed_date = parseDate(val);\n    const parsed_time = parseTime(dummyTimeValue);\n    parsed_date.set('hour', parsed_time.get('hour'));\n    parsed_date.set('minute', parsed_time.get('minute'));\n    parsed_date.set('second', parsed_time.get('second'));\n    setDummyValue(parsed_date.format('D MMMM YYYY'));\n    setValue(parsed_date.toISOString());\n    props.updateValue(parsed_date.toISOString());\n    props.close();\n  };\n\n  const handleClear = () => {\n    handleChange('');\n    props.close();\n  };\n\n  const handleDummyValueChanged = (e: any) => {\n    const val = e.target.value;\n    setDummyValue(val);\n  };\n\n  const handleDummyTimeValueChanged = (e: any) => {\n    const val = e.target.value;\n    setDummyTimeValue(val);\n  };\n\n  const handleEnterPressed = (e: any) => {\n    if (e.key !== 'Enter') return;\n    const parsed_time = parseTime(dummyTimeValue);\n    const parsed_date = parseDate(dummyValue);\n    parsed_date.set('hour', parsed_time.get('hour'));\n    parsed_date.set('minute', parsed_time.get('minute'));\n    parsed_date.set('second', parsed_time.get('second'));\n    setDummyValue(parsed_date.format('D MMMM YYYY'));\n    setDummyTimeValue(parsed_time.format('hh:mm A'));\n    setValue(parsed_date.toISOString());\n    props.updateValue(parsed_date.toISOString());\n    props.close();\n  };\n\n  const handleEditorInit = () => {\n    setValue(props.value);\n    if (!props.value) {\n      setDummyValue(parseDate(new Date().toString()).format('D MMMM YYYY'));\n      setDummyTimeValue(parseDate(new Date().toString()).format('hh:mm A'));\n      return;\n    }\n    const parsed_date = parseDate(props.value);\n    if (!parsed_date.isValid()) {\n      setDummyValue(parseDate(new Date().toString()).format('D MMMM YYYY'));\n      setDummyTimeValue(parseDate(new Date().toString()).format('hh:mm A'));\n      return;\n    }\n    setDummyValue(parsed_date.format('D MMMM YYYY'));\n    setDummyTimeValue(parsed_date.format('hh:mm A'));\n    setValue(parsed_date.toISOString());\n    setInitialized(true);\n  };\n\n  useEffect(() => {\n    handleEditorInit();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Box className=\"date-editor\" fontSize=\"13px !important\">\n      <Box className=\"input-item\" display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Input\n          value={dummyValue}\n          isInvalid={!parseDate(dummyValue).isValid() && initialized}\n          variant=\"filled\"\n          height={30}\n          fontSize={13}\n          autoFocus\n          onChange={handleDummyValueChanged}\n          onKeyPress={handleEnterPressed}\n          errorBorderColor=\"red.200\"\n          width={customization?.include_time ? '135px' : '100%'}\n          _disabled={{\n            color: 'black',\n          }}\n          _focus={{\n            outline: 'none',\n          }}\n        />\n        {customization?.include_time && (\n          <Input\n            variant=\"filled\"\n            height={30}\n            fontSize={13}\n            value={dummyTimeValue}\n            onChange={handleDummyTimeValueChanged}\n            onKeyPress={handleEnterPressed}\n            isInvalid={!parseTime(dummyTimeValue).isValid() && initialized}\n            width=\"95px\"\n            errorBorderColor=\"red.200\"\n            _disabled={{\n              color: 'black',\n            }}\n            _focus={{\n              outline: 'none',\n            }}\n          />\n        )}\n      </Box>\n      <DayPicker\n        modifiers={{\n          selectedDay: parsedValue.toDate(),\n        }}\n        modifiersStyles={{\n          selectedDay: {\n            backgroundColor: '#3D43DF',\n            borderRadius: 5,\n          },\n        }}\n        showOutsideDays\n        month={value && parsedValue.isValid() ? parsedValue.toDate() : new Date()}\n        onDayClick={handleChange}\n        selectedDays={parsedValue.toDate()}\n      />\n      <hr />\n      <Box\n        className=\"list-item\"\n        style={{\n          paddingLeft: 20,\n        }}\n        onClick={handleClear}\n      >\n        Clear\n      </Box>\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}