{"ast":null,"code":"import { selectOrganisationID, selectProfile, selectUserID } from 'app/unauthenticated-app/authentication';\nimport { useEffect } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { initializePusher, pusher } from 'utils/pusher';\nimport { onNewWebsocketEvent } from './slices';\nexport const useReactQuerySubscription = () => {\n  const dispatch = useDispatch();\n  const queryClient = useQueryClient();\n  const user_id = useSelector(selectUserID);\n  const profile = useSelector(selectProfile);\n  const organisation_id = useSelector(selectOrganisationID);\n  const profile_id = profile === null || profile === void 0 ? void 0 : profile.id;\n  useEffect(() => {\n    if (!pusher) {\n      console.log('pusher connection is not set');\n      initializePusher(profile_id);\n    }\n\n    const orgChannel = pusher.subscribe(`presence_${organisation_id}`);\n\n    if (orgChannel) {\n      orgChannel.unbind();\n      orgChannel.bind('thread_new', data => {\n        queryClient.invalidateQueries('filters-unread-count');\n        queryClient.invalidateQueries(['threads', 'queued', user_id]);\n      });\n    }\n\n    const userChannel = pusher.subscribe(`private_${profile_id}`);\n\n    if (userChannel) {\n      userChannel.unbind();\n\n      const messageCallback = message => {\n        if ((message === null || message === void 0 ? void 0 : message.author_id) !== profile_id) {\n          dispatch(onNewWebsocketEvent());\n          queryClient.invalidateQueries('filters-unread-count');\n          queryClient.invalidateQueries('messages');\n          queryClient.invalidateQueries('threads');\n        }\n      };\n\n      userChannel.bind('message_new', messageCallback);\n      userChannel.bind('message_retry', messageCallback);\n      orgChannel.bind('message_new', messageCallback);\n    }\n\n    return () => {//TODO: close connection\n    };\n  }, [user_id, organisation_id, profile_id, queryClient, dispatch]);\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/inbox.hooks.ts"],"names":["selectOrganisationID","selectProfile","selectUserID","useEffect","useQueryClient","useDispatch","useSelector","initializePusher","pusher","onNewWebsocketEvent","useReactQuerySubscription","dispatch","queryClient","user_id","profile","organisation_id","profile_id","id","console","log","orgChannel","subscribe","unbind","bind","data","invalidateQueries","userChannel","messageCallback","message","author_id"],"mappings":"AAAA,SACEA,oBADF,EAEEC,aAFF,EAGEC,YAHF,QAIO,wCAJP;AAKA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,gBAAT,EAA2BC,MAA3B,QAAyC,cAAzC;AACA,SAASC,mBAAT,QAAoC,UAApC;AAEA,OAAO,MAAMC,yBAAyB,GAAG,MAAM;AAC7C,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,WAAW,GAAGR,cAAc,EAAlC;AACA,QAAMS,OAAO,GAAGP,WAAW,CAACJ,YAAD,CAA3B;AACA,QAAMY,OAAO,GAAGR,WAAW,CAACL,aAAD,CAA3B;AACA,QAAMc,eAAe,GAAGT,WAAW,CAACN,oBAAD,CAAnC;AACA,QAAMgB,UAAU,GAAGF,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEG,EAA5B;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACK,MAAL,EAAa;AACXU,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AAEAZ,MAAAA,gBAAgB,CAACS,UAAD,CAAhB;AACD;;AAED,UAAMI,UAAU,GAAGZ,MAAM,CAACa,SAAP,CAAkB,YAAWN,eAAgB,EAA7C,CAAnB;;AAEA,QAAIK,UAAJ,EAAgB;AACdA,MAAAA,UAAU,CAACE,MAAX;AAEAF,MAAAA,UAAU,CAACG,IAAX,CAAgB,YAAhB,EAA+BC,IAAD,IAAe;AAC3CZ,QAAAA,WAAW,CAACa,iBAAZ,CAA8B,sBAA9B;AACAb,QAAAA,WAAW,CAACa,iBAAZ,CAA8B,CAAC,SAAD,EAAY,QAAZ,EAAsBZ,OAAtB,CAA9B;AACD,OAHD;AAID;;AAED,UAAMa,WAAW,GAAGlB,MAAM,CAACa,SAAP,CAAkB,WAAUL,UAAW,EAAvC,CAApB;;AAEA,QAAIU,WAAJ,EAAiB;AACfA,MAAAA,WAAW,CAACJ,MAAZ;;AAEA,YAAMK,eAAe,GAAIC,OAAD,IAAkB;AACxC,YAAI,CAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEC,SAAT,MAAuBb,UAA3B,EAAuC;AACrCL,UAAAA,QAAQ,CAACF,mBAAmB,EAApB,CAAR;AACAG,UAAAA,WAAW,CAACa,iBAAZ,CAA8B,sBAA9B;AACAb,UAAAA,WAAW,CAACa,iBAAZ,CAA8B,UAA9B;AACAb,UAAAA,WAAW,CAACa,iBAAZ,CAA8B,SAA9B;AACD;AACF,OAPD;;AASAC,MAAAA,WAAW,CAACH,IAAZ,CAAiB,aAAjB,EAAgCI,eAAhC;AACAD,MAAAA,WAAW,CAACH,IAAZ,CAAiB,eAAjB,EAAkCI,eAAlC;AACAP,MAAAA,UAAU,CAACG,IAAX,CAAgB,aAAhB,EAA+BI,eAA/B;AACD;;AAED,WAAO,MAAM,CACX;AACD,KAFD;AAGD,GAxCQ,EAwCN,CAACd,OAAD,EAAUE,eAAV,EAA2BC,UAA3B,EAAuCJ,WAAvC,EAAoDD,QAApD,CAxCM,CAAT;AAyCD,CAjDM","sourcesContent":["import {\n  selectOrganisationID,\n  selectProfile,\n  selectUserID,\n} from 'app/unauthenticated-app/authentication';\nimport { useEffect } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { initializePusher, pusher } from 'utils/pusher';\nimport { onNewWebsocketEvent } from './slices';\n\nexport const useReactQuerySubscription = () => {\n  const dispatch = useDispatch();\n  const queryClient = useQueryClient();\n  const user_id = useSelector(selectUserID);\n  const profile = useSelector(selectProfile);\n  const organisation_id = useSelector(selectOrganisationID);\n  const profile_id = profile?.id;\n\n  useEffect(() => {\n    if (!pusher) {\n      console.log('pusher connection is not set');\n\n      initializePusher(profile_id);\n    }\n\n    const orgChannel = pusher.subscribe(`presence_${organisation_id}`);\n\n    if (orgChannel) {\n      orgChannel.unbind();\n\n      orgChannel.bind('thread_new', (data: any) => {\n        queryClient.invalidateQueries('filters-unread-count');\n        queryClient.invalidateQueries(['threads', 'queued', user_id]);\n      });\n    }\n\n    const userChannel = pusher.subscribe(`private_${profile_id}`);\n\n    if (userChannel) {\n      userChannel.unbind();\n\n      const messageCallback = (message: any) => {\n        if (message?.author_id !== profile_id) {\n          dispatch(onNewWebsocketEvent());\n          queryClient.invalidateQueries('filters-unread-count');\n          queryClient.invalidateQueries('messages');\n          queryClient.invalidateQueries('threads');\n        }\n      };\n\n      userChannel.bind('message_new', messageCallback);\n      userChannel.bind('message_retry', messageCallback);\n      orgChannel.bind('message_new', messageCallback);\n    }\n\n    return () => {\n      //TODO: close connection\n    };\n  }, [user_id, organisation_id, profile_id, queryClient, dispatch]);\n};\n"]},"metadata":{},"sourceType":"module"}