{"ast":null,"code":"import _objectSpread from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createSlice } from '@reduxjs/toolkit';\nimport * as tablesService from './tables.service';\nimport { addList } from '../lists'; ////////////////////////////////////////////////////////////////////////////////////\n\nconst tablesInitialState = {\n  table: {},\n  tables: [],\n  importedData: null\n};\nconst groupsInitialState = {\n  group: {},\n  groups: [],\n  groupRows: []\n};\nconst rowsInitialState = {\n  rows: [],\n  table: {}\n}; ////////////////////////////////////////////////////////////////////////////////////\n\nconst tablesSlice = createSlice({\n  name: 'tables',\n  initialState: tablesInitialState,\n  reducers: {\n    getTableList(state, action) {\n      const {\n        tables\n      } = action.payload;\n      state.tables = tables;\n    },\n\n    createTableItem(state, action) {\n      var _state$tables;\n\n      const {\n        table\n      } = action.payload;\n      state.table = table;\n      (_state$tables = state.tables) === null || _state$tables === void 0 ? void 0 : _state$tables.push(table);\n    },\n\n    updateTableItem(state, action) {\n      var _state$tables2;\n\n      const {\n        table\n      } = action.payload;\n      const index = (_state$tables2 = state.tables) === null || _state$tables2 === void 0 ? void 0 : _state$tables2.findIndex(item => item.id === table.id);\n      state.tables[index] = table;\n    },\n\n    deleteTableItem(state, action) {\n      const {\n        id\n      } = action.payload;\n      state.tables = state.tables.filter(item => item.id !== id);\n    },\n\n    importSuccess(state, action) {\n      const {\n        importedData\n      } = action.payload;\n      state.importedData = importedData;\n    },\n\n    importMappingSuccess(state) {\n      state.importedData = null;\n    }\n\n  }\n});\nexport const {\n  getTableList,\n  importSuccess,\n  deleteTableItem,\n  createTableItem,\n  updateTableItem,\n  importMappingSuccess\n} = tablesSlice.actions; ////////////////////////////////////////////////////////////////////////////////////\n\nconst groupsSlice = createSlice({\n  name: 'groups',\n  initialState: groupsInitialState,\n  reducers: {\n    getGroupList(state, action) {\n      const {\n        groups\n      } = action.payload;\n      state.groups = groups;\n    },\n\n    createGroupItem(state, action) {\n      var _state$groups;\n\n      const {\n        group\n      } = action.payload;\n      (_state$groups = state.groups) === null || _state$groups === void 0 ? void 0 : _state$groups.push(group);\n    },\n\n    updateGroupItem(state, action) {\n      const {\n        group\n      } = action.payload;\n      const index = state.groups.findIndex(item => item.id === group.id);\n      state.groups[index] = group;\n    },\n\n    deleteGroupItem(state, action) {\n      const {\n        id\n      } = action.payload;\n      state.groups = state.groups.filter(item => item.id !== id);\n    },\n\n    getGroupRowList(state, action) {\n      const {\n        rows\n      } = action.payload;\n      state.groupRows = rows;\n    },\n\n    updateGroupRowItem(state, action) {\n      var _state$groupRows;\n\n      const {\n        row\n      } = action.payload;\n      (_state$groupRows = state.groupRows) === null || _state$groupRows === void 0 ? void 0 : _state$groupRows.map(item => {\n        if (item.id === row.id) {\n          return row;\n        }\n\n        return item;\n      });\n    }\n\n  }\n});\nexport const {\n  getGroupList,\n  createGroupItem,\n  updateGroupItem,\n  deleteGroupItem,\n  getGroupRowList,\n  updateGroupRowItem\n} = groupsSlice.actions; ////////////////////////////////////////////////////////////////////////////////////\n\nconst rowsSlice = createSlice({\n  name: 'rows',\n  initialState: rowsInitialState,\n  reducers: {\n    getRowsList(state, action) {\n      const {\n        rows,\n        table,\n        params\n      } = action.payload;\n      state.rows = params !== null && params !== void 0 && params.page && params.page > 1 ? [...state.rows, ...rows] : rows;\n      state.table = table;\n    },\n\n    createRowItem(state, action) {\n      var _state$rows;\n\n      const {\n        row\n      } = action.payload;\n      (_state$rows = state.rows) === null || _state$rows === void 0 ? void 0 : _state$rows.push(row);\n    },\n\n    updateRowItem(state, action) {\n      const {\n        row\n      } = action.payload;\n      const index = state.rows.findIndex(item => item.id === row.id);\n      state.rows[index] = row;\n    },\n\n    deleteRowItem(state, action) {\n      const {\n        id\n      } = action.payload;\n      state.rows = state.rows.filter(item => item.id !== id);\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(getGroupRowList, (state, action) => {\n      const {\n        rows\n      } = action.payload;\n      state.rows = rows;\n      return state;\n    });\n    builder.addCase(updateTableItem, (state, action) => {\n      const {\n        table\n      } = action.payload;\n      state.table = table;\n    });\n  }\n});\nexport const {\n  getRowsList,\n  createRowItem,\n  updateRowItem,\n  deleteRowItem\n} = rowsSlice.actions; ////////////////////////////////////////////////////////////////////////////////////\n\nexport const tablesReducer = tablesSlice.reducer;\nexport const groupsReducer = groupsSlice.reducer;\nexport const rowsReducer = rowsSlice.reducer; ////////////////////////////////////////////////////////////////////////////////////\n// table Thunks\n\nexport const fetchTables = params => async dispatch => {\n  const response = await tablesService.getTables(params);\n  const {\n    tables\n  } = response.data;\n  dispatch(getTableList({\n    tables\n  }));\n  return response.data;\n};\nexport const addTable = payload => async dispatch => {\n  const response = await tablesService.createTable(payload);\n  const {\n    table\n  } = response.data;\n  dispatch(addList(table));\n  return response.data;\n};\nexport const addTableFromTemplate = payload => async dispatch => {\n  const response = await tablesService.createTableTemplate(payload);\n  const {\n    table\n  } = response.data;\n  dispatch(addList(table));\n  return response.data;\n};\nexport const editTable = payload => async dispatch => {\n  const response = await tablesService.updateTable(payload);\n  const {\n    table\n  } = response.data;\n  dispatch(updateTableItem({\n    table\n  }));\n  return response.data;\n};\nexport const removeTable = payload => async dispatch => {\n  const {\n    id\n  } = payload;\n  const response = await tablesService.deleteTable(payload);\n\n  if (id) {\n    dispatch(deleteTableItem({\n      id\n    }));\n  }\n\n  return response;\n}; ////////////////////////////////////////////////////////////////////////////////////\n// Groups Thunks\n\nexport const fetchGroups = id => async dispatch => {\n  const response = await tablesService.getGroups(id);\n  const {\n    groups\n  } = response.data;\n  dispatch(getGroupList({\n    groups\n  }));\n  return response.data;\n};\nexport const addGroup = payload => async dispatch => {\n  const response = await tablesService.createGroup(payload);\n  const {\n    group\n  } = response.data;\n  dispatch(createGroupItem({\n    group\n  }));\n  return response.data;\n};\nexport const editGroup = payload => async dispatch => {\n  const response = await tablesService.updateGroup(payload);\n  const {\n    group\n  } = response.data;\n  dispatch(updateGroupItem({\n    group\n  }));\n  return response.data;\n};\nexport const removeGroup = payload => async dispatch => {\n  const {\n    id\n  } = payload;\n  const response = await tablesService.deleteGroup(payload);\n  id && dispatch(deleteGroupItem({\n    id\n  }));\n  return response;\n};\nexport const fetchGroupRows = params => async dispatch => {\n  const response = await tablesService.getGroupRows(params);\n  const {\n    group\n  } = response.data;\n\n  if (group && group.rows) {\n    dispatch(getGroupRowList({\n      rows: group.rows\n    }));\n  }\n\n  return response.data;\n};\nexport const addGroupRows = payload => async () => {\n  const {\n    id\n  } = payload;\n  const response = await tablesService.addRowToGroup(payload);\n  fetchGroupRows({\n    id\n  });\n  return response;\n};\nexport const removeGroupRows = payload => async () => {\n  const {\n    id\n  } = payload;\n  const response = await tablesService.deleteRowsFromGroup(payload);\n  fetchGroupRows({\n    id\n  });\n  return response;\n};\nexport const editGroupRow = payload => async dispatch => {\n  const response = await tablesService.updateRow(payload);\n  const {\n    row\n  } = response.data;\n  dispatch(updateGroupRowItem({\n    row\n  }));\n  return response;\n}; ////////////////////////////////////////////////////////////////////////////////////\n// Rows Thunks\n\nexport const fetchRows = params => async dispatch => {\n  const response = await tablesService.getRows(params);\n  const {\n    rows,\n    table\n  } = response.data;\n  dispatch(getRowsList({\n    rows,\n    table,\n    params\n  }));\n  return response.data;\n};\nexport const removeRow = id => async dispatch => {\n  const response = await tablesService.deleteRow(id);\n  dispatch(deleteRowItem({\n    id\n  }));\n  return response;\n};\nexport const filterRowsData = params => async dispatch => {\n  const response = await tablesService.filterRows(params);\n  const {\n    rows,\n    table\n  } = response.data;\n  dispatch(getRowsList({\n    rows,\n    table\n  }));\n  return response.data;\n};\nexport const sortRowsData = params => async dispatch => {\n  const response = await tablesService.sortRows(params);\n  const {\n    rows,\n    table\n  } = response.data;\n  dispatch(getRowsList({\n    rows,\n    table\n  }));\n  return response.data;\n};\nexport const searchRowsData = params => async dispatch => {\n  const response = await tablesService.searchRows(params);\n  const {\n    rows,\n    table\n  } = response.data;\n  dispatch(getRowsList({\n    rows,\n    table\n  }));\n  return response.data;\n};\nexport const addRow = payload => async dispatch => {\n  const response = await tablesService.createRow(payload);\n  const {\n    row\n  } = response.data;\n  dispatch(createRowItem({\n    row\n  }));\n  return response.data;\n};\nexport const editRow = payload => async dispatch => {\n  const response = await tablesService.updateRow(payload);\n  const {\n    row\n  } = response.data;\n  dispatch(updateRowItem({\n    row\n  }));\n  return response.data;\n};\nexport const importRowsCSV = payload => async dispatch => {\n  const response = await tablesService.importRows(payload);\n  const {\n    import: importedData,\n    columns\n  } = response.data;\n  dispatch(importSuccess({\n    importedData: _objectSpread(_objectSpread({}, importedData), {}, {\n      columns\n    })\n  }));\n  return response.data;\n};\nexport const importRowsMapping = payload => async dispatch => {\n  const response = await tablesService.importMapping(payload);\n  dispatch(importMappingSuccess());\n  return response.data;\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/tables/tables.reducer.ts"],"names":["createSlice","tablesService","addList","tablesInitialState","table","tables","importedData","groupsInitialState","group","groups","groupRows","rowsInitialState","rows","tablesSlice","name","initialState","reducers","getTableList","state","action","payload","createTableItem","push","updateTableItem","index","findIndex","item","id","deleteTableItem","filter","importSuccess","importMappingSuccess","actions","groupsSlice","getGroupList","createGroupItem","updateGroupItem","deleteGroupItem","getGroupRowList","updateGroupRowItem","row","map","rowsSlice","getRowsList","params","page","createRowItem","updateRowItem","deleteRowItem","extraReducers","builder","addCase","tablesReducer","reducer","groupsReducer","rowsReducer","fetchTables","dispatch","response","getTables","data","addTable","createTable","addTableFromTemplate","createTableTemplate","editTable","updateTable","removeTable","deleteTable","fetchGroups","getGroups","addGroup","createGroup","editGroup","updateGroup","removeGroup","deleteGroup","fetchGroupRows","getGroupRows","addGroupRows","addRowToGroup","removeGroupRows","deleteRowsFromGroup","editGroupRow","updateRow","fetchRows","getRows","removeRow","deleteRow","filterRowsData","filterRows","sortRowsData","sortRows","searchRowsData","searchRows","addRow","createRow","editRow","importRowsCSV","importRows","import","columns","importRowsMapping","importMapping"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { OptionTypeBase } from 'react-select';\nimport { AppDispatch } from '../../../root';\nimport { GroupSchema } from './components';\nimport * as tablesService from './tables.service';\nimport {\n  GroupsState,\n  ImportRowsMappingOptions,\n  RowsState,\n  TableContactOptions,\n  TableDataOptions,\n  TablePropertiesOptions,\n  TablesState,\n  TableTemplateTypes,\n} from './tables.types';\nimport { addList } from '../lists';\n\n////////////////////////////////////////////////////////////////////////////////////\n\nconst tablesInitialState: TablesState = {\n  table: {},\n  tables: [],\n  importedData: null,\n};\n\nconst groupsInitialState: GroupsState = {\n  group: {},\n  groups: [],\n  groupRows: [],\n};\n\nconst rowsInitialState: RowsState = {\n  rows: [],\n  table: {} as TablePropertiesOptions,\n};\n\n////////////////////////////////////////////////////////////////////////////////////\n\nconst tablesSlice = createSlice({\n  name: 'tables',\n  initialState: tablesInitialState,\n  reducers: {\n    getTableList(state, action: PayloadAction<{ tables: TablePropertiesOptions[] }>) {\n      const { tables } = action.payload;\n      state.tables = tables;\n    },\n    createTableItem(state, action: PayloadAction<{ table: TablePropertiesOptions }>) {\n      const { table } = action.payload;\n      state.table = table;\n      state.tables?.push(table);\n    },\n    updateTableItem(state, action: PayloadAction<{ table: TablePropertiesOptions }>) {\n      const { table } = action.payload;\n      const index = state.tables?.findIndex(item => item.id === table.id);\n      state.tables[index] = table;\n    },\n    deleteTableItem(state, action: PayloadAction<{ id: string }>) {\n      const { id } = action.payload;\n      state.tables = state.tables.filter(item => item.id !== id);\n    },\n    importSuccess(state, action: PayloadAction<{ importedData: any }>) {\n      const { importedData } = action.payload;\n      state.importedData = importedData;\n    },\n    importMappingSuccess(state) {\n      state.importedData = null;\n    },\n  },\n});\n\nexport const {\n  getTableList,\n  importSuccess,\n  deleteTableItem,\n  createTableItem,\n  updateTableItem,\n  importMappingSuccess,\n} = tablesSlice.actions;\n\n////////////////////////////////////////////////////////////////////////////////////\n\nconst groupsSlice = createSlice({\n  name: 'groups',\n  initialState: groupsInitialState,\n  reducers: {\n    getGroupList(state, action: PayloadAction<{ groups: GroupSchema[] }>) {\n      const { groups } = action.payload;\n      state.groups = groups;\n    },\n    createGroupItem(state, action) {\n      const { group } = action.payload;\n      state.groups?.push(group);\n    },\n    updateGroupItem(state, action: PayloadAction<{ group: GroupSchema }>) {\n      const { group } = action.payload;\n      const index = state.groups.findIndex(item => item.id === group.id);\n      state.groups[index] = group;\n    },\n    deleteGroupItem(state, action: PayloadAction<{ id: string }>) {\n      const { id } = action.payload;\n      state.groups = state.groups.filter(item => item.id !== id);\n    },\n    getGroupRowList(state, action: PayloadAction<{ rows: TableContactOptions[] }>) {\n      const { rows } = action.payload;\n      state.groupRows = rows;\n    },\n    updateGroupRowItem(state, action: PayloadAction<{ row: TableContactOptions }>) {\n      const { row } = action.payload;\n      state.groupRows?.map(item => {\n        if (item.id === row.id) {\n          return row;\n        }\n        return item;\n      });\n    },\n  },\n});\n\nexport const {\n  getGroupList,\n  createGroupItem,\n  updateGroupItem,\n  deleteGroupItem,\n  getGroupRowList,\n  updateGroupRowItem,\n} = groupsSlice.actions;\n\n////////////////////////////////////////////////////////////////////////////////////\n\nconst rowsSlice = createSlice({\n  name: 'rows',\n  initialState: rowsInitialState,\n  reducers: {\n    getRowsList(state, action: PayloadAction<TableDataOptions>) {\n      const { rows, table, params } = action.payload;\n      state.rows = params?.page && params.page > 1 ? [...state.rows, ...rows] : rows;\n      state.table = table;\n    },\n    createRowItem(state, action: PayloadAction<{ row: TableContactOptions }>) {\n      const { row } = action.payload;\n      state.rows?.push(row);\n    },\n    updateRowItem(state, action: PayloadAction<{ row: TableContactOptions }>) {\n      const { row } = action.payload;\n      const index = state.rows.findIndex(item => item.id === row.id);\n      state.rows[index] = row;\n    },\n    deleteRowItem(state, action: PayloadAction<{ id: string }>) {\n      const { id } = action.payload;\n      state.rows = state.rows.filter(item => item.id !== id);\n    },\n  },\n  extraReducers: builder => {\n    builder.addCase(getGroupRowList, (state, action) => {\n      const { rows } = action.payload;\n      state.rows = rows;\n      return state;\n    });\n    builder.addCase(updateTableItem, (state, action) => {\n      const { table } = action.payload;\n      state.table = table;\n    });\n  },\n});\n\nexport const { getRowsList, createRowItem, updateRowItem, deleteRowItem } = rowsSlice.actions;\n\n////////////////////////////////////////////////////////////////////////////////////\n\nexport const tablesReducer = tablesSlice.reducer;\nexport const groupsReducer = groupsSlice.reducer;\nexport const rowsReducer = rowsSlice.reducer;\n\n////////////////////////////////////////////////////////////////////////////////////\n// table Thunks\n\nexport const fetchTables = (params?: any) => async (dispatch: AppDispatch) => {\n  const response = await tablesService.getTables(params);\n  const { tables } = response.data;\n  dispatch(getTableList({ tables }));\n  return response.data;\n};\n\nexport const addTable = (\n  payload: Pick<TablePropertiesOptions, 'user_id' | 'columns' | 'name' | 'color' | 'icon'>,\n) => async (dispatch: AppDispatch) => {\n  const response = await tablesService.createTable(payload);\n  const { table } = response.data;\n  dispatch(addList(table))\n  return response.data;\n};\n\nexport const addTableFromTemplate = (payload: TableTemplateTypes) => async (\n  dispatch: AppDispatch,\n) => {\n  const response = await tablesService.createTableTemplate(payload);\n  const { table } = response.data;\n  dispatch(addList(table))\n  return response.data;\n};\n\nexport const editTable = (\n  payload: Partial<Omit<TablePropertiesOptions, 'created_datetime' | 'updated_datetime'>>,\n) => async (dispatch: AppDispatch) => {\n  const response = await tablesService.updateTable(payload);\n  const { table } = response.data;\n  dispatch(updateTableItem({ table }));\n  return response.data;\n};\n\nexport const removeTable = (payload: Pick<TablePropertiesOptions, 'user_id' | 'id'>) => async (\n  dispatch: AppDispatch,\n) => {\n  const { id } = payload;\n  const response = await tablesService.deleteTable(payload);\n  if (id) {\n    dispatch(deleteTableItem({ id }));\n  }\n  return response;\n};\n\n////////////////////////////////////////////////////////////////////////////////////\n// Groups Thunks\n\nexport const fetchGroups = (id?: string) => async (dispatch: AppDispatch) => {\n  const response = await tablesService.getGroups(id);\n  const { groups } = response.data;\n  dispatch(getGroupList({ groups }));\n  return response.data;\n};\n\nexport const addGroup = (payload: {\n  table_id?: string;\n  name: GroupSchema['name'];\n  row_id?: (string | undefined)[];\n}) => async (dispatch: AppDispatch) => {\n  const response = await tablesService.createGroup(payload);\n  const { group } = response.data;\n  dispatch(createGroupItem({ group }));\n  return response.data;\n};\n\nexport const editGroup = (payload: GroupSchema) => async (dispatch: AppDispatch) => {\n  const response = await tablesService.updateGroup(payload);\n  const { group } = response.data;\n  dispatch(updateGroupItem({ group }));\n  return response.data;\n};\n\nexport const removeGroup = (payload: { id: GroupSchema['id'] }) => async (\n  dispatch: AppDispatch,\n) => {\n  const { id } = payload;\n  const response = await tablesService.deleteGroup(payload);\n  id && dispatch(deleteGroupItem({ id }));\n  return response;\n};\n\nexport const fetchGroupRows = (params: { id: GroupSchema['id'] }) => async (\n  dispatch: AppDispatch,\n) => {\n  const response = await tablesService.getGroupRows(params);\n  const { group } = response.data;\n  if (group && group.rows) {\n    dispatch(getGroupRowList({ rows: group.rows }));\n  }\n  return response.data;\n};\n\nexport const addGroupRows = (payload: {\n  row_id: (string | undefined)[];\n  id: GroupSchema['id'];\n}) => async () => {\n  const { id } = payload;\n  const response = await tablesService.addRowToGroup(payload);\n  fetchGroupRows({ id });\n  return response;\n};\n\nexport const removeGroupRows = (payload: {\n  row_id: string[];\n  id: GroupSchema['id'];\n}) => async () => {\n  const { id } = payload;\n  const response = await tablesService.deleteRowsFromGroup(payload);\n  fetchGroupRows({ id });\n  return response;\n};\n\nexport const editGroupRow = (payload: { id: string; columns: OptionTypeBase }) => async (\n  dispatch: AppDispatch,\n) => {\n  const response = await tablesService.updateRow(payload);\n  const { row } = response.data;\n  dispatch(updateGroupRowItem({ row }));\n  return response;\n};\n\n////////////////////////////////////////////////////////////////////////////////////\n// Rows Thunks\n\nexport const fetchRows = (params: { id?: string; page?: number; limit?: number }) => async (\n  dispatch: AppDispatch,\n) => {\n  const response = await tablesService.getRows(params);\n  const { rows, table } = response.data;\n  dispatch(getRowsList({ rows, table, params }));\n  return response.data;\n};\n\nexport const removeRow = (id: string) => async (dispatch: AppDispatch) => {\n  const response = await tablesService.deleteRow(id);\n  dispatch(deleteRowItem({ id }));\n  return response;\n};\n\nexport const filterRowsData = (params?: any) => async (dispatch: AppDispatch) => {\n  const response = await tablesService.filterRows(params);\n  const { rows, table } = response.data;\n  dispatch(getRowsList({ rows, table }));\n  return response.data;\n};\n\nexport const sortRowsData = (params?: any) => async (dispatch: AppDispatch) => {\n  const response = await tablesService.sortRows(params);\n  const { rows, table } = response.data;\n  dispatch(getRowsList({ rows, table }));\n  return response.data;\n};\n\nexport const searchRowsData = (params: {\n  query: string;\n  table_id: TablePropertiesOptions['id'];\n}) => async (dispatch: AppDispatch) => {\n  const response = await tablesService.searchRows(params);\n  const { rows, table } = response.data;\n  dispatch(getRowsList({ rows, table }));\n  return response.data;\n};\n\nexport const addRow = (payload: OptionTypeBase) => async (dispatch: AppDispatch) => {\n  const response = await tablesService.createRow(payload);\n  const { row } = response.data;\n  dispatch(createRowItem({ row }));\n  return response.data;\n};\n\nexport const editRow = (payload: { id: string; columns: OptionTypeBase }) => async (\n  dispatch: AppDispatch,\n) => {\n  const response = await tablesService.updateRow(payload);\n  const { row } = response.data;\n  dispatch(updateRowItem({ row }));\n  return response.data;\n};\n\nexport const importRowsCSV = (payload: any) => async (dispatch: AppDispatch) => {\n  const response = await tablesService.importRows(payload);\n  const { import: importedData, columns } = response.data;\n  dispatch(importSuccess({ importedData: { ...importedData, columns } }));\n  return response.data;\n};\n\nexport const importRowsMapping = (payload: ImportRowsMappingOptions) => async (\n  dispatch: AppDispatch,\n) => {\n  const response = await tablesService.importMapping(payload);\n  dispatch(importMappingSuccess());\n  return response.data;\n};\n"]},"metadata":{},"sourceType":"module"}