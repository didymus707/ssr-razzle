{"ast":null,"code":"const _excluded = [\"id\", \"rowIndex\"];\nvar _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/tables/components/table/table.components/RowDetailsModal.tsx\";\nvar __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Icon, ModalBody, PseudoBox, Stack, Text } from '@chakra-ui/core';\nimport React from 'react';\nimport { Button, ModalContainer } from '../../../../../components';\nimport { PROPERTIES_ICONS, PropertyDropdown } from '../../property';\nimport { EditableCell } from './EditableCell';\nexport const RowDetailsModal = ({\n  isOpen,\n  onClose,\n  onRowUpdate,\n  initialValues,\n  onAddProperty\n}) => {\n  const [values, setValues] = React.useState(initialValues);\n\n  const {\n    id,\n    rowIndex\n  } = values,\n        rest = _objectWithoutProperties(values, _excluded);\n\n  React.useEffect(() => {\n    setValues(initialValues);\n  }, [initialValues]);\n  return __jsx(ModalContainer, {\n    size: \"2xl\",\n    isOpen: isOpen,\n    title: \"Edit row\",\n    showCloseButton: true,\n    onClose: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(ModalBody, {\n    paddingBottom: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    paddingBottom: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, Object.keys(rest).map((item, i) => {\n    const {\n      type,\n      label,\n      name\n    } = rest[item];\n    return __jsx(Stack, {\n      key: i,\n      isInline: true,\n      flexWrap: \"wrap\",\n      alignItems: \"center\",\n      height: ['auto', '40px', '40px', '40px'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 15\n      }\n    }, __jsx(Stack, {\n      isInline: true,\n      width: \"160px\",\n      height: \"100%\",\n      overflow: \"hidden\",\n      alignItems: \"center\",\n      fontSize: \"0.875rem\",\n      whiteSpace: \"nowrap\",\n      color: \"rgba(55, 53, 47, 0.6)\",\n      style: {\n        textOverflow: 'ellipsis'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }\n    }, __jsx(Icon, {\n      name: PROPERTIES_ICONS[type.toLowerCase()],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 19\n      }\n    }), __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 19\n      }\n    }, label)), __jsx(PseudoBox, {\n      flex: 1,\n      height: \"100%\",\n      borderRadius: \"5px\",\n      fontSize: \"0.875rem\",\n      _hover: {\n        backgroundColor: 'gray.50'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, __jsx(EditableCell, {\n      column: {\n        id: name\n      },\n      row: {\n        index: rowIndex\n      },\n      value: initialValues[item],\n      updateTableData: onRowUpdate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 19\n      }\n    })));\n  })), __jsx(PropertyDropdown, {\n    placement: \"bottom-start\",\n    onChange: property => onAddProperty(property),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    size: \"xs\",\n    variant: \"ghost\",\n    variantColor: \"blue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, \"Add New Property\"))));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/tables/components/table/table.components/RowDetailsModal.tsx"],"names":["Icon","ModalBody","PseudoBox","Stack","Text","React","Button","ModalContainer","PROPERTIES_ICONS","PropertyDropdown","EditableCell","RowDetailsModal","isOpen","onClose","onRowUpdate","initialValues","onAddProperty","values","setValues","useState","id","rowIndex","rest","useEffect","Object","keys","map","item","i","type","label","name","textOverflow","toLowerCase","backgroundColor","index","property"],"mappings":"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","sourcesContent":["import { Icon, ModalBody, PseudoBox, Stack, Text } from '@chakra-ui/core';\nimport React from 'react';\nimport { Button, ModalContainer, ModalContainerOptions } from '../../../../../components';\nimport { PROPERTIES_ICONS, PropertyDropdown, PropertySchema } from '../../property';\nimport { EditableCell } from './EditableCell';\n\nexport type RowDetailsModalProps = {\n  initialValues?: any;\n  onRowUpdate: () => void;\n  isOpen: ModalContainerOptions['isOpen'];\n  onClose: ModalContainerOptions['onClose'];\n  onAddProperty: (value?: PropertySchema) => void;\n};\n\nexport const RowDetailsModal = ({\n  isOpen,\n  onClose,\n  onRowUpdate,\n  initialValues,\n  onAddProperty,\n}: RowDetailsModalProps) => {\n  const [values, setValues] = React.useState(initialValues);\n  const { id, rowIndex, ...rest } = values;\n  React.useEffect(() => {\n    setValues(initialValues);\n  }, [initialValues]);\n\n  return (\n    <ModalContainer size=\"2xl\" isOpen={isOpen} title=\"Edit row\" showCloseButton onClose={onClose}>\n      <ModalBody paddingBottom=\"2rem\">\n        <Stack paddingBottom=\"1rem\">\n          {Object.keys(rest).map((item, i) => {\n            const { type, label, name } = rest[item];\n            return (\n              <Stack\n                key={i}\n                isInline\n                flexWrap=\"wrap\"\n                alignItems=\"center\"\n                height={['auto', '40px', '40px', '40px']}\n              >\n                <Stack\n                  isInline\n                  width=\"160px\"\n                  height=\"100%\"\n                  overflow=\"hidden\"\n                  alignItems=\"center\"\n                  fontSize=\"0.875rem\"\n                  whiteSpace=\"nowrap\"\n                  color=\"rgba(55, 53, 47, 0.6)\"\n                  style={{ textOverflow: 'ellipsis' }}\n                >\n                  <Icon name={PROPERTIES_ICONS[type.toLowerCase()]} />\n                  <Text>{label}</Text>\n                </Stack>\n                <PseudoBox\n                  flex={1}\n                  height=\"100%\"\n                  borderRadius=\"5px\"\n                  fontSize=\"0.875rem\"\n                  _hover={{ backgroundColor: 'gray.50' }}\n                >\n                  <EditableCell\n                    column={{ id: name }}\n                    row={{ index: rowIndex }}\n                    value={initialValues[item]}\n                    updateTableData={onRowUpdate}\n                  />\n                </PseudoBox>\n              </Stack>\n            );\n          })}\n        </Stack>\n        <PropertyDropdown placement=\"bottom-start\" onChange={property => onAddProperty(property)}>\n          <Button size=\"xs\" variant=\"ghost\" variantColor=\"blue\">\n            Add New Property\n          </Button>\n        </PropertyDropdown>\n      </ModalBody>\n    </ModalContainer>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}