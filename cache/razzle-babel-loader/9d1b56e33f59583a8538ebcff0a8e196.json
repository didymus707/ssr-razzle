{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/tables/components/table/table.components/NewTableImportModal.tsx\";\nvar __jsx = React.createElement;\nimport { Box, Checkbox, Divider, Flex, FormLabel, IconButton, ModalBody, Select, Text } from '@chakra-ui/core';\nimport camelCase from 'lodash/camelCase';\nimport isEmpty from 'lodash/isEmpty';\nimport * as React from 'react';\nimport { ModalContainer, Button } from '../../../../../components';\nimport { PropertyDropdown } from '../../property';\nimport { useProperties } from '../table.hooks';\n\nfunction SectionOne({\n  file,\n  isLoading,\n  onRemoveFile,\n  handleUpload\n}) {\n  const [date_format, setDateFormat] = React.useState('');\n  const [agreeCheck, setAgreeCheck] = React.useState(false);\n\n  function handleDateFormatChange(e) {\n    setDateFormat(e.target.value);\n  }\n\n  function handleAgreeCheck(e) {\n    setAgreeCheck(e.target.checked);\n  }\n\n  return __jsx(React.Fragment, null, file && __jsx(Box, {\n    marginBottom: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, __jsx(Flex, {\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    fontSize: \"14px\",\n    marginBottom: \"0.25rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 15\n    }\n  }, file.name), __jsx(Text, {\n    color: \"lightBlack\",\n    fontSize: \"0.625rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }\n  }, Math.ceil(file.size / 1000), \" KB\")), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, __jsx(IconButton, {\n    size: \"xs\",\n    variant: \"ghost\",\n    \"aria-label\": \"close\",\n    icon: \"small-close\",\n    onClick: onRemoveFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  })))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), __jsx(Box, {\n    marginY: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, __jsx(FormLabel, {\n    fontSize: \"0.8rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, \"Date Format\"), __jsx(Select, {\n    size: \"sm\",\n    value: date_format,\n    onChange: handleDateFormatChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, __jsx(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, \"-- Select date format--\"), __jsx(\"option\", {\n    value: \"dd/mm/yyyy\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, \"dd/mm/yyyy\"), __jsx(\"option\", {\n    value: \"mm/dd/yyyy\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, \"mm/dd/yyyy\"), __jsx(\"option\", {\n    value: \"yyyy/mm/dd\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, \"yyyy/mm/dd\"))), __jsx(Box, {\n    marginBottom: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, __jsx(Checkbox, {\n    variantColor: \"blue\",\n    isChecked: agreeCheck,\n    alignItems: \"flex-start\",\n    onChange: handleAgreeCheck,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    color: \"lightBlack\",\n    fontSize: \"0.75rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, \"I agree that all contacts in this import are expecting to hear from me or my organisation. I have a prior relationship with these contacts and I have emailed or messaged them at least once in the past year. I can confirm that this list wasn\\u2019t purchased, rented, appended, or provided by a third party.\"))), __jsx(Box, {\n    marginBottom: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    size: \"sm\",\n    fontWeight: \"normal\",\n    isLoading: isLoading,\n    variantColor: \"blue\",\n    isDisabled: !agreeCheck,\n    onClick: () => handleUpload({\n      file,\n      source: 'csv',\n      name: file.name,\n      agree: agreeCheck,\n      date_format: date_format\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \"Upload File\")));\n}\n\nfunction SectionTwo(props) {\n  var _importedData$columns;\n\n  const {\n    isLoading,\n    importedData,\n    handleCreateTable\n  } = props;\n  const columns = importedData === null || importedData === void 0 ? void 0 : (_importedData$columns = importedData.columns) === null || _importedData$columns === void 0 ? void 0 : _importedData$columns.map(({\n    name\n  }) => ({\n    label: name,\n    hidden: false,\n    type: 'TEXT',\n    name: camelCase(name)\n  }));\n  const {\n    properties,\n    onPropertyUpdate,\n    onPropertyDelete,\n    onPropertyDuplicate\n  } = useProperties({\n    properties: columns\n  });\n\n  function onCreateTable() {\n    if (properties && !isEmpty(properties)) {\n      handleCreateTable(properties);\n    }\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Text, {\n    fontSize: \"0.875rem\",\n    marginBottom: \"1rem\",\n    color: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, \"Set the columns from your file as properties to create a new table\"), __jsx(Flex, {\n    height: \"auto\",\n    padding: \"1rem\",\n    flexWrap: \"wrap\",\n    overflowY: \"auto\",\n    marginBottom: \"1rem\",\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, properties === null || properties === void 0 ? void 0 : properties.map((item, i) => __jsx(PropertyDropdown, {\n    key: i,\n    property: item,\n    onDelete: () => onPropertyDelete(i),\n    onDuplicate: () => onPropertyDuplicate(item),\n    onChange: property => onPropertyUpdate(property, i),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    size: \"sm\",\n    width: \"48%\",\n    isFullWidth: true,\n    variant: \"ghost\",\n    textAlign: \"left\",\n    marginBottom: \"1rem\",\n    justifyContent: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, item.label)))), __jsx(Box, {\n    marginBottom: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    size: \"sm\",\n    fontWeight: \"normal\",\n    isLoading: isLoading,\n    variantColor: \"blue\",\n    onClick: onCreateTable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, \"Create table\")));\n}\n\nexport const NewTableImportModal = ({\n  file,\n  isOpen,\n  onClose,\n  isLoading,\n  onRemoveFile,\n  importedData,\n  handleUpload,\n  handleMapping,\n  handleCreateTable\n}) => {\n  const modalTitle = !importedData ? 'Import a spreadsheet' : 'Import mapping';\n  return __jsx(ModalContainer, {\n    isOpen: isOpen,\n    showCloseButton: true,\n    onClose: onClose,\n    title: modalTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 5\n    }\n  }, __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }\n  }, !importedData ? __jsx(SectionOne, {\n    file: file,\n    isLoading: isLoading,\n    handleUpload: handleUpload,\n    onRemoveFile: onRemoveFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 11\n    }\n  }) : __jsx(SectionTwo, {\n    isLoading: isLoading,\n    importedData: importedData,\n    handleMapping: handleMapping,\n    handleCreateTable: handleCreateTable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 11\n    }\n  })));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/tables/components/table/table.components/NewTableImportModal.tsx"],"names":["Box","Checkbox","Divider","Flex","FormLabel","IconButton","ModalBody","Select","Text","camelCase","isEmpty","React","ModalContainer","Button","PropertyDropdown","useProperties","SectionOne","file","isLoading","onRemoveFile","handleUpload","date_format","setDateFormat","useState","agreeCheck","setAgreeCheck","handleDateFormatChange","e","target","value","handleAgreeCheck","checked","name","Math","ceil","size","source","agree","SectionTwo","props","importedData","handleCreateTable","columns","map","label","hidden","type","properties","onPropertyUpdate","onPropertyDelete","onPropertyDuplicate","onCreateTable","item","i","property","NewTableImportModal","isOpen","onClose","handleMapping","modalTitle"],"mappings":";;AAAA,SACEA,GADF,EAEEC,QAFF,EAGEC,OAHF,EAIEC,IAJF,EAKEC,SALF,EAMEC,UANF,EAOEC,SAPF,EAQEC,MARF,EASEC,IATF,QAUO,iBAVP;AAWA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,EAAyBC,MAAzB,QAAuC,2BAAvC;AACA,SAASC,gBAAT,QAAiD,gBAAjD;AACA,SAASC,aAAT,QAA8B,gBAA9B;;AAGA,SAASC,UAAT,CAAoB;AAClBC,EAAAA,IADkB;AAElBC,EAAAA,SAFkB;AAGlBC,EAAAA,YAHkB;AAIlBC,EAAAA;AAJkB,CAApB,EAK2F;AACzF,QAAM,CAACC,WAAD,EAAcC,aAAd,IAA+BX,KAAK,CAACY,QAAN,CAAuB,EAAvB,CAArC;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bd,KAAK,CAACY,QAAN,CAAwB,KAAxB,CAApC;;AAEA,WAASG,sBAAT,CAAgCC,CAAhC,EAAyE;AACvEL,IAAAA,aAAa,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;AACD;;AAED,WAASC,gBAAT,CAA0BH,CAA1B,EAAkE;AAChEF,IAAAA,aAAa,CAACE,CAAC,CAACC,MAAF,CAASG,OAAV,CAAb;AACD;;AACD,SACE,4BACGd,IAAI,IACH,MAAC,GAAD;AAAK,IAAA,YAAY,EAAC,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,UAAU,EAAC,QAAjB;AAA0B,IAAA,cAAc,EAAC,eAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAC,MAAf;AAAsB,IAAA,YAAY,EAAC,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,IAAI,CAACe,IADR,CADF,EAIE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC,YAAZ;AAAyB,IAAA,QAAQ,EAAC,UAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAACC,IAAL,CAAUjB,IAAI,CAACkB,IAAL,GAAY,IAAtB,CADH,QAJF,CADF,EASE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,IAAI,EAAC,IADP;AAEE,IAAA,OAAO,EAAC,OAFV;AAGE,kBAAW,OAHb;AAIE,IAAA,IAAI,EAAC,aAJP;AAKE,IAAA,OAAO,EAAEhB,YALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CATF,CADF,CAFJ,EAwBE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxBF,EAyBE,MAAC,GAAD;AAAK,IAAA,OAAO,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,QAAQ,EAAC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,IAAb;AAAkB,IAAA,KAAK,EAAEE,WAAzB;AAAsC,IAAA,QAAQ,EAAEK,sBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,EAEE;AAAQ,IAAA,KAAK,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,EAGE;AAAQ,IAAA,KAAK,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,EAIE;AAAQ,IAAA,KAAK,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,CAFF,CAzBF,EAkCE,MAAC,GAAD;AAAK,IAAA,YAAY,EAAC,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AACE,IAAA,YAAY,EAAC,MADf;AAEE,IAAA,SAAS,EAAEF,UAFb;AAGE,IAAA,UAAU,EAAC,YAHb;AAIE,IAAA,QAAQ,EAAEM,gBAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC,YAAZ;AAAyB,IAAA,QAAQ,EAAC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0TANF,CADF,CAlCF,EAiDE,MAAC,GAAD;AAAK,IAAA,YAAY,EAAC,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,IAAI,EAAC,IADP;AAEE,IAAA,UAAU,EAAC,QAFb;AAGE,IAAA,SAAS,EAAEZ,SAHb;AAIE,IAAA,YAAY,EAAC,MAJf;AAKE,IAAA,UAAU,EAAE,CAACM,UALf;AAME,IAAA,OAAO,EAAE,MACPJ,YAAY,CAAC;AACXH,MAAAA,IADW;AAEXmB,MAAAA,MAAM,EAAE,KAFG;AAGXJ,MAAAA,IAAI,EAAEf,IAAI,CAACe,IAHA;AAIXK,MAAAA,KAAK,EAAEb,UAJI;AAKXH,MAAAA,WAAW,EAAEA;AALF,KAAD,CAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CAjDF,CADF;AAwED;;AAED,SAASiB,UAAT,CACEC,KADF,EAKE;AAAA;;AACA,QAAM;AAAErB,IAAAA,SAAF;AAAasB,IAAAA,YAAb;AAA2BC,IAAAA;AAA3B,MAAiDF,KAAvD;AAEA,QAAMG,OAAO,GAAGF,YAAH,aAAGA,YAAH,gDAAGA,YAAY,CAAEE,OAAjB,0DAAG,sBAAuBC,GAAvB,CAA2B,CAAC;AAAEX,IAAAA;AAAF,GAAD,MAAoB;AAC7DY,IAAAA,KAAK,EAAEZ,IADsD;AAE7Da,IAAAA,MAAM,EAAE,KAFqD;AAG7DC,IAAAA,IAAI,EAAE,MAHuD;AAI7Dd,IAAAA,IAAI,EAAEvB,SAAS,CAACuB,IAAD;AAJ8C,GAApB,CAA3B,CAAhB;AAMA,QAAM;AAAEe,IAAAA,UAAF;AAAcC,IAAAA,gBAAd;AAAgCC,IAAAA,gBAAhC;AAAkDC,IAAAA;AAAlD,MAA0EnC,aAAa,CAAC;AAC5FgC,IAAAA,UAAU,EAAEL;AADgF,GAAD,CAA7F;;AAIA,WAASS,aAAT,GAAyB;AACvB,QAAIJ,UAAU,IAAI,CAACrC,OAAO,CAACqC,UAAD,CAA1B,EAAwC;AACtCN,MAAAA,iBAAiB,CAACM,UAAD,CAAjB;AACD;AACF;;AAED,SACE,4BACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAC,UAAf;AAA0B,IAAA,YAAY,EAAC,MAAvC;AAA8C,IAAA,KAAK,EAAC,OAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0EADF,EAIE,MAAC,IAAD;AACE,IAAA,MAAM,EAAC,MADT;AAEE,IAAA,OAAO,EAAC,MAFV;AAGE,IAAA,QAAQ,EAAC,MAHX;AAIE,IAAA,SAAS,EAAC,MAJZ;AAKE,IAAA,YAAY,EAAC,MALf;AAME,IAAA,cAAc,EAAC,eANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGA,UARH,aAQGA,UARH,uBAQGA,UAAU,CAAEJ,GAAZ,CAAgB,CAACS,IAAD,EAAOC,CAAP,KACf,MAAC,gBAAD;AACE,IAAA,GAAG,EAAEA,CADP;AAEE,IAAA,QAAQ,EAAED,IAFZ;AAGE,IAAA,QAAQ,EAAE,MAAMH,gBAAgB,CAACI,CAAD,CAHlC;AAIE,IAAA,WAAW,EAAE,MAAMH,mBAAmB,CAACE,IAAD,CAJxC;AAKE,IAAA,QAAQ,EAAEE,QAAQ,IAAIN,gBAAgB,CAACM,QAAD,EAAWD,CAAX,CALxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,MAAC,MAAD;AACE,IAAA,IAAI,EAAC,IADP;AAEE,IAAA,KAAK,EAAC,KAFR;AAGE,IAAA,WAAW,MAHb;AAIE,IAAA,OAAO,EAAC,OAJV;AAKE,IAAA,SAAS,EAAC,MALZ;AAME,IAAA,YAAY,EAAC,MANf;AAOE,IAAA,cAAc,EAAC,YAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGD,IAAI,CAACR,KATR,CAPF,CADD,CARH,CAJF,EAkCE,MAAC,GAAD;AAAK,IAAA,YAAY,EAAC,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,IAAI,EAAC,IADP;AAEE,IAAA,UAAU,EAAC,QAFb;AAGE,IAAA,SAAS,EAAE1B,SAHb;AAIE,IAAA,YAAY,EAAC,MAJf;AAKE,IAAA,OAAO,EAAEiC,aALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CAlCF,CADF;AAgDD;;AAED,OAAO,MAAMI,mBAAmB,GAAG,CAAC;AAClCtC,EAAAA,IADkC;AAElCuC,EAAAA,MAFkC;AAGlCC,EAAAA,OAHkC;AAIlCvC,EAAAA,SAJkC;AAKlCC,EAAAA,YALkC;AAMlCqB,EAAAA,YANkC;AAOlCpB,EAAAA,YAPkC;AAQlCsC,EAAAA,aARkC;AASlCjB,EAAAA;AATkC,CAAD,KAUH;AAC9B,QAAMkB,UAAU,GAAG,CAACnB,YAAD,GAAgB,sBAAhB,GAAyC,gBAA5D;AACA,SACE,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAEgB,MAAxB;AAAgC,IAAA,eAAe,MAA/C;AAAgD,IAAA,OAAO,EAAEC,OAAzD;AAAkE,IAAA,KAAK,EAAEE,UAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACnB,YAAD,GACC,MAAC,UAAD;AACE,IAAA,IAAI,EAAEvB,IADR;AAEE,IAAA,SAAS,EAAEC,SAFb;AAGE,IAAA,YAAY,EAAEE,YAHhB;AAIE,IAAA,YAAY,EAAED,YAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAQC,MAAC,UAAD;AACE,IAAA,SAAS,EAAED,SADb;AAEE,IAAA,YAAY,EAAEsB,YAFhB;AAGE,IAAA,aAAa,EAAEkB,aAHjB;AAIE,IAAA,iBAAiB,EAAEjB,iBAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,CADF,CADF;AAqBD,CAjCM","sourcesContent":["import {\n  Box,\n  Checkbox,\n  Divider,\n  Flex,\n  FormLabel,\n  IconButton,\n  ModalBody,\n  Select,\n  Text,\n} from '@chakra-ui/core';\nimport camelCase from 'lodash/camelCase';\nimport isEmpty from 'lodash/isEmpty';\nimport * as React from 'react';\nimport { ModalContainer, Button } from '../../../../../components';\nimport { PropertyDropdown, PropertySchema } from '../../property';\nimport { useProperties } from '../table.hooks';\nimport { NewTableImportModalProps } from '../table.types';\n\nfunction SectionOne({\n  file,\n  isLoading,\n  onRemoveFile,\n  handleUpload,\n}: Pick<NewTableImportModalProps, 'file' | 'isLoading' | 'onRemoveFile' | 'handleUpload'>) {\n  const [date_format, setDateFormat] = React.useState<string>('');\n  const [agreeCheck, setAgreeCheck] = React.useState<boolean>(false);\n\n  function handleDateFormatChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    setDateFormat(e.target.value);\n  }\n\n  function handleAgreeCheck(e: React.ChangeEvent<HTMLInputElement>) {\n    setAgreeCheck(e.target.checked);\n  }\n  return (\n    <>\n      {file && (\n        <Box marginBottom=\"2rem\">\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\n            <Box>\n              <Text fontSize=\"14px\" marginBottom=\"0.25rem\">\n                {file.name}\n              </Text>\n              <Text color=\"lightBlack\" fontSize=\"0.625rem\">\n                {Math.ceil(file.size / 1000)} KB\n              </Text>\n            </Box>\n            <Box>\n              <IconButton\n                size=\"xs\"\n                variant=\"ghost\"\n                aria-label=\"close\"\n                icon=\"small-close\"\n                onClick={onRemoveFile}\n              />\n            </Box>\n          </Flex>\n        </Box>\n      )}\n      <Divider />\n      <Box marginY=\"1.5rem\">\n        <FormLabel fontSize=\"0.8rem\">Date Format</FormLabel>\n        <Select size=\"sm\" value={date_format} onChange={handleDateFormatChange}>\n          <option value=\"\">-- Select date format--</option>\n          <option value=\"dd/mm/yyyy\">dd/mm/yyyy</option>\n          <option value=\"mm/dd/yyyy\">mm/dd/yyyy</option>\n          <option value=\"yyyy/mm/dd\">yyyy/mm/dd</option>\n        </Select>\n      </Box>\n      <Box marginBottom=\"1rem\">\n        <Checkbox\n          variantColor=\"blue\"\n          isChecked={agreeCheck}\n          alignItems=\"flex-start\"\n          onChange={handleAgreeCheck}\n        >\n          <Text color=\"lightBlack\" fontSize=\"0.75rem\">\n            I agree that all contacts in this import are expecting to hear from me or my\n            organisation. I have a prior relationship with these contacts and I have emailed or\n            messaged them at least once in the past year. I can confirm that this list wasn’t\n            purchased, rented, appended, or provided by a third party.\n          </Text>\n        </Checkbox>\n      </Box>\n      <Box marginBottom=\"2rem\">\n        <Button\n          size=\"sm\"\n          fontWeight=\"normal\"\n          isLoading={isLoading}\n          variantColor=\"blue\"\n          isDisabled={!agreeCheck}\n          onClick={() =>\n            handleUpload({\n              file,\n              source: 'csv',\n              name: file.name,\n              agree: agreeCheck,\n              date_format: date_format,\n            })\n          }\n        >\n          Upload File\n        </Button>\n      </Box>\n    </>\n  );\n}\n\nfunction SectionTwo(\n  props: Pick<\n    NewTableImportModalProps,\n    'importedData' | 'isLoading' | 'handleMapping' | 'handleCreateTable'\n  >,\n) {\n  const { isLoading, importedData, handleCreateTable } = props;\n\n  const columns = importedData?.columns?.map(({ name }: any) => ({\n    label: name,\n    hidden: false,\n    type: 'TEXT',\n    name: camelCase(name),\n  })) as PropertySchema[];\n  const { properties, onPropertyUpdate, onPropertyDelete, onPropertyDuplicate } = useProperties({\n    properties: columns,\n  });\n\n  function onCreateTable() {\n    if (properties && !isEmpty(properties)) {\n      handleCreateTable(properties);\n    }\n  }\n\n  return (\n    <>\n      <Text fontSize=\"0.875rem\" marginBottom=\"1rem\" color=\"black\">\n        Set the columns from your file as properties to create a new table\n      </Text>\n      <Flex\n        height=\"auto\"\n        padding=\"1rem\"\n        flexWrap=\"wrap\"\n        overflowY=\"auto\"\n        marginBottom=\"1rem\"\n        justifyContent=\"space-between\"\n      >\n        {properties?.map((item, i) => (\n          <PropertyDropdown\n            key={i}\n            property={item}\n            onDelete={() => onPropertyDelete(i)}\n            onDuplicate={() => onPropertyDuplicate(item)}\n            onChange={property => onPropertyUpdate(property, i)}\n          >\n            <Button\n              size=\"sm\"\n              width=\"48%\"\n              isFullWidth\n              variant=\"ghost\"\n              textAlign=\"left\"\n              marginBottom=\"1rem\"\n              justifyContent=\"flex-start\"\n            >\n              {item.label}\n            </Button>\n          </PropertyDropdown>\n        ))}\n      </Flex>\n      <Box marginBottom=\"2rem\">\n        <Button\n          size=\"sm\"\n          fontWeight=\"normal\"\n          isLoading={isLoading}\n          variantColor=\"blue\"\n          onClick={onCreateTable}\n        >\n          Create table\n        </Button>\n      </Box>\n    </>\n  );\n}\n\nexport const NewTableImportModal = ({\n  file,\n  isOpen,\n  onClose,\n  isLoading,\n  onRemoveFile,\n  importedData,\n  handleUpload,\n  handleMapping,\n  handleCreateTable,\n}: NewTableImportModalProps) => {\n  const modalTitle = !importedData ? 'Import a spreadsheet' : 'Import mapping';\n  return (\n    <ModalContainer isOpen={isOpen} showCloseButton onClose={onClose} title={modalTitle}>\n      <ModalBody>\n        {!importedData ? (\n          <SectionOne\n            file={file}\n            isLoading={isLoading}\n            handleUpload={handleUpload}\n            onRemoveFile={onRemoveFile}\n          />\n        ) : (\n          <SectionTwo\n            isLoading={isLoading}\n            importedData={importedData}\n            handleMapping={handleMapping}\n            handleCreateTable={handleCreateTable}\n          />\n        )}\n      </ModalBody>\n    </ModalContainer>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}