{"ast":null,"code":"import { buildPaymentURL, client } from '../../../../utils';\nimport { setSubscription, setSubscriptionLoading, setSubscriptionPlansLoading, setSubscriptionPlans } from '../settings.reducers';\nexport const fetchSubscription = organization_id => async dispatch => {\n  dispatch(setSubscriptionLoading(true));\n\n  try {\n    const response = await client('', {\n      url: buildPaymentURL(`/subscription/${organization_id}`),\n      method: 'GET'\n    });\n    dispatch(setSubscription(response.data));\n    dispatch(setSubscriptionLoading(false));\n    return response.data;\n  } catch (e) {\n    dispatch(setSubscriptionLoading(false));\n    return null;\n  }\n};\nexport const fetchSubscriptionPlans = () => async dispatch => {\n  dispatch(setSubscriptionPlansLoading(true));\n\n  try {\n    const response = await client('', {\n      url: buildPaymentURL(`/subscription_plan/`),\n      method: 'GET'\n    });\n    const data = {};\n    const by_id = [];\n    response.data.forEach(i => {\n      data[i.id] = i;\n      by_id.push(i.id);\n    });\n    dispatch(setSubscriptionPlans({\n      data,\n      by_id\n    }));\n    dispatch(setSubscriptionPlansLoading(false));\n    return response.data;\n  } catch (e) {\n    dispatch(setSubscriptionPlansLoading(false));\n    return null;\n  }\n};\nexport const createSubscription = payload => async dispatch => {\n  try {\n    const response = await client('', {\n      url: buildPaymentURL(`/subscription/`),\n      method: 'POST',\n      data: payload\n    });\n    dispatch(setSubscription(response.data));\n    return response.data;\n  } catch (e) {\n    return null;\n  }\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/settings/thunks/billing.ts"],"names":["buildPaymentURL","client","setSubscription","setSubscriptionLoading","setSubscriptionPlansLoading","setSubscriptionPlans","fetchSubscription","organization_id","dispatch","response","url","method","data","e","fetchSubscriptionPlans","by_id","forEach","i","id","push","createSubscription","payload"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,MAA1B,QAAwC,mBAAxC;AACA,SACEC,eADF,EAEEC,sBAFF,EAGEC,2BAHF,EAIEC,oBAJF,QAKO,sBALP;AAQA,OAAO,MAAMC,iBAAiB,GAAIC,eAAD,IAAuC,MAAMC,QAAN,IAAkB;AACxFA,EAAAA,QAAQ,CAACL,sBAAsB,CAAC,IAAD,CAAvB,CAAR;;AACA,MAAI;AACF,UAAMM,QAAQ,GAAG,MAAMR,MAAM,CAAC,EAAD,EAAK;AAChCS,MAAAA,GAAG,EAAEV,eAAe,CAAE,iBAAgBO,eAAgB,EAAlC,CADY;AAEhCI,MAAAA,MAAM,EAAE;AAFwB,KAAL,CAA7B;AAIAH,IAAAA,QAAQ,CAACN,eAAe,CAACO,QAAQ,CAACG,IAAV,CAAhB,CAAR;AACAJ,IAAAA,QAAQ,CAACL,sBAAsB,CAAC,KAAD,CAAvB,CAAR;AACA,WAAOM,QAAQ,CAACG,IAAhB;AACD,GARD,CAQE,OAAOC,CAAP,EAAU;AACVL,IAAAA,QAAQ,CAACL,sBAAsB,CAAC,KAAD,CAAvB,CAAR;AACA,WAAO,IAAP;AACD;AACF,CAdM;AAgBP,OAAO,MAAMW,sBAAsB,GAAG,MAAgB,MAAMN,QAAN,IAAkB;AACtEA,EAAAA,QAAQ,CAACJ,2BAA2B,CAAC,IAAD,CAA5B,CAAR;;AACA,MAAI;AACF,UAAMK,QAAQ,GAAG,MAAMR,MAAM,CAAC,EAAD,EAAK;AAChCS,MAAAA,GAAG,EAAEV,eAAe,CAAE,qBAAF,CADY;AAEhCW,MAAAA,MAAM,EAAE;AAFwB,KAAL,CAA7B;AAIA,UAAMC,IAA4B,GAAG,EAArC;AACA,UAAMG,KAAe,GAAG,EAAxB;AAEAN,IAAAA,QAAQ,CAACG,IAAT,CAAcI,OAAd,CAAuBC,CAAD,IAAY;AAChCL,MAAAA,IAAI,CAACK,CAAC,CAACC,EAAH,CAAJ,GAAaD,CAAb;AACAF,MAAAA,KAAK,CAACI,IAAN,CAAWF,CAAC,CAACC,EAAb;AACD,KAHD;AAKAV,IAAAA,QAAQ,CAACH,oBAAoB,CAAC;AAAEO,MAAAA,IAAF;AAAQG,MAAAA;AAAR,KAAD,CAArB,CAAR;AACAP,IAAAA,QAAQ,CAACJ,2BAA2B,CAAC,KAAD,CAA5B,CAAR;AACA,WAAOK,QAAQ,CAACG,IAAhB;AACD,GAhBD,CAgBE,OAAOC,CAAP,EAAU;AACVL,IAAAA,QAAQ,CAACJ,2BAA2B,CAAC,KAAD,CAA5B,CAAR;AACA,WAAO,IAAP;AACD;AACF,CAtBM;AAwBP,OAAO,MAAMgB,kBAAkB,GAAIC,OAAD,IAKlB,MAAMb,QAAN,IAAkB;AAChC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMR,MAAM,CAAC,EAAD,EAAK;AAChCS,MAAAA,GAAG,EAAEV,eAAe,CAAE,gBAAF,CADY;AAEhCW,MAAAA,MAAM,EAAE,MAFwB;AAGhCC,MAAAA,IAAI,EAAES;AAH0B,KAAL,CAA7B;AAKAb,IAAAA,QAAQ,CAACN,eAAe,CAACO,QAAQ,CAACG,IAAV,CAAhB,CAAR;AACA,WAAOH,QAAQ,CAACG,IAAhB;AACD,GARD,CAQE,OAAOC,CAAP,EAAU;AACV,WAAO,IAAP;AACD;AACF,CAjBM","sourcesContent":["import { buildPaymentURL, client } from '../../../../utils'\nimport {\n  setSubscription,\n  setSubscriptionLoading,\n  setSubscriptionPlansLoading,\n  setSubscriptionPlans,\n} from '../settings.reducers'\nimport { AppThunk } from '../../../../root'\n\nexport const fetchSubscription = (organization_id: string): AppThunk => async dispatch => {\n  dispatch(setSubscriptionLoading(true))\n  try {\n    const response = await client('', {\n      url: buildPaymentURL(`/subscription/${organization_id}`),\n      method: 'GET',\n    })\n    dispatch(setSubscription(response.data))\n    dispatch(setSubscriptionLoading(false))\n    return response.data\n  } catch (e) {\n    dispatch(setSubscriptionLoading(false))\n    return null\n  }\n}\n\nexport const fetchSubscriptionPlans = (): AppThunk => async dispatch => {\n  dispatch(setSubscriptionPlansLoading(true))\n  try {\n    const response = await client('', {\n      url: buildPaymentURL(`/subscription_plan/`),\n      method: 'GET',\n    })\n    const data: { [key: string]: any } = {}\n    const by_id: string[] = []\n\n    response.data.forEach((i: any) => {\n      data[i.id] = i\n      by_id.push(i.id)\n    })\n\n    dispatch(setSubscriptionPlans({ data, by_id }))\n    dispatch(setSubscriptionPlansLoading(false))\n    return response.data\n  } catch (e) {\n    dispatch(setSubscriptionPlansLoading(false))\n    return null\n  }\n}\n\nexport const createSubscription = (payload: {\n  subscription_plan: string\n  card: string\n  auto_renew: boolean\n  billing_period: 'monthly' | 'yearly'\n}): AppThunk => async dispatch => {\n  try {\n    const response = await client('', {\n      url: buildPaymentURL(`/subscription/`),\n      method: 'POST',\n      data: payload,\n    })\n    dispatch(setSubscription(response.data))\n    return response.data\n  } catch (e) {\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"module"}