{"ast":null,"code":"import _objectSpread from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit';\nimport { selectOrganisationID } from '../../../unauthenticated-app/authentication';\nimport { addContact, addInboxContact, onContactListFetch, onWebSocketAssignedThread, onWebSocketNewThread, onWebSocketResolvedThread, searchInbox, sendMessage, updateContact } from './global';\nimport { fetchThreadsByState } from './global';\nconst columnsAdapter = createEntityAdapter({\n  selectId: column => column.contact_id\n});\n\nconst columnWebsocketCallback = (state, action) => {\n  const {\n    columns\n  } = action.payload;\n  columns && columnsAdapter.upsertMany(state, columns);\n};\n\nexport const columnsSlice = createSlice({\n  name: 'columns',\n  initialState: columnsAdapter.getInitialState(),\n  reducers: {},\n\n  extraReducers(builder) {\n    builder.addCase(fetchThreadsByState.fulfilled, columnWebsocketCallback).addCase(addContact.fulfilled, columnWebsocketCallback).addCase(updateContact.fulfilled, columnWebsocketCallback).addCase(sendMessage.fulfilled, columnWebsocketCallback).addCase(addInboxContact.fulfilled, columnWebsocketCallback).addCase(onWebSocketNewThread, columnWebsocketCallback).addCase(onWebSocketResolvedThread, columnWebsocketCallback).addCase(onWebSocketAssignedThread, columnWebsocketCallback).addCase(onContactListFetch, columnWebsocketCallback);\n  }\n\n});\nexport const columnsReducer = columnsSlice.reducer;\nexport const {\n  selectById: selectColumnById,\n  selectIds: selectColumnIds,\n  selectEntities: selectColumnEntities,\n  selectAll: selectAllColumns,\n  selectTotal: selectTotalColumns\n} = columnsAdapter.getSelectors(state => state.inbox.entities.columns); // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nconst contactsAdapter = createEntityAdapter();\n\nconst websocketCallback = (state, action) => {\n  const {\n    contacts\n  } = action.payload;\n  contacts && contactsAdapter.upsertMany(state, contacts);\n};\n\nexport const contactsSlice = createSlice({\n  name: 'contacts',\n  initialState: contactsAdapter.getInitialState(),\n  reducers: {},\n\n  extraReducers(builder) {\n    builder.addCase(fetchThreadsByState.fulfilled, websocketCallback).addCase(onWebSocketNewThread, websocketCallback).addCase(updateContact.fulfilled, websocketCallback).addCase(sendMessage.fulfilled, websocketCallback).addCase(addInboxContact.fulfilled, websocketCallback).addCase(onWebSocketResolvedThread, websocketCallback).addCase(onWebSocketAssignedThread, websocketCallback).addCase(onContactListFetch, websocketCallback);\n  }\n\n});\nexport const contactsReducer = contactsSlice.reducer;\nexport const {\n  selectById: selectContactById,\n  selectIds: selectContactIds,\n  selectEntities: selectContactEntities,\n  selectAll: selectAllContacts,\n  selectTotal: selectTotalContacts\n} = contactsAdapter.getSelectors(state => state.inbox.entities.contacts); // ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nconst addressBooksAdapter = createEntityAdapter({\n  selectId: addressBook => addressBook.uuid\n});\n\nconst addressUpsertCallback = (state, action) => {\n  const {\n    addressBooks\n  } = action.payload;\n  addressBooks && addressBooksAdapter.upsertMany(state, addressBooks);\n};\n\nexport const addressBooksSlice = createSlice({\n  name: 'addressBooks',\n  initialState: addressBooksAdapter.getInitialState(),\n  reducers: {},\n\n  extraReducers(builder) {\n    builder.addCase(fetchThreadsByState.fulfilled, addressUpsertCallback).addCase(addContact.fulfilled, addressUpsertCallback).addCase(sendMessage.fulfilled, addressUpsertCallback).addCase(onWebSocketNewThread, addressUpsertCallback).addCase(onWebSocketResolvedThread, addressUpsertCallback).addCase(onWebSocketAssignedThread, addressUpsertCallback).addCase(searchInbox.fulfilled, addressUpsertCallback);\n  }\n\n});\nexport const addressBooksReducer = addressBooksSlice.reducer;\nexport const {\n  selectById: selectAddressBookById,\n  selectIds: selectAddressBookIds,\n  selectEntities: selectAddressBookEntities,\n  selectAll: selectAllAddressBooks,\n  selectTotal: selectTotalAddressBooks\n} = addressBooksAdapter.getSelectors(state => state.inbox.entities.addressBooks);\nexport const selectAddressBookByOrgIDAndCustomerID = createSelector((_, payload) => payload.organisation_id, (_, payload) => payload.customer_id, selectAllAddressBooks, (orgID, custID, addressBooks) => orgID && custID ? addressBooks.find(({\n  organisation_id,\n  customer_id\n}) => orgID === organisation_id && customer_id === custID) : undefined);\nexport const selectAddressBookDetailByID = createSelector(selectAddressBookById, selectContactEntities, selectColumnEntities, (addressBook, contacts, cs) => {\n  if (!addressBook) {\n    return null;\n  }\n\n  const contactinfo = contacts[(addressBook === null || addressBook === void 0 ? void 0 : addressBook.contact_id) || ''];\n  const columns = cs[(addressBook === null || addressBook === void 0 ? void 0 : addressBook.contact_id) || ''];\n  return _objectSpread(_objectSpread({}, addressBook), {}, {\n    contactinfo: _objectSpread(_objectSpread({}, contactinfo), {}, {\n      columns\n    })\n  });\n});\nexport const selectContactNameFromAdderssBook = () => ''; // export const selectContactNameFromAdderssBook = createSelector(\n//   selectOrganisationID,\n//   selectColumnEntities,\n//   selectAllAddressBooks,\n//   (_: RootState, sender_id: string) => sender_id,\n//   (orgID, cs, addressBooks, sender_id) => {\n//     const addressBook = addressBooks.find(\n//       ({ organisation_id, customer_id }) => organisation_id === orgID && customer_id === sender_id,\n//     );\n//     const columns = cs[addressBook?.contact_id || ''];\n//     return columns && columns[1];\n//   },\n// );\n// export const selectContactName = createSelector(\n//   selectOrganisationID,\n//   selectColumnEntities,\n//   selectAllAddressBooks,\n//   (_: RootState, payload: { id: string }) => payload.id,\n//   (orgID, cs, addressBooks, sender_id) => {\n//     const addressBook = addressBooks.find(\n//       ({ organisation_id, customer_id }) => organisation_id === orgID && customer_id === sender_id,\n//     );\n//     const columns = cs[addressBook?.contact_id || ''];\n//     return columns && columns[1];\n//   },\n// );\n\nexport const selectContactName = createSelector(selectOrganisationID, selectColumnEntities, selectAllAddressBooks, (_, payload) => payload.id, (orgID, cs, addressBooks, sender_id) => {\n  const addressBook = addressBooks.find(({\n    organisation_id,\n    customer_id\n  }) => organisation_id === orgID && customer_id === sender_id);\n  const columns = cs[(addressBook === null || addressBook === void 0 ? void 0 : addressBook.contact_id) || ''];\n  return columns && columns[1];\n});","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/slices/contact.ts"],"names":["createEntityAdapter","createSelector","createSlice","selectOrganisationID","addContact","addInboxContact","onContactListFetch","onWebSocketAssignedThread","onWebSocketNewThread","onWebSocketResolvedThread","searchInbox","sendMessage","updateContact","fetchThreadsByState","columnsAdapter","selectId","column","contact_id","columnWebsocketCallback","state","action","columns","payload","upsertMany","columnsSlice","name","initialState","getInitialState","reducers","extraReducers","builder","addCase","fulfilled","columnsReducer","reducer","selectById","selectColumnById","selectIds","selectColumnIds","selectEntities","selectColumnEntities","selectAll","selectAllColumns","selectTotal","selectTotalColumns","getSelectors","inbox","entities","contactsAdapter","websocketCallback","contacts","contactsSlice","contactsReducer","selectContactById","selectContactIds","selectContactEntities","selectAllContacts","selectTotalContacts","addressBooksAdapter","addressBook","uuid","addressUpsertCallback","addressBooks","addressBooksSlice","addressBooksReducer","selectAddressBookById","selectAddressBookIds","selectAddressBookEntities","selectAllAddressBooks","selectTotalAddressBooks","selectAddressBookByOrgIDAndCustomerID","_","organisation_id","customer_id","orgID","custID","find","undefined","selectAddressBookDetailByID","cs","contactinfo","selectContactNameFromAdderssBook","selectContactName","id","sender_id"],"mappings":"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","sourcesContent":["import { createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../../../root';\nimport { selectOrganisationID } from '../../../unauthenticated-app/authentication';\nimport { AddressBookSchema, ContactColumnSchema, ContactSchema } from '../inbox.types';\nimport {\n  addContact,\n  addInboxContact,\n  onContactListFetch,\n  onWebSocketAssignedThread,\n  onWebSocketNewThread,\n  onWebSocketResolvedThread,\n  searchInbox,\n  sendMessage,\n  updateContact,\n} from './global';\nimport { fetchThreadsByState } from './global';\n\nconst columnsAdapter = createEntityAdapter<ContactColumnSchema>({\n  selectId: column => column.contact_id,\n});\n\nconst columnWebsocketCallback = (state: any, action: any) => {\n  const { columns } = action.payload;\n  columns && columnsAdapter.upsertMany(state, columns);\n};\n\nexport const columnsSlice = createSlice({\n  name: 'columns',\n  initialState: columnsAdapter.getInitialState(),\n  reducers: {},\n  extraReducers(builder) {\n    builder\n      .addCase(fetchThreadsByState.fulfilled, columnWebsocketCallback)\n      .addCase(addContact.fulfilled, columnWebsocketCallback)\n      .addCase(updateContact.fulfilled, columnWebsocketCallback)\n      .addCase(sendMessage.fulfilled, columnWebsocketCallback)\n      .addCase(addInboxContact.fulfilled, columnWebsocketCallback)\n      .addCase(onWebSocketNewThread, columnWebsocketCallback)\n      .addCase(onWebSocketResolvedThread, columnWebsocketCallback)\n      .addCase(onWebSocketAssignedThread, columnWebsocketCallback)\n      .addCase(onContactListFetch, columnWebsocketCallback);\n  },\n});\n\nexport const columnsReducer = columnsSlice.reducer;\n\nexport const {\n  selectById: selectColumnById,\n  selectIds: selectColumnIds,\n  selectEntities: selectColumnEntities,\n  selectAll: selectAllColumns,\n  selectTotal: selectTotalColumns,\n} = columnsAdapter.getSelectors<RootState>(state => state.inbox.entities.columns);\n\n// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nconst contactsAdapter = createEntityAdapter<ContactSchema>();\n\nconst websocketCallback = (state: any, action: any) => {\n  const { contacts } = action.payload;\n  contacts && contactsAdapter.upsertMany(state, contacts);\n};\n\nexport const contactsSlice = createSlice({\n  name: 'contacts',\n  initialState: contactsAdapter.getInitialState(),\n  reducers: {},\n  extraReducers(builder) {\n    builder\n      .addCase(fetchThreadsByState.fulfilled, websocketCallback)\n      .addCase(onWebSocketNewThread, websocketCallback)\n      .addCase(updateContact.fulfilled, websocketCallback)\n      .addCase(sendMessage.fulfilled, websocketCallback)\n      .addCase(addInboxContact.fulfilled, websocketCallback)\n      .addCase(onWebSocketResolvedThread, websocketCallback)\n      .addCase(onWebSocketAssignedThread, websocketCallback)\n      .addCase(onContactListFetch, websocketCallback);\n  },\n});\n\nexport const contactsReducer = contactsSlice.reducer;\n\nexport const {\n  selectById: selectContactById,\n  selectIds: selectContactIds,\n  selectEntities: selectContactEntities,\n  selectAll: selectAllContacts,\n  selectTotal: selectTotalContacts,\n} = contactsAdapter.getSelectors<RootState>(state => state.inbox.entities.contacts);\n\n// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nconst addressBooksAdapter = createEntityAdapter<AddressBookSchema>({\n  selectId: addressBook => addressBook.uuid,\n});\n\nconst addressUpsertCallback = (state: any, action: any) => {\n  const { addressBooks } = action.payload;\n  addressBooks && addressBooksAdapter.upsertMany(state, addressBooks);\n};\n\nexport const addressBooksSlice = createSlice({\n  name: 'addressBooks',\n  initialState: addressBooksAdapter.getInitialState(),\n  reducers: {},\n  extraReducers(builder) {\n    builder\n      .addCase(fetchThreadsByState.fulfilled, addressUpsertCallback)\n      .addCase(addContact.fulfilled, addressUpsertCallback)\n      .addCase(sendMessage.fulfilled, addressUpsertCallback)\n      .addCase(onWebSocketNewThread, addressUpsertCallback)\n      .addCase(onWebSocketResolvedThread, addressUpsertCallback)\n      .addCase(onWebSocketAssignedThread, addressUpsertCallback)\n      .addCase(searchInbox.fulfilled, addressUpsertCallback);\n  },\n});\n\nexport const addressBooksReducer = addressBooksSlice.reducer;\n\nexport const {\n  selectById: selectAddressBookById,\n  selectIds: selectAddressBookIds,\n  selectEntities: selectAddressBookEntities,\n  selectAll: selectAllAddressBooks,\n  selectTotal: selectTotalAddressBooks,\n} = addressBooksAdapter.getSelectors<RootState>(state => state.inbox.entities.addressBooks);\n\nexport const selectAddressBookByOrgIDAndCustomerID = createSelector(\n  (_: RootState, payload: Pick<AddressBookSchema, 'customer_id' | 'organisation_id'>) =>\n    payload.organisation_id,\n  (_: RootState, payload: Pick<AddressBookSchema, 'customer_id' | 'organisation_id'>) =>\n    payload.customer_id,\n  selectAllAddressBooks,\n  (orgID, custID, addressBooks) =>\n    orgID && custID\n      ? addressBooks.find(\n          ({ organisation_id, customer_id }) => orgID === organisation_id && customer_id === custID,\n        )\n      : undefined,\n);\n\nexport const selectAddressBookDetailByID = createSelector(\n  selectAddressBookById,\n  selectContactEntities,\n  selectColumnEntities,\n  (addressBook, contacts, cs) => {\n    if (!addressBook) {\n      return null;\n    }\n\n    const contactinfo = contacts[addressBook?.contact_id || ''];\n    const columns = cs[addressBook?.contact_id || ''];\n\n    return { ...addressBook, contactinfo: { ...contactinfo, columns } };\n  },\n);\n\nexport const selectContactNameFromAdderssBook = () => '';\n\n// export const selectContactNameFromAdderssBook = createSelector(\n//   selectOrganisationID,\n//   selectColumnEntities,\n//   selectAllAddressBooks,\n//   (_: RootState, sender_id: string) => sender_id,\n//   (orgID, cs, addressBooks, sender_id) => {\n//     const addressBook = addressBooks.find(\n//       ({ organisation_id, customer_id }) => organisation_id === orgID && customer_id === sender_id,\n//     );\n//     const columns = cs[addressBook?.contact_id || ''];\n\n//     return columns && columns[1];\n//   },\n// );\n\n// export const selectContactName = createSelector(\n//   selectOrganisationID,\n//   selectColumnEntities,\n//   selectAllAddressBooks,\n//   (_: RootState, payload: { id: string }) => payload.id,\n//   (orgID, cs, addressBooks, sender_id) => {\n//     const addressBook = addressBooks.find(\n//       ({ organisation_id, customer_id }) => organisation_id === orgID && customer_id === sender_id,\n//     );\n//     const columns = cs[addressBook?.contact_id || ''];\n\n//     return columns && columns[1];\n//   },\n// );\n\nexport const selectContactName = createSelector(\n  selectOrganisationID,\n  selectColumnEntities,\n  selectAllAddressBooks,\n  (_: RootState, payload: { id: string }) => payload.id,\n  (orgID, cs, addressBooks, sender_id) => {\n    const addressBook = addressBooks.find(\n      ({ organisation_id, customer_id }) => organisation_id === orgID && customer_id === sender_id,\n    );\n    const columns = cs[addressBook?.contact_id || ''];\n\n    return columns && columns[1];\n  },\n);\n"]},"metadata":{},"sourceType":"module"}