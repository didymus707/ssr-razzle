{"ast":null,"code":"import { createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit';\nimport { assignThread, fetchThreadByID, fetchThreadMessages, fetchThreadsByState, onMessageRead, onWebSocketAccountDisconnected, onWebSocketAssignedThread, onWebSocketNewMessage, onWebSocketNewThread, onWebSocketResolvedThread, searchInbox, sendInboxTemplate, sendMessage } from './global';\nimport { selectAllMessages } from './message';\nconst notificationsAdapter = createEntityAdapter({\n  selectId: notification => notification.uuid\n});\n\nconst websocketCallback = (state, action) => {\n  const {\n    notifications\n  } = action.payload;\n  notifications && notificationsAdapter.upsertMany(state, notifications);\n};\n\nexport const notificationsSlice = createSlice({\n  name: \"inbox_notifications\",\n  initialState: notificationsAdapter.getInitialState(),\n  reducers: {},\n\n  extraReducers(builder) {\n    builder.addCase(fetchThreadsByState.fulfilled, websocketCallback).addCase(fetchThreadMessages.fulfilled, websocketCallback).addCase(fetchThreadByID.fulfilled, websocketCallback).addCase(sendInboxTemplate.fulfilled, websocketCallback).addCase(assignThread.fulfilled, websocketCallback).addCase(sendMessage.fulfilled, websocketCallback).addCase(searchInbox.fulfilled, websocketCallback).addCase(onWebSocketNewThread, websocketCallback).addCase(onWebSocketResolvedThread, websocketCallback).addCase(onWebSocketAssignedThread, websocketCallback).addCase(onWebSocketNewMessage, websocketCallback).addCase(onWebSocketAccountDisconnected, (state, action) => {\n      const {\n        notificationIDs\n      } = action.payload;\n      (notificationIDs === null || notificationIDs === void 0 ? void 0 : notificationIDs.length) > 0 && notificationsAdapter.removeMany(state, notificationIDs);\n    }).addCase(onMessageRead, (state, action) => {\n      const {\n        notificationID: id,\n        status\n      } = action.payload;\n\n      if (id && ['sent', 'delivered'].includes(status)) {\n        notificationsAdapter.updateOne(state, {\n          id,\n          changes: {\n            status: 'read'\n          }\n        });\n      }\n    });\n  }\n\n});\nexport const notificationsReducer = notificationsSlice.reducer;\nexport const {\n  selectById: selectNotificationById,\n  selectIds: selectNotificationIds,\n  selectEntities: selectNotificationEntities,\n  selectAll: selectAllNotifications,\n  selectTotal: selectTotalNotifications\n} = notificationsAdapter.getSelectors(state => state.inbox.entities.notifications);\nexport const selectMessageNotificationStatus = createSelector(selectAllNotifications, (_, payload) => payload, (notifications, payload) => {\n  var _notifications$find;\n\n  return payload.message_id.includes('unknown') ? null : (_notifications$find = notifications.find(({\n    user_id,\n    message_id\n  }) => payload.message_id === message_id && user_id === payload.user_id)) === null || _notifications$find === void 0 ? void 0 : _notifications$find.status;\n});\nexport const selectThreadUnreadCount = createSelector(selectAllNotifications, selectAllMessages, (_, payload) => payload, (notifications, messages, payload) => {\n  const messageIDs = messages.filter(({\n    thread_id\n  }) => thread_id === payload.thread_id).map(({\n    uuid\n  }) => uuid);\n  return notifications.filter(({\n    user_id,\n    message_id,\n    status\n  }) => messageIDs.includes(message_id) && user_id === payload.author_id && ['sent', 'delivered'].includes(status)).length;\n});\nexport const selectMessageNotificationID = createSelector(selectAllNotifications, (_, payload) => payload, (notifications, payload) => {\n  var _notifications$find2;\n\n  return (_notifications$find2 = notifications.find(({\n    user_id,\n    message_id\n  }) => payload.message_id === message_id && user_id === payload.user_id)) === null || _notifications$find2 === void 0 ? void 0 : _notifications$find2.uuid;\n});\nexport const makeSelectMessageNotificationStatus = () => selectMessageNotificationStatus;","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/slices/notification.ts"],"names":["createEntityAdapter","createSelector","createSlice","assignThread","fetchThreadByID","fetchThreadMessages","fetchThreadsByState","onMessageRead","onWebSocketAccountDisconnected","onWebSocketAssignedThread","onWebSocketNewMessage","onWebSocketNewThread","onWebSocketResolvedThread","searchInbox","sendInboxTemplate","sendMessage","selectAllMessages","notificationsAdapter","selectId","notification","uuid","websocketCallback","state","action","notifications","payload","upsertMany","notificationsSlice","name","initialState","getInitialState","reducers","extraReducers","builder","addCase","fulfilled","notificationIDs","length","removeMany","notificationID","id","status","includes","updateOne","changes","notificationsReducer","reducer","selectById","selectNotificationById","selectIds","selectNotificationIds","selectEntities","selectNotificationEntities","selectAll","selectAllNotifications","selectTotal","selectTotalNotifications","getSelectors","inbox","entities","selectMessageNotificationStatus","_","message_id","find","user_id","selectThreadUnreadCount","messages","messageIDs","filter","thread_id","map","author_id","selectMessageNotificationID","makeSelectMessageNotificationStatus"],"mappings":"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","sourcesContent":["import { createEntityAdapter, createSelector, createSlice  } from '@reduxjs/toolkit'\nimport { RootState } from '../../../../root'\nimport { MessageSchema, NotificationSchema } from '../inbox.types';\nimport {\n  assignThread, fetchThreadByID, fetchThreadMessages, fetchThreadsByState,\n  onMessageRead, onWebSocketAccountDisconnected, onWebSocketAssignedThread,\n  onWebSocketNewMessage, onWebSocketNewThread, onWebSocketResolvedThread,\n  searchInbox, sendInboxTemplate, sendMessage\n} from './global';\nimport { selectAllMessages } from './message';\n\nconst notificationsAdapter = createEntityAdapter<NotificationSchema>({\n  selectId: (notification) => notification.uuid\n});\n\nconst websocketCallback = (state: any, action: any) => {\n  const { notifications } = action.payload;\n  notifications && notificationsAdapter.upsertMany(state, notifications);\n};\n\nexport const notificationsSlice = createSlice({\n  name: \"inbox_notifications\",\n  initialState: notificationsAdapter.getInitialState(),\n  reducers: {},\n  extraReducers(builder) {\n    builder\n      .addCase(fetchThreadsByState.fulfilled, websocketCallback)\n      .addCase(fetchThreadMessages.fulfilled, websocketCallback)\n      .addCase(fetchThreadByID.fulfilled, websocketCallback)\n      .addCase(sendInboxTemplate.fulfilled, websocketCallback)\n      .addCase(assignThread.fulfilled, websocketCallback)\n      .addCase(sendMessage.fulfilled, websocketCallback)\n      .addCase(searchInbox.fulfilled, websocketCallback)\n      .addCase(onWebSocketNewThread, websocketCallback)\n      .addCase(onWebSocketResolvedThread, websocketCallback)\n      .addCase(onWebSocketAssignedThread, websocketCallback)\n      .addCase(onWebSocketNewMessage, websocketCallback)\n      .addCase(onWebSocketAccountDisconnected, (state, action) => {\n        const { notificationIDs } = action.payload;\n        \n        notificationIDs?.length > 0 && notificationsAdapter.removeMany(state, notificationIDs);\n      })\n      .addCase(onMessageRead, (state, action) => {\n        const { notificationID: id, status } = action.payload;\n        if (id && ['sent', 'delivered'].includes(status)) {\n          notificationsAdapter.updateOne(state, { id, changes: { status: 'read' } })\n        }\n      });\n  },\n});\n\nexport const notificationsReducer = notificationsSlice.reducer;\n\nexport const {\n  selectById: selectNotificationById,\n  selectIds: selectNotificationIds,\n  selectEntities: selectNotificationEntities,\n  selectAll: selectAllNotifications,\n  selectTotal: selectTotalNotifications,\n} = notificationsAdapter.getSelectors<RootState>((state) => state.inbox.entities.notifications);\n\nexport const selectMessageNotificationStatus = createSelector(\n  selectAllNotifications,\n  (_: RootState, payload: Pick<NotificationSchema, 'message_id' | 'user_id'>) => payload,\n  (notifications, payload) => payload.message_id.includes('unknown') ? null : notifications.find(\n    ({ user_id, message_id }) => payload.message_id === message_id && user_id === payload.user_id\n  )?.status\n);\n\nexport const selectThreadUnreadCount = createSelector(\n  selectAllNotifications,\n  selectAllMessages,\n  (_: RootState, payload: Pick<MessageSchema, 'thread_id' | 'author_id'>) => payload,\n  (notifications, messages, payload) => {\n    const messageIDs = messages.filter(\n      ({ thread_id }) => thread_id === payload.thread_id\n    ).map(({ uuid }) => uuid);\n\n    return notifications.filter(\n      ({ user_id, message_id, status }) => (\n        messageIDs.includes(message_id) && user_id === payload.author_id && ['sent', 'delivered'].includes(status)\n      )\n    ).length;\n  }\n)\n\nexport const selectMessageNotificationID = createSelector(\n  selectAllNotifications,\n  (_: RootState, payload: Pick<NotificationSchema, 'message_id' | 'user_id'>) => payload,\n  (notifications, payload) => notifications.find(\n    ({ user_id, message_id }) => payload.message_id === message_id && user_id === payload.user_id\n  )?.uuid\n);\n\nexport const makeSelectMessageNotificationStatus = () => selectMessageNotificationStatus;\n"]},"metadata":{},"sourceType":"module"}