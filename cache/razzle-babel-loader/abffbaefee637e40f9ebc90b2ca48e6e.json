{"ast":null,"code":"import _objectSpread from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nconst initialState = {\n  loading: 'resolved',\n  tableLoading: 'resolved',\n  globalLoading: 'resolved',\n  actionsLoading: 'resolved'\n};\n/**\n * Default loading reducer\n */\n\nconst loadingReducer = (state, action) => {\n  switch (action.type) {\n    case 'GLOBAL_LOADING_STARTED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        globalLoading: 'pending'\n      });\n\n    case 'GLOBAL_LOADING_RESOLVED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        globalLoading: 'resolved'\n      });\n\n    case 'TABLE_LOADING_STARTED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tableLoading: 'pending'\n      });\n\n    case 'TABLE_LOADING_RESOLVED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tableLoading: 'resolved'\n      });\n\n    case 'LOADING_STARTED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: 'pending'\n      });\n\n    case 'LOADING_RESOLVED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: 'resolved'\n      });\n\n    case 'ACTIONS_LOADING_STARTED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        actionsLoading: 'pending'\n      });\n\n    case 'ACTIONS_LOADING_RESOLVED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        actionsLoading: 'resolved'\n      });\n\n    default:\n      return initialState;\n  }\n};\n/**\n * Hook for managing loading states using the reducer pattern\n * @param reducer user can pass a custom reducer for loading states\n */\n\n\nexport const useLoading = ({\n  reducer = loadingReducer\n} = {}) => {\n  const [{\n    loading,\n    globalLoading,\n    actionsLoading,\n    tableLoading\n  }, dispatch] = React.useReducer(reducer, initialState);\n  return {\n    dispatch,\n    loading,\n    tableLoading,\n    actionsLoading,\n    globalLoading\n  };\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/hooks/use-loading.ts"],"names":["React","initialState","loading","tableLoading","globalLoading","actionsLoading","loadingReducer","state","action","type","useLoading","reducer","dispatch","useReducer"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAmBA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,UADU;AAEnBC,EAAAA,YAAY,EAAE,UAFK;AAGnBC,EAAAA,aAAa,EAAE,UAHI;AAInBC,EAAAA,cAAc,EAAE;AAJG,CAArB;AAOA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG,CACrBC,KADqB,EAErBC,MAFqB,KAGC;AACtB,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,wBAAL;AACE,6CACKF,KADL;AAEEH,QAAAA,aAAa,EAAE;AAFjB;;AAIF,SAAK,yBAAL;AACE,6CACKG,KADL;AAEEH,QAAAA,aAAa,EAAE;AAFjB;;AAIF,SAAK,uBAAL;AACE,6CACKG,KADL;AAEEJ,QAAAA,YAAY,EAAE;AAFhB;;AAIF,SAAK,wBAAL;AACE,6CACKI,KADL;AAEEJ,QAAAA,YAAY,EAAE;AAFhB;;AAIF,SAAK,iBAAL;AACE,6CACKI,KADL;AAEEL,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAK,kBAAL;AACE,6CACKK,KADL;AAEEL,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAK,yBAAL;AACE,6CACKK,KADL;AAEEF,QAAAA,cAAc,EAAE;AAFlB;;AAIF,SAAK,0BAAL;AACE,6CACKE,KADL;AAEEF,QAAAA,cAAc,EAAE;AAFlB;;AAKF;AACE,aAAOJ,YAAP;AA3CJ;AA6CD,CAjDD;AAmDA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMS,UAAU,GAAG,CAAC;AAAEC,EAAAA,OAAO,GAAGL;AAAZ,IAA+B,EAAhC,KAAuC;AAC/D,QAAM,CACJ;AAAEJ,IAAAA,OAAF;AAAWE,IAAAA,aAAX;AAA0BC,IAAAA,cAA1B;AAA0CF,IAAAA;AAA1C,GADI,EAEJS,QAFI,IAGFZ,KAAK,CAACa,UAAN,CAAiBF,OAAjB,EAA0BV,YAA1B,CAHJ;AAKA,SAAO;AAAEW,IAAAA,QAAF;AAAYV,IAAAA,OAAZ;AAAqBC,IAAAA,YAArB;AAAmCE,IAAAA,cAAnC;AAAmDD,IAAAA;AAAnD,GAAP;AACD,CAPM","sourcesContent":["import * as React from 'react'\n\nexport type LoadingStateProps = {\n  loading: string\n  tableLoading: string\n  globalLoading: string\n  actionsLoading: string\n}\n\nexport type LoadingActions =\n  | { type: 'LOADING_STARTED' }\n  | { type: 'LOADING_RESOLVED' }\n  | { type: 'GLOBAL_LOADING_STARTED' }\n  | { type: 'GLOBAL_LOADING_RESOLVED' }\n  | { type: 'TABLE_LOADING_STARTED' }\n  | { type: 'TABLE_LOADING_RESOLVED' }\n  | { type: 'ACTIONS_LOADING_STARTED' }\n  | { type: 'ACTIONS_LOADING_RESOLVED' }\n\nconst initialState = {\n  loading: 'resolved',\n  tableLoading: 'resolved',\n  globalLoading: 'resolved',\n  actionsLoading: 'resolved'\n}\n\n/**\n * Default loading reducer\n */\n\nconst loadingReducer = (\n  state: LoadingStateProps,\n  action: LoadingActions\n): LoadingStateProps => {\n  switch (action.type) {\n    case 'GLOBAL_LOADING_STARTED':\n      return {\n        ...state,\n        globalLoading: 'pending'\n      }\n    case 'GLOBAL_LOADING_RESOLVED':\n      return {\n        ...state,\n        globalLoading: 'resolved'\n      }\n    case 'TABLE_LOADING_STARTED':\n      return {\n        ...state,\n        tableLoading: 'pending'\n      }\n    case 'TABLE_LOADING_RESOLVED':\n      return {\n        ...state,\n        tableLoading: 'resolved'\n      }\n    case 'LOADING_STARTED':\n      return {\n        ...state,\n        loading: 'pending'\n      }\n    case 'LOADING_RESOLVED':\n      return {\n        ...state,\n        loading: 'resolved'\n      }\n    case 'ACTIONS_LOADING_STARTED':\n      return {\n        ...state,\n        actionsLoading: 'pending'\n      }\n    case 'ACTIONS_LOADING_RESOLVED':\n      return {\n        ...state,\n        actionsLoading: 'resolved'\n      }\n\n    default:\n      return initialState\n  }\n}\n\n/**\n * Hook for managing loading states using the reducer pattern\n * @param reducer user can pass a custom reducer for loading states\n */\n\nexport const useLoading = ({ reducer = loadingReducer } = {}) => {\n  const [\n    { loading, globalLoading, actionsLoading, tableLoading },\n    dispatch\n  ] = React.useReducer(reducer, initialState)\n\n  return { dispatch, loading, tableLoading, actionsLoading, globalLoading }\n}\n"]},"metadata":{},"sourceType":"module"}