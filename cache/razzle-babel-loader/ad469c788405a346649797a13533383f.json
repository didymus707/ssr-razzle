{"ast":null,"code":"import _objectSpread from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { client } from 'utils';\nimport { setDataModelsData, setSegmentsData, setSegmentsLoading } from '../lists.reducer';\nimport { sendAmplitudeData } from '../../../../utils/amplitude';\nexport const fetchSegments = () => async dispatch => {\n  try {\n    dispatch(setSegmentsLoading(true));\n    const response = await client('lists/segment', {\n      method: 'GET'\n    });\n    const data = {};\n    const by_id = [];\n    response.data.forEach(i => {\n      data[i.id] = i;\n      by_id.push(i.id);\n    });\n    dispatch(setSegmentsData({\n      data,\n      by_id,\n      meta: response.meta\n    }));\n  } catch (e) {\n    dispatch(setSegmentsLoading(false));\n    return null;\n  }\n};\nexport const createSegment = payload => async (dispatch, getState) => {\n  sendAmplitudeData('createSegment');\n  const {\n    segments: {\n      data,\n      meta,\n      by_id\n    }\n  } = getState();\n  const response = await client(`lists/segment`, {\n    method: 'POST',\n    data: payload\n  });\n\n  const updated_data = _objectSpread(_objectSpread({}, data), {}, {\n    [response.data.id]: response.data\n  });\n\n  const updated_by_id = [...by_id, response.data.id];\n\n  const updated_meta = _objectSpread(_objectSpread({}, meta), {}, {\n    count_total: meta.count_total + 1\n  });\n\n  dispatch(setSegmentsData({\n    data: updated_data,\n    by_id: updated_by_id,\n    meta: updated_meta\n  }));\n  return response.data;\n};\nexport const deleteSegment = segmentID => async (dispatch, getState) => {\n  const {\n    segments: {\n      by_id,\n      data,\n      meta\n    }\n  } = getState();\n  sendAmplitudeData('deleteSegment');\n  const response = await client(`lists/segment/${segmentID}`, {\n    method: 'DELETE'\n  });\n  const updated_by_id = by_id.filter(i => i !== segmentID);\n  const updated_data = updated_by_id.reduce((acc, i) => _objectSpread(_objectSpread({}, acc), {}, {\n    [i]: data[i]\n  }), {});\n\n  const updated_meta = _objectSpread(_objectSpread({}, meta), {}, {\n    count_total: meta.count_total - 1\n  });\n\n  setSegmentsData(setDataModelsData({\n    data: updated_data,\n    by_id: updated_by_id,\n    meta: updated_meta\n  }));\n  return response.data;\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/thunks/segments.ts"],"names":["client","setDataModelsData","setSegmentsData","setSegmentsLoading","sendAmplitudeData","fetchSegments","dispatch","response","method","data","by_id","forEach","i","id","push","meta","e","createSegment","payload","getState","segments","updated_data","updated_by_id","updated_meta","count_total","deleteSegment","segmentID","filter","reduce","acc"],"mappings":"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","sourcesContent":["import { AppThunk } from 'root';\nimport { client } from 'utils';\nimport { setDataModelsData, setSegmentsData, setSegmentsLoading } from '../lists.reducer';\nimport { sendAmplitudeData } from '../../../../utils/amplitude';\n\nexport const fetchSegments = (): AppThunk => async dispatch => {\n  try {\n    dispatch(setSegmentsLoading(true));\n    const response = await client('lists/segment', {\n      method: 'GET',\n    });\n\n    const data: { [key: string]: any } = {};\n    const by_id: string[] = [];\n\n    response.data.forEach((i: any) => {\n      data[i.id] = i;\n      by_id.push(i.id);\n    });\n\n    dispatch(setSegmentsData({ data, by_id, meta: response.meta }));\n  } catch (e) {\n    dispatch(setSegmentsLoading(false));\n    return null;\n  }\n};\n\nexport const createSegment = (payload: {\n  name: string;\n  description: string;\n  color?: string;\n  icon?: string;\n  data_model: string;\n  filters: {\n    column: string;\n    operator: string;\n    sub_operator: string;\n    value: string;\n    conjunction: 'and' | 'or';\n  }[];\n}): AppThunk => async (dispatch, getState) => {\n  sendAmplitudeData('createSegment');\n  const {\n    segments: { data, meta, by_id },\n  } = getState();\n\n  const response = await client(`lists/segment`, {\n    method: 'POST',\n    data: payload,\n  });\n\n  const updated_data = { ...data, [response.data.id]: response.data };\n  const updated_by_id = [...by_id, response.data.id];\n  const updated_meta = { ...meta, count_total: meta.count_total + 1 };\n\n  dispatch(\n    setSegmentsData({\n      data: updated_data,\n      by_id: updated_by_id,\n      meta: updated_meta,\n    }),\n  );\n\n  return response.data;\n};\n\nexport const deleteSegment = (segmentID: string): AppThunk => async (dispatch, getState) => {\n  const {\n    segments: { by_id, data, meta },\n  } = getState();\n  sendAmplitudeData('deleteSegment');\n\n  const response = await client(`lists/segment/${segmentID}`, {\n    method: 'DELETE',\n  });\n\n  const updated_by_id = by_id.filter((i: string) => i !== segmentID);\n  const updated_data = updated_by_id.reduce((acc, i) => ({ ...acc, [i]: data[i] }), {});\n  const updated_meta = { ...meta, count_total: meta.count_total - 1 };\n\n  setSegmentsData(\n    setDataModelsData({ data: updated_data, by_id: updated_by_id, meta: updated_meta }),\n  );\n  return response.data;\n};\n"]},"metadata":{},"sourceType":"module"}