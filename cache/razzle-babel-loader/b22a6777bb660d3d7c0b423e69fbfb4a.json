{"ast":null,"code":"const _excluded = [\"page\", \"per_page\"];\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { client } from 'utils';\nimport { fetchSegments, setDataModelsData, setDataModelsLoading } from '../lists.reducer';\nimport { sendAmplitudeData } from '../../../../utils/amplitude';\nexport const fetchDataModels = () => async dispatch => {\n  try {\n    dispatch(setDataModelsLoading(true));\n    const response = await client('lists/data_model', {\n      method: 'GET'\n    });\n    const data = {};\n    const by_id = [];\n    response.data.forEach(i => {\n      data[i.id] = i;\n      by_id.push(i.id);\n    });\n    dispatch(setDataModelsData({\n      data,\n      by_id,\n      meta: response.meta\n    }));\n  } catch (e) {\n    dispatch(setDataModelsLoading(false));\n    return null;\n  }\n};\nexport const createDataModel = payload => async (dispatch, getState) => {\n  sendAmplitudeData('createDataModel');\n  const {\n    dataModels: {\n      data,\n      meta,\n      by_id\n    }\n  } = getState();\n  const response = await client(`lists/data_model`, {\n    method: 'POST',\n    data: payload\n  });\n\n  const updated_data = _objectSpread(_objectSpread({}, data), {}, {\n    [response.data.id]: response.data\n  });\n\n  const updated_by_id = [...by_id, response.data.id];\n\n  const updated_meta = _objectSpread(_objectSpread({}, meta), {}, {\n    count_total: meta.count_total + 1\n  });\n\n  dispatch(setDataModelsData({\n    data: updated_data,\n    by_id: updated_by_id,\n    meta: updated_meta\n  }));\n  return response.data;\n};\nexport const fetchDataModel = dataModelID => async dispatch => {\n  dispatch(setDataModelsLoading(true));\n  const response = await client(`lists/data_model/${dataModelID}`, {\n    method: 'GET'\n  });\n  return response.data;\n};\nexport const querySegment = async _ref => {\n  let {\n    page = 1,\n    per_page = 10\n  } = _ref,\n      data = _objectWithoutProperties(_ref, _excluded);\n\n  const payload = _objectSpread({\n    page,\n    per_page\n  }, data);\n\n  const response = await client(`lists/segment/query/`, {\n    data: payload,\n    method: 'POST'\n  });\n  return response.data;\n};\nexport const deleteDataModel = dataModelID => async (dispatch, getState) => {\n  const {\n    dataModels: {\n      by_id,\n      data,\n      meta\n    }\n  } = getState();\n  sendAmplitudeData('deleteDataModel');\n  const response = await client(`lists/data_model/${dataModelID}`, {\n    method: 'DELETE'\n  });\n  dispatch(fetchSegments());\n  const updated_by_id = by_id.filter(i => i !== dataModelID);\n  const updated_data = updated_by_id.reduce((acc, i) => _objectSpread(_objectSpread({}, acc), {}, {\n    [i]: data[i]\n  }), {});\n\n  const updated_meta = _objectSpread(_objectSpread({}, meta), {}, {\n    count_total: meta.count_total - 1\n  });\n\n  dispatch(setDataModelsData({\n    data: updated_data,\n    by_id: updated_by_id,\n    meta: updated_meta\n  }));\n  return response.data;\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/thunks/data-models.ts"],"names":["client","fetchSegments","setDataModelsData","setDataModelsLoading","sendAmplitudeData","fetchDataModels","dispatch","response","method","data","by_id","forEach","i","id","push","meta","e","createDataModel","payload","getState","dataModels","updated_data","updated_by_id","updated_meta","count_total","fetchDataModel","dataModelID","querySegment","page","per_page","deleteDataModel","filter","reduce","acc"],"mappings":"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","sourcesContent":["import { AppThunk } from 'root';\nimport { client } from 'utils';\nimport { fetchSegments, setDataModelsData, setDataModelsLoading } from '../lists.reducer';\nimport { sendAmplitudeData } from '../../../../utils/amplitude';\n\nexport const fetchDataModels = (): AppThunk => async dispatch => {\n  try {\n    dispatch(setDataModelsLoading(true));\n    const response = await client('lists/data_model', {\n      method: 'GET',\n    });\n\n    const data: { [key: string]: any } = {};\n    const by_id: string[] = [];\n\n    response.data.forEach((i: any) => {\n      data[i.id] = i;\n      by_id.push(i.id);\n    });\n\n    dispatch(setDataModelsData({ data, by_id, meta: response.meta }));\n  } catch (e) {\n    dispatch(setDataModelsLoading(false));\n    return null;\n  }\n};\n\nexport const createDataModel = (payload: {\n  name: string;\n  description: string;\n  color?: string;\n  icon?: string;\n  resource: string;\n  columns: {\n    source: string;\n    code: string;\n    key: string;\n    name: string;\n    kind: 'plain' | 'aggregate';\n    data_type: string;\n  }[];\n  relationships: {\n    base: string;\n    target: string;\n  }[];\n}): AppThunk => async (dispatch, getState) => {\n  sendAmplitudeData('createDataModel');\n  const {\n    dataModels: { data, meta, by_id },\n  } = getState();\n  const response = await client(`lists/data_model`, {\n    method: 'POST',\n    data: payload,\n  });\n\n  const updated_data = { ...data, [response.data.id]: response.data };\n  const updated_by_id = [...by_id, response.data.id];\n  const updated_meta = { ...meta, count_total: meta.count_total + 1 };\n\n  dispatch(\n    setDataModelsData({\n      data: updated_data,\n      by_id: updated_by_id,\n      meta: updated_meta,\n    }),\n  );\n\n  return response.data;\n};\n\nexport const fetchDataModel = (dataModelID: string): AppThunk => async dispatch => {\n  dispatch(setDataModelsLoading(true));\n  const response = await client(`lists/data_model/${dataModelID}`, {\n    method: 'GET',\n  });\n  return response.data;\n};\n\nexport const querySegment = async ({\n  page = 1,\n  per_page = 10,\n  ...data\n}: {\n  page?: number;\n  per_page?: number;\n  data_model?: string | null;\n  filters?: {\n    value: any;\n    name?: string;\n    column?: string | number;\n    channel?: string;\n    operator?: string;\n    columnID?: string;\n    conjunction?: string | null;\n  }[];\n}) => {\n  const payload = { page, per_page, ...data };\n  const response = await client(`lists/segment/query/`, {\n    data: payload,\n    method: 'POST',\n  });\n  return response.data;\n};\n\nexport const deleteDataModel = (dataModelID: string): AppThunk => async (dispatch, getState) => {\n  const {\n    dataModels: { by_id, data, meta },\n  } = getState();\n  sendAmplitudeData('deleteDataModel');\n\n  const response = await client(`lists/data_model/${dataModelID}`, {\n    method: 'DELETE',\n  });\n\n  dispatch(fetchSegments());\n\n  const updated_by_id = by_id.filter((i: string) => i !== dataModelID);\n  const updated_data = updated_by_id.reduce((acc, i) => ({ ...acc, [i]: data[i] }), {});\n  const updated_meta = { ...meta, count_total: meta.count_total - 1 };\n\n  dispatch(setDataModelsData({ data: updated_data, by_id: updated_by_id, meta: updated_meta }));\n  return response.data;\n};\n"]},"metadata":{},"sourceType":"module"}