{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/tables/components/group/group.components/GroupForm.tsx\";\nvar __jsx = React.createElement;\nimport { Button, FormControl, FormErrorMessage, FormLabel, Input, Stack } from '@chakra-ui/core';\nimport { useFormik } from 'formik';\nimport * as React from 'react';\nimport * as yup from 'yup';\nexport const validationSchema = yup.object().shape({\n  name: yup.string().required('Password is required')\n});\nexport function GroupForm({\n  onSubmit,\n  onCancel,\n  isLoading,\n  initialValues\n}) {\n  const inputRef = React.useRef(null);\n  React.useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n  const formik = useFormik({\n    validationSchema,\n    initialValues: initialValues || {\n      name: '',\n      id: ''\n    },\n    onSubmit: values => onSubmit(values, handleClose)\n  });\n\n  function handleClose() {\n    formik.resetForm();\n    onCancel();\n  }\n\n  return __jsx(\"form\", {\n    onSubmit: formik.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, __jsx(FormControl, {\n    mb: \"1rem\",\n    isInvalid: !!formik.errors.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, __jsx(FormLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, \"Name\"), __jsx(Input, {\n    size: \"sm\",\n    id: \"name\",\n    type: \"text\",\n    name: \"name\",\n    ref: inputRef,\n    placeholder: \"Group name\",\n    value: formik.values.name,\n    onChange: formik.handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }), __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, formik.errors.name)), __jsx(Stack, {\n    isInline: true,\n    justifyContent: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    size: \"sm\",\n    fontWeight: \"normal\",\n    type: \"button\",\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, \"Cancel\"), __jsx(Button, {\n    size: \"sm\",\n    type: \"submit\",\n    fontWeight: \"normal\",\n    isLoading: isLoading,\n    variantColor: \"blue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, \"Save\")));\n}","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/tables/components/group/group.components/GroupForm.tsx"],"names":["Button","FormControl","FormErrorMessage","FormLabel","Input","Stack","useFormik","React","yup","validationSchema","object","shape","name","string","required","GroupForm","onSubmit","onCancel","isLoading","initialValues","inputRef","useRef","useEffect","current","focus","formik","id","values","handleClose","resetForm","handleSubmit","errors","handleChange"],"mappings":"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","sourcesContent":["import {\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  Stack,\n} from '@chakra-ui/core';\nimport { useFormik } from 'formik';\nimport * as React from 'react';\nimport * as yup from 'yup';\nimport { GroupFormValues } from '../group.types';\n\nexport const validationSchema = yup.object().shape({\n  name: yup.string().required('Password is required'),\n});\n\nexport function GroupForm({\n  onSubmit,\n  onCancel,\n  isLoading,\n  initialValues,\n}: {\n  isLoading?: boolean;\n  onCancel: () => void;\n  initialValues?: GroupFormValues;\n  onSubmit: (values: GroupFormValues, callback: () => void) => void;\n}) {\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const formik = useFormik({\n    validationSchema,\n    initialValues: initialValues || { name: '', id: '' },\n    onSubmit: (values: GroupFormValues) => onSubmit(values, handleClose),\n  });\n\n  function handleClose() {\n    formik.resetForm();\n    onCancel();\n  }\n\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <FormControl mb=\"1rem\" isInvalid={!!formik.errors.name}>\n        <FormLabel>Name</FormLabel>\n        <Input\n          size=\"sm\"\n          id=\"name\"\n          type=\"text\"\n          name=\"name\"\n          ref={inputRef}\n          placeholder=\"Group name\"\n          value={formik.values.name}\n          onChange={formik.handleChange}\n        />\n        <FormErrorMessage>{formik.errors.name}</FormErrorMessage>\n      </FormControl>\n      <Stack isInline justifyContent=\"flex-end\">\n        <Button\n          size=\"sm\"\n          fontWeight=\"normal\"\n          type=\"button\"\n          onClick={handleClose}\n        >\n          Cancel\n        </Button>\n        <Button\n          size=\"sm\"\n          type=\"submit\"\n          fontWeight=\"normal\"\n          isLoading={isLoading}\n          variantColor=\"blue\"\n        >\n          Save\n        </Button>\n      </Stack>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}