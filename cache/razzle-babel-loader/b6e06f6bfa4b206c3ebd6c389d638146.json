{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { getSupportedChannels, getAllSupportedChannels } from '../channels';\nimport { getSupportedCountries, getRandomPhone, filterPhones, provisionPhone, getFBPages, choseAcctItem, getTemp, forceAdd } from './integrations.service';\nconst integrationInitialState = {\n  channel: '',\n  supported_countries: [],\n  random_phone: {\n    friendly_name: '',\n    phone_number: '',\n    capabilities: [],\n    type: '',\n    region: '',\n    iso_country: ''\n  },\n  selected_phone_types: [],\n  phones: [],\n  use_case_data: {\n    company_name: '',\n    industry: '',\n    role: '',\n    company_size: ''\n  }\n};\nconst integrationSlice = createSlice({\n  name: 'integration',\n  initialState: integrationInitialState,\n  reducers: {\n    setChannel(state, action) {\n      const {\n        channel\n      } = action.payload;\n      state.channel = channel;\n    },\n\n    setSupportedCountries(state, action) {\n      const {\n        supported_countries\n      } = action.payload;\n\n      if (supported_countries && supported_countries.length > 0) {\n        state.supported_countries = supported_countries;\n      }\n    },\n\n    setRandomPhone(state, action) {\n      const {\n        random_phone,\n        selected_phone_types\n      } = action.payload;\n\n      if (random_phone) {\n        state.random_phone = random_phone;\n      } else {\n        state.random_phone = integrationInitialState.random_phone;\n      }\n\n      if (selected_phone_types) {\n        state.selected_phone_types = selected_phone_types;\n      }\n    },\n\n    resetRandomPhone(state) {\n      state.random_phone = integrationInitialState.random_phone;\n    },\n\n    setPhones(state, action) {\n      const {\n        phones\n      } = action.payload;\n\n      if (phones && phones.length > 0) {\n        state.phones = phones;\n      }\n    },\n\n    resetPhones(state) {\n      state.phones = integrationInitialState.phones;\n    },\n\n    setUseCaseData(state, action) {\n      state.use_case_data = action.payload.data;\n    },\n\n    resetUseCaseData(state) {\n      state.use_case_data = integrationInitialState.use_case_data;\n    }\n\n  }\n});\nexport const integrationReducer = integrationSlice.reducer;\nexport const {\n  setChannel,\n  setSupportedCountries,\n  setRandomPhone,\n  resetRandomPhone,\n  setPhones,\n  resetPhones,\n  setUseCaseData,\n  resetUseCaseData\n} = integrationSlice.actions;\nexport const fetchSupportedCountries = params => async dispatch => {\n  const response = await getSupportedCountries(params);\n  const {\n    supported_countries\n  } = response.data;\n  dispatch(setSupportedCountries({\n    supported_countries\n  }));\n  return response.data;\n};\nexport const fetchRandomPhone = params => async dispatch => {\n  const response = await getRandomPhone(params);\n  const {\n    random_phone,\n    subResources\n  } = response.data;\n  dispatch(setRandomPhone({\n    random_phone,\n    selected_phone_types: subResources\n  }));\n  return response.data;\n};\nexport const searchPhones = params => async dispatch => {\n  const response = await filterPhones(params);\n  const {\n    phones\n  } = response.data;\n  dispatch(setPhones({\n    phones\n  }));\n  return response.data;\n};\nexport const buyPhone = params => async dispatch => {\n  const response = await provisionPhone(params);\n  const {\n    purchasedPhone\n  } = response.data;\n\n  if (purchasedPhone) {\n    const result = await getSupportedChannels(params);\n    const {\n      supportedChannels\n    } = result.data;\n    dispatch(getAllSupportedChannels({\n      supportedChannels\n    }));\n  }\n\n  return response.data;\n};\nexport const fetchFBPages = params => async () => {\n  const response = await getFBPages(params);\n  return response.data;\n};\nexport const selectAcctItem = params => async () => {\n  const response = await choseAcctItem(params);\n  return response.data;\n};\nexport const fetchTemp = params => async () => {\n  const response = await getTemp(params);\n  return response.data;\n};\nexport const forceConnect = params => async () => {\n  const response = await forceAdd(params);\n  return response.data;\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/integrations/integrations.reducer.ts"],"names":["createSlice","getSupportedChannels","getAllSupportedChannels","getSupportedCountries","getRandomPhone","filterPhones","provisionPhone","getFBPages","choseAcctItem","getTemp","forceAdd","integrationInitialState","channel","supported_countries","random_phone","friendly_name","phone_number","capabilities","type","region","iso_country","selected_phone_types","phones","use_case_data","company_name","industry","role","company_size","integrationSlice","name","initialState","reducers","setChannel","state","action","payload","setSupportedCountries","length","setRandomPhone","resetRandomPhone","setPhones","resetPhones","setUseCaseData","data","resetUseCaseData","integrationReducer","reducer","actions","fetchSupportedCountries","params","dispatch","response","fetchRandomPhone","subResources","searchPhones","buyPhone","purchasedPhone","result","supportedChannels","fetchFBPages","selectAcctItem","fetchTemp","forceConnect"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppDispatch } from '../../../root';\nimport { IntegrationState } from './integrations.type';\nimport { getSupportedChannels, getAllSupportedChannels } from '../channels'\nimport {\n  getSupportedCountries, getRandomPhone, filterPhones, provisionPhone, getFBPages,\n  choseAcctItem, getTemp, forceAdd\n} from './integrations.service';\n\nconst integrationInitialState: IntegrationState = {\n  channel: '',\n  supported_countries: [],\n  random_phone: {\n    friendly_name: '',\n    phone_number: '',\n    capabilities: [],\n    type: '',\n    region: '',\n    iso_country: ''\n  },\n  selected_phone_types: [],\n  phones: [],\n  use_case_data: {\n    company_name: '',\n    industry: '',\n    role: '',\n    company_size: ''\n  }\n};\n\nconst integrationSlice = createSlice({\n  name: 'integration',\n  initialState: integrationInitialState,\n  reducers: {\n    setChannel(\n      state,\n      action: PayloadAction<{ channel: IntegrationState['channel'] }>\n    ){\n      const { channel } = action.payload;\n\n      state.channel = channel;\n    },\n    setSupportedCountries(\n      state,\n      action: PayloadAction<{ supported_countries: IntegrationState['supported_countries'] }>\n    ) {\n      const { supported_countries } = action.payload;\n\n      if (supported_countries && supported_countries.length > 0) {\n        state.supported_countries = supported_countries;\n      }\n    },\n    setRandomPhone(\n      state,\n      action: PayloadAction<{\n        random_phone: IntegrationState['random_phone'];\n        selected_phone_types?: IntegrationState['selected_phone_types'];\n      }>\n    ) {\n      const { random_phone, selected_phone_types } = action.payload;\n\n      if (random_phone) {\n        state.random_phone = random_phone;\n      } else {\n        state.random_phone = integrationInitialState.random_phone\n      }\n\n      if (selected_phone_types) {\n        state.selected_phone_types = selected_phone_types;\n      }\n    },\n    resetRandomPhone(state){\n      state.random_phone = integrationInitialState.random_phone\n    },\n    setPhones(\n      state,\n      action: PayloadAction<{ phones: IntegrationState['phones'] }>\n    ) {\n      const { phones } = action.payload;\n\n      if (phones && phones.length > 0) {\n        state.phones = phones;\n      }\n    },\n    resetPhones(state) {\n      state.phones = integrationInitialState.phones;\n    },\n    setUseCaseData(\n      state,\n      action: PayloadAction<{ data: IntegrationState['use_case_data'] }>\n    ) {\n      state.use_case_data = action.payload.data;\n    },\n    resetUseCaseData(state) {\n      state.use_case_data = integrationInitialState.use_case_data;\n    },\n  }\n});\n\nexport const integrationReducer = integrationSlice.reducer;\n\nexport const {\n  setChannel, setSupportedCountries, setRandomPhone, resetRandomPhone,\n  setPhones, resetPhones, setUseCaseData, resetUseCaseData\n} = integrationSlice.actions;\n\nexport const fetchSupportedCountries = (params?: any) => async (\n  dispatch: AppDispatch\n) => {\n  const response = await getSupportedCountries(params);\n  const { supported_countries } = response.data;\n\n  dispatch(setSupportedCountries({ supported_countries }));\n\n  return response.data;\n};\n\nexport const fetchRandomPhone = (params?: any) => async (\n  dispatch: AppDispatch\n) => {\n  const response = await getRandomPhone(params);\n  const { random_phone, subResources } = response.data;\n\n  dispatch(setRandomPhone({ random_phone, selected_phone_types: subResources }));\n\n  return response.data;\n};\n\nexport const searchPhones = (params?: any) => async (\n  dispatch: AppDispatch\n) => {\n  const response = await filterPhones(params);\n  const { phones } = response.data;\n\n  dispatch(setPhones({ phones }));\n\n  return response.data;\n};\n\n\nexport const buyPhone = (params?: any) => async (\n  dispatch: AppDispatch\n) => {\n  const response = await provisionPhone(params);\n  const { purchasedPhone } = response.data;\n\n  if (purchasedPhone) {\n    const result = await getSupportedChannels(params);\n    const { supportedChannels } = result.data\n    dispatch(getAllSupportedChannels({ supportedChannels }))\n  }\n\n  return response.data;\n};\n\nexport const fetchFBPages = (params?: any) => async () => {\n  const response = await getFBPages(params);\n\n  return response.data;\n};\n\nexport const selectAcctItem = (params?: any) => async () => {\n  const response = await choseAcctItem(params);\n\n  return response.data;\n};\n\nexport const fetchTemp = (params?: any) => async () => {\n  const response = await getTemp(params);\n\n  return response.data;\n};\n\nexport const forceConnect = (params?: any) => async () => {\n  const response = await forceAdd(params);\n\n  return response.data;\n};\n"]},"metadata":{},"sourceType":"module"}