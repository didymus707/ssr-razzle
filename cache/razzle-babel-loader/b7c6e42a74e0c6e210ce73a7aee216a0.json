{"ast":null,"code":"var _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/component/lists/components/lists/create-list/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Box, IconButton, useToast } from '@chakra-ui/core/dist';\nimport { useSelector } from 'react-redux';\nimport { selectActiveSubscription } from '../../../../../../settings';\nimport { selectListCount } from '../../../../../lists.selectors';\nimport { useHistory } from 'react-router';\nimport { generateRandomListColor, generateRandomListIcon, getAllowCreateList } from '../../../../../lists.utils';\nimport { CreateListWrapper as Wrapper } from './index.styles';\nimport { CreateListOptions } from './stages/options';\nimport { DEFAULTTABLE } from '../../../../../../tables/tables.data';\nimport { selectUserID } from '../../../../../../../unauthenticated-app/authentication';\nimport { ToastBox } from '../../../../../../../components';\nimport { CreateListUploadPrompt } from './stages/upload-prompt';\nimport { CreateListImportMapping } from './stages/mapping';\nimport { CreateListImportSuccessPrompt } from './stages/success-prompt';\nimport { SelectListResource } from './stages/select-resource';\nimport { SelectListSource } from './stages/select-source';\nimport { CreateListSchemaMapping } from './stages/schema-mapping';\nexport const CreateList = props => {\n  const {\n    0: uploadLoading,\n    1: setUploadLoading\n  } = useState(false);\n  const {\n    0: importType,\n    1: setImportType\n  } = useState(null);\n  const {\n    0: selectedResource,\n    1: setSelectedResource\n  } = useState(null);\n  const {\n    0: sourceMeta,\n    1: setSourceMeta\n  } = useState(null);\n  const {\n    0: selectedSheet,\n    1: setSelectedSheet\n  } = useState(null);\n  const {\n    0: selectedSource,\n    1: setSelectedSource\n  } = useState(null);\n  const {\n    0: sources,\n    1: setSources\n  } = useState([]);\n  const {\n    0: file,\n    1: setFile\n  } = useState(null);\n  const {\n    0: stage,\n    1: setStage\n  } = useState('options');\n  const {\n    0: importedList,\n    1: setImportedList\n  } = useState(null);\n  const {\n    0: createListLoading,\n    1: setCreateListLoading\n  } = useState(false);\n  const {\n    0: addFromTemplateLoading,\n    1: setAddFromTemplateLoading\n  } = useState(null);\n  const {\n    addList,\n    addListFromTemplate,\n    openNoSubscriptionModal,\n    importedData,\n    fetchGSheetSpreadSheets,\n    fetchGSheetMetadata,\n    queueResourceImport,\n    queueAppImport,\n    fetchResourceSchema\n  } = props;\n  const toast = useToast();\n  const routerHistory = useHistory();\n  const userID = useSelector(selectUserID);\n  const activeSubscription = useSelector(selectActiveSubscription);\n  const listCount = useSelector(selectListCount);\n  const allowCreateList = getAllowCreateList(activeSubscription, listCount);\n\n  const goBack = () => {\n    if (stage === 'options') routerHistory.push('/s/lists');else {\n      if (stage === 'upload-prompt') {\n        setStage('options');\n        setImportType(null);\n        setFile(null);\n      }\n\n      if (stage === 'import-mapping') {\n        setStage('upload-prompt');\n        setFile(null);\n      }\n\n      if (stage === 'select-resource') {\n        setStage('options');\n      }\n\n      if (stage === 'select-source') {\n        setStage('select-resource');\n      }\n\n      if (stage === 'schema-mapping') {\n        setStage('select-source');\n      }\n    }\n  };\n\n  const handleCreateList = async () => {\n    setCreateListLoading(true);\n\n    try {\n      const {\n        table\n      } = await addList({\n        user_id: userID,\n        columns: DEFAULTTABLE.properties,\n        name: 'Untitled',\n        color: generateRandomListColor(),\n        icon: generateRandomListIcon()\n      });\n      toast({\n        position: 'bottom-left',\n        render: () => __jsx(ToastBox, {\n          status: \"success\",\n          message: \"List created\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 23\n          }\n        })\n      });\n      return routerHistory.replace(`/s/lists/view/${table.id}`);\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: () => __jsx(ToastBox, {\n          message: e,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 23\n          }\n        })\n      });\n    }\n\n    setCreateListLoading(false);\n  };\n\n  const handleCreateListFromTemplate = async template_type => {\n    setAddFromTemplateLoading(template_type);\n\n    try {\n      const {\n        table\n      } = await addListFromTemplate({\n        type: template_type\n      });\n      toast({\n        position: 'bottom-left',\n        render: () => __jsx(ToastBox, {\n          status: \"success\",\n          message: \"List created\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 23\n          }\n        })\n      });\n      return routerHistory.replace(`/s/lists/view/${table.id}`);\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: () => __jsx(ToastBox, {\n          message: e,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 23\n          }\n        })\n      });\n    }\n\n    setAddFromTemplateLoading(null);\n  };\n\n  const handleSelectImportType = _type => {\n    setImportType(_type);\n    if (!_type) return;\n\n    if (['mysql', 'pgsql', 'google-sheets', 'shopify', 'woo-commerce', 'mambu'].includes(_type)) {\n      setStage('select-resource');\n    } else setStage('upload-prompt');\n  };\n\n  const handleUpload = _file => {\n    setFile(_file);\n  };\n\n  const handleFileImport = async () => {\n    setUploadLoading(true);\n    await props.handleImport({\n      file,\n      source: importType === 'ms-excel' ? 'excel' : 'csv',\n      name: file === null || file === void 0 ? void 0 : file.name,\n      agree: true,\n      date_format: ''\n    });\n    setUploadLoading(false);\n  };\n\n  const handleNewTableImport = async properties => {\n    try {\n      const list = await props.handleImportNewTable(properties);\n      setImportedList(list);\n      toast({\n        position: 'bottom-left',\n        render: () => __jsx(ToastBox, {\n          status: \"success\",\n          message: \"List import queued successfully\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 23\n          }\n        })\n      });\n      setStage('success-prompt');\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: () => __jsx(ToastBox, {\n          message: e,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 23\n          }\n        })\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (!allowCreateList && !createListLoading && !!!addFromTemplateLoading) {\n      routerHistory.goBack();\n      openNoSubscriptionModal({\n        heading: \"Oops, looks like you've run out of available lists on your subscription\",\n        subHeading: 'Upgrade to our business plan to create unlimited lists and smart lists'\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  useEffect(() => {\n    if (importedData) {\n      setStage('import-mapping');\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [importedData]);\n  return __jsx(Box, {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, stage !== 'success-prompt' && __jsx(IconButton, {\n    icon: \"arrow-back\",\n    size: \"xs\",\n    borderRadius: \"10px\",\n    \"aria-label\": \"back\",\n    mr: \"10px\",\n    mb: \"5px\",\n    onClick: goBack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }), \"Create List\")), __jsx(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }\n  }, stage === 'options' && __jsx(CreateListOptions, {\n    createList: handleCreateList,\n    selectImportType: handleSelectImportType,\n    createListLoading: createListLoading,\n    addFromTemplateLoading: addFromTemplateLoading,\n    handleAddFromTemplate: handleCreateListFromTemplate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  }), stage === 'upload-prompt' && __jsx(CreateListUploadPrompt, {\n    file: file,\n    importType: importType,\n    handleUpload: handleUpload,\n    handleFileImport: handleFileImport,\n    uploadLoading: uploadLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 11\n    }\n  }), stage === 'import-mapping' && __jsx(CreateListImportMapping, {\n    importedData: importedData,\n    handleCreateTable: handleNewTableImport,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 11\n    }\n  }), stage === 'success-prompt' && __jsx(CreateListImportSuccessPrompt, {\n    proceed: () => routerHistory.replace(`/s/lists/view/${importedList === null || importedList === void 0 ? void 0 : importedList.id}`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 11\n    }\n  }), stage === 'select-resource' && __jsx(SelectListResource, {\n    fetchSources: () => {},\n    setSources: setSources,\n    setStage: setStage,\n    selectedResource: selectedResource,\n    setSelectedResource: setSelectedResource,\n    importType: importType,\n    fetchGSheetSpreadSheets: fetchGSheetSpreadSheets,\n    fetchResourceSchema: fetchResourceSchema,\n    fetchAppEndpoints: props.fetchAppEndpoints,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 11\n    }\n  }), stage === 'select-source' && __jsx(SelectListSource, {\n    importType,\n    sources,\n    setStage,\n    selectedResource,\n    fetchGSheetMetadata,\n    sourceMeta,\n    setSourceMeta,\n    selectedSheet,\n    setSelectedSheet,\n    selectedSource,\n    setSelectedSource,\n    fetchAppEndpointSchema: props.fetchAppEndpointSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 11\n    }\n  }), stage === 'schema-mapping' && __jsx(CreateListSchemaMapping, {\n    importType,\n    setImportedList,\n    setStage,\n    selectedResource,\n    selectedSheet,\n    selectedSource,\n    sources,\n    sourceMeta,\n    queueResourceImport,\n    queueAppImport,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 11\n    }\n  })));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/component/lists/components/lists/create-list/index.tsx"],"names":["React","useEffect","useState","Box","IconButton","useToast","useSelector","selectActiveSubscription","selectListCount","useHistory","generateRandomListColor","generateRandomListIcon","getAllowCreateList","CreateListWrapper","Wrapper","CreateListOptions","DEFAULTTABLE","selectUserID","ToastBox","CreateListUploadPrompt","CreateListImportMapping","CreateListImportSuccessPrompt","SelectListResource","SelectListSource","CreateListSchemaMapping","CreateList","props","uploadLoading","setUploadLoading","importType","setImportType","selectedResource","setSelectedResource","sourceMeta","setSourceMeta","selectedSheet","setSelectedSheet","selectedSource","setSelectedSource","sources","setSources","file","setFile","stage","setStage","importedList","setImportedList","createListLoading","setCreateListLoading","addFromTemplateLoading","setAddFromTemplateLoading","addList","addListFromTemplate","openNoSubscriptionModal","importedData","fetchGSheetSpreadSheets","fetchGSheetMetadata","queueResourceImport","queueAppImport","fetchResourceSchema","toast","routerHistory","userID","activeSubscription","listCount","allowCreateList","goBack","push","handleCreateList","table","user_id","columns","properties","name","color","icon","position","render","replace","id","e","handleCreateListFromTemplate","template_type","type","handleSelectImportType","_type","includes","handleUpload","_file","handleFileImport","handleImport","source","agree","date_format","handleNewTableImport","list","handleImportNewTable","heading","subHeading","fetchAppEndpoints","fetchAppEndpointSchema"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Box, IconButton, useToast } from '@chakra-ui/core/dist';\nimport { List, ListImportType } from '../../../../../lists.types';\nimport { useSelector } from 'react-redux';\nimport { selectActiveSubscription } from '../../../../../../settings';\nimport { selectListCount } from '../../../../../lists.selectors';\nimport { useHistory } from 'react-router';\nimport {\n  generateRandomListColor,\n  generateRandomListIcon,\n  getAllowCreateList,\n} from '../../../../../lists.utils';\nimport { CreateListWrapper as Wrapper } from './index.styles';\nimport { CreateListOptions } from './stages/options';\nimport { DEFAULTTABLE } from '../../../../../../tables/tables.data';\nimport { selectUserID } from '../../../../../../../unauthenticated-app/authentication';\nimport { ToastBox } from '../../../../../../../components';\nimport { TemplateTypes } from '../../../../../../tables';\nimport { CreateListUploadPrompt } from './stages/upload-prompt';\nimport { CreateListImportMapping } from './stages/mapping';\nimport { CreateListImportSuccessPrompt } from './stages/success-prompt';\nimport { PropertySchema } from '../../../../../../tables/components';\nimport { SelectListResource } from './stages/select-resource';\nimport { SelectListSource } from './stages/select-source';\nimport { CreateListSchemaMapping } from './stages/schema-mapping';\n\ninterface Props {\n  importedData: any;\n  addList: Function;\n  addListFromTemplate: Function;\n  openNoSubscriptionModal: Function;\n  handleImport: Function;\n  handleImportMapping: Function;\n  handleImportNewTable: Function;\n  fetchGSheetSpreadSheets: Function;\n  fetchGSheetMetadata: Function;\n  queueResourceImport: Function;\n  queueAppImport: Function;\n  fetchResourceSchema: Function;\n  fetchAppEndpoints: Function;\n  fetchAppEndpointSchema: Function;\n}\n\nexport const CreateList = (props: Props) => {\n  const [uploadLoading, setUploadLoading] = useState(false);\n  const [importType, setImportType] = useState<ListImportType | null>(null);\n  const [selectedResource, setSelectedResource] = useState<string | null>(null);\n  const [sourceMeta, setSourceMeta] = useState<any[] | null>(null);\n  const [selectedSheet, setSelectedSheet] = useState<null | string>(null);\n  const [selectedSource, setSelectedSource] = useState<null | string>(null);\n\n  const [sources, setSources] = useState([]);\n  const [file, setFile] = useState<File | null>(null);\n  const [stage, setStage] = useState<\n    | 'options'\n    | 'upload-prompt'\n    | 'import-mapping'\n    | 'select-resource'\n    | 'select-source'\n    | 'schema-mapping'\n    | 'success-prompt'\n  >('options');\n  const [importedList, setImportedList] = useState<List | null>(null);\n  const [createListLoading, setCreateListLoading] = useState<boolean>(false);\n  const [addFromTemplateLoading, setAddFromTemplateLoading] = useState<TemplateTypes | null>(null);\n\n  const {\n    addList,\n    addListFromTemplate,\n    openNoSubscriptionModal,\n    importedData,\n    fetchGSheetSpreadSheets,\n    fetchGSheetMetadata,\n    queueResourceImport,\n    queueAppImport,\n    fetchResourceSchema,\n  } = props;\n\n  const toast = useToast();\n  const routerHistory = useHistory();\n\n  const userID = useSelector(selectUserID);\n  const activeSubscription: any = useSelector(selectActiveSubscription);\n  const listCount: number = useSelector(selectListCount);\n  const allowCreateList = getAllowCreateList(activeSubscription, listCount);\n\n  const goBack = () => {\n    if (stage === 'options') routerHistory.push('/s/lists');\n    else {\n      if (stage === 'upload-prompt') {\n        setStage('options');\n        setImportType(null);\n        setFile(null);\n      }\n      if (stage === 'import-mapping') {\n        setStage('upload-prompt');\n        setFile(null);\n      }\n\n      if (stage === 'select-resource') {\n        setStage('options');\n      }\n      if (stage === 'select-source') {\n        setStage('select-resource');\n      }\n      if (stage === 'schema-mapping') {\n        setStage('select-source');\n      }\n    }\n  };\n\n  const handleCreateList = async () => {\n    setCreateListLoading(true);\n    try {\n      const { table } = await addList({\n        user_id: userID,\n        columns: DEFAULTTABLE.properties,\n        name: 'Untitled',\n        color: generateRandomListColor(),\n        icon: generateRandomListIcon(),\n      });\n      toast({\n        position: 'bottom-left',\n        render: () => <ToastBox status=\"success\" message=\"List created\" />,\n      });\n\n      return routerHistory.replace(`/s/lists/view/${table.id}`);\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: () => <ToastBox message={e} />,\n      });\n    }\n    setCreateListLoading(false);\n  };\n\n  const handleCreateListFromTemplate = async (template_type: TemplateTypes) => {\n    setAddFromTemplateLoading(template_type);\n    try {\n      const { table } = await addListFromTemplate({ type: template_type });\n      toast({\n        position: 'bottom-left',\n        render: () => <ToastBox status=\"success\" message=\"List created\" />,\n      });\n\n      return routerHistory.replace(`/s/lists/view/${table.id}`);\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: () => <ToastBox message={e} />,\n      });\n    }\n    setAddFromTemplateLoading(null);\n  };\n\n  const handleSelectImportType = (_type: ListImportType) => {\n    setImportType(_type);\n    if (!_type) return;\n    if (['mysql', 'pgsql', 'google-sheets', 'shopify', 'woo-commerce', 'mambu'].includes(_type)) {\n      setStage('select-resource');\n    } else setStage('upload-prompt');\n  };\n  const handleUpload = (_file: File) => {\n    setFile(_file);\n  };\n\n  const handleFileImport = async () => {\n    setUploadLoading(true);\n    await props.handleImport({\n      file,\n      source: importType === 'ms-excel' ? 'excel' : 'csv',\n      name: file?.name,\n      agree: true,\n      date_format: '',\n    });\n    setUploadLoading(false);\n  };\n\n  const handleNewTableImport = async (properties: PropertySchema[]) => {\n    try {\n      const list = await props.handleImportNewTable(properties);\n      setImportedList(list);\n      toast({\n        position: 'bottom-left',\n        render: () => <ToastBox status=\"success\" message=\"List import queued successfully\" />,\n      });\n      setStage('success-prompt');\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: () => <ToastBox message={e} />,\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (!allowCreateList && !createListLoading && !!!addFromTemplateLoading) {\n      routerHistory.goBack();\n      openNoSubscriptionModal({\n        heading: \"Oops, looks like you've run out of available lists on your subscription\",\n        subHeading: 'Upgrade to our business plan to create unlimited lists and smart lists',\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (importedData) {\n      setStage('import-mapping');\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [importedData]);\n\n  return (\n    <Box className=\"content\">\n      <Box className=\"section-title\">\n        <Box className=\"title\">\n          {stage !== 'success-prompt' && (\n            <IconButton\n              icon=\"arrow-back\"\n              size=\"xs\"\n              borderRadius=\"10px\"\n              aria-label=\"back\"\n              mr=\"10px\"\n              mb=\"5px\"\n              onClick={goBack}\n            />\n          )}\n          Create List\n        </Box>\n      </Box>\n\n      <Wrapper>\n        {stage === 'options' && (\n          <CreateListOptions\n            createList={handleCreateList}\n            selectImportType={handleSelectImportType}\n            createListLoading={createListLoading}\n            addFromTemplateLoading={addFromTemplateLoading}\n            handleAddFromTemplate={handleCreateListFromTemplate}\n          />\n        )}\n        {stage === 'upload-prompt' && (\n          <CreateListUploadPrompt\n            file={file}\n            importType={importType}\n            handleUpload={handleUpload}\n            handleFileImport={handleFileImport}\n            uploadLoading={uploadLoading}\n          />\n        )}\n        {stage === 'import-mapping' && (\n          <CreateListImportMapping\n            importedData={importedData}\n            handleCreateTable={handleNewTableImport}\n          />\n        )}\n        {stage === 'success-prompt' && (\n          <CreateListImportSuccessPrompt\n            proceed={() => routerHistory.replace(`/s/lists/view/${importedList?.id}`)}\n          />\n        )}\n        {stage === 'select-resource' && (\n          <SelectListResource\n            fetchSources={() => {}}\n            setSources={setSources}\n            setStage={setStage}\n            selectedResource={selectedResource}\n            setSelectedResource={setSelectedResource}\n            importType={importType}\n            fetchGSheetSpreadSheets={fetchGSheetSpreadSheets}\n            fetchResourceSchema={fetchResourceSchema}\n            fetchAppEndpoints={props.fetchAppEndpoints}\n          />\n        )}\n        {stage === 'select-source' && (\n          <SelectListSource\n            {...{\n              importType,\n              sources,\n              setStage,\n              selectedResource,\n              fetchGSheetMetadata,\n              sourceMeta,\n              setSourceMeta,\n              selectedSheet,\n              setSelectedSheet,\n              selectedSource,\n              setSelectedSource,\n              fetchAppEndpointSchema: props.fetchAppEndpointSchema,\n            }}\n          />\n        )}\n        {stage === 'schema-mapping' && (\n          <CreateListSchemaMapping\n            {...{\n              importType,\n              setImportedList,\n              setStage,\n              selectedResource,\n              selectedSheet,\n              selectedSource,\n              sources,\n              sourceMeta,\n              queueResourceImport,\n              queueAppImport,\n            }}\n          />\n        )}\n      </Wrapper>\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}