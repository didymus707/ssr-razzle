{"ast":null,"code":"const _excluded = [\"onBlur\", \"innerRef\", \"onChange\", \"isDisabled\", \"placeholder\", \"tagName\", \"className\"];\nvar _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/marketing/templates/components/Editable.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box } from '@chakra-ui/core';\nimport styled from '@emotion/styled';\nimport * as React from 'react';\nimport ContentEditable from 'react-contenteditable'; //@ts-ignore\n\nimport sanitizeHtml from 'sanitize-html';\nimport { html2Text } from '../templates.utils';\nexport class Editable extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      raw: html2Text(this.props.value) || '',\n      // html: this.props.value ? this.props.value : '',\n      html: this.props.value ? convertToHTML(this.props.value) : ''\n    });\n\n    _defineProperty(this, \"handleChange\", evt => {\n      const {\n        onChange\n      } = this.props;\n      const html = evt.target.value;\n      this.setState({\n        html\n      }, () => {\n        onChange && onChange(html);\n      });\n    });\n\n    _defineProperty(this, \"sanitizeConf\", {\n      allowedTags: ['a', 'span'],\n      allowedAttributes: {\n        a: ['href'],\n        span: ['class']\n      },\n      parser: {\n        decodeEntities: true\n      }\n    });\n\n    _defineProperty(this, \"sanitize\", () => {\n      const {\n        onBlur\n      } = this.props;\n      const html = sanitizeHtml(this.state.html, this.sanitizeConf);\n      this.setState({\n        html\n      }, () => {\n        onBlur && onBlur(html);\n      });\n    });\n\n    _defineProperty(this, \"pastePlainText\", evt => {\n      evt.preventDefault();\n      const text = evt.clipboardData.getData('text/plain');\n      document.execCommand('insertHTML', false, text);\n    });\n\n    _defineProperty(this, \"render\", () => {\n      const _this$props = this.props,\n            {\n        onBlur,\n        innerRef,\n        onChange,\n        isDisabled,\n        placeholder,\n        tagName = 'div',\n        className = 'editable'\n      } = _this$props,\n            rest = _objectWithoutProperties(_this$props, _excluded);\n\n      return __jsx(EditableContainer, _extends({}, rest, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 7\n        }\n      }), __jsx(ContentEditable, {\n        tagName: tagName,\n        innerRef: innerRef,\n        className: className,\n        disabled: isDisabled,\n        html: this.state.html,\n        onBlur: this.sanitize,\n        placeholder: placeholder,\n        onChange: this.handleChange,\n        onPaste: this.pastePlainText,\n        onKeyDown: event => {\n          if (event.key === 'Enter') {\n            document.execCommand('insertLineBreak');\n            event.preventDefault();\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }\n      }));\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      value: previousValue\n    } = prevProps;\n    const {\n      value: nextValue\n    } = this.props;\n\n    if (previousValue !== nextValue) {\n      this.setState({\n        raw: nextValue,\n        html: sanitizeHtml(convertToHTML(nextValue), this.sanitizeConf)\n      });\n    }\n  }\n\n}\nconst EditableContainer = styled(Box)`\n  .editable {\n    width: 100%;\n    resize: none;\n    outline: none;\n    padding: 0.75rem;\n    overflow-x: auto;\n    line-height: 24px;\n    font-size: 0.875rem;\n    word-wrap: break-word;\n    white-space: pre-wrap;\n    border-radius: 0.5rem;\n    border: 1px solid #858c94;\n    height: ${props => props.height || '200px'};\n\n    &:hover {\n      border-color: #cbd5e0;\n    }\n\n    &:focus {\n      border-color: #3182ce;\n      box-shadow: 0 0 0 1px #3182ce;\n    }\n\n    a {\n      color: #054ada;\n      text-decoration: none;\n    }\n\n    .tag {\n      color: #0043ce;\n      display: inline;\n      border-radius: 100px;\n      padding: 0.2rem 0.5rem;\n      background-color: #d0e2ff;\n    }\n  }\n`;\n\nconst convertToHTML = input => {\n  const array = input.split(' ');\n  return array.map(item => {\n    if (item.startsWith('{{')) {\n      return `<span class=\"tag\">${item}</span> `;\n    }\n\n    return item;\n  }).join(' ');\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/marketing/templates/components/Editable.tsx"],"names":["Box","styled","React","ContentEditable","sanitizeHtml","html2Text","Editable","Component","raw","props","value","html","convertToHTML","evt","onChange","target","setState","allowedTags","allowedAttributes","a","span","parser","decodeEntities","onBlur","state","sanitizeConf","preventDefault","text","clipboardData","getData","document","execCommand","innerRef","isDisabled","placeholder","tagName","className","rest","sanitize","handleChange","pastePlainText","event","key","componentDidUpdate","prevProps","previousValue","nextValue","EditableContainer","height","input","array","split","map","item","startsWith","join"],"mappings":"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","sourcesContent":["import { Box, BoxProps } from '@chakra-ui/core';\nimport styled from '@emotion/styled';\nimport * as React from 'react';\nimport ContentEditable, { ContentEditableEvent } from 'react-contenteditable';\n//@ts-ignore\nimport sanitizeHtml from 'sanitize-html';\nimport { html2Text } from '../templates.utils';\n\ntype EditableState = {\n  raw: string;\n  html: string;\n};\n\ntype EditableProps = {\n  value: string;\n  tagName?: string;\n  className?: string;\n  isDisabled?: boolean;\n  placeholder?: string;\n  onChange?: (value: string) => void;\n  onBlur?: (value: string) => void;\n  innerRef?: Function | React.RefObject<HTMLElement>;\n} & Omit<BoxProps, 'onChange' | 'onBlur'>;\n\nexport class Editable extends React.Component<EditableProps, EditableState> {\n  state = {\n    raw: html2Text(this.props.value) || '',\n    // html: this.props.value ? this.props.value : '',\n    html: this.props.value ? convertToHTML(this.props.value) : '',\n  };\n\n  componentDidUpdate(prevProps: EditableProps) {\n    const { value: previousValue } = prevProps;\n    const { value: nextValue } = this.props;\n    if (previousValue !== nextValue) {\n      this.setState({\n        raw: nextValue,\n        html: sanitizeHtml(convertToHTML(nextValue), this.sanitizeConf),\n      });\n    }\n  }\n\n  handleChange = (evt: ContentEditableEvent) => {\n    const { onChange } = this.props;\n    const html = evt.target.value;\n\n    this.setState({ html }, () => {\n      onChange && onChange(html);\n    });\n  };\n\n  sanitizeConf = {\n    allowedTags: ['a', 'span'],\n    allowedAttributes: { a: ['href'], span: ['class'] },\n    parser: { decodeEntities: true },\n  };\n\n  sanitize = () => {\n    const { onBlur } = this.props;\n    const html = sanitizeHtml(this.state.html, this.sanitizeConf);\n\n    this.setState({ html }, () => {\n      onBlur && onBlur(html);\n    });\n  };\n\n  pastePlainText = (evt: any) => {\n    evt.preventDefault();\n\n    const text = evt.clipboardData.getData('text/plain');\n    document.execCommand('insertHTML', false, text);\n  };\n\n  render = () => {\n    const {\n      onBlur,\n      innerRef,\n      onChange,\n      isDisabled,\n      placeholder,\n      tagName = 'div',\n      className = 'editable',\n      ...rest\n    } = this.props;\n    return (\n      <EditableContainer {...rest}>\n        <ContentEditable\n          tagName={tagName}\n          innerRef={innerRef}\n          className={className}\n          disabled={isDisabled}\n          html={this.state.html}\n          onBlur={this.sanitize}\n          placeholder={placeholder}\n          onChange={this.handleChange}\n          onPaste={this.pastePlainText}\n          onKeyDown={event => {\n            if (event.key === 'Enter') {\n              document.execCommand('insertLineBreak');\n              event.preventDefault();\n            }\n          }}\n        />\n      </EditableContainer>\n    );\n  };\n}\n\nconst EditableContainer = styled(Box)`\n  .editable {\n    width: 100%;\n    resize: none;\n    outline: none;\n    padding: 0.75rem;\n    overflow-x: auto;\n    line-height: 24px;\n    font-size: 0.875rem;\n    word-wrap: break-word;\n    white-space: pre-wrap;\n    border-radius: 0.5rem;\n    border: 1px solid #858c94;\n    height: ${(props: BoxProps) => props.height || '200px'};\n\n    &:hover {\n      border-color: #cbd5e0;\n    }\n\n    &:focus {\n      border-color: #3182ce;\n      box-shadow: 0 0 0 1px #3182ce;\n    }\n\n    a {\n      color: #054ada;\n      text-decoration: none;\n    }\n\n    .tag {\n      color: #0043ce;\n      display: inline;\n      border-radius: 100px;\n      padding: 0.2rem 0.5rem;\n      background-color: #d0e2ff;\n    }\n  }\n`;\n\nconst convertToHTML = (input: string) => {\n  const array = input.split(' ');\n  return array\n    .map(item => {\n      if (item.startsWith('{{')) {\n        return `<span class=\"tag\">${item}</span> `;\n      }\n      return item;\n    })\n    .join(' ');\n};\n"]},"metadata":{},"sourceType":"module"}