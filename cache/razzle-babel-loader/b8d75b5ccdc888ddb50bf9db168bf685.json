{"ast":null,"code":"var _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/components/cell-properties/dnd/filter-field.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Box, PseudoBox } from '@chakra-ui/core/dist';\nimport { PopoverWrapper } from '../../../list-view.styles';\nexport const DNDFieldFilterComponent = props => {\n  const {\n    0: dummyValue,\n    1: setDummyValue\n  } = useState(null);\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n  const containerRef = useRef(null);\n  const popoverRef = useRef(null);\n  const {\n    column,\n    inputProps = {}\n  } = props;\n\n  const updateValue = _value => {\n    setDummyValue(_value);\n    props.updateCellValue(_value, column.uid);\n    onClose();\n  };\n\n  const onClose = () => setIsOpen(false);\n\n  const handleClick = e => {\n    if (!isOpen) return; // @ts-ignore\n\n    if (popoverRef.current.contains(e.target)) return; // @ts-ignore\n\n    if (containerRef.current.contains(e.target)) return;\n    onClose();\n  };\n\n  const attachOutsideClickListener = () => {\n    document.addEventListener('mousedown', handleClick);\n  };\n\n  const detachOutsideClickListener = () => {\n    document.removeEventListener('mousedown', handleClick);\n  };\n\n  useEffect(() => {\n    setDummyValue(props.value); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    attachOutsideClickListener();\n    return detachOutsideClickListener; // eslint-disable-next-line react-hooks/exhaustive-deps\n  });\n  const options = [{\n    label: 'Yes',\n    key: 1,\n    value: true,\n    color: '#00876b33'\n  }, {\n    label: 'No',\n    key: 0,\n    value: false,\n    color: '#ff001a33'\n  }];\n  return __jsx(React.Fragment, null, __jsx(Box, _extends({\n    onClick: () => {\n      setIsOpen(true);\n    },\n    ref: containerRef,\n    padding: \"7.5px 12.5px\",\n    width: \"100%\",\n    borderRadius: \"3px\",\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    flexDirection: \"row\",\n    border: \"1px solid #E2E8F0\"\n  }, inputProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), (dummyValue === true || dummyValue === false) && __jsx(Box, {\n    fontSize: '12px !important',\n    padding: '1.5px 3px',\n    backgroundColor: dummyValue ? '#00876b33' : '#ff001a33',\n    borderColor: dummyValue ? '#00876b33' : '#ff001a33',\n    borderRadius: '5px',\n    color: '#333333',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, dummyValue ? 'Yes' : 'No')), isOpen && __jsx(Box, {\n    ref: popoverRef,\n    zIndex: 100000,\n    position: \"absolute\",\n    width: \"max-content\",\n    boxShadow: \"none\",\n    display: \"flex\",\n    marginTop: \"5px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, __jsx(PopoverWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"select-editor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"description-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  }, \"Select an option\"), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }, options.map((i, index) => __jsx(PseudoBox, {\n    key: index,\n    display: \"flex\",\n    width: \"100%\",\n    _hover: {\n      cursor: 'pointer',\n      backgroundColor: '#FAFAFA'\n    },\n    onClick: () => updateValue(i.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 19\n    }\n  }, __jsx(Box, {\n    fontSize: '12px !important',\n    padding: '1.5px 3px',\n    backgroundColor: i.color,\n    borderColor: i.color,\n    borderRadius: '5px',\n    color: '#333333',\n    width: 'fit-content',\n    marginY: '5px',\n    marginLeft: '10px',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }, i.label))))))));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/components/cell-properties/dnd/filter-field.tsx"],"names":["React","useEffect","useRef","useState","Box","PseudoBox","PopoverWrapper","DNDFieldFilterComponent","props","dummyValue","setDummyValue","isOpen","setIsOpen","containerRef","popoverRef","column","inputProps","updateValue","_value","updateCellValue","uid","onClose","handleClick","e","current","contains","target","attachOutsideClickListener","document","addEventListener","detachOutsideClickListener","removeEventListener","value","options","label","key","color","fontSize","padding","backgroundColor","borderColor","borderRadius","map","i","index","cursor","width","marginY","marginLeft"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Box, PseudoBox } from '@chakra-ui/core/dist';\nimport { PopoverWrapper } from '../../../list-view.styles';\n\nexport const DNDFieldFilterComponent = (props: any) => {\n  const [dummyValue, setDummyValue] = useState<boolean | null>(null);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const containerRef = useRef(null);\n  const popoverRef = useRef(null);\n\n  const { column, inputProps = {} } = props;\n\n  const updateValue = (_value: any) => {\n    setDummyValue(_value);\n    props.updateCellValue(_value, column.uid);\n    onClose();\n  };\n\n  const onClose = () => setIsOpen(false);\n\n  const handleClick = (e: any) => {\n    if (!isOpen) return;\n    // @ts-ignore\n    if (popoverRef.current.contains(e.target)) return;\n    // @ts-ignore\n    if (containerRef.current.contains(e.target)) return;\n    onClose();\n  };\n\n  const attachOutsideClickListener = () => {\n    document.addEventListener('mousedown', handleClick);\n  };\n  const detachOutsideClickListener = () => {\n    document.removeEventListener('mousedown', handleClick);\n  };\n\n  useEffect(() => {\n    setDummyValue(props.value);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    attachOutsideClickListener();\n    return detachOutsideClickListener;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  });\n\n  const options = [\n    { label: 'Yes', key: 1, value: true, color: '#00876b33' },\n    { label: 'No', key: 0, value: false, color: '#ff001a33' },\n  ];\n\n  return (\n    <>\n      <Box\n        onClick={() => {\n          setIsOpen(true);\n        }}\n        ref={containerRef}\n        padding=\"7.5px 12.5px\"\n        width=\"100%\"\n        borderRadius=\"3px\"\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        flexDirection=\"row\"\n        border=\"1px solid #E2E8F0\"\n        {...inputProps}\n      >\n        {(dummyValue === true || dummyValue === false) && (\n          <Box\n            {...{\n              fontSize: '12px !important',\n              padding: '1.5px 3px',\n              backgroundColor: dummyValue ? '#00876b33' : '#ff001a33',\n              borderColor: dummyValue ? '#00876b33' : '#ff001a33',\n              borderRadius: '5px',\n              color: '#333333',\n            }}\n          >\n            {dummyValue ? 'Yes' : 'No'}\n          </Box>\n        )}\n      </Box>\n\n      {isOpen && (\n        <Box\n          ref={popoverRef}\n          zIndex={100000}\n          position=\"absolute\"\n          width=\"max-content\"\n          boxShadow=\"none\"\n          display=\"flex\"\n          marginTop=\"5px\"\n        >\n          <PopoverWrapper>\n            <div className=\"select-editor\">\n              <div className=\"description-text\">Select an option</div>\n              <Box>\n                {options.map((i: any, index: number) => (\n                  <PseudoBox\n                    key={index}\n                    display=\"flex\"\n                    width=\"100%\"\n                    _hover={{\n                      cursor: 'pointer',\n                      backgroundColor: '#FAFAFA',\n                    }}\n                    onClick={() => updateValue(i.value)}\n                  >\n                    <Box\n                      {...{\n                        fontSize: '12px !important',\n                        padding: '1.5px 3px',\n                        backgroundColor: i.color,\n                        borderColor: i.color,\n                        borderRadius: '5px',\n                        color: '#333333',\n                        width: 'fit-content',\n                        marginY: '5px',\n                        marginLeft: '10px',\n                      }}\n                    >\n                      {i.label}\n                    </Box>\n                  </PseudoBox>\n                ))}\n              </Box>\n            </div>\n          </PopoverWrapper>\n        </Box>\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}