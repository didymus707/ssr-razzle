{"ast":null,"code":"var _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/tables/components/table/table.components/EditableCell.tsx\";\nvar __jsx = React.createElement;\nimport { parsePhoneNumberFromString } from 'libphonenumber-js/mobile';\nimport { debounce } from 'lodash';\nimport isEqual from 'lodash/isEqual';\nimport * as React from 'react';\nimport { validateEmail, validURL } from '../../../../../../utils';\nimport { TableDatePicker } from './table.datepicker';\nimport { TableCellClickable } from './TableCellClickable';\nimport { TableSelect } from './TableSelect';\nexport const EditableCell = props => {\n  var _initialValue$type2, _parsePhoneNumberFrom3;\n\n  const {\n    value: initialValue,\n    row: {\n      index: rowIndex\n    },\n    column: {\n      id: columnIndex\n    },\n    updateTableData,\n    isPreviewFocusable,\n    startWithEditView\n  } = props;\n  const [inputValue, setInputValue] = React.useState(initialValue === null || initialValue === void 0 ? void 0 : initialValue.value);\n  const [selectValue, setSelectValue] = React.useState(initialValue === null || initialValue === void 0 ? void 0 : initialValue.value);\n  React.useEffect(() => {\n    if (initialValue !== null && initialValue !== void 0 && initialValue.options) {\n      setSelectValue(initialValue === null || initialValue === void 0 ? void 0 : initialValue.value);\n    } else {\n      setInputValue(initialValue === null || initialValue === void 0 ? void 0 : initialValue.value);\n    }\n  }, [initialValue]);\n  const saveInputData = React.useCallback(value => {\n    var _parsePhoneNumberFrom, _initialValue$type;\n\n    const phoneNumberValidation = (_parsePhoneNumberFrom = parsePhoneNumberFromString(value)) === null || _parsePhoneNumberFrom === void 0 ? void 0 : _parsePhoneNumberFrom.isValid();\n    const urlValidation = validURL(value);\n    const emailValidation = validateEmail(value);\n\n    switch (initialValue === null || initialValue === void 0 ? void 0 : (_initialValue$type = initialValue.type) === null || _initialValue$type === void 0 ? void 0 : _initialValue$type.toLowerCase()) {\n      case 'text':\n      case 'person':\n      case 'number':\n        if (!isEqual(initialValue.value, value)) {\n          updateTableData(rowIndex, columnIndex, value);\n        }\n\n        break;\n\n      case 'email':\n        if (!isEqual(initialValue.value, value) && emailValidation) {\n          updateTableData(rowIndex, columnIndex, value);\n        }\n\n        break;\n\n      case 'phone number':\n        if (!isEqual(initialValue.value, value) && phoneNumberValidation) {\n          updateTableData(rowIndex, columnIndex, value);\n        }\n\n        break;\n\n      case 'url':\n        if (!isEqual(initialValue.value, value) && urlValidation) {\n          updateTableData(rowIndex, columnIndex, value);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  }, [columnIndex, initialValue, rowIndex, updateTableData]); // eslint-disable-next-line\n\n  const debouncedApiCall = React.useCallback(debounce(value => {\n    saveInputData(value);\n  }, 1500), []);\n\n  const onInputChange = value => {\n    setInputValue(value); // value && debouncedApiCall(value);\n  };\n\n  function onInputBlur() {\n    var _parsePhoneNumberFrom2;\n\n    const phoneNumberValidation = (_parsePhoneNumberFrom2 = parsePhoneNumberFromString(inputValue)) === null || _parsePhoneNumberFrom2 === void 0 ? void 0 : _parsePhoneNumberFrom2.isValid();\n    const urlValidation = validURL(inputValue);\n    const emailValidation = validateEmail(inputValue);\n    const condition = phoneNumberValidation || urlValidation || emailValidation;\n\n    if (!isEqual(initialValue.value, inputValue) && condition) {\n      updateTableData(rowIndex, columnIndex, inputValue);\n    }\n\n    if (!isEqual(initialValue.value, inputValue)) {\n      updateTableData(rowIndex, columnIndex, inputValue);\n    }\n  }\n\n  function onDatePickerChange(value) {\n    setInputValue(value);\n    updateTableData(rowIndex, columnIndex, value);\n  }\n\n  function onSelectChange(value) {\n    if (Array.isArray(value)) {\n      setSelectValue(value.map(item => item.value));\n    } else {\n      if (value) {\n        setSelectValue(value.value);\n      } else {\n        setSelectValue(value);\n      }\n    }\n  }\n\n  function onSelectBlur() {\n    if (!isEqual(initialValue.value, selectValue)) {\n      updateTableData(rowIndex, columnIndex, selectValue);\n    }\n  }\n\n  function onCreateOptions(value, options) {\n    updateTableData(rowIndex, columnIndex, value, options);\n  }\n\n  function getMultiSelectValue() {\n    if (initialValue !== null && initialValue !== void 0 && initialValue.value) {\n      return Array.isArray(initialValue.value) ? initialValue.value.map(item => ({\n        value: item,\n        label: item\n      })) : [initialValue.value].map(item => ({\n        value: item,\n        label: item\n      }));\n    }\n\n    return [];\n  }\n\n  function getSelectValue() {\n    return {\n      value: initialValue === null || initialValue === void 0 ? void 0 : initialValue.value,\n      label: initialValue === null || initialValue === void 0 ? void 0 : initialValue.value\n    };\n  }\n\n  switch (initialValue === null || initialValue === void 0 ? void 0 : (_initialValue$type2 = initialValue.type) === null || _initialValue$type2 === void 0 ? void 0 : _initialValue$type2.toLowerCase()) {\n    case 'text':\n    case 'person':\n      return __jsx(TableCellClickable, {\n        value: inputValue,\n        onBlur: onInputBlur,\n        onChange: onInputChange,\n        defaultValue: inputValue,\n        isPreviewFocusable: isPreviewFocusable,\n        startWithEditView: startWithEditView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 9\n        }\n      });\n\n    case 'number':\n      return __jsx(TableCellClickable, {\n        value: inputValue,\n        inputType: \"number\",\n        onBlur: onInputBlur,\n        onChange: onInputChange,\n        defaultValue: inputValue,\n        isPreviewFocusable: isPreviewFocusable,\n        startWithEditView: startWithEditView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 9\n        }\n      });\n\n    case 'date':\n      return __jsx(TableDatePicker, {\n        value: inputValue,\n        onChange: onDatePickerChange,\n        defaultIsOpen: startWithEditView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 14\n        }\n      });\n\n    case 'url':\n      return __jsx(TableCellClickable, {\n        icon: \"link\",\n        target: \"_blank\",\n        inputType: \"url\",\n        url: inputValue,\n        value: inputValue,\n        onBlur: onInputBlur,\n        tooltipLabel: \"Open link\",\n        defaultValue: inputValue,\n        onChange: onInputChange,\n        isInvalid: !validURL(inputValue),\n        isPreviewFocusable: isPreviewFocusable,\n        startWithEditView: startWithEditView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 9\n        }\n      });\n\n    case 'email':\n      return __jsx(TableCellClickable, {\n        icon: \"at-sign\",\n        inputType: \"email\",\n        value: inputValue,\n        onBlur: onInputBlur,\n        tooltipLabel: \"Send email\",\n        defaultValue: inputValue,\n        onChange: onInputChange,\n        url: `mailto: ${inputValue}`,\n        isInvalid: !validateEmail(inputValue),\n        isPreviewFocusable: isPreviewFocusable,\n        startWithEditView: startWithEditView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 9\n        }\n      });\n\n    case 'phone number':\n      return __jsx(TableCellClickable, {\n        icon: \"phone\",\n        inputType: \"tel\",\n        value: inputValue,\n        tooltipLabel: \"Call\",\n        onBlur: onInputBlur,\n        defaultValue: inputValue,\n        onChange: onInputChange,\n        url: `tel: ${inputValue}`,\n        errorMessage: \"Invalid mobile number\",\n        isPreviewFocusable: isPreviewFocusable,\n        startWithEditView: startWithEditView,\n        isInvalid: !((_parsePhoneNumberFrom3 = parsePhoneNumberFromString(inputValue)) !== null && _parsePhoneNumberFrom3 !== void 0 && _parsePhoneNumberFrom3.isValid()),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 9\n        }\n      });\n\n    case 'multi select':\n      return __jsx(TableSelect, {\n        isMulti: true,\n        placeholder: \"\",\n        onBlur: onSelectBlur,\n        onChange: onSelectChange,\n        value: getMultiSelectValue(),\n        defaultValue: getMultiSelectValue(),\n        options: initialValue && initialValue.options,\n        onCreateOptions: (options, value) => onCreateOptions(value, options),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 9\n        }\n      });\n\n    case 'select':\n      return __jsx(TableSelect, {\n        placeholder: \"\",\n        onBlur: onSelectBlur,\n        onChange: onSelectChange,\n        value: getSelectValue(),\n        defaultValue: getSelectValue(),\n        options: initialValue && initialValue.options,\n        onCreateOptions: (options, value) => onCreateOptions(value, options),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 9\n        }\n      });\n\n    default:\n      return null;\n  }\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/tables/components/table/table.components/EditableCell.tsx"],"names":["parsePhoneNumberFromString","debounce","isEqual","React","validateEmail","validURL","TableDatePicker","TableCellClickable","TableSelect","EditableCell","props","value","initialValue","row","index","rowIndex","column","id","columnIndex","updateTableData","isPreviewFocusable","startWithEditView","inputValue","setInputValue","useState","selectValue","setSelectValue","useEffect","options","saveInputData","useCallback","phoneNumberValidation","isValid","urlValidation","emailValidation","type","toLowerCase","debouncedApiCall","onInputChange","onInputBlur","condition","onDatePickerChange","onSelectChange","Array","isArray","map","item","onSelectBlur","onCreateOptions","getMultiSelectValue","label","getSelectValue"],"mappings":"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","sourcesContent":["import { parsePhoneNumberFromString } from 'libphonenumber-js/mobile';\nimport { debounce } from 'lodash';\nimport isEqual from 'lodash/isEqual';\nimport * as React from 'react';\nimport { validateEmail, validURL } from '../../../../../../utils';\nimport { SelectOptions } from '../../../tables.types';\nimport { TableDatePicker } from './table.datepicker';\nimport { TableCellClickable } from './TableCellClickable';\nimport { TableSelect } from './TableSelect';\n\nexport const EditableCell = (props: any) => {\n  const {\n    value: initialValue,\n    row: { index: rowIndex },\n    column: { id: columnIndex },\n    updateTableData,\n    isPreviewFocusable,\n    startWithEditView\n  } = props;\n\n  const [inputValue, setInputValue] = React.useState(initialValue?.value);\n\n  const [selectValue, setSelectValue] = React.useState(initialValue?.value);\n\n  React.useEffect(() => {\n    if (initialValue?.options) {\n      setSelectValue(initialValue?.value);\n    } else {\n      setInputValue(initialValue?.value);\n    }\n  }, [initialValue]);\n\n  const saveInputData = React.useCallback(\n    (value: string) => {\n      const phoneNumberValidation = parsePhoneNumberFromString(value)?.isValid();\n      const urlValidation = validURL(value);\n      const emailValidation = validateEmail(value);\n\n      switch (initialValue?.type?.toLowerCase()) {\n        case 'text':\n        case 'person':\n        case 'number':\n          if (!isEqual(initialValue.value, value)) {\n            updateTableData(rowIndex, columnIndex, value);\n          }\n          break;\n        case 'email':\n          if (!isEqual(initialValue.value, value) && emailValidation) {\n            updateTableData(rowIndex, columnIndex, value);\n          }\n          break;\n        case 'phone number':\n          if (!isEqual(initialValue.value, value) && phoneNumberValidation) {\n            updateTableData(rowIndex, columnIndex, value);\n          }\n          break;\n        case 'url':\n          if (!isEqual(initialValue.value, value) && urlValidation) {\n            updateTableData(rowIndex, columnIndex, value);\n          }\n          break;\n\n        default:\n          break;\n      }\n    },\n    [columnIndex, initialValue, rowIndex, updateTableData]\n  );\n\n  // eslint-disable-next-line\n  const debouncedApiCall = React.useCallback(\n    debounce((value: string) => {\n      saveInputData(value);\n    }, 1500),\n    []\n  );\n\n  const onInputChange = (value?: string) => {\n    setInputValue(value);\n    // value && debouncedApiCall(value);\n  };\n\n  function onInputBlur() {\n    const phoneNumberValidation = parsePhoneNumberFromString(inputValue)?.isValid();\n    const urlValidation = validURL(inputValue);\n    const emailValidation = validateEmail(inputValue);\n    const condition = phoneNumberValidation || urlValidation || emailValidation;\n    if (!isEqual(initialValue.value, inputValue) && condition) {\n      updateTableData(rowIndex, columnIndex, inputValue);\n    }\n    if (!isEqual(initialValue.value, inputValue)) {\n      updateTableData(rowIndex, columnIndex, inputValue);\n    }\n  }\n\n  function onDatePickerChange(value?: string) {\n    setInputValue(value);\n    updateTableData(rowIndex, columnIndex, value);\n  }\n\n  function onSelectChange(value: SelectOptions | SelectOptions[]) {\n    if (Array.isArray(value)) {\n      setSelectValue(value.map(item => item.value));\n    } else {\n      if (value) {\n        setSelectValue(value.value);\n      } else {\n        setSelectValue(value);\n      }\n    }\n  }\n\n  function onSelectBlur() {\n    if (!isEqual(initialValue.value, selectValue)) {\n      updateTableData(rowIndex, columnIndex, selectValue);\n    }\n  }\n\n  function onCreateOptions(value: string | string[] | undefined, options: SelectOptions[]) {\n    updateTableData(rowIndex, columnIndex, value, options);\n  }\n\n  function getMultiSelectValue() {\n    if (initialValue?.value) {\n      return Array.isArray(initialValue.value)\n        ? initialValue.value.map((item: string) => ({\n            value: item,\n            label: item,\n          }))\n        : [initialValue.value].map((item: string) => ({\n            value: item,\n            label: item,\n          }));\n    }\n    return [];\n  }\n\n  function getSelectValue() {\n    return {\n      value: initialValue?.value,\n      label: initialValue?.value,\n    };\n  }\n\n  switch (initialValue?.type?.toLowerCase()) {\n    case 'text':\n    case 'person':\n      return (\n        <TableCellClickable\n          value={inputValue}\n          onBlur={onInputBlur}\n          onChange={onInputChange}\n          defaultValue={inputValue}\n          isPreviewFocusable={isPreviewFocusable}\n          startWithEditView={startWithEditView}\n        />\n      );\n    case 'number':\n      return (\n        <TableCellClickable\n          value={inputValue}\n          inputType=\"number\"\n          onBlur={onInputBlur}\n          onChange={onInputChange}\n          defaultValue={inputValue}\n          isPreviewFocusable={isPreviewFocusable}\n          startWithEditView={startWithEditView}\n        />\n      );\n    case 'date':\n      return <TableDatePicker value={inputValue} onChange={onDatePickerChange} defaultIsOpen={startWithEditView} />;\n    case 'url':\n      return (\n        <TableCellClickable\n          icon=\"link\"\n          target=\"_blank\"\n          inputType=\"url\"\n          url={inputValue}\n          value={inputValue}\n          onBlur={onInputBlur}\n          tooltipLabel=\"Open link\"\n          defaultValue={inputValue}\n          onChange={onInputChange}\n          isInvalid={!validURL(inputValue)}\n          isPreviewFocusable={isPreviewFocusable}\n          startWithEditView={startWithEditView}\n        />\n      );\n    case 'email':\n      return (\n        <TableCellClickable\n          icon=\"at-sign\"\n          inputType=\"email\"\n          value={inputValue}\n          onBlur={onInputBlur}\n          tooltipLabel=\"Send email\"\n          defaultValue={inputValue}\n          onChange={onInputChange}\n          url={`mailto: ${inputValue}`}\n          isInvalid={!validateEmail(inputValue)}\n          isPreviewFocusable={isPreviewFocusable}\n          startWithEditView={startWithEditView}\n        />\n      );\n    case 'phone number':\n      return (\n        <TableCellClickable\n          icon=\"phone\"\n          inputType=\"tel\"\n          value={inputValue}\n          tooltipLabel=\"Call\"\n          onBlur={onInputBlur}\n          defaultValue={inputValue}\n          onChange={onInputChange}\n          url={`tel: ${inputValue}`}\n          errorMessage=\"Invalid mobile number\"\n          isPreviewFocusable={isPreviewFocusable}\n          startWithEditView={startWithEditView}\n          isInvalid={!parsePhoneNumberFromString(inputValue)?.isValid()}\n        />\n      );\n    case 'multi select':\n      return (\n        <TableSelect\n          isMulti\n          placeholder=\"\"\n          onBlur={onSelectBlur}\n          onChange={onSelectChange}\n          value={getMultiSelectValue()}\n          defaultValue={getMultiSelectValue()}\n          options={initialValue && initialValue.options}\n          onCreateOptions={(options, value) => onCreateOptions(value, options)}\n        />\n      );\n    case 'select':\n      return (\n        <TableSelect\n          placeholder=\"\"\n          onBlur={onSelectBlur}\n          onChange={onSelectChange}\n          value={getSelectValue()}\n          defaultValue={getSelectValue()}\n          options={initialValue && initialValue.options}\n          onCreateOptions={(options, value) => onCreateOptions(value, options)}\n        />\n      );\n\n    default:\n      return null;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}