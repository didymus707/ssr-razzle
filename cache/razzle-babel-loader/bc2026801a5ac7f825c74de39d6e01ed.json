{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { buildPaymentURL, client } from '../../../../utils';\nimport { setBanksData, setBankAccountsData, setBankAccountsCreateLoading, setBankAccountsLoading, setBankAccountsDeleteLoading } from '../reducers';\nimport { sendAmplitudeData } from '../../../../utils/amplitude';\nexport const fetchBanks = () => async dispatch => {\n  const country = 'Nigeria';\n  const provider = 'paystack';\n  const response = await client('', {\n    url: buildPaymentURL(`/bank/${provider}/${country}`),\n    method: 'GET'\n  });\n  dispatch(setBanksData(response.data));\n  return response.data;\n};\nexport const resolveBankAccount = values => async dispatch => {\n  sendAmplitudeData('resolveBankAccount');\n  const provider = 'paystack';\n\n  try {\n    const response = await client('', {\n      url: buildPaymentURL(`/bank/resolve/${provider}`),\n      method: 'POST',\n      data: values\n    });\n    return response.data;\n  } catch (e) {\n    return null;\n  }\n};\nexport const fetchBankAccounts = () => async dispatch => {\n  dispatch(setBankAccountsLoading({\n    loading: true\n  }));\n\n  try {\n    const response = await client('', {\n      url: buildPaymentURL(`/bank_account/beneficiary/`),\n      method: 'GET'\n    });\n    const data = {};\n    const by_id = [];\n    response.data.forEach(i => {\n      data[i.id] = i;\n      by_id.push(i.id);\n    });\n    const {\n      meta\n    } = response;\n    dispatch(setBankAccountsData({\n      data,\n      by_id,\n      meta\n    }));\n    dispatch(setBankAccountsLoading({\n      loading: true\n    }));\n    return response.data;\n  } catch (e) {\n    dispatch(setBankAccountsLoading({\n      loading: false\n    }));\n    return null;\n  }\n};\nexport const addBankAccount = values => async (dispatch, getState) => {\n  sendAmplitudeData('addBankAccount');\n  const provider = 'paystack';\n  dispatch(setBankAccountsCreateLoading({\n    loading: true\n  }));\n\n  try {\n    const response = await client('', {\n      url: buildPaymentURL(`/bank_account/beneficiary/${provider}`),\n      method: 'POST',\n      data: values\n    });\n    dispatch(setBankAccountsCreateLoading({\n      loading: false\n    }));\n    const {\n      payments: {\n        bank_accounts: {\n          data,\n          by_id,\n          meta\n        }\n      }\n    } = getState();\n    const bank_account = response.data;\n\n    const updated_data = _objectSpread(_objectSpread({}, data), {}, {\n      [bank_account.id]: bank_account\n    });\n\n    const updated_by_id = [...by_id, bank_account.id];\n    dispatch(setBankAccountsData({\n      data: updated_data,\n      by_id: updated_by_id,\n      meta\n    }));\n    return response.data;\n  } catch (e) {\n    dispatch(setBankAccountsCreateLoading({\n      loading: false\n    }));\n    return null;\n  }\n};\nexport const deleteBankAccount = bank_account_id => async (dispatch, getState) => {\n  sendAmplitudeData('deleteBankAccount');\n  const {\n    payments: {\n      bank_accounts: {\n        data,\n        by_id,\n        meta\n      }\n    }\n  } = getState();\n  dispatch(setBankAccountsDeleteLoading({\n    loading: true\n  }));\n\n  try {\n    await client('', {\n      url: buildPaymentURL(`/bank_account/beneficiary/${bank_account_id}`),\n      method: 'DELETE'\n    });\n    const updated_by_id = by_id.filter(i => i !== bank_account_id);\n    const updated_data = {};\n    updated_by_id.forEach(i => {\n      // @ts-ignore\n      updated_data[i] = data[i];\n    });\n    dispatch(setBankAccountsData({\n      data: updated_data,\n      by_id: updated_by_id,\n      meta\n    }));\n    return true;\n  } catch (e) {\n    dispatch(setBankAccountsDeleteLoading({\n      loading: false\n    }));\n    return null;\n  }\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/payments/thunks/bank_accounts.ts"],"names":["buildPaymentURL","client","setBanksData","setBankAccountsData","setBankAccountsCreateLoading","setBankAccountsLoading","setBankAccountsDeleteLoading","sendAmplitudeData","fetchBanks","dispatch","country","provider","response","url","method","data","resolveBankAccount","values","e","fetchBankAccounts","loading","by_id","forEach","i","id","push","meta","addBankAccount","getState","payments","bank_accounts","bank_account","updated_data","updated_by_id","deleteBankAccount","bank_account_id","filter"],"mappings":"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","sourcesContent":["import { buildPaymentURL, client } from '../../../../utils';\nimport { AppThunk } from '../../../../root';\nimport {\n  setBanksData,\n  setBankAccountsData,\n  setBankAccountsCreateLoading,\n  setBankAccountsLoading,\n  setBankAccountsDeleteLoading,\n} from '../reducers';\nimport { sendAmplitudeData } from '../../../../utils/amplitude';\n\nexport const fetchBanks = (): AppThunk => async dispatch => {\n  const country = 'Nigeria';\n  const provider = 'paystack';\n  const response = await client('', {\n    url: buildPaymentURL(`/bank/${provider}/${country}`),\n    method: 'GET',\n  });\n  dispatch(setBanksData(response.data));\n  return response.data;\n};\n\nexport const resolveBankAccount = (values: {\n  bank_code: string;\n  account_number: string;\n}): AppThunk => async dispatch => {\n  sendAmplitudeData('resolveBankAccount');\n  const provider = 'paystack';\n  try {\n    const response = await client('', {\n      url: buildPaymentURL(`/bank/resolve/${provider}`),\n      method: 'POST',\n      data: values,\n    });\n    return response.data;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const fetchBankAccounts = (): AppThunk => async dispatch => {\n  dispatch(setBankAccountsLoading({ loading: true }));\n  try {\n    const response = await client('', {\n      url: buildPaymentURL(`/bank_account/beneficiary/`),\n      method: 'GET',\n    });\n    const data: { [key: string]: any } = {};\n    const by_id: string[] = [];\n\n    response.data.forEach((i: any) => {\n      data[i.id] = i;\n      by_id.push(i.id);\n    });\n    const { meta } = response;\n    dispatch(setBankAccountsData({ data, by_id, meta }));\n    dispatch(setBankAccountsLoading({ loading: true }));\n    return response.data;\n  } catch (e) {\n    dispatch(setBankAccountsLoading({ loading: false }));\n    return null;\n  }\n};\n\nexport const addBankAccount = (values: {\n  bank_code: string;\n  account_number: string;\n}): AppThunk => async (dispatch, getState) => {\n  sendAmplitudeData('addBankAccount');\n  const provider = 'paystack';\n  dispatch(setBankAccountsCreateLoading({ loading: true }));\n\n  try {\n    const response = await client('', {\n      url: buildPaymentURL(`/bank_account/beneficiary/${provider}`),\n      method: 'POST',\n      data: values,\n    });\n    dispatch(setBankAccountsCreateLoading({ loading: false }));\n\n    const {\n      payments: {\n        bank_accounts: { data, by_id, meta },\n      },\n    } = getState();\n\n    const bank_account = response.data;\n    const updated_data = { ...data, [bank_account.id]: bank_account };\n    const updated_by_id = [...by_id, bank_account.id];\n    dispatch(setBankAccountsData({ data: updated_data, by_id: updated_by_id, meta }));\n    return response.data;\n  } catch (e) {\n    dispatch(setBankAccountsCreateLoading({ loading: false }));\n    return null;\n  }\n};\n\nexport const deleteBankAccount = (bank_account_id: string): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  sendAmplitudeData('deleteBankAccount');\n  const {\n    payments: {\n      bank_accounts: { data, by_id, meta },\n    },\n  } = getState();\n\n  dispatch(setBankAccountsDeleteLoading({ loading: true }));\n  try {\n    await client('', {\n      url: buildPaymentURL(`/bank_account/beneficiary/${bank_account_id}`),\n      method: 'DELETE',\n    });\n    const updated_by_id = by_id.filter((i: string) => i !== bank_account_id);\n    const updated_data = {};\n    updated_by_id.forEach((i: string) => {\n      // @ts-ignore\n      updated_data[i] = data[i];\n    });\n    dispatch(setBankAccountsData({ data: updated_data, by_id: updated_by_id, meta }));\n    return true;\n  } catch (e) {\n    dispatch(setBankAccountsDeleteLoading({ loading: false }));\n    return null;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}