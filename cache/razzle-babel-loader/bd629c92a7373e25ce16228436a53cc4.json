{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/marketing/campaigns/view-campaign.component.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useToast } from '@chakra-ui/core';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { useLoading } from '../../../../hooks';\nimport { sendAmplitudeData } from '../../../../utils/amplitude';\nimport { FullPageSpinner, ToastBox } from '../../../components';\nimport { selectOrganisationID } from '../../../unauthenticated-app/authentication';\nimport { Planner, TestPlanner } from './components';\nimport { plannerConnector } from './planner.connector';\n\nconst ViewCampaignUI = props => {\n  const {\n    history,\n    campaign,\n    fetchTemplate,\n    fetchCampaign,\n    updateCampaign,\n    fetchWallet\n  } = props;\n  const toast = useToast();\n  const {\n    dispatch,\n    globalLoading,\n    loading\n  } = useLoading();\n  const {\n    id: routeID\n  } = useParams();\n  const organisation_id = useSelector(selectOrganisationID);\n  React.useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      try {\n        dispatch({\n          type: 'GLOBAL_LOADING_STARTED'\n        });\n        const {\n          campaign\n        } = await fetchCampaign(routeID);\n\n        if (campaign.template_id) {\n          fetchTemplate(campaign.template_id);\n        } // Ignore if we started fetching something else\n\n\n        if (!didCancel) {\n          dispatch({\n            type: 'GLOBAL_LOADING_RESOLVED'\n          });\n        }\n      } catch (error) {\n        dispatch({\n          type: 'GLOBAL_LOADING_RESOLVED'\n        });\n      }\n    };\n\n    fetchData();\n    return () => {\n      didCancel = true;\n    };\n  }, [dispatch, fetchCampaign, routeID, fetchTemplate]);\n\n  const handleEditCampaign = async payload => {\n    try {\n      dispatch({\n        type: 'LOADING_STARTED'\n      });\n      await updateCampaign(payload);\n      dispatch({\n        type: 'LOADING_RESOLVED'\n      });\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          status: \"success\",\n          onClose: onClose,\n          message: \"Campaign updated successfully\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 11\n          }\n        })\n      });\n      organisation_id && (await fetchWallet(organisation_id));\n      sendAmplitudeData('campaignUpdated', {\n        data: payload\n      });\n      history.push('/s/marketing/campaigns');\n    } catch (error) {\n      dispatch({\n        type: 'LOADING_RESOLVED'\n      });\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  };\n\n  return globalLoading === 'pending' ? __jsx(FullPageSpinner, {\n    bg: \"white\",\n    height: \"100vh\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }) : !!campaign.contents ? __jsx(TestPlanner, _extends({}, props, {\n    isSaving: loading === 'pending',\n    addCampaign: handleEditCampaign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  })) : __jsx(Planner, _extends({}, props, {\n    isSaving: loading === 'pending',\n    addCampaign: handleEditCampaign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport const ViewCampaign = plannerConnector(ViewCampaignUI);","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/marketing/campaigns/view-campaign.component.tsx"],"names":["useToast","React","useSelector","useParams","useLoading","sendAmplitudeData","FullPageSpinner","ToastBox","selectOrganisationID","Planner","TestPlanner","plannerConnector","ViewCampaignUI","props","history","campaign","fetchTemplate","fetchCampaign","updateCampaign","fetchWallet","toast","dispatch","globalLoading","loading","id","routeID","organisation_id","useEffect","didCancel","fetchData","type","template_id","error","handleEditCampaign","payload","position","render","onClose","data","push","contents","ViewCampaign"],"mappings":"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","sourcesContent":["import { useToast } from '@chakra-ui/core';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { useLoading } from '../../../../hooks';\nimport { sendAmplitudeData } from '../../../../utils/amplitude';\nimport { FullPageSpinner, ToastBox } from '../../../components';\nimport { selectOrganisationID } from '../../../unauthenticated-app/authentication';\nimport { CampaignData } from './campaigns.types';\nimport { CampaignPayload, Planner, TestPlanner } from './components';\nimport { plannerConnector } from './planner.connector';\nimport { PlannerProps } from './planner.types';\n\nconst ViewCampaignUI = (props: PlannerProps) => {\n  const { history, campaign, fetchTemplate, fetchCampaign, updateCampaign, fetchWallet } = props;\n\n  const toast = useToast();\n  const { dispatch, globalLoading, loading } = useLoading();\n  const { id: routeID } = useParams<{ id: CampaignData['id'] }>();\n  const organisation_id = useSelector(selectOrganisationID);\n\n  React.useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      try {\n        dispatch({ type: 'GLOBAL_LOADING_STARTED' });\n        const { campaign } = await fetchCampaign(routeID);\n        if (campaign.template_id) {\n          fetchTemplate(campaign.template_id);\n        }\n        // Ignore if we started fetching something else\n        if (!didCancel) {\n          dispatch({ type: 'GLOBAL_LOADING_RESOLVED' });\n        }\n      } catch (error) {\n        dispatch({ type: 'GLOBAL_LOADING_RESOLVED' });\n      }\n    };\n\n    fetchData();\n    return () => {\n      didCancel = true;\n    };\n  }, [dispatch, fetchCampaign, routeID, fetchTemplate]);\n\n  const handleEditCampaign = async (payload: Partial<CampaignPayload>) => {\n    try {\n      dispatch({ type: 'LOADING_STARTED' });\n      await updateCampaign(payload);\n      dispatch({ type: 'LOADING_RESOLVED' });\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox status=\"success\" onClose={onClose} message=\"Campaign updated successfully\" />\n        ),\n      });\n      organisation_id && (await fetchWallet(organisation_id));\n      sendAmplitudeData('campaignUpdated', { data: payload });\n      history.push('/s/marketing/campaigns');\n    } catch (error) {\n      dispatch({ type: 'LOADING_RESOLVED' });\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n  };\n\n  return globalLoading === 'pending' ? (\n    <FullPageSpinner bg=\"white\" height=\"100vh\" />\n  ) : !!campaign.contents ? (\n    <TestPlanner {...props} isSaving={loading === 'pending'} addCampaign={handleEditCampaign} />\n  ) : (\n    <Planner {...props} isSaving={loading === 'pending'} addCampaign={handleEditCampaign} />\n  );\n};\n\nexport const ViewCampaign = plannerConnector(ViewCampaignUI);\n"]},"metadata":{},"sourceType":"module"}