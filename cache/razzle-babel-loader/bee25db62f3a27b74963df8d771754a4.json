{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/marketing/templates/components/template-content.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Box, Flex, Skeleton, Stack } from '@chakra-ui/core';\nimport React from 'react';\nimport { EmptyState, Button } from 'app/components';\nimport emptyClipImage from '../templates-empty.svg';\nimport { TemplateListItem } from './template-list-item';\nimport { ListSearch } from 'app/authenticated-app/lists/components/search';\nexport const TemplateContent = props => {\n  const {\n    onSearch,\n    isLoading,\n    templates,\n    categories,\n    selectedTab,\n    onTabChange,\n    lists_by_id,\n    searchQuery,\n    tableActions,\n    stateOptions,\n    sampleTemplates,\n    selectedCategory,\n    handleCategoryClick,\n    onTemplateItemClick\n  } = props;\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, __jsx(Stack, {\n    spacing: \"0\",\n    isInline: true,\n    rounded: \"4px\",\n    borderWidth: \"1px\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, stateOptions.map((item, index) => {\n    const isFirst = index === 0;\n    const isLast = index === stateOptions.length - 1;\n    let borderRadiusStyles = {};\n\n    if (isFirst) {\n      borderRadiusStyles = {\n        roundedTopLeft: '4px',\n        roundedBottomLeft: '4px'\n      };\n    }\n\n    if (isLast) {\n      borderRadiusStyles = {\n        roundedTopRight: '4px',\n        roundedBottomRight: '4px'\n      };\n    }\n\n    return __jsx(Box, _extends({\n      py: \"0.4rem\",\n      width: \"150px\",\n      fontWeight: \"500\",\n      cursor: \"pointer\",\n      textAlign: \"center\",\n      fontSize: \"0.875rem\",\n      borderRightWidth: isLast ? '0' : '1px',\n      onClick: () => onTabChange(item.value),\n      color: selectedTab === item.value ? 'white' : 'black',\n      backgroundColor: selectedTab === item.value ? 'blue.500' : 'transparent'\n    }, borderRadiusStyles, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }), item.label);\n  })), __jsx(ListSearch, {\n    height: \"36px\",\n    search_query: searchQuery !== null && searchQuery !== void 0 ? searchQuery : '',\n    updateSearchQuery: onSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }))), selectedTab === 'my-templates' ? isLoading ? __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, Array.from({\n    length: 15\n  }, (v, i) => __jsx(Flex, {\n    px: \"1rem\",\n    pt: \"1rem\",\n    alignItems: \"center\",\n    borderTopWidth: \"1px\",\n    justifyContent: \"space-between\",\n    key: `${i.toString()}-${new Date().getTime()}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    width: ['calc(33.33% - 1rem)', 'calc(50% - 1rem)', 'calc(33.33% - 1rem)'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, __jsx(Skeleton, {\n    height: \"10px\",\n    width: \"80%\",\n    my: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 19\n    }\n  }), __jsx(Skeleton, {\n    height: \"10px\",\n    width: \"50%\",\n    my: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 19\n    }\n  }), __jsx(Skeleton, {\n    height: \"10px\",\n    width: \"25%\",\n    my: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 19\n    }\n  })), __jsx(Flex, {\n    justifyContent: \"flex-end\",\n    width: ['calc(33.33% - 1rem)', 'calc(50% - 1rem)', 'calc(33.33% - 1rem)'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, __jsx(Skeleton, {\n    height: \"10px\",\n    width: \"60px\",\n    my: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 19\n    }\n  }))))) : __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, !templates.length ? __jsx(EmptyState, {\n    py: \"100px\",\n    imageSize: \"120px\",\n    image: emptyClipImage,\n    heading: \"No saved templates\",\n    contentContainerProps: {\n      mt: '1rem'\n    },\n    subheading: \"A template is a saved message that can be reused\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }) : templates.map(template => __jsx(TemplateListItem, {\n    key: template.id,\n    template: template,\n    tableActions: tableActions,\n    onClick: onTemplateItemClick,\n    hasActiveTable: !template.table_id || !!template.table_id && !!(lists_by_id !== null && lists_by_id !== void 0 && lists_by_id.includes(template.table_id)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }))) : __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, !sampleTemplates.length ? __jsx(EmptyState, {\n    py: \"100px\",\n    imageSize: \"120px\",\n    image: emptyClipImage,\n    heading: \"No sample templates\",\n    contentContainerProps: {\n      mt: '1rem'\n    },\n    subheading: \"A template is a saved message that can be reused\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }) : __jsx(React.Fragment, null, __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    overflowY: \"auto\",\n    mb: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 15\n    }\n  }, categories === null || categories === void 0 ? void 0 : categories.map((category, index) => __jsx(Button, {\n    size: \"sm\",\n    minW: \"unset\",\n    fontWeight: 500,\n    fontSize: \"0.75rem\",\n    key: index.toString(),\n    textTransform: \"capitalize\",\n    _focus: {\n      boxShadow: 'none'\n    },\n    _active: {\n      boxShadow: 'none'\n    },\n    onClick: () => handleCategoryClick(category),\n    color: selectedCategory === category ? 'white' : 'gray.900',\n    variantColor: selectedCategory === category ? 'blue' : 'gray',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 19\n    }\n  }, category))), sampleTemplates.map(template => __jsx(TemplateListItem, {\n    key: template.id,\n    template: template,\n    showActionBtns: false,\n    tableActions: tableActions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  })))));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/marketing/templates/components/template-content.tsx"],"names":["Box","Flex","Skeleton","Stack","React","EmptyState","Button","emptyClipImage","TemplateListItem","ListSearch","TemplateContent","props","onSearch","isLoading","templates","categories","selectedTab","onTabChange","lists_by_id","searchQuery","tableActions","stateOptions","sampleTemplates","selectedCategory","handleCategoryClick","onTemplateItemClick","map","item","index","isFirst","isLast","length","borderRadiusStyles","roundedTopLeft","roundedBottomLeft","roundedTopRight","roundedBottomRight","value","label","Array","from","v","i","toString","Date","getTime","mt","template","id","table_id","includes","category","boxShadow"],"mappings":"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","sourcesContent":["import { Box, Flex, Skeleton, Stack } from '@chakra-ui/core';\nimport React from 'react';\nimport { EmptyState, Button } from 'app/components';\nimport emptyClipImage from '../templates-empty.svg';\nimport { TemplateData } from '../templates.types';\nimport { TemplateListItem } from './template-list-item';\nimport { ListSearch } from 'app/authenticated-app/lists/components/search';\n\ntype Props = {\n  isLoading?: boolean;\n  tableActions: any[];\n  selectedTab: string;\n  searchQuery?: string;\n  categories: string[];\n  lists_by_id?: string[];\n  selectedCategory: string;\n  templates: TemplateData[];\n  onSearch(query: string): void;\n  sampleTemplates: TemplateData[];\n  onTabChange: (tab: string) => void;\n  handleCategoryClick(category: string): void;\n  stateOptions: { label: string; value: string }[];\n  onTemplateItemClick: (data: TemplateData) => void;\n};\n\nexport const TemplateContent = (props: Props) => {\n  const {\n    onSearch,\n    isLoading,\n    templates,\n    categories,\n    selectedTab,\n    onTabChange,\n    lists_by_id,\n    searchQuery,\n    tableActions,\n    stateOptions,\n    sampleTemplates,\n    selectedCategory,\n    handleCategoryClick,\n    onTemplateItemClick,\n  } = props;\n  return (\n    <div>\n      <Box className=\"section-title\">\n        <Stack isInline alignItems=\"center\">\n          <Stack spacing=\"0\" isInline rounded=\"4px\" borderWidth=\"1px\" alignItems=\"center\">\n            {stateOptions.map((item, index) => {\n              const isFirst = index === 0;\n              const isLast = index === stateOptions.length - 1;\n\n              let borderRadiusStyles = {};\n\n              if (isFirst) {\n                borderRadiusStyles = {\n                  roundedTopLeft: '4px',\n                  roundedBottomLeft: '4px',\n                };\n              }\n              if (isLast) {\n                borderRadiusStyles = {\n                  roundedTopRight: '4px',\n                  roundedBottomRight: '4px',\n                };\n              }\n\n              return (\n                <Box\n                  py=\"0.4rem\"\n                  width=\"150px\"\n                  fontWeight=\"500\"\n                  cursor=\"pointer\"\n                  textAlign=\"center\"\n                  fontSize=\"0.875rem\"\n                  borderRightWidth={isLast ? '0' : '1px'}\n                  onClick={() => onTabChange(item.value)}\n                  color={selectedTab === item.value ? 'white' : 'black'}\n                  backgroundColor={selectedTab === item.value ? 'blue.500' : 'transparent'}\n                  {...borderRadiusStyles}\n                >\n                  {item.label}\n                </Box>\n              );\n            })}\n          </Stack>\n\n          <ListSearch height=\"36px\" search_query={searchQuery ?? ''} updateSearchQuery={onSearch} />\n        </Stack>\n      </Box>\n      {selectedTab === 'my-templates' ? (\n        isLoading ? (\n          <Stack>\n            {Array.from({ length: 15 }, (v, i) => (\n              <Flex\n                px=\"1rem\"\n                pt=\"1rem\"\n                alignItems=\"center\"\n                borderTopWidth=\"1px\"\n                justifyContent=\"space-between\"\n                key={`${i.toString()}-${new Date().getTime()}`}\n              >\n                <Box width={['calc(33.33% - 1rem)', 'calc(50% - 1rem)', 'calc(33.33% - 1rem)']}>\n                  <Skeleton height=\"10px\" width=\"80%\" my=\"10px\" />\n                  <Skeleton height=\"10px\" width=\"50%\" my=\"10px\" />\n                  <Skeleton height=\"10px\" width=\"25%\" my=\"10px\" />\n                </Box>\n                <Flex\n                  justifyContent=\"flex-end\"\n                  width={['calc(33.33% - 1rem)', 'calc(50% - 1rem)', 'calc(33.33% - 1rem)']}\n                >\n                  <Skeleton height=\"10px\" width=\"60px\" my=\"10px\" />\n                </Flex>\n              </Flex>\n            ))}\n          </Stack>\n        ) : (\n          <Box>\n            {!templates.length ? (\n              <EmptyState\n                py=\"100px\"\n                imageSize=\"120px\"\n                image={emptyClipImage}\n                heading=\"No saved templates\"\n                contentContainerProps={{ mt: '1rem' }}\n                subheading=\"A template is a saved message that can be reused\"\n              />\n            ) : (\n              templates.map(template => (\n                <TemplateListItem\n                  key={template.id}\n                  template={template}\n                  tableActions={tableActions}\n                  onClick={onTemplateItemClick}\n                  hasActiveTable={\n                    !template.table_id ||\n                    (!!template.table_id && !!lists_by_id?.includes(template.table_id))\n                  }\n                />\n              ))\n            )}\n          </Box>\n        )\n      ) : (\n        <Box>\n          {!sampleTemplates.length ? (\n            <EmptyState\n              py=\"100px\"\n              imageSize=\"120px\"\n              image={emptyClipImage}\n              heading=\"No sample templates\"\n              contentContainerProps={{ mt: '1rem' }}\n              subheading=\"A template is a saved message that can be reused\"\n            />\n          ) : (\n            <>\n              <Stack isInline alignItems=\"center\" overflowY=\"auto\" mb=\"0.5rem\">\n                {categories?.map((category, index) => (\n                  <Button\n                    size=\"sm\"\n                    minW=\"unset\"\n                    fontWeight={500}\n                    fontSize=\"0.75rem\"\n                    key={index.toString()}\n                    textTransform=\"capitalize\"\n                    _focus={{ boxShadow: 'none' }}\n                    _active={{ boxShadow: 'none' }}\n                    onClick={() => handleCategoryClick(category)}\n                    color={selectedCategory === category ? 'white' : 'gray.900'}\n                    variantColor={selectedCategory === category ? 'blue' : 'gray'}\n                  >\n                    {category}\n                  </Button>\n                ))}\n              </Stack>\n              {sampleTemplates.map(template => (\n                <TemplateListItem\n                  key={template.id}\n                  template={template}\n                  showActionBtns={false}\n                  tableActions={tableActions}\n                />\n              ))}\n            </>\n          )}\n        </Box>\n      )}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}