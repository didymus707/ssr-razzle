{"ast":null,"code":"var _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/component/lists/components/segments/list-segments/delete-segment-dialog/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Box, Modal, ModalCloseButton, ModalOverlay, useToast } from '@chakra-ui/core/dist';\nimport { DeleteSegmentDialogWrapper as Wrapper } from './index.styles';\nimport { ToastBox, Button } from 'app/components';\nimport { useSelector } from 'react-redux';\nimport { selectSegments } from 'app/authenticated-app/lists/lists.selectors';\nexport const DeleteSegmentDialog = props => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: segment,\n    1: setSegment\n  } = useState(null);\n  const {\n    isOpen,\n    onClose,\n    selectedSegment\n  } = props;\n  const segments = useSelector(selectSegments);\n  const toast = useToast();\n\n  const handleDelete = async () => {\n    setLoading(true);\n\n    try {\n      await props.deleteSegment(selectedSegment);\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          status: \"success\",\n          onClose: onClose,\n          message: `${segment.name} deleted successfully`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 11\n          }\n        })\n      });\n      return onClose();\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: \"Unable to delete segment, please try again\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 11\n          }\n        })\n      });\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    setLoading(false);\n\n    if (isOpen && selectedSegment) {\n      const _segment = segments.find(i => i.id === selectedSegment);\n\n      setSegment(_segment);\n    } else {\n      setSegment(null);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [isOpen]);\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), __jsx(ModalCloseButton, {\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), __jsx(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    className: \"heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, \"Delete Connection\"), __jsx(Box, {\n    className: \"prompt-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, \"Are you sure you want to delete the selected segment?\"), __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"row\",\n    marginBottom: \"30px\",\n    fontWeight: \"500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, segment === null || segment === void 0 ? void 0 : segment.name), __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"row\",\n    width: \"100%\",\n    justifyContent: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    variant: \"ghost\",\n    size: \"sm\",\n    onClick: onClose,\n    mr: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, \"Cancel\"), __jsx(Button, {\n    variantColor: \"red\",\n    variant: \"solid\",\n    size: \"sm\",\n    isLoading: loading,\n    onClick: handleDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, \"Delete segment\"))));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/component/lists/components/segments/list-segments/delete-segment-dialog/index.tsx"],"names":["React","useEffect","useState","Box","Modal","ModalCloseButton","ModalOverlay","useToast","DeleteSegmentDialogWrapper","Wrapper","ToastBox","Button","useSelector","selectSegments","DeleteSegmentDialog","props","loading","setLoading","segment","setSegment","isOpen","onClose","selectedSegment","segments","toast","handleDelete","deleteSegment","position","render","name","e","_segment","find","i","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Box, Modal, ModalCloseButton, ModalOverlay, useToast } from '@chakra-ui/core/dist';\nimport { DeleteSegmentDialogWrapper as Wrapper } from './index.styles';\nimport { ToastBox, Button } from 'app/components';\nimport { useSelector } from 'react-redux';\nimport { selectSegments } from 'app/authenticated-app/lists/lists.selectors';\n\ninterface Props {\n  isOpen: boolean;\n  onClose: () => void;\n  selectedSegment: string | null;\n  deleteSegment: Function;\n}\n\nexport const DeleteSegmentDialog = (props: Props) => {\n  const [loading, setLoading] = useState(false);\n  const [segment, setSegment] = useState<any | null>(null);\n\n  const { isOpen, onClose, selectedSegment } = props;\n\n  const segments: any[] = useSelector(selectSegments);\n  const toast = useToast();\n\n  const handleDelete = async () => {\n    setLoading(true);\n    try {\n      await props.deleteSegment(selectedSegment);\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox\n            status=\"success\"\n            onClose={onClose}\n            message={`${segment.name} deleted successfully`}\n          />\n        ),\n      });\n      return onClose();\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox onClose={onClose} message=\"Unable to delete segment, please try again\" />\n        ),\n      });\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    setLoading(false);\n    if (isOpen && selectedSegment) {\n      const _segment = segments.find((i: any) => i.id === selectedSegment);\n      setSegment(_segment);\n    } else {\n      setSegment(null);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen]);\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalCloseButton size=\"sm\" />\n\n      <Wrapper>\n        <Box className=\"heading\">Delete Connection</Box>\n\n        <Box className=\"prompt-text\">Are you sure you want to delete the selected segment?</Box>\n\n        <Box display=\"flex\" flexDirection=\"row\" marginBottom=\"30px\" fontWeight=\"500\">\n          {segment?.name}\n        </Box>\n        <Box display=\"flex\" flexDirection=\"row\" width=\"100%\" justifyContent=\"flex-end\">\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose} mr=\"10px\">\n            Cancel\n          </Button>\n          <Button\n            variantColor=\"red\"\n            variant=\"solid\"\n            size=\"sm\"\n            isLoading={loading}\n            onClick={handleDelete}\n          >\n            Delete segment\n          </Button>\n        </Box>\n      </Wrapper>\n    </Modal>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}