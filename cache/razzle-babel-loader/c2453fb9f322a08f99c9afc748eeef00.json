{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit';\nimport { connectChannelAcct, fetchSupportedChannels } from '../../channels/channel.thunks';\nimport { selectOrgMemberByID } from '../../settings/slices';\nimport { INBOX_INIT } from '../inbox.data';\nimport { selectCustomerById } from './customer';\nimport { fetchThreadByID, fetchThreadMessages, fetchThreadsByState, onWebSocketAssignedThread, onWebSocketNewMessage, onWebSocketNewThread, onWebSocketResolvedThread, onWebSocketWhatsAppAccountStatusChange, searchInbox, sendInboxTemplate, sendMessage } from './global';\nconst inboxUsersAdapter = createEntityAdapter({\n  selectId: inboxUser => inboxUser.uuid\n});\n\nconst websocketCallback = (state, action) => {\n  const {\n    inboxUsers\n  } = action.payload;\n  inboxUsers && inboxUsersAdapter.upsertMany(state, inboxUsers);\n};\n\nconst updateFromCustomer = (state, action) => {\n  const {\n    customers\n  } = action.payload;\n  customers && inboxUsersAdapter.upsertMany(state, Object.keys(customers).reduce((acc, key) => {\n    acc[key] = {\n      uuid: key,\n      is_customer: true\n    };\n    return acc;\n  }, {}));\n};\n\nexport const inboxUsersSlice = createSlice({\n  name: \"inboxUsers\",\n  initialState: inboxUsersAdapter.getInitialState(),\n  reducers: {},\n\n  extraReducers(builder) {\n    builder.addCase(fetchThreadsByState.fulfilled, websocketCallback).addCase(fetchThreadByID.fulfilled, websocketCallback).addCase(searchInbox.fulfilled, websocketCallback).addCase(fetchThreadMessages.fulfilled, websocketCallback).addCase(sendInboxTemplate.fulfilled, websocketCallback).addCase(sendMessage.fulfilled, websocketCallback).addCase(onWebSocketNewThread, websocketCallback).addCase(onWebSocketResolvedThread, websocketCallback).addCase(onWebSocketAssignedThread, websocketCallback).addCase(onWebSocketNewMessage, websocketCallback).addCase(connectChannelAcct.fulfilled, updateFromCustomer).addCase(fetchSupportedChannels.fulfilled, updateFromCustomer).addCase(onWebSocketWhatsAppAccountStatusChange, updateFromCustomer);\n  }\n\n});\nexport const inboxUsersReducer = inboxUsersSlice.reducer;\nexport const {\n  selectById: selectInboxUserById,\n  selectIds: selectInboxUserIds,\n  selectEntities: selectInboxUserEntities,\n  selectAll: selectAllInboxUsers,\n  selectTotal: selectTotalInboxUsers\n} = inboxUsersAdapter.getSelectors(state => state.inbox.entities.inboxUsers);\nexport const selectUserDetailByID = createSelector(selectInboxUserById, selectCustomerById, selectOrgMemberByID, (user, customer, orgMember) => _objectSpread(_objectSpread({}, user || INBOX_INIT.inboxUser), {}, {\n  userInfo: user !== null && user !== void 0 && user.is_customer ? customer : orgMember\n}));","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/slices/inboxUser.ts"],"names":["createEntityAdapter","createSelector","createSlice","connectChannelAcct","fetchSupportedChannels","selectOrgMemberByID","INBOX_INIT","selectCustomerById","fetchThreadByID","fetchThreadMessages","fetchThreadsByState","onWebSocketAssignedThread","onWebSocketNewMessage","onWebSocketNewThread","onWebSocketResolvedThread","onWebSocketWhatsAppAccountStatusChange","searchInbox","sendInboxTemplate","sendMessage","inboxUsersAdapter","selectId","inboxUser","uuid","websocketCallback","state","action","inboxUsers","payload","upsertMany","updateFromCustomer","customers","Object","keys","reduce","acc","key","is_customer","inboxUsersSlice","name","initialState","getInitialState","reducers","extraReducers","builder","addCase","fulfilled","inboxUsersReducer","reducer","selectById","selectInboxUserById","selectIds","selectInboxUserIds","selectEntities","selectInboxUserEntities","selectAll","selectAllInboxUsers","selectTotal","selectTotalInboxUsers","getSelectors","inbox","entities","selectUserDetailByID","user","customer","orgMember","userInfo"],"mappings":"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","sourcesContent":["import { createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../../../root'\nimport { connectChannelAcct, fetchSupportedChannels } from '../../channels/channel.thunks';\nimport { selectOrgMemberByID } from '../../settings/slices';\nimport { INBOX_INIT } from '../inbox.data';\nimport { InboxUserSchema } from '../inbox.types';\nimport { selectCustomerById } from './customer';\nimport {\n  fetchThreadByID, fetchThreadMessages, fetchThreadsByState, onWebSocketAssignedThread,\n  onWebSocketNewMessage, onWebSocketNewThread, onWebSocketResolvedThread,\n  onWebSocketWhatsAppAccountStatusChange,\n  searchInbox,\n  sendInboxTemplate, sendMessage\n} from './global';\n\nconst inboxUsersAdapter = createEntityAdapter<InboxUserSchema>({\n  selectId: inboxUser => inboxUser.uuid,\n});\n\nconst websocketCallback = (state: any, action: any) => {\n  const { inboxUsers } = action.payload;\n  inboxUsers && inboxUsersAdapter.upsertMany(state, inboxUsers);\n};\n\nconst updateFromCustomer = (state: any, action: any) => {\n  const { customers } = action.payload;\n  customers && inboxUsersAdapter.upsertMany(state, Object.keys(customers).reduce(\n    (acc, key: string) => {\n      acc[key] = { uuid: key, is_customer: true };\n\n      return acc;\n    }, ({} as { [k: string]: InboxUserSchema })\n  ));\n}\n\nexport const inboxUsersSlice = createSlice({\n  name: \"inboxUsers\",\n  initialState: inboxUsersAdapter.getInitialState(),\n  reducers: {},\n  extraReducers(builder) {\n    builder\n    .addCase(fetchThreadsByState.fulfilled, websocketCallback)\n    .addCase(fetchThreadByID.fulfilled, websocketCallback)\n    .addCase(searchInbox.fulfilled, websocketCallback)\n    .addCase(fetchThreadMessages.fulfilled, websocketCallback)\n    .addCase(sendInboxTemplate.fulfilled, websocketCallback)\n    .addCase(sendMessage.fulfilled, websocketCallback)\n    .addCase(onWebSocketNewThread, websocketCallback)\n    .addCase(onWebSocketResolvedThread, websocketCallback)\n    .addCase(onWebSocketAssignedThread, websocketCallback)\n    .addCase(onWebSocketNewMessage, websocketCallback)\n    .addCase(connectChannelAcct.fulfilled, updateFromCustomer)\n    .addCase(fetchSupportedChannels.fulfilled, updateFromCustomer)\n    .addCase(onWebSocketWhatsAppAccountStatusChange, updateFromCustomer);\n  }\n});\n\nexport const inboxUsersReducer = inboxUsersSlice.reducer;\n\nexport const {\n  selectById: selectInboxUserById,\n  selectIds: selectInboxUserIds,\n  selectEntities: selectInboxUserEntities,\n  selectAll: selectAllInboxUsers,\n  selectTotal: selectTotalInboxUsers,\n} = inboxUsersAdapter.getSelectors<RootState>((state) => state.inbox.entities.inboxUsers);\n\nexport const selectUserDetailByID = createSelector(\n  selectInboxUserById,\n  selectCustomerById,\n  selectOrgMemberByID,\n  (user, customer, orgMember) => ({\n    ...(user || INBOX_INIT.inboxUser),\n    userInfo: user?.is_customer ? customer : orgMember\n  })\n);\n"]},"metadata":{},"sourceType":"module"}