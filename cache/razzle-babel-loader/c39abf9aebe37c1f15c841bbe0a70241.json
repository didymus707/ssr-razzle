{"ast":null,"code":"import _extends from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/integrations/integrations.component.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Avatar, Box, Flex, Stack, Tab, TabList, TabPanel, TabPanels, Tabs, Text, useToast, Modal, ModalOverlay, ModalContent, ModalBody, Input, FormControl, FormLabel, Icon } from '@chakra-ui/core';\nimport { Switch, Route, useParams, useHistory, useLocation } from 'react-router-dom';\nimport { ConfirmModal, ContentWrapper, EmptyState, ToastBox, Button } from 'app/components';\nimport { UseCase, Subscription, Phone, PhoneIntegration, WebMessengerIntegration, WhatsApp } from './components';\nimport emptyViewImage from './empty.svg';\nimport { Wrapper } from '../lists/lists.styles';\nimport { apps, getErrorFromQuery } from '../channels/channels.data';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { disconnectCredential, selectActiveOrgChannelCredentialIDs, selectIsCredentialConnected, submitDetailToBeNotify } from '../channels';\nimport { INBOX_INIT, selectCustomerById } from '../inbox';\nimport { ChannelConnectBtn, ErrorModal } from '../channels/components';\nimport ReactMarkdown from 'react-markdown'; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nconst selectView = (which, profile, history) => {\n  const anyView = __jsx(Box, {\n    mt: \"10rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, __jsx(EmptyState, {\n    imageSize: \"250px\",\n    heading: \"Channel not supported yet\",\n    subheading: \"Support coming soon\",\n    image: emptyViewImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }));\n\n  switch (which) {\n    case 'web-messenger':\n      return {\n        name: 'Web Messenger',\n        view: __jsx(WebMessengerIntegration, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }\n        }),\n        description: `Create an SMS channel by assigning one or more of your virtual mobile numbers and use it to send and receive messages.\nYou can add numbers from different countries and our API will pick the best number to send your message from based on the recipient's country code.`\n      };\n\n    case 'whatsapp':\n      return {\n        name: 'WhatsApp',\n        view: anyView,\n        description: 'Connect WhatsApp directly to Simpu, to receive DMs.'\n      };\n\n    case 'messenger':\n      return {\n        name: 'Facebook Messenger',\n        view: anyView,\n        description: 'Connect Messenger directly to Simpu, to receive DMs.'\n      };\n\n    case 'instagram':\n      return {\n        name: 'Instagram',\n        view: anyView,\n        description: 'Connect Instagram directly to Simpu, to receive DMs.'\n      };\n\n    case 'web-chat':\n      return {\n        name: 'Website Live Chat',\n        view: anyView,\n        description: 'Embed live chat into your website.'\n      };\n\n    case 'ios':\n      return {\n        name: 'iOS SDK',\n        view: anyView,\n        description: 'Allow customers speak to you directly from their iOS devices.'\n      };\n\n    case 'android':\n      return {\n        name: 'Android SDK',\n        view: anyView,\n        description: 'Allow customers speak to you directly from their Android devices.'\n      };\n\n    default:\n      {\n        history.push('/s/channels');\n      }\n  }\n};\n\nfunction AccountItem({\n  customer_id,\n  credential_id,\n  index\n}) {\n  const toast = useToast();\n  const dispatch = useDispatch();\n  const {\n    0: isModalOpen,\n    1: setIsModalOpen\n  } = useState(false);\n  const {\n    0: isDisconnectLoading,\n    1: setIsDisconnectLoading\n  } = useState(false);\n  const {\n    image_url,\n    platform_name,\n    platform_nick\n  } = useSelector(state => selectCustomerById(state, customer_id)) || INBOX_INIT.customer;\n\n  const disconnectAccount = async () => {\n    setIsDisconnectLoading(true);\n    const response = await dispatch(disconnectCredential({\n      credential_id\n    }));\n\n    if (disconnectCredential.fulfilled.match(response)) {\n      setIsModalOpen(false);\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          status: \"success\",\n          onClose: onClose,\n          message: `${platform_nick || platform_name} account disconnected successfully`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 11\n          }\n        })\n      });\n    } else {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: \"Error! Failed to remove channel\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 11\n          }\n        })\n      });\n    }\n\n    setIsDisconnectLoading(false);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Flex, {\n    key: platform_nick,\n    alignItems: \"center\",\n    paddingY: \"1.1875rem\",\n    borderTop: index === 0 ? 'none' : 'solid 1px rgba(0, 0, 0, 0.08)',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }, image_url && __jsx(Avatar, {\n    src: image_url,\n    name: platform_name || platform_nick,\n    marginRight: \".5rem\",\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }), __jsx(Text, {\n    fontWeight: 600,\n    fontSize: \".875rem\",\n    color: \"#3d50df\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }, platform_name), __jsx(Button, {\n    variant: \"ghost\",\n    variantColor: \"red\",\n    fontSize: \".75rem\",\n    leftIcon: \"delete\",\n    height: \"auto\",\n    marginLeft: \"auto\",\n    padding: \".25rem .5rem\",\n    onClick: () => setIsModalOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }\n  }, \"Remove\")), __jsx(ConfirmModal, {\n    isOpen: isModalOpen,\n    onConfirm: disconnectAccount,\n    isLoading: isDisconnectLoading,\n    onClose: () => setIsModalOpen(false),\n    title: `Disconnect ${platform_nick || platform_name}`,\n    description: \"Performing this action will delete all the conversations associated with this account.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction ConnectedAcct({\n  channel\n}) {\n  const accounts = useSelector(state => selectActiveOrgChannelCredentialIDs(state, channel));\n  return __jsx(Box, {\n    backgroundColor: \"#f6fafd\",\n    borderRadius: \".375rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 5\n    }\n  }, __jsx(Stack, {\n    spacing: \".5rem\",\n    maxWidth: \"322px\",\n    marginX: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }\n  }, accounts.length === 0 ? __jsx(Text, {\n    fontSize: \".875rem\",\n    marginTop: \".5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 11\n    }\n  }, \"No account connected yet\") : accounts.map(({\n    user_id,\n    credential_id\n  }, index) => __jsx(AccountItem, {\n    key: credential_id,\n    index: index,\n    customer_id: user_id,\n    credential_id: credential_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }\n  }))));\n}\n\nfunction ChannelIntegration() {\n  const toast = useToast();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const location = useLocation();\n  const params = useParams();\n  const {\n    channel\n  } = params;\n  const {\n    0: notifyText,\n    1: setNotifyText\n  } = useState('');\n  const {\n    0: isModalOpen,\n    1: setIsModalOpen\n  } = useState(false);\n  const {\n    0: isSubmittingNotifyBtn,\n    1: setIsSubmittingNotifyBtn\n  } = useState(false);\n  const {\n    0: isNotifyModalOpen,\n    1: setIsNotifyModalOpen\n  } = useState(false);\n  const {\n    0: errorDetail,\n    1: setErrorDetail\n  } = useState({\n    title: '',\n    description: ''\n  });\n  const {\n    name,\n    status,\n    description,\n    icon,\n    key\n  } = apps[channel];\n  const isConnected = useSelector(state => selectIsCredentialConnected(state, channel));\n  const addMoreTexts = {\n    request: 'Request for Access',\n    ready: `Add${isConnected ? '  more' : ''}`,\n    undone: 'Notify Me When Available'\n  };\n  const tabHeaders = [{\n    title: 'Description',\n    body: __jsx(ReactMarkdown, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 13\n      }\n    }, description)\n  }];\n\n  if (isConnected) {\n    tabHeaders.unshift({\n      title: 'Connected Accounts',\n      body: __jsx(ConnectedAcct, {\n        channel: channel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 61\n        }\n      })\n    });\n  }\n\n  if (status !== 'undone') {\n    tabHeaders.push({\n      title: 'Permisssion',\n      body: __jsx(Box, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 51\n        }\n      })\n    });\n  }\n\n  const onNotifySubmit = async event => {\n    event.preventDefault();\n    setIsSubmittingNotifyBtn(true);\n    const r = await dispatch(submitDetailToBeNotify({\n      channel,\n      email: notifyText\n    }));\n\n    if (submitDetailToBeNotify.fulfilled.match(r)) {\n      setIsNotifyModalOpen(false);\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          status: \"success\",\n          onClose: onClose,\n          message: \"Email Saved!\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 11\n          }\n        })\n      });\n    } else {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: \"Error! Failed to submit the email\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 11\n          }\n        })\n      });\n    }\n\n    setIsSubmittingNotifyBtn(false);\n  };\n\n  useEffect(() => {\n    const {\n      search\n    } = location;\n\n    if (search) {\n      const error = getErrorFromQuery(search);\n      error && setErrorDetail(error);\n      error.description && setIsModalOpen(true);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [location.search]);\n  return __jsx(ContentWrapper, {\n    paddingBottom: \"1rem\",\n    paddingTop: \"3.125rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 5\n    }\n  }, __jsx(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    className: \"side-bar\",\n    marginTop: \"-4rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    variant: \"ghost\",\n    marginLeft: \"-1rem\",\n    variantColor: \"blue\",\n    marginBottom: \"1.5rem\",\n    leftIcon: \"chevron-left\",\n    onClick: () => history.goBack(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 11\n    }\n  }, \"Go Back\"), __jsx(Flex, {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    name: icon || key,\n    size: \"13.125rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 13\n    }\n  })), status === 'undone' ? __jsx(Button, {\n    width: \"100%\",\n    variant: \"solid\",\n    marginTop: \"2rem\",\n    variantColor: \"green\",\n    onClick: () => setIsNotifyModalOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 13\n    }\n  }, addMoreTexts[status]) : __jsx(ChannelConnectBtn, {\n    which: channel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    variant: \"solid\",\n    marginTop: \"2rem\",\n    variantColor: \"green\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 15\n    }\n  }, addMoreTexts[status]))), __jsx(Box, {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 13\n    }\n  }, name)), __jsx(Tabs, {\n    color: \"brandBlack\",\n    fontSize: \".875rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 11\n    }\n  }, __jsx(TabList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 13\n    }\n  }, tabHeaders.map(({\n    title\n  }) => __jsx(Tab, {\n    fontSize: \".875rem\",\n    key: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 17\n    }\n  }, title))), __jsx(TabPanels, {\n    marginTop: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 13\n    }\n  }, tabHeaders.map(({\n    title,\n    body\n  }) => __jsx(TabPanel, {\n    key: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 17\n    }\n  }, body)))))), __jsx(Modal, {\n    isCentered: true,\n    isOpen: isNotifyModalOpen,\n    onClose: () => setIsNotifyModalOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 9\n    }\n  }), __jsx(ModalContent, {\n    backgroundColor: \"white\",\n    paddingBottom: \"1.5rem\",\n    borderRadius: \".25rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 9\n    }\n  }, __jsx(ModalBody, {\n    fontSize: \".875rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    marginY: \"1.5rem\",\n    fontWeight: \"bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 13\n    }\n  }, `Notify me when ${name} is available`), __jsx(\"form\", {\n    onSubmit: onNotifySubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 13\n    }\n  }, __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 15\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"email\",\n    marginBottom: \".25rem\",\n    fontSize: \".875rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 17\n    }\n  }, \"Email\"), __jsx(Input, {\n    id: \"email\",\n    type: \"email\",\n    fontSize: \".875rem\",\n    value: notifyText,\n    onChange: e => setNotifyText(e.target.value),\n    placeholder: \"Please enter your email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 17\n    }\n  })), __jsx(Stack, {\n    isInline: true,\n    spacing: \".5rem\",\n    marginTop: \"1.5rem\",\n    justifyContent: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    type: \"button\",\n    variant: \"ghost\",\n    fontSize: \".875rem\",\n    variantColor: \"blue\",\n    onClick: () => setIsNotifyModalOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 17\n    }\n  }, \"Cancel\"), __jsx(Button, {\n    type: \"submit\",\n    variant: \"solid\",\n    fontSize: \".875rem\",\n    variantColor: \"blue\",\n    isLoading: isSubmittingNotifyBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 17\n    }\n  }, \"Submit Request\")))))), __jsx(ErrorModal, _extends({}, errorDetail, {\n    isOpen: isModalOpen,\n    setIsOpen: setIsModalOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 7\n    }\n  })));\n}\n\nexport function IntegrationsComponent({\n  user,\n  profile,\n  randomPhone,\n  resetRandomPhone,\n  useCaseData,\n  resetUseCaseData,\n  buyPhone\n}) {\n  return __jsx(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 5\n    }\n  }, __jsx(Route, {\n    path: \"/s/integrations/sms-integration\",\n    render: props => __jsx(PhoneIntegration, _extends({\n      channel: \"sms\",\n      user: user,\n      profile: profile\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 7\n    }\n  }), __jsx(Route, {\n    path: \"/s/integrations/voice-integration\",\n    render: props => __jsx(PhoneIntegration, _extends({\n      channel: \"voice\",\n      user: user,\n      profile: profile\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 7\n    }\n  }), __jsx(Route, {\n    path: \"/s/integrations/subscription/phone\",\n    render: props => __jsx(Subscription, _extends({\n      user: user,\n      random_phone: randomPhone,\n      resetRandomPhone: resetRandomPhone,\n      use_case_data: useCaseData,\n      resetUseCaseData: resetUseCaseData,\n      buyPhone: buyPhone,\n      profile: profile\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 7\n    }\n  }), __jsx(Route, {\n    path: \"/s/integrations/use-case/phone\",\n    render: props => __jsx(UseCase, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 69\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 7\n    }\n  }), __jsx(Route, {\n    path: \"/s/integrations/phone\",\n    render: props => __jsx(Phone, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 60\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 7\n    }\n  }), __jsx(Route, {\n    path: \"/s/integrations/_whatsapp\",\n    render: () => __jsx(WhatsApp, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 61\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 7\n    }\n  }), __jsx(Route, {\n    path: \"/s/integrations/:channel\",\n    render: () => __jsx(ChannelIntegration, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 60\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/integrations/integrations.component.tsx"],"names":["React","useEffect","useState","Avatar","Box","Flex","Stack","Tab","TabList","TabPanel","TabPanels","Tabs","Text","useToast","Modal","ModalOverlay","ModalContent","ModalBody","Input","FormControl","FormLabel","Icon","Switch","Route","useParams","useHistory","useLocation","ConfirmModal","ContentWrapper","EmptyState","ToastBox","Button","UseCase","Subscription","Phone","PhoneIntegration","WebMessengerIntegration","WhatsApp","emptyViewImage","Wrapper","apps","getErrorFromQuery","useDispatch","useSelector","disconnectCredential","selectActiveOrgChannelCredentialIDs","selectIsCredentialConnected","submitDetailToBeNotify","INBOX_INIT","selectCustomerById","ChannelConnectBtn","ErrorModal","ReactMarkdown","selectView","which","profile","history","anyView","name","view","description","push","AccountItem","customer_id","credential_id","index","toast","dispatch","isModalOpen","setIsModalOpen","isDisconnectLoading","setIsDisconnectLoading","image_url","platform_name","platform_nick","state","customer","disconnectAccount","response","fulfilled","match","position","render","onClose","ConnectedAcct","channel","accounts","length","map","user_id","ChannelIntegration","location","params","notifyText","setNotifyText","isSubmittingNotifyBtn","setIsSubmittingNotifyBtn","isNotifyModalOpen","setIsNotifyModalOpen","errorDetail","setErrorDetail","title","status","icon","key","isConnected","addMoreTexts","request","ready","undone","tabHeaders","body","unshift","onNotifySubmit","event","preventDefault","r","email","search","error","goBack","e","target","value","IntegrationsComponent","user","randomPhone","resetRandomPhone","useCaseData","resetUseCaseData","buyPhone","props"],"mappings":"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","sourcesContent":["import React, { ReactElement, useEffect, useState } from 'react';\nimport {\n  Avatar,\n  Box,\n  Flex,\n  Stack,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n  useToast,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalBody,\n  Input,\n  FormControl,\n  FormLabel,\n  Icon,\n} from '@chakra-ui/core';\nimport {\n  Switch,\n  Route,\n  RouteComponentProps,\n  useParams,\n  useHistory,\n  useLocation,\n} from 'react-router-dom';\nimport { ConfirmModal, ContentWrapper, EmptyState, ToastBox, Button } from 'app/components';\nimport {\n  UseCase,\n  Subscription,\n  Phone,\n  PhoneIntegration,\n  WebMessengerIntegration,\n  WhatsApp,\n} from './components';\nimport { IntegrationProps } from './integrations.type';\nimport emptyViewImage from './empty.svg';\nimport { Wrapper } from '../lists/lists.styles';\nimport { apps, getErrorFromQuery } from '../channels/channels.data';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../../root';\nimport {\n  disconnectCredential,\n  ErrorModalProps,\n  selectActiveOrgChannelCredentialIDs,\n  selectIsCredentialConnected,\n  submitDetailToBeNotify,\n} from '../channels';\nimport { INBOX_INIT, selectCustomerById } from '../inbox';\nimport { ChannelConnectBtn, ErrorModal } from '../channels/components';\nimport ReactMarkdown from 'react-markdown';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst selectView = (\n  which: string,\n  profile: any,\n  history: RouteComponentProps['history'],\n): { name: string; description: string; view: ReactElement } | undefined => {\n  const anyView = (\n    <Box mt=\"10rem\">\n      <EmptyState\n        imageSize=\"250px\"\n        heading=\"Channel not supported yet\"\n        subheading=\"Support coming soon\"\n        image={emptyViewImage}\n      />\n    </Box>\n  );\n\n  switch (which) {\n    case 'web-messenger':\n      return {\n        name: 'Web Messenger',\n        view: <WebMessengerIntegration />,\n        description: `Create an SMS channel by assigning one or more of your virtual mobile numbers and use it to send and receive messages.\nYou can add numbers from different countries and our API will pick the best number to send your message from based on the recipient's country code.`,\n      };\n    case 'whatsapp':\n      return {\n        name: 'WhatsApp',\n        view: anyView,\n        description: 'Connect WhatsApp directly to Simpu, to receive DMs.',\n      };\n    case 'messenger':\n      return {\n        name: 'Facebook Messenger',\n        view: anyView,\n        description: 'Connect Messenger directly to Simpu, to receive DMs.',\n      };\n    case 'instagram':\n      return {\n        name: 'Instagram',\n        view: anyView,\n        description: 'Connect Instagram directly to Simpu, to receive DMs.',\n      };\n    case 'web-chat':\n      return {\n        name: 'Website Live Chat',\n        view: anyView,\n        description: 'Embed live chat into your website.',\n      };\n    case 'ios':\n      return {\n        name: 'iOS SDK',\n        view: anyView,\n        description: 'Allow customers speak to you directly from their iOS devices.',\n      };\n    case 'android':\n      return {\n        name: 'Android SDK',\n        view: anyView,\n        description: 'Allow customers speak to you directly from their Android devices.',\n      };\n    default: {\n      history.push('/s/channels');\n    }\n  }\n};\n\nfunction AccountItem({\n  customer_id,\n  credential_id,\n  index,\n}: {\n  index: number;\n  customer_id: string;\n  credential_id: string;\n}) {\n  const toast = useToast();\n  const dispatch = useDispatch();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isDisconnectLoading, setIsDisconnectLoading] = useState(false);\n\n  const { image_url, platform_name, platform_nick } =\n    useSelector((state: RootState) => selectCustomerById(state, customer_id)) ||\n    INBOX_INIT.customer;\n\n  const disconnectAccount = async () => {\n    setIsDisconnectLoading(true);\n    const response: any = await dispatch(disconnectCredential({ credential_id }));\n\n    if (disconnectCredential.fulfilled.match(response)) {\n      setIsModalOpen(false);\n\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox\n            status=\"success\"\n            onClose={onClose}\n            message={`${platform_nick || platform_name} account disconnected successfully`}\n          />\n        ),\n      });\n    } else {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox onClose={onClose} message=\"Error! Failed to remove channel\" />\n        ),\n      });\n    }\n\n    setIsDisconnectLoading(false);\n  };\n\n  return (\n    <>\n      <Flex\n        key={platform_nick}\n        alignItems=\"center\"\n        paddingY=\"1.1875rem\"\n        borderTop={index === 0 ? 'none' : 'solid 1px rgba(0, 0, 0, 0.08)'}\n      >\n        {image_url && (\n          <Avatar\n            src={image_url}\n            name={platform_name || platform_nick}\n            marginRight=\".5rem\"\n            size=\"sm\"\n          />\n        )}\n\n        <Text fontWeight={600} fontSize=\".875rem\" color=\"#3d50df\">\n          {platform_name}\n        </Text>\n\n        <Button\n          variant=\"ghost\"\n          variantColor=\"red\"\n          fontSize=\".75rem\"\n          leftIcon=\"delete\"\n          height=\"auto\"\n          marginLeft=\"auto\"\n          padding=\".25rem .5rem\"\n          onClick={() => setIsModalOpen(true)}\n        >\n          Remove\n        </Button>\n      </Flex>\n\n      <ConfirmModal\n        isOpen={isModalOpen}\n        onConfirm={disconnectAccount}\n        isLoading={isDisconnectLoading}\n        onClose={() => setIsModalOpen(false)}\n        title={`Disconnect ${platform_nick || platform_name}`}\n        description=\"Performing this action will delete all the conversations associated with this account.\"\n      />\n    </>\n  );\n}\n\nfunction ConnectedAcct({ channel }: { channel: string }) {\n  const accounts = useSelector((state: RootState) =>\n    selectActiveOrgChannelCredentialIDs(state, channel),\n  );\n  return (\n    <Box backgroundColor=\"#f6fafd\" borderRadius=\".375rem\">\n      <Stack spacing=\".5rem\" maxWidth=\"322px\" marginX=\"auto\">\n        {accounts.length === 0 ? (\n          <Text fontSize=\".875rem\" marginTop=\".5rem\">\n            No account connected yet\n          </Text>\n        ) : (\n          accounts.map(({ user_id, credential_id }, index) => (\n            <AccountItem\n              key={credential_id}\n              index={index}\n              customer_id={user_id}\n              credential_id={credential_id}\n            />\n          ))\n        )}\n      </Stack>\n    </Box>\n  );\n}\n\nfunction ChannelIntegration() {\n  const toast = useToast();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const location = useLocation();\n  const params = useParams<{ channel: string }>();\n  const { channel } = params;\n  const [notifyText, setNotifyText] = useState('');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isSubmittingNotifyBtn, setIsSubmittingNotifyBtn] = useState(false);\n  const [isNotifyModalOpen, setIsNotifyModalOpen] = useState(false);\n  const [errorDetail, setErrorDetail] = useState<Pick<ErrorModalProps, 'title' | 'description'>>({\n    title: '',\n    description: '',\n  });\n  const { name, status, description, icon, key } = apps[channel];\n  const isConnected = useSelector((state: RootState) =>\n    selectIsCredentialConnected(state, channel),\n  );\n  const addMoreTexts = {\n    request: 'Request for Access',\n    ready: `Add${isConnected ? '  more' : ''}`,\n    undone: 'Notify Me When Available',\n  };\n  const tabHeaders: {\n    title: string;\n    body: JSX.Element;\n  }[] = [\n    {\n      title: 'Description',\n      body: <ReactMarkdown>{description}</ReactMarkdown>,\n    },\n  ];\n\n  if (isConnected) {\n    tabHeaders.unshift({ title: 'Connected Accounts', body: <ConnectedAcct channel={channel} /> });\n  }\n\n  if (status !== 'undone') {\n    tabHeaders.push({ title: 'Permisssion', body: <Box /> });\n  }\n\n  const onNotifySubmit = async (event: any) => {\n    event.preventDefault();\n    setIsSubmittingNotifyBtn(true);\n    const r: any = await dispatch(\n      submitDetailToBeNotify({\n        channel,\n        email: notifyText,\n      }),\n    );\n    if (submitDetailToBeNotify.fulfilled.match(r)) {\n      setIsNotifyModalOpen(false);\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox status=\"success\" onClose={onClose} message=\"Email Saved!\" />\n        ),\n      });\n    } else {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox onClose={onClose} message=\"Error! Failed to submit the email\" />\n        ),\n      });\n    }\n\n    setIsSubmittingNotifyBtn(false);\n  };\n\n  useEffect(() => {\n    const { search } = location;\n    if (search) {\n      const error = getErrorFromQuery(search);\n      error && setErrorDetail(error);\n      error.description && setIsModalOpen(true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.search]);\n\n  return (\n    <ContentWrapper paddingBottom=\"1rem\" paddingTop=\"3.125rem\">\n      <Wrapper>\n        <Box className=\"side-bar\" marginTop=\"-4rem\">\n          <Button\n            variant=\"ghost\"\n            marginLeft=\"-1rem\"\n            variantColor=\"blue\"\n            marginBottom=\"1.5rem\"\n            leftIcon=\"chevron-left\"\n            onClick={() => history.goBack()}\n          >\n            Go Back\n          </Button>\n\n          <Flex justifyContent=\"center\" alignItems=\"center\">\n            <Icon name={icon || key} size=\"13.125rem\" />\n          </Flex>\n\n          {status === 'undone' ? (\n            <Button\n              width=\"100%\"\n              variant=\"solid\"\n              marginTop=\"2rem\"\n              variantColor=\"green\"\n              onClick={() => setIsNotifyModalOpen(true)}\n            >\n              {addMoreTexts[status]}\n            </Button>\n          ) : (\n            <ChannelConnectBtn which={channel}>\n              <Button width=\"100%\" variant=\"solid\" marginTop=\"2rem\" variantColor=\"green\">\n                {addMoreTexts[status]}\n              </Button>\n            </ChannelConnectBtn>\n          )}\n        </Box>\n\n        <Box className=\"content\">\n          <Box className=\"section-title\">\n            <Text className=\"title\">{name}</Text>\n          </Box>\n\n          <Tabs color=\"brandBlack\" fontSize=\".875rem\">\n            <TabList>\n              {tabHeaders.map(({ title }) => (\n                <Tab fontSize=\".875rem\" key={title}>\n                  {title}\n                </Tab>\n              ))}\n            </TabList>\n\n            <TabPanels marginTop=\"1.5rem\">\n              {tabHeaders.map(({ title, body }) => (\n                <TabPanel key={title}>{body}</TabPanel>\n              ))}\n            </TabPanels>\n          </Tabs>\n        </Box>\n      </Wrapper>\n\n      <Modal isCentered isOpen={isNotifyModalOpen} onClose={() => setIsNotifyModalOpen(false)}>\n        <ModalOverlay />\n        <ModalContent backgroundColor=\"white\" paddingBottom=\"1.5rem\" borderRadius=\".25rem\">\n          <ModalBody fontSize=\".875rem\">\n            <Text marginY=\"1.5rem\" fontWeight=\"bold\">\n              {`Notify me when ${name} is available`}\n            </Text>\n\n            <form onSubmit={onNotifySubmit}>\n              <FormControl isRequired>\n                <FormLabel htmlFor=\"email\" marginBottom=\".25rem\" fontSize=\".875rem\">\n                  Email\n                </FormLabel>\n\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  fontSize=\".875rem\"\n                  value={notifyText}\n                  onChange={(e: any) => setNotifyText(e.target.value)}\n                  placeholder=\"Please enter your email\"\n                />\n              </FormControl>\n\n              <Stack isInline spacing=\".5rem\" marginTop=\"1.5rem\" justifyContent=\"flex-end\">\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  fontSize=\".875rem\"\n                  variantColor=\"blue\"\n                  onClick={() => setIsNotifyModalOpen(false)}\n                >\n                  Cancel\n                </Button>\n\n                <Button\n                  type=\"submit\"\n                  variant=\"solid\"\n                  fontSize=\".875rem\"\n                  variantColor=\"blue\"\n                  isLoading={isSubmittingNotifyBtn}\n                >\n                  Submit Request\n                </Button>\n              </Stack>\n            </form>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n\n      <ErrorModal {...errorDetail} isOpen={isModalOpen} setIsOpen={setIsModalOpen} />\n    </ContentWrapper>\n  );\n}\n\nexport function IntegrationsComponent({\n  user,\n  profile,\n  randomPhone,\n  resetRandomPhone,\n  useCaseData,\n  resetUseCaseData,\n  buyPhone,\n}: IntegrationProps) {\n  return (\n    <Switch>\n      <Route\n        path=\"/s/integrations/sms-integration\"\n        render={(props: any) => (\n          <PhoneIntegration channel=\"sms\" user={user} profile={profile} {...props} />\n        )}\n      />\n      <Route\n        path=\"/s/integrations/voice-integration\"\n        render={(props: any) => (\n          <PhoneIntegration channel=\"voice\" user={user} profile={profile} {...props} />\n        )}\n      />\n      <Route\n        path=\"/s/integrations/subscription/phone\"\n        render={(props: any) => (\n          <Subscription\n            user={user}\n            random_phone={randomPhone}\n            resetRandomPhone={resetRandomPhone}\n            use_case_data={useCaseData}\n            resetUseCaseData={resetUseCaseData}\n            buyPhone={buyPhone}\n            profile={profile}\n            {...props}\n          />\n        )}\n      />\n      <Route path=\"/s/integrations/use-case/phone\" render={props => <UseCase />} />\n      <Route path=\"/s/integrations/phone\" render={props => <Phone />} />\n      <Route path=\"/s/integrations/_whatsapp\" render={() => <WhatsApp />} />\n      <Route path=\"/s/integrations/:channel\" render={() => <ChannelIntegration />} />\n    </Switch>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}