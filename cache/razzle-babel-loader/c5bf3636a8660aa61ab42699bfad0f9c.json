{"ast":null,"code":"var _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/tables/components/table/table.components/TableImportModal.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Button, Checkbox, Divider, Flex, FormLabel, IconButton, ModalBody, Select, Stack, Text } from '@chakra-ui/core';\nimport * as React from 'react';\nimport { ModalContainer } from '../../../../../components';\n\nfunction TableMappingItem({\n  item,\n  columns,\n  onChange\n}) {\n  const [value, setValue] = React.useState('');\n  const columnsToMap = columns === null || columns === void 0 ? void 0 : columns.map(item => ({\n    label: item.label,\n    value: item.id\n  }));\n\n  function handleChange(e) {\n    const value = e.target.value;\n    setValue(value);\n    onChange && onChange({\n      [value]: item.id\n    });\n  }\n\n  return __jsx(Stack, {\n    width: \"48%\",\n    spacing: \"4px\",\n    marginBottom: \"0.8rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, __jsx(Text, {\n    flex: 1,\n    fontSize: \"0.875rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, item.name), __jsx(Select, {\n    size: \"sm\",\n    value: value,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, __jsx(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, \"-- Select property --\"), columnsToMap === null || columnsToMap === void 0 ? void 0 : columnsToMap.map((item, i) => __jsx(\"option\", {\n    key: i,\n    value: item.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, item.label))));\n}\n\nfunction TableImportModalSectionOne({\n  file,\n  isLoading,\n  onRemoveFile,\n  handleUpload\n}) {\n  const [date_format, setDateFormat] = React.useState('');\n  const [agreeCheck, setAgreeCheck] = React.useState(false);\n\n  function handleDateFormatChange(e) {\n    setDateFormat(e.target.value);\n  }\n\n  function handleAgreeCheck(e) {\n    setAgreeCheck(e.target.checked);\n  }\n\n  return __jsx(React.Fragment, null, file && __jsx(Box, {\n    marginBottom: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, __jsx(Flex, {\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    fontSize: \"14px\",\n    marginBottom: \"0.25rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, file.name), __jsx(Text, {\n    color: \"lightBlack\",\n    fontSize: \"0.625rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }, Math.ceil(file.size / 1000), \" KB\")), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, __jsx(IconButton, {\n    size: \"xs\",\n    variant: \"ghost\",\n    \"aria-label\": \"close\",\n    icon: \"small-close\",\n    onClick: onRemoveFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  })))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }), __jsx(Box, {\n    marginY: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, __jsx(FormLabel, {\n    fontSize: \"0.8rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, \"Date Format\"), __jsx(Select, {\n    size: \"sm\",\n    value: date_format,\n    onChange: handleDateFormatChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, __jsx(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, \"-- Select date format--\"), __jsx(\"option\", {\n    value: \"dd/mm/yyyy\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, \"dd/mm/yyyy\"), __jsx(\"option\", {\n    value: \"mm/dd/yyyy\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, \"mm/dd/yyyy\"), __jsx(\"option\", {\n    value: \"yyyy/mm/dd\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, \"yyyy/mm/dd\"))), __jsx(Box, {\n    marginBottom: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, __jsx(Checkbox, {\n    variantColor: \"blue\",\n    isChecked: agreeCheck,\n    alignItems: \"flex-start\",\n    onChange: handleAgreeCheck,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    color: \"lightBlack\",\n    fontSize: \"0.75rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, \"I agree that all contacts in this import are expecting to hear from me or my organisation. I have a prior relationship with these contacts and I have emailed or messaged them at least once in the past year. I can confirm that this list wasn\\u2019t purchased, rented, appended, or provided by a third party.\"))), __jsx(Box, {\n    marginBottom: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    size: \"sm\",\n    fontWeight: \"normal\",\n    isLoading: isLoading,\n    variantColor: \"blue\",\n    isDisabled: !agreeCheck,\n    onClick: () => handleUpload({\n      file,\n      source: 'csv',\n      name: file.name,\n      agree: agreeCheck,\n      date_format: date_format\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, \"Upload File\")));\n}\n\nfunction TableImportModalSectionTwo(props) {\n  var _importedData$columns;\n\n  const {\n    tables,\n    importedData,\n    isLoading,\n    handleMapping\n  } = props;\n  const [mapping, setMapping] = React.useState({});\n  const [selectedTableId, setSelectedTableId] = React.useState();\n  const [columns, setColumns] = React.useState();\n  React.useEffect(() => {\n    const selectedTable = tables.find(table => table.id === selectedTableId);\n    const selectedTableColumns = selectedTable === null || selectedTable === void 0 ? void 0 : selectedTable.columns;\n    setColumns(selectedTableColumns); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedTableId]);\n\n  function handleTableChange(e) {\n    const value = e.target.value;\n    setSelectedTableId(value);\n  }\n\n  function handleMappingUpdate(option) {\n    setMapping(_objectSpread(_objectSpread({}, mapping), option));\n  }\n\n  function onMappingSubmit() {\n    const payload = {\n      id: importedData === null || importedData === void 0 ? void 0 : importedData.id,\n      table_id: selectedTableId,\n      mapping\n    };\n    handleMapping(payload);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Text, {\n    marginBottom: \"1rem\",\n    color: \"lightBlack\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }, \"Map the columns from the file to the properties of the table you want to update\"), __jsx(Select, {\n    size: \"sm\",\n    value: selectedTableId,\n    onChange: handleTableChange,\n    placeholder: \"Select a table to import into\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, tables.map(({\n    id,\n    name\n  }, i) => __jsx(\"option\", {\n    key: i,\n    value: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 11\n    }\n  }, name))), selectedTableId && __jsx(React.Fragment, null, __jsx(Flex, {\n    height: \"400px\",\n    flexWrap: \"wrap\",\n    overflowY: \"auto\",\n    marginBottom: \"1rem\",\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 11\n    }\n  }, importedData === null || importedData === void 0 ? void 0 : (_importedData$columns = importedData.columns) === null || _importedData$columns === void 0 ? void 0 : _importedData$columns.map((item, i) => __jsx(TableMappingItem, {\n    key: i,\n    item: item,\n    columns: columns,\n    onChange: handleMappingUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 15\n    }\n  }))), __jsx(Box, {\n    marginBottom: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    size: \"sm\",\n    fontWeight: \"normal\",\n    variantColor: \"blue\",\n    isLoading: isLoading,\n    onClick: onMappingSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }, \"Save mapping\"))));\n}\n\nexport function TableImportModal({\n  file,\n  tables,\n  isOpen,\n  onClose,\n  isLoading,\n  onRemoveFile,\n  importedData,\n  handleUpload,\n  handleMapping\n}) {\n  const modalTitle = !importedData ? 'Import a spreadsheet' : 'Import mapping';\n  return __jsx(ModalContainer, {\n    isOpen: isOpen,\n    showCloseButton: true,\n    onClose: onClose,\n    title: modalTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 5\n    }\n  }, __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }\n  }, !importedData ? __jsx(TableImportModalSectionOne, {\n    file: file,\n    isLoading: isLoading,\n    handleUpload: handleUpload,\n    onRemoveFile: onRemoveFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 11\n    }\n  }) : __jsx(TableImportModalSectionTwo, {\n    tables: tables,\n    isLoading: isLoading,\n    importedData: importedData,\n    handleMapping: handleMapping,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 11\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/tables/components/table/table.components/TableImportModal.tsx"],"names":["Box","Button","Checkbox","Divider","Flex","FormLabel","IconButton","ModalBody","Select","Stack","Text","React","ModalContainer","TableMappingItem","item","columns","onChange","value","setValue","useState","columnsToMap","map","label","id","handleChange","e","target","name","i","TableImportModalSectionOne","file","isLoading","onRemoveFile","handleUpload","date_format","setDateFormat","agreeCheck","setAgreeCheck","handleDateFormatChange","handleAgreeCheck","checked","Math","ceil","size","source","agree","TableImportModalSectionTwo","props","tables","importedData","handleMapping","mapping","setMapping","selectedTableId","setSelectedTableId","setColumns","useEffect","selectedTable","find","table","selectedTableColumns","handleTableChange","handleMappingUpdate","option","onMappingSubmit","payload","table_id","TableImportModal","isOpen","onClose","modalTitle"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Button,\n  Checkbox,\n  Divider,\n  Flex,\n  FormLabel,\n  IconButton,\n  ModalBody,\n  Select,\n  Stack,\n  Text,\n} from '@chakra-ui/core';\nimport * as React from 'react';\nimport { OptionTypeBase } from 'react-select';\nimport { ModalContainer } from '../../../../../components';\nimport { TablePropertiesOptions } from '../../../tables.types';\nimport { PropertySchema } from '../../property';\nimport { TableImportModalProps } from '../table.types';\n\nfunction TableMappingItem({\n  item,\n  columns,\n  onChange,\n}: {\n  item: OptionTypeBase;\n  columns?: PropertySchema[];\n  onChange?: (value: OptionTypeBase) => void;\n}) {\n  const [value, setValue] = React.useState<string>('');\n  const columnsToMap = columns?.map(item => ({\n    label: item.label,\n    value: item.id,\n  }));\n\n  function handleChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    const value = e.target.value;\n    setValue(value);\n    onChange && onChange({ [value]: item.id });\n  }\n\n  return (\n    <Stack width=\"48%\" spacing=\"4px\" marginBottom=\"0.8rem\">\n      <Text flex={1} fontSize=\"0.875rem\">\n        {item.name}\n      </Text>\n      <Select size=\"sm\" value={value} onChange={handleChange}>\n        <option value=\"\">-- Select property --</option>\n        {columnsToMap?.map((item, i) => (\n          <option key={i} value={item.value}>\n            {item.label}\n          </option>\n        ))}\n      </Select>\n    </Stack>\n  );\n}\n\nfunction TableImportModalSectionOne({\n  file,\n  isLoading,\n  onRemoveFile,\n  handleUpload,\n}: Pick<TableImportModalProps, 'file' | 'isLoading' | 'onRemoveFile' | 'handleUpload'>) {\n  const [date_format, setDateFormat] = React.useState<string>('');\n  const [agreeCheck, setAgreeCheck] = React.useState<boolean>(false);\n\n  function handleDateFormatChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    setDateFormat(e.target.value);\n  }\n\n  function handleAgreeCheck(e: React.ChangeEvent<HTMLInputElement>) {\n    setAgreeCheck(e.target.checked);\n  }\n  return (\n    <>\n      {file && (\n        <Box marginBottom=\"2rem\">\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\n            <Box>\n              <Text fontSize=\"14px\" marginBottom=\"0.25rem\">\n                {file.name}\n              </Text>\n              <Text color=\"lightBlack\" fontSize=\"0.625rem\">\n                {Math.ceil(file.size / 1000)} KB\n              </Text>\n            </Box>\n            <Box>\n              <IconButton\n                size=\"xs\"\n                variant=\"ghost\"\n                aria-label=\"close\"\n                icon=\"small-close\"\n                onClick={onRemoveFile}\n              />\n            </Box>\n          </Flex>\n        </Box>\n      )}\n      <Divider />\n      <Box marginY=\"1.5rem\">\n        <FormLabel fontSize=\"0.8rem\">Date Format</FormLabel>\n        <Select size=\"sm\" value={date_format} onChange={handleDateFormatChange}>\n          <option value=\"\">-- Select date format--</option>\n          <option value=\"dd/mm/yyyy\">dd/mm/yyyy</option>\n          <option value=\"mm/dd/yyyy\">mm/dd/yyyy</option>\n          <option value=\"yyyy/mm/dd\">yyyy/mm/dd</option>\n        </Select>\n      </Box>\n      <Box marginBottom=\"1rem\">\n        <Checkbox\n          variantColor=\"blue\"\n          isChecked={agreeCheck}\n          alignItems=\"flex-start\"\n          onChange={handleAgreeCheck}\n        >\n          <Text color=\"lightBlack\" fontSize=\"0.75rem\">\n            I agree that all contacts in this import are expecting to hear from me or my\n            organisation. I have a prior relationship with these contacts and I have emailed or\n            messaged them at least once in the past year. I can confirm that this list wasn’t\n            purchased, rented, appended, or provided by a third party.\n          </Text>\n        </Checkbox>\n      </Box>\n      <Box marginBottom=\"2rem\">\n        <Button\n          size=\"sm\"\n          fontWeight=\"normal\"\n          isLoading={isLoading}\n          variantColor=\"blue\"\n          isDisabled={!agreeCheck}\n          onClick={() =>\n            handleUpload({\n              file,\n              source: 'csv',\n              name: file.name,\n              agree: agreeCheck,\n              date_format: date_format,\n            })\n          }\n        >\n          Upload File\n        </Button>\n      </Box>\n    </>\n  );\n}\n\nfunction TableImportModalSectionTwo(\n  props: Pick<TableImportModalProps, 'tables' | 'importedData' | 'isLoading' | 'handleMapping'>,\n) {\n  const { tables, importedData, isLoading, handleMapping } = props;\n  const [mapping, setMapping] = React.useState<OptionTypeBase | {}>({});\n  const [selectedTableId, setSelectedTableId] = React.useState<TablePropertiesOptions['id']>();\n  const [columns, setColumns] = React.useState<TablePropertiesOptions['columns']>();\n\n  React.useEffect(() => {\n    const selectedTable = tables.find(table => table.id === selectedTableId);\n    const selectedTableColumns = selectedTable?.columns;\n    setColumns(selectedTableColumns);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedTableId]);\n\n  function handleTableChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    const value = e.target.value;\n    setSelectedTableId(value);\n  }\n\n  function handleMappingUpdate(option: OptionTypeBase) {\n    setMapping({ ...mapping, ...option });\n  }\n\n  function onMappingSubmit() {\n    const payload = { id: importedData?.id, table_id: selectedTableId, mapping };\n    handleMapping(payload);\n  }\n\n  return (\n    <>\n      <Text marginBottom=\"1rem\" color=\"lightBlack\">\n        Map the columns from the file to the properties of the table you want to update\n      </Text>\n\n      <Select\n        size=\"sm\"\n        value={selectedTableId}\n        onChange={handleTableChange}\n        placeholder=\"Select a table to import into\"\n      >\n        {tables.map(({ id, name }, i) => (\n          <option key={i} value={id}>\n            {name}\n          </option>\n        ))}\n      </Select>\n      {selectedTableId && (\n        <>\n          <Flex\n            height=\"400px\"\n            flexWrap=\"wrap\"\n            overflowY=\"auto\"\n            marginBottom=\"1rem\"\n            justifyContent=\"space-between\"\n          >\n            {importedData?.columns?.map((item: OptionTypeBase, i: number) => (\n              <TableMappingItem\n                key={i}\n                item={item}\n                columns={columns}\n                onChange={handleMappingUpdate}\n              />\n            ))}\n          </Flex>\n          <Box marginBottom=\"2rem\">\n            <Button\n              size=\"sm\"\n              fontWeight=\"normal\"\n              variantColor=\"blue\"\n              isLoading={isLoading}\n              onClick={onMappingSubmit}\n            >\n              Save mapping\n            </Button>\n          </Box>\n        </>\n      )}\n    </>\n  );\n}\n\nexport function TableImportModal({\n  file,\n  tables,\n  isOpen,\n  onClose,\n  isLoading,\n  onRemoveFile,\n  importedData,\n  handleUpload,\n  handleMapping,\n}: TableImportModalProps) {\n  const modalTitle = !importedData ? 'Import a spreadsheet' : 'Import mapping';\n\n  return (\n    <ModalContainer isOpen={isOpen} showCloseButton onClose={onClose} title={modalTitle}>\n      <ModalBody>\n        {!importedData ? (\n          <TableImportModalSectionOne\n            file={file}\n            isLoading={isLoading}\n            handleUpload={handleUpload}\n            onRemoveFile={onRemoveFile}\n          />\n        ) : (\n          <TableImportModalSectionTwo\n            tables={tables}\n            isLoading={isLoading}\n            importedData={importedData}\n            handleMapping={handleMapping}\n          />\n        )}\n      </ModalBody>\n    </ModalContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}