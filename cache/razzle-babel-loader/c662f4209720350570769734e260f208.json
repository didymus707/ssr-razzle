{"ast":null,"code":"import _extends from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/components/messages/compose/MessageCompose.tsx\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Icon, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay, Text, useToast } from '@chakra-ui/core';\nimport { removeTemplateHtmlTags } from 'app/authenticated-app/inbox/inbox.utils';\nimport { Button } from 'app/components';\nimport { endOfTomorrow } from 'date-fns';\nimport React, { useState } from 'react';\nimport { Menu, MenuItem, ToastBox } from '../../../../../components';\nimport { INITIAL_PAYMENT_REQUEST } from '../../../inbox.data';\nimport { useInbox } from '../../Provider';\nimport { Attachments } from './Attachments';\nimport { ComposeIcons } from './ComposeIcons';\nimport { EditorWithEmoji } from './EditorWithEmoji';\nexport const MessageComposeForm = ({\n  text,\n  thread,\n  setText,\n  onSubmit,\n  threadRef,\n  isLoading,\n  textAreaRef,\n  sendAndClose,\n  isModalOpened,\n  twoWayPayload,\n  isCreatingLink,\n  isTemplateMode,\n  currentThreadID,\n  setTwoWayPayload,\n  setIsModalOpened,\n  setIsTemplateMode,\n  onSendPaymentRequest\n}) => {\n  var _thread$receiver;\n\n  const INITIAL_PAYMENT_ITEM = {\n    name: '',\n    amount: 0,\n    id: new Date().getTime().toString()\n  };\n  const [paymentItems, setPaymentItems] = React.useState([INITIAL_PAYMENT_ITEM]);\n  const {\n    0: attachedFiles,\n    1: setAttachedFiles\n  } = useState([]);\n  const {\n    0: onSendMessageErrorData,\n    1: setOnSendMessageErrorData\n  } = useState({\n    status: false,\n    message: ''\n  });\n  const {\n    0: paymentLinkMeta,\n    1: setPaymentLinkMeta\n  } = useState({\n    provider: {\n      value: 'paystack',\n      text: 'Paystack'\n    },\n    expiry_date: {\n      value: endOfTomorrow().getTime(),\n      text: 'Tomorrow'\n    }\n  });\n  const {\n    0: paymentRequest,\n    1: setPaymentRequest\n  } = useState(INITIAL_PAYMENT_REQUEST);\n  const toast = useToast();\n  const {\n    isNewConversation\n  } = useInbox();\n  const channel = thread === null || thread === void 0 ? void 0 : (_thread$receiver = thread.receiver) === null || _thread$receiver === void 0 ? void 0 : _thread$receiver.channel_name;\n\n  const sendMessageSuccessCallback = () => {\n    if (threadRef !== null && threadRef !== void 0 && threadRef.current) {\n      threadRef.current.scrollTop = 0;\n    }\n\n    setText('');\n    setAttachedFiles([]);\n    setIsTemplateMode(false);\n    setTwoWayPayload({\n      senderPlatformNick: ''\n    });\n  };\n\n  const handleSubmit = async () => {\n    let content = removeTemplateHtmlTags(text);\n    let payload = {\n      body: content,\n      type: 'message',\n      files: attachedFiles,\n      thread_id: isNewConversation ? undefined : currentThreadID\n    };\n\n    if (channel === 'messenger' && text && attachedFiles && attachedFiles.length > 0) {\n      return toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: \"Cannot send attachment and text together\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 11\n          }\n        })\n      });\n    }\n\n    if (!content.trim() && attachedFiles && attachedFiles.length === 0) {\n      return;\n    }\n\n    if (isNewConversation) {\n      const {\n        contact_id,\n        contactName,\n        senderPlatformNick,\n        credential_id\n      } = twoWayPayload;\n      payload = _objectSpread(_objectSpread({}, payload), {}, {\n        contact_id,\n        credential_id,\n        contact_name: contactName,\n        user_nick: senderPlatformNick\n      });\n    }\n\n    onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit(payload);\n    sendMessageSuccessCallback();\n  };\n\n  const handleSendAndClose = async () => {\n    let content = removeTemplateHtmlTags(text);\n    let payload = {\n      body: content,\n      type: 'message',\n      files: attachedFiles,\n      thread_id: isNewConversation ? undefined : currentThreadID\n    };\n\n    if (channel === 'messenger' && text && attachedFiles && attachedFiles.length > 0) {\n      return toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: \"Cannot send attachment and text together\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 11\n          }\n        })\n      });\n    }\n\n    if (!content.trim() && attachedFiles && attachedFiles.length === 0) {\n      return;\n    }\n\n    sendAndClose === null || sendAndClose === void 0 ? void 0 : sendAndClose(payload);\n    sendMessageSuccessCallback();\n  };\n\n  const handleClearPaymentRequest = () => {\n    setPaymentItems([]);\n    setPaymentLinkMeta({\n      provider: {\n        value: 'paystack',\n        text: 'Paystack'\n      },\n      expiry_date: {\n        value: endOfTomorrow().getTime(),\n        text: 'Tomorrow'\n      }\n    });\n    setPaymentRequest(INITIAL_PAYMENT_REQUEST);\n  };\n\n  const handleMessageErrorPromptClose = () => {\n    setOnSendMessageErrorData({\n      status: false,\n      message: ''\n    });\n  };\n\n  return __jsx(Box, {\n    py: \"1rem\",\n    borderRadius: \"8px\",\n    paddingLeft: \"1.25rem\",\n    paddingRight: \"1.5625rem\",\n    border: \"1px solid rgb(228, 233, 240)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 5\n    }\n  }, __jsx(Attachments, {\n    files: attachedFiles,\n    setFiles: setAttachedFiles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }\n  }), __jsx(EditorWithEmoji, {\n    style: {\n      width: '100%',\n      resize: 'none',\n      border: 'none',\n      outline: 'none',\n      fontSize: '1rem',\n      lineHeight: '22px',\n      paddingRight: '3rem',\n      paddingBottom: '.5rem'\n    },\n    minRows: 3,\n    maxRows: 15,\n    value: text,\n    setText: setText,\n    textAreaRef: textAreaRef,\n    handleSubmit: handleSubmit,\n    placeholder: \"Enter message...\",\n    isTemplateMode: isTemplateMode,\n    onChange: e => setText(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }\n  }), __jsx(Flex, {\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }\n  }, __jsx(ComposeIcons, {\n    value: text,\n    setText: setText,\n    textAreaRef: textAreaRef,\n    paymentItems: paymentItems,\n    attachedFiles: attachedFiles,\n    isModalOpened: isModalOpened,\n    isCreatingLink: isCreatingLink,\n    paymentRequest: paymentRequest,\n    paymentLinkMeta: paymentLinkMeta,\n    setPaymentItems: setPaymentItems,\n    setIsModalOpened: setIsModalOpened,\n    setAttachedFiles: setAttachedFiles,\n    setPaymentRequest: setPaymentRequest,\n    setIsTemplateMode: setIsTemplateMode,\n    setPaymentLinkMeta: setPaymentLinkMeta,\n    onSendPaymentRequest: data => onSendPaymentRequest === null || onSendPaymentRequest === void 0 ? void 0 : onSendPaymentRequest(data, handleClearPaymentRequest),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }\n  }), __jsx(Flex, {\n    pl: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    size: \"sm\",\n    roundedRight: \"0\",\n    variantColor: \"blue\",\n    isLoading: isLoading,\n    onClick: handleSubmit,\n    roundedTopLeft: \"100px\",\n    roundedBottomLeft: \"100px\",\n    _focus: {\n      boxShadow: 'none'\n    } //@ts-ignore\n    ,\n    leftIcon: \"inbox-compose-send\",\n    isDisabled: !(!!text.trim() || attachedFiles.length > 0),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 11\n    }\n  }, \"Send\"), __jsx(Menu, {\n    renderItem: (option, index) => __jsx(MenuItem, _extends({\n      key: `${index}`\n    }, option, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 44\n      }\n    })),\n    menuButtonProps: {\n      as: Button,\n      size: 'sm',\n      roundedLeft: '0',\n      //@ts-ignore\n      variantColor: 'blue',\n      roundedTopRight: '100px',\n      roundedBottomRight: '100px',\n      _focus: {\n        boxShadow: 'none'\n      },\n      children: __jsx(Icon, {\n        name: \"chevron-down\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 25\n        }\n      }),\n      isDisabled: !(!!text.trim() || attachedFiles.length > 0)\n    },\n    options: [{\n      children: 'Send and close',\n      onClick: handleSendAndClose\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 11\n    }\n  }))), __jsx(Modal, {\n    isCentered: true,\n    size: \"md\",\n    isOpen: onSendMessageErrorData.status,\n    onClose: handleMessageErrorPromptClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 9\n    }\n  }), __jsx(ModalContent, {\n    borderRadius: \"4px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 9\n    }\n  }, __jsx(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 11\n    }\n  }, \"Sending Message Error!\"), __jsx(ModalCloseButton, {\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 11\n    }\n  }), __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }\n  }, onSendMessageErrorData.message)))));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/components/messages/compose/MessageCompose.tsx"],"names":["Box","Flex","Icon","Modal","ModalBody","ModalCloseButton","ModalContent","ModalHeader","ModalOverlay","Text","useToast","removeTemplateHtmlTags","Button","endOfTomorrow","React","useState","Menu","MenuItem","ToastBox","INITIAL_PAYMENT_REQUEST","useInbox","Attachments","ComposeIcons","EditorWithEmoji","MessageComposeForm","text","thread","setText","onSubmit","threadRef","isLoading","textAreaRef","sendAndClose","isModalOpened","twoWayPayload","isCreatingLink","isTemplateMode","currentThreadID","setTwoWayPayload","setIsModalOpened","setIsTemplateMode","onSendPaymentRequest","INITIAL_PAYMENT_ITEM","name","amount","id","Date","getTime","toString","paymentItems","setPaymentItems","attachedFiles","setAttachedFiles","onSendMessageErrorData","setOnSendMessageErrorData","status","message","paymentLinkMeta","setPaymentLinkMeta","provider","value","expiry_date","paymentRequest","setPaymentRequest","toast","isNewConversation","channel","receiver","channel_name","sendMessageSuccessCallback","current","scrollTop","senderPlatformNick","handleSubmit","content","payload","body","type","files","thread_id","undefined","length","position","render","onClose","trim","contact_id","contactName","credential_id","contact_name","user_nick","handleSendAndClose","handleClearPaymentRequest","handleMessageErrorPromptClose","width","resize","border","outline","fontSize","lineHeight","paddingRight","paddingBottom","e","target","data","boxShadow","option","index","as","size","roundedLeft","variantColor","roundedTopRight","roundedBottomRight","_focus","children","isDisabled","onClick"],"mappings":";;;;AAAA,SACEA,GADF,EAEEC,IAFF,EAGEC,IAHF,EAIEC,KAJF,EAKEC,SALF,EAMEC,gBANF,EAOEC,YAPF,EAQEC,WARF,EASEC,YATF,EAUEC,IAVF,EAWEC,QAXF,QAYO,iBAZP;AAaA,SAASC,sBAAT,QAAuC,yCAAvC;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,QAAzB,QAAyC,2BAAzC;AACA,SAASC,uBAAT,QAAwC,qBAAxC;AAUA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAoBA,OAAO,MAAMC,kBAAkB,GAAG,CAAC;AACjCC,EAAAA,IADiC;AAEjCC,EAAAA,MAFiC;AAGjCC,EAAAA,OAHiC;AAIjCC,EAAAA,QAJiC;AAKjCC,EAAAA,SALiC;AAMjCC,EAAAA,SANiC;AAOjCC,EAAAA,WAPiC;AAQjCC,EAAAA,YARiC;AASjCC,EAAAA,aATiC;AAUjCC,EAAAA,aAViC;AAWjCC,EAAAA,cAXiC;AAYjCC,EAAAA,cAZiC;AAajCC,EAAAA,eAbiC;AAcjCC,EAAAA,gBAdiC;AAejCC,EAAAA,gBAfiC;AAgBjCC,EAAAA,iBAhBiC;AAiBjCC,EAAAA;AAjBiC,CAAD,KAkBH;AAAA;;AAC7B,QAAMC,oBAAuC,GAAG;AAC9CC,IAAAA,IAAI,EAAE,EADwC;AAE9CC,IAAAA,MAAM,EAAE,CAFsC;AAG9CC,IAAAA,EAAE,EAAE,IAAIC,IAAJ,GAAWC,OAAX,GAAqBC,QAArB;AAH0C,GAAhD;AAKA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCpC,KAAK,CAACC,QAAN,CAAoC,CAC1E2B,oBAD0E,CAApC,CAAxC;AAGA,QAAM;AAAA,OAACS,aAAD;AAAA,OAAgBC;AAAhB,MAAoCrC,QAAQ,CAAS,EAAT,CAAlD;AACA,QAAM;AAAA,OAACsC,sBAAD;AAAA,OAAyBC;AAAzB,MAAsDvC,QAAQ,CAGjE;AAAEwC,IAAAA,MAAM,EAAE,KAAV;AAAiBC,IAAAA,OAAO,EAAE;AAA1B,GAHiE,CAApE;AAIA,QAAM;AAAA,OAACC,eAAD;AAAA,OAAkBC;AAAlB,MAAwC3C,QAAQ,CAAwB;AAC5E4C,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,KAAK,EAAE,UAAT;AAAqBnC,MAAAA,IAAI,EAAE;AAA3B,KADkE;AAE5EoC,IAAAA,WAAW,EAAE;AAAED,MAAAA,KAAK,EAAE/C,aAAa,GAAGkC,OAAhB,EAAT;AAAoCtB,MAAAA,IAAI,EAAE;AAA1C;AAF+D,GAAxB,CAAtD;AAIA,QAAM;AAAA,OAACqC,cAAD;AAAA,OAAiBC;AAAjB,MAAsChD,QAAQ,CAClDI,uBADkD,CAApD;AAIA,QAAM6C,KAAK,GAAGtD,QAAQ,EAAtB;AACA,QAAM;AAAEuD,IAAAA;AAAF,MAAwB7C,QAAQ,EAAtC;AAEA,QAAM8C,OAAO,GAAGxC,MAAH,aAAGA,MAAH,2CAAGA,MAAM,CAAEyC,QAAX,qDAAG,iBAAkBC,YAAlC;;AAEA,QAAMC,0BAA0B,GAAG,MAAM;AACvC,QAAIxC,SAAJ,aAAIA,SAAJ,eAAIA,SAAS,CAAEyC,OAAf,EAAwB;AACtBzC,MAAAA,SAAS,CAACyC,OAAV,CAAkBC,SAAlB,GAA8B,CAA9B;AACD;;AAED5C,IAAAA,OAAO,CAAC,EAAD,CAAP;AACAyB,IAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACAZ,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAF,IAAAA,gBAAgB,CAAC;AACfkC,MAAAA,kBAAkB,EAAE;AADL,KAAD,CAAhB;AAGD,GAXD;;AAaA,QAAMC,YAAY,GAAG,YAAY;AAC/B,QAAIC,OAAe,GAAG/D,sBAAsB,CAACc,IAAD,CAA5C;AAEA,QAAIkD,OAAY,GAAG;AACjBC,MAAAA,IAAI,EAAEF,OADW;AAEjBG,MAAAA,IAAI,EAAE,SAFW;AAGjBC,MAAAA,KAAK,EAAE3B,aAHU;AAIjB4B,MAAAA,SAAS,EAAEd,iBAAiB,GAAGe,SAAH,GAAe3C;AAJ1B,KAAnB;;AAOA,QAAI6B,OAAO,KAAK,WAAZ,IAA2BzC,IAA3B,IAAmC0B,aAAnC,IAAoDA,aAAa,CAAC8B,MAAd,GAAuB,CAA/E,EAAkF;AAChF,aAAOjB,KAAK,CAAC;AACXkB,QAAAA,QAAQ,EAAE,aADC;AAEXC,QAAAA,MAAM,EAAE,CAAC;AAAEC,UAAAA;AAAF,SAAD,KACN,MAAC,QAAD;AAAU,UAAA,OAAO,EAAEA,OAAnB;AAA4B,UAAA,OAAO,EAAC,0CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHS,OAAD,CAAZ;AAMD;;AAED,QAAI,CAACV,OAAO,CAACW,IAAR,EAAD,IAAmBlC,aAAnB,IAAoCA,aAAa,CAAC8B,MAAd,KAAyB,CAAjE,EAAoE;AAClE;AACD;;AAED,QAAIhB,iBAAJ,EAAuB;AACrB,YAAM;AAAEqB,QAAAA,UAAF;AAAcC,QAAAA,WAAd;AAA2Bf,QAAAA,kBAA3B;AAA+CgB,QAAAA;AAA/C,UAAiEtD,aAAvE;AACAyC,MAAAA,OAAO,mCACFA,OADE;AAELW,QAAAA,UAFK;AAGLE,QAAAA,aAHK;AAILC,QAAAA,YAAY,EAAEF,WAJT;AAKLG,QAAAA,SAAS,EAAElB;AALN,QAAP;AAOD;;AAED5C,IAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAG+C,OAAH,CAAR;AACAN,IAAAA,0BAA0B;AAC3B,GApCD;;AAsCA,QAAMsB,kBAAkB,GAAG,YAAY;AACrC,QAAIjB,OAAe,GAAG/D,sBAAsB,CAACc,IAAD,CAA5C;AAEA,QAAIkD,OAAY,GAAG;AACjBC,MAAAA,IAAI,EAAEF,OADW;AAEjBG,MAAAA,IAAI,EAAE,SAFW;AAGjBC,MAAAA,KAAK,EAAE3B,aAHU;AAIjB4B,MAAAA,SAAS,EAAEd,iBAAiB,GAAGe,SAAH,GAAe3C;AAJ1B,KAAnB;;AAOA,QAAI6B,OAAO,KAAK,WAAZ,IAA2BzC,IAA3B,IAAmC0B,aAAnC,IAAoDA,aAAa,CAAC8B,MAAd,GAAuB,CAA/E,EAAkF;AAChF,aAAOjB,KAAK,CAAC;AACXkB,QAAAA,QAAQ,EAAE,aADC;AAEXC,QAAAA,MAAM,EAAE,CAAC;AAAEC,UAAAA;AAAF,SAAD,KACN,MAAC,QAAD;AAAU,UAAA,OAAO,EAAEA,OAAnB;AAA4B,UAAA,OAAO,EAAC,0CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHS,OAAD,CAAZ;AAMD;;AAED,QAAI,CAACV,OAAO,CAACW,IAAR,EAAD,IAAmBlC,aAAnB,IAAoCA,aAAa,CAAC8B,MAAd,KAAyB,CAAjE,EAAoE;AAClE;AACD;;AAEDjD,IAAAA,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAG2C,OAAH,CAAZ;AACAN,IAAAA,0BAA0B;AAC3B,GAzBD;;AA2BA,QAAMuB,yBAAyB,GAAG,MAAM;AACtC1C,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAQ,IAAAA,kBAAkB,CAAC;AACjBC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,KAAK,EAAE,UAAT;AAAqBnC,QAAAA,IAAI,EAAE;AAA3B,OADO;AAEjBoC,MAAAA,WAAW,EAAE;AAAED,QAAAA,KAAK,EAAE/C,aAAa,GAAGkC,OAAhB,EAAT;AAAoCtB,QAAAA,IAAI,EAAE;AAA1C;AAFI,KAAD,CAAlB;AAIAsC,IAAAA,iBAAiB,CAAC5C,uBAAD,CAAjB;AACD,GAPD;;AASA,QAAM0E,6BAA6B,GAAG,MAAM;AAC1CvC,IAAAA,yBAAyB,CAAC;AAAEC,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,OAAO,EAAE;AAA1B,KAAD,CAAzB;AACD,GAFD;;AAIA,SACE,MAAC,GAAD;AACE,IAAA,EAAE,EAAC,MADL;AAEE,IAAA,YAAY,EAAC,KAFf;AAGE,IAAA,WAAW,EAAC,SAHd;AAIE,IAAA,YAAY,EAAC,WAJf;AAKE,IAAA,MAAM,EAAC,8BALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,MAAC,WAAD;AAAa,IAAA,KAAK,EAAEL,aAApB;AAAmC,IAAA,QAAQ,EAAEC,gBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EASE,MAAC,eAAD;AACE,IAAA,KAAK,EAAE;AACL0C,MAAAA,KAAK,EAAE,MADF;AAELC,MAAAA,MAAM,EAAE,MAFH;AAGLC,MAAAA,MAAM,EAAE,MAHH;AAILC,MAAAA,OAAO,EAAE,MAJJ;AAKLC,MAAAA,QAAQ,EAAE,MALL;AAMLC,MAAAA,UAAU,EAAE,MANP;AAOLC,MAAAA,YAAY,EAAE,MAPT;AAQLC,MAAAA,aAAa,EAAE;AARV,KADT;AAWE,IAAA,OAAO,EAAE,CAXX;AAYE,IAAA,OAAO,EAAE,EAZX;AAaE,IAAA,KAAK,EAAE5E,IAbT;AAcE,IAAA,OAAO,EAAEE,OAdX;AAeE,IAAA,WAAW,EAAEI,WAff;AAgBE,IAAA,YAAY,EAAE0C,YAhBhB;AAiBE,IAAA,WAAW,EAAC,kBAjBd;AAkBE,IAAA,cAAc,EAAErC,cAlBlB;AAmBE,IAAA,QAAQ,EAAGkE,CAAD,IAA+C3E,OAAO,CAAC2E,CAAC,CAACC,MAAF,CAAS3C,KAAV,CAnBlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,EA+BE,MAAC,IAAD;AAAM,IAAA,cAAc,EAAC,UAArB;AAAgC,IAAA,UAAU,EAAC,QAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AACE,IAAA,KAAK,EAAEnC,IADT;AAEE,IAAA,OAAO,EAAEE,OAFX;AAGE,IAAA,WAAW,EAAEI,WAHf;AAIE,IAAA,YAAY,EAAEkB,YAJhB;AAKE,IAAA,aAAa,EAAEE,aALjB;AAME,IAAA,aAAa,EAAElB,aANjB;AAOE,IAAA,cAAc,EAAEE,cAPlB;AAQE,IAAA,cAAc,EAAE2B,cARlB;AASE,IAAA,eAAe,EAAEL,eATnB;AAUE,IAAA,eAAe,EAAEP,eAVnB;AAWE,IAAA,gBAAgB,EAAEX,gBAXpB;AAYE,IAAA,gBAAgB,EAAEa,gBAZpB;AAaE,IAAA,iBAAiB,EAAEW,iBAbrB;AAcE,IAAA,iBAAiB,EAAEvB,iBAdrB;AAeE,IAAA,kBAAkB,EAAEkB,kBAftB;AAgBE,IAAA,oBAAoB,EAAE8C,IAAI,IAAI/D,oBAAJ,aAAIA,oBAAJ,uBAAIA,oBAAoB,CAAG+D,IAAH,EAASZ,yBAAT,CAhBpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAoBE,MAAC,IAAD;AAAM,IAAA,EAAE,EAAC,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,IAAI,EAAC,IADP;AAEE,IAAA,YAAY,EAAC,GAFf;AAGE,IAAA,YAAY,EAAC,MAHf;AAIE,IAAA,SAAS,EAAE9D,SAJb;AAKE,IAAA,OAAO,EAAE2C,YALX;AAME,IAAA,cAAc,EAAC,OANjB;AAOE,IAAA,iBAAiB,EAAC,OAPpB;AAQE,IAAA,MAAM,EAAE;AAAEgC,MAAAA,SAAS,EAAE;AAAb,KARV,CASE;AATF;AAUE,IAAA,QAAQ,EAAC,oBAVX;AAWE,IAAA,UAAU,EAAE,EAAE,CAAC,CAAChF,IAAI,CAAC4D,IAAL,EAAF,IAAiBlC,aAAa,CAAC8B,MAAd,GAAuB,CAA1C,CAXd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAgBE,MAAC,IAAD;AACE,IAAA,UAAU,EAAE,CAACyB,MAAD,EAASC,KAAT,KAAmB,MAAC,QAAD;AAAU,MAAA,GAAG,EAAG,GAAEA,KAAM;AAAxB,OAA+BD,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADjC;AAEE,IAAA,eAAe,EAAE;AACfE,MAAAA,EAAE,EAAEhG,MADW;AAEfiG,MAAAA,IAAI,EAAE,IAFS;AAGfC,MAAAA,WAAW,EAAE,GAHE;AAIf;AACAC,MAAAA,YAAY,EAAE,MALC;AAMfC,MAAAA,eAAe,EAAE,OANF;AAOfC,MAAAA,kBAAkB,EAAE,OAPL;AAQfC,MAAAA,MAAM,EAAE;AAAET,QAAAA,SAAS,EAAE;AAAb,OARO;AASfU,MAAAA,QAAQ,EAAE,MAAC,IAAD;AAAM,QAAA,IAAI,EAAC,cAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATK;AAUfC,MAAAA,UAAU,EAAE,EAAE,CAAC,CAAC3F,IAAI,CAAC4D,IAAL,EAAF,IAAiBlC,aAAa,CAAC8B,MAAd,GAAuB,CAA1C;AAVG,KAFnB;AAcE,IAAA,OAAO,EAAE,CAAC;AAAEkC,MAAAA,QAAQ,EAAE,gBAAZ;AAA8BE,MAAAA,OAAO,EAAE1B;AAAvC,KAAD,CAdX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,CApBF,CA/BF,EAsFE,MAAC,KAAD;AACE,IAAA,UAAU,MADZ;AAEE,IAAA,IAAI,EAAC,IAFP;AAGE,IAAA,MAAM,EAAEtC,sBAAsB,CAACE,MAHjC;AAIE,IAAA,OAAO,EAAEsC,6BAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAOE,MAAC,YAAD;AAAc,IAAA,YAAY,EAAC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAEE,MAAC,gBAAD;AAAkB,IAAA,IAAI,EAAC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOxC,sBAAsB,CAACG,OAA9B,CADF,CAHF,CAPF,CAtFF,CADF;AAwGD,CAhPM","sourcesContent":["import {\n  Box,\n  Flex,\n  Icon,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n  Text,\n  useToast,\n} from '@chakra-ui/core';\nimport { removeTemplateHtmlTags } from 'app/authenticated-app/inbox/inbox.utils';\nimport { Button } from 'app/components';\nimport { endOfTomorrow } from 'date-fns';\nimport React, { useState } from 'react';\nimport { Menu, MenuItem, ToastBox } from '../../../../../components';\nimport { INITIAL_PAYMENT_REQUEST } from '../../../inbox.data';\nimport {\n  ComposeIconsProps,\n  MessageProps,\n  PaymentItemSchema,\n  PaymentLinkMetaSchema,\n  PaymentRequestSchema,\n  ThreadSchema,\n  TwoWayPayloadSchema,\n} from '../../../inbox.types';\nimport { useInbox } from '../../Provider';\nimport { Attachments } from './Attachments';\nimport { ComposeIcons } from './ComposeIcons';\nimport { EditorWithEmoji } from './EditorWithEmoji';\n\nexport type MessageComposeFormProps = {\n  text: string;\n  isLoading?: boolean;\n  thread: ThreadSchema;\n  isTemplateMode: boolean;\n  currentThreadID: string;\n  isCreatingLink?: boolean;\n  setText(text: string): void;\n  twoWayPayload: TwoWayPayloadSchema;\n  textAreaRef: MessageProps['textAreaRef'];\n  threadRef: React.RefObject<HTMLDivElement>;\n  onSubmit?(payload: any, callback?: () => void): void;\n  sendAndClose?(payload?: any, callback?: () => void): void;\n  onSendPaymentRequest?(payload: any, callback: () => void): void;\n  setIsTemplateMode: React.Dispatch<React.SetStateAction<boolean>>;\n  setTwoWayPayload: React.Dispatch<React.SetStateAction<TwoWayPayloadSchema>>;\n} & Pick<ComposeIconsProps, 'isModalOpened' | 'setIsModalOpened'>;\n\nexport const MessageComposeForm = ({\n  text,\n  thread,\n  setText,\n  onSubmit,\n  threadRef,\n  isLoading,\n  textAreaRef,\n  sendAndClose,\n  isModalOpened,\n  twoWayPayload,\n  isCreatingLink,\n  isTemplateMode,\n  currentThreadID,\n  setTwoWayPayload,\n  setIsModalOpened,\n  setIsTemplateMode,\n  onSendPaymentRequest,\n}: MessageComposeFormProps) => {\n  const INITIAL_PAYMENT_ITEM: PaymentItemSchema = {\n    name: '',\n    amount: 0,\n    id: new Date().getTime().toString(),\n  };\n  const [paymentItems, setPaymentItems] = React.useState<PaymentItemSchema[]>([\n    INITIAL_PAYMENT_ITEM,\n  ]);\n  const [attachedFiles, setAttachedFiles] = useState<File[]>([]);\n  const [onSendMessageErrorData, setOnSendMessageErrorData] = useState<{\n    status: boolean;\n    message: string;\n  }>({ status: false, message: '' });\n  const [paymentLinkMeta, setPaymentLinkMeta] = useState<PaymentLinkMetaSchema>({\n    provider: { value: 'paystack', text: 'Paystack' },\n    expiry_date: { value: endOfTomorrow().getTime(), text: 'Tomorrow' },\n  });\n  const [paymentRequest, setPaymentRequest] = useState<PaymentRequestSchema>(\n    INITIAL_PAYMENT_REQUEST,\n  );\n\n  const toast = useToast();\n  const { isNewConversation } = useInbox();\n\n  const channel = thread?.receiver?.channel_name;\n\n  const sendMessageSuccessCallback = () => {\n    if (threadRef?.current) {\n      threadRef.current.scrollTop = 0;\n    }\n\n    setText('');\n    setAttachedFiles([]);\n    setIsTemplateMode(false);\n    setTwoWayPayload({\n      senderPlatformNick: '',\n    });\n  };\n\n  const handleSubmit = async () => {\n    let content: string = removeTemplateHtmlTags(text);\n\n    let payload: any = {\n      body: content,\n      type: 'message',\n      files: attachedFiles,\n      thread_id: isNewConversation ? undefined : currentThreadID,\n    };\n\n    if (channel === 'messenger' && text && attachedFiles && attachedFiles.length > 0) {\n      return toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox onClose={onClose} message=\"Cannot send attachment and text together\" />\n        ),\n      });\n    }\n\n    if (!content.trim() && attachedFiles && attachedFiles.length === 0) {\n      return;\n    }\n\n    if (isNewConversation) {\n      const { contact_id, contactName, senderPlatformNick, credential_id } = twoWayPayload;\n      payload = {\n        ...payload,\n        contact_id,\n        credential_id,\n        contact_name: contactName,\n        user_nick: senderPlatformNick,\n      };\n    }\n\n    onSubmit?.(payload);\n    sendMessageSuccessCallback();\n  };\n\n  const handleSendAndClose = async () => {\n    let content: string = removeTemplateHtmlTags(text);\n\n    let payload: any = {\n      body: content,\n      type: 'message',\n      files: attachedFiles,\n      thread_id: isNewConversation ? undefined : currentThreadID,\n    };\n\n    if (channel === 'messenger' && text && attachedFiles && attachedFiles.length > 0) {\n      return toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox onClose={onClose} message=\"Cannot send attachment and text together\" />\n        ),\n      });\n    }\n\n    if (!content.trim() && attachedFiles && attachedFiles.length === 0) {\n      return;\n    }\n\n    sendAndClose?.(payload);\n    sendMessageSuccessCallback();\n  };\n\n  const handleClearPaymentRequest = () => {\n    setPaymentItems([]);\n    setPaymentLinkMeta({\n      provider: { value: 'paystack', text: 'Paystack' },\n      expiry_date: { value: endOfTomorrow().getTime(), text: 'Tomorrow' },\n    });\n    setPaymentRequest(INITIAL_PAYMENT_REQUEST);\n  };\n\n  const handleMessageErrorPromptClose = () => {\n    setOnSendMessageErrorData({ status: false, message: '' });\n  };\n\n  return (\n    <Box\n      py=\"1rem\"\n      borderRadius=\"8px\"\n      paddingLeft=\"1.25rem\"\n      paddingRight=\"1.5625rem\"\n      border=\"1px solid rgb(228, 233, 240)\"\n    >\n      <Attachments files={attachedFiles} setFiles={setAttachedFiles} />\n\n      <EditorWithEmoji\n        style={{\n          width: '100%',\n          resize: 'none',\n          border: 'none',\n          outline: 'none',\n          fontSize: '1rem',\n          lineHeight: '22px',\n          paddingRight: '3rem',\n          paddingBottom: '.5rem',\n        }}\n        minRows={3}\n        maxRows={15}\n        value={text}\n        setText={setText}\n        textAreaRef={textAreaRef}\n        handleSubmit={handleSubmit}\n        placeholder=\"Enter message...\"\n        isTemplateMode={isTemplateMode}\n        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setText(e.target.value)}\n      />\n\n      <Flex justifyContent=\"flex-end\" alignItems=\"center\">\n        <ComposeIcons\n          value={text}\n          setText={setText}\n          textAreaRef={textAreaRef}\n          paymentItems={paymentItems}\n          attachedFiles={attachedFiles}\n          isModalOpened={isModalOpened}\n          isCreatingLink={isCreatingLink}\n          paymentRequest={paymentRequest}\n          paymentLinkMeta={paymentLinkMeta}\n          setPaymentItems={setPaymentItems}\n          setIsModalOpened={setIsModalOpened}\n          setAttachedFiles={setAttachedFiles}\n          setPaymentRequest={setPaymentRequest}\n          setIsTemplateMode={setIsTemplateMode}\n          setPaymentLinkMeta={setPaymentLinkMeta}\n          onSendPaymentRequest={data => onSendPaymentRequest?.(data, handleClearPaymentRequest)}\n        />\n\n        <Flex pl=\"0.5rem\">\n          <Button\n            size=\"sm\"\n            roundedRight=\"0\"\n            variantColor=\"blue\"\n            isLoading={isLoading}\n            onClick={handleSubmit}\n            roundedTopLeft=\"100px\"\n            roundedBottomLeft=\"100px\"\n            _focus={{ boxShadow: 'none' }}\n            //@ts-ignore\n            leftIcon=\"inbox-compose-send\"\n            isDisabled={!(!!text.trim() || attachedFiles.length > 0)}\n          >\n            Send\n          </Button>\n          <Menu\n            renderItem={(option, index) => <MenuItem key={`${index}`} {...option} />}\n            menuButtonProps={{\n              as: Button,\n              size: 'sm',\n              roundedLeft: '0',\n              //@ts-ignore\n              variantColor: 'blue',\n              roundedTopRight: '100px',\n              roundedBottomRight: '100px',\n              _focus: { boxShadow: 'none' },\n              children: <Icon name=\"chevron-down\" />,\n              isDisabled: !(!!text.trim() || attachedFiles.length > 0),\n            }}\n            options={[{ children: 'Send and close', onClick: handleSendAndClose }]}\n          />\n        </Flex>\n      </Flex>\n\n      <Modal\n        isCentered\n        size=\"md\"\n        isOpen={onSendMessageErrorData.status}\n        onClose={handleMessageErrorPromptClose}\n      >\n        <ModalOverlay />\n        <ModalContent borderRadius=\"4px\">\n          <ModalHeader>Sending Message Error!</ModalHeader>\n          <ModalCloseButton size=\"sm\" />\n          <ModalBody>\n            <Text>{onSendMessageErrorData.message}</Text>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}