{"ast":null,"code":"import _objectSpread from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/settings/component/payment/bank-accounts/bank-account-form.tsx\";\nvar __jsx = React.createElement;\n// @ts-nocheck\nimport { Box, Input, Text, Select, useToast } from '@chakra-ui/core';\nimport { Formik } from 'formik';\nimport React, { useState } from 'react';\nimport * as yup from 'yup';\nimport { ToastBox, Button } from '../../../../../components';\nconst validation_schema = yup.object().shape({\n  account_number: yup.string().required('Account number is required'),\n  bank_code: yup.string().required('Bank is required')\n});\nconst initial_values = {\n  account_number: '',\n  bank_code: ''\n};\nexport const BankAccountForm = ({\n  banks,\n  resolveBankAccount,\n  addBankAccount\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: details,\n    1: setDetails\n  } = useState(null);\n  const toast = useToast();\n\n  const verify = async values => {\n    setLoading(true);\n    const response = await resolveBankAccount(values);\n    let message = 'Could not resolve account details, please check the provided information';\n\n    if (response) {\n      message = 'Account details retrieved successfully';\n      setDetails(_objectSpread(_objectSpread({}, values), response));\n    }\n\n    setLoading(false);\n    toast({\n      position: 'bottom-left',\n      render: ({\n        onClose\n      }) => __jsx(ToastBox, {\n        onClose: onClose,\n        message: message,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 32\n        }\n      })\n    });\n  };\n\n  const submit = async () => {\n    setLoading(true);\n    const response = await addBankAccount(details);\n    let message = 'Unable to add the provided bank details, please try again';\n    if (response) message = 'Bank details added successfully';\n    setLoading(false);\n    toast({\n      position: 'bottom-left',\n      render: ({\n        onClose\n      }) => __jsx(ToastBox, {\n        onClose: onClose,\n        message: message,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 32\n        }\n      })\n    });\n  };\n\n  const numberRegex = new RegExp('^[0-9]+$');\n  return __jsx(Box, {\n    width: \"100%\",\n    maxW: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, __jsx(Formik, {\n    initialValues: initial_values,\n    validationSchema: validation_schema,\n    onSubmit: details ? submit : verify,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, ({\n    values,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    touched,\n    errors,\n    handleFocus\n  }) => __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    marginBottom: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    fontSize: \"sm\",\n    color: \"rgba(17, 17, 17, 0.5)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  }, \"Account Number\"), __jsx(Input, {\n    variant: \"flushed\",\n    name: \"account_number\",\n    placeholder: \"Enter Account Number\",\n    onChange: e => {\n      if (numberRegex.test(e.target.value)) handleChange(e);\n      setDetails(null);\n    },\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    value: values.account_number,\n    isInvalid: touched['account_number'] && !!errors['account_number'],\n    pattern: numberRegex,\n    errorBorderColor: \"crimson\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }\n  })), __jsx(Box, {\n    marginBottom: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    fontSize: \"sm\",\n    color: \"rgba(17, 17, 17, 0.5)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, \"Bank\"), __jsx(Select, {\n    variant: \"flushed\",\n    name: \"bank_code\",\n    placeholder: \"Select Bank\",\n    onChange: e => {\n      handleChange(e);\n      setDetails(null);\n    },\n    onBlur: handleBlur,\n    value: values.bank_code,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, banks.map(i => __jsx(\"option\", {\n    key: i.id,\n    value: i.code,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 19\n    }\n  }, i.name)))), details && __jsx(Box, {\n    marginBottom: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }\n  }, __jsx(Text, {\n    fontSize: \"sm\",\n    color: \"rgba(17, 17, 17, 0.5)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, \"Account Name\"), __jsx(Input, {\n    variant: \"flushed\",\n    name: \"account_name\",\n    value: details.account_name,\n    isDisabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  })), __jsx(Button, {\n    isFullWidth: true,\n    variantColor: \"blue\",\n    isLoading: loading,\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, details ? 'Add Account' : 'Verify'))));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/settings/component/payment/bank-accounts/bank-account-form.tsx"],"names":["Box","Input","Text","Select","useToast","Formik","React","useState","yup","ToastBox","Button","validation_schema","object","shape","account_number","string","required","bank_code","initial_values","BankAccountForm","banks","resolveBankAccount","addBankAccount","loading","setLoading","details","setDetails","toast","verify","values","response","message","position","render","onClose","submit","numberRegex","RegExp","handleChange","handleBlur","handleSubmit","touched","errors","handleFocus","e","test","target","value","map","i","id","code","name","account_name"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { Box, Input, Text, Select, useToast } from '@chakra-ui/core';\nimport { Formik } from 'formik';\nimport React, { useState } from 'react';\nimport * as yup from 'yup';\nimport { ToastBox, Button } from '../../../../../components';\n\nconst validation_schema = yup.object().shape({\n  account_number: yup.string().required('Account number is required'),\n  bank_code: yup.string().required('Bank is required'),\n});\n\nconst initial_values = {\n  account_number: '',\n  bank_code: '',\n};\n\nexport const BankAccountForm = ({ banks, resolveBankAccount, addBankAccount }) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [details, setDetails] = useState(null);\n\n  const toast = useToast();\n\n  const verify = async values => {\n    setLoading(true);\n    const response = await resolveBankAccount(values);\n\n    let message = 'Could not resolve account details, please check the provided information';\n    if (response) {\n      message = 'Account details retrieved successfully';\n      setDetails({ ...values, ...response });\n    }\n    setLoading(false);\n\n    toast({\n      position: 'bottom-left',\n      render: ({ onClose }) => <ToastBox onClose={onClose} message={message} />,\n    });\n  };\n\n  const submit = async () => {\n    setLoading(true);\n    const response = await addBankAccount(details);\n    let message = 'Unable to add the provided bank details, please try again';\n    if (response) message = 'Bank details added successfully';\n    setLoading(false);\n    toast({\n      position: 'bottom-left',\n      render: ({ onClose }) => <ToastBox onClose={onClose} message={message} />,\n    });\n  };\n\n  const numberRegex = new RegExp('^[0-9]+$');\n\n  return (\n    <Box width=\"100%\" maxW=\"400px\">\n      <Formik\n        initialValues={initial_values}\n        validationSchema={validation_schema}\n        onSubmit={details ? submit : verify}\n      >\n        {({ values, handleChange, handleBlur, handleSubmit, touched, errors, handleFocus }) => (\n          <Box>\n            <Box marginBottom=\"20px\">\n              <Text fontSize=\"sm\" color=\"rgba(17, 17, 17, 0.5)\">\n                Account Number\n              </Text>\n              <Input\n                variant=\"flushed\"\n                name=\"account_number\"\n                placeholder=\"Enter Account Number\"\n                onChange={e => {\n                  if (numberRegex.test(e.target.value)) handleChange(e);\n                  setDetails(null);\n                }}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                value={values.account_number}\n                isInvalid={touched['account_number'] && !!errors['account_number']}\n                pattern={numberRegex}\n                errorBorderColor=\"crimson\"\n              />\n            </Box>\n\n            <Box marginBottom=\"20px\">\n              <Text fontSize=\"sm\" color=\"rgba(17, 17, 17, 0.5)\">\n                Bank\n              </Text>\n              <Select\n                variant=\"flushed\"\n                name=\"bank_code\"\n                placeholder=\"Select Bank\"\n                onChange={e => {\n                  handleChange(e);\n                  setDetails(null);\n                }}\n                onBlur={handleBlur}\n                value={values.bank_code}\n              >\n                {banks.map(i => (\n                  <option key={i.id} value={i.code}>\n                    {i.name}\n                  </option>\n                ))}\n              </Select>\n            </Box>\n\n            {details && (\n              <Box marginBottom=\"20px\">\n                <Text fontSize=\"sm\" color=\"rgba(17, 17, 17, 0.5)\">\n                  Account Name\n                </Text>\n                <Input\n                  variant=\"flushed\"\n                  name=\"account_name\"\n                  value={details.account_name}\n                  isDisabled\n                />\n              </Box>\n            )}\n\n            <Button isFullWidth variantColor=\"blue\" isLoading={loading} onClick={handleSubmit}>\n              {details ? 'Add Account' : 'Verify'}\n            </Button>\n          </Box>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}