{"ast":null,"code":"import _objectSpread from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/inbox.component.tsx\";\nvar __jsx = React.createElement;\nimport { Box, Stack, useToast } from '@chakra-ui/core';\nimport { ToastBox } from 'app/components';\nimport React, { useEffect, useState } from 'react';\nimport Cookie from 'js-cookie';\nimport { useInfiniteQuery, useQuery, useQueryClient } from 'react-query';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { channelOptions, typeOptions } from '.';\nimport { selectOrganisationID, selectUserID } from '../../unauthenticated-app/authentication';\nimport { getUserChannels } from '../channels';\nimport { ConversationFilters, ConversationThread, MoreInfoSidebar, ThreadSection, WhatsappSetupModal } from './components';\nimport { ConnectChannelModal } from './components/connect-channel-modal';\nimport { useInbox } from './components/Provider';\nimport { QRCodeSetupModal } from './components/qr-code-setup-modal';\nimport { getConversationMessages, getConversationThreads, getTags, getThreadFiltersUnreadCount } from './inbox.service';\nimport { loadScrollMemory } from './slices';\nexport const Inbox = () => {\n  var _data$pages$reduce, _threadMessages$pages;\n\n  const toast = useToast();\n  const queryClient = useQueryClient();\n  const {\n    isNewConversation\n  } = useInbox();\n  const user_id = useSelector(selectUserID);\n  const {\n    qrCodeChannelId,\n    onCloseWhatsappModal,\n    isWhatsappModalOpen,\n    setIsNewConversation,\n    isQRCodeSetupModalOpen,\n    onOpenQRCodeSetupModal,\n    onCloseQRCodeSetupModal,\n    setActiveFilter: handleSetFilter\n  } = useInbox();\n  const {\n    0: activeFilter,\n    1: setActiveFilter\n  } = useState('queued');\n  const {\n    0: activeThread,\n    1: setActiveThread\n  } = useState();\n  const {\n    0: filterIds,\n    1: setFilterIds\n  } = useState(user_id);\n  const {\n    0: isConnectChannelsModalOpen,\n    1: setIsConnectChannelsModalOpen\n  } = useState(false);\n\n  const fetchThreads = async ({\n    pageParam = 1,\n    queryKey\n  }) => {\n    let params = {};\n    queryClient.cancelQueries(['threads', activeFilter, filterIds], {\n      exact: true\n    });\n\n    switch (queryKey[1]) {\n      case 'queued':\n        params = _objectSpread(_objectSpread({}, params), {}, {\n          state: 'queued'\n        });\n        break;\n\n      case 'mentioned':\n        params = _objectSpread(_objectSpread({}, params), {}, {\n          mention: filterIds\n        });\n        break;\n\n      case 'assigned':\n        params = _objectSpread(_objectSpread({}, params), {}, {\n          assigned: filterIds\n        });\n        break;\n\n      case 'favorite':\n        params = _objectSpread(_objectSpread({}, params), {}, {\n          favorite: filterIds\n        });\n        break;\n\n      case 'closed':\n        params = _objectSpread(_objectSpread({}, params), {}, {\n          closed: filterIds\n        });\n        break;\n\n      case 'snoozed':\n        params = _objectSpread(_objectSpread({}, params), {}, {\n          closed: filterIds\n        });\n        break;\n\n      case 'twitter':\n        params = _objectSpread(_objectSpread({}, params), {}, {\n          channels: filterIds\n        });\n        break;\n\n      case 'whatsapp':\n        params = _objectSpread(_objectSpread({}, params), {}, {\n          channels: filterIds\n        });\n        break;\n\n      case 'messenger':\n        params = _objectSpread(_objectSpread({}, params), {}, {\n          channels: filterIds\n        });\n        break;\n\n      case 'phone':\n        params = _objectSpread(_objectSpread({}, params), {}, {\n          channels: filterIds\n        });\n        break;\n\n      case 'email':\n        params = _objectSpread(_objectSpread({}, params), {}, {\n          channels: filterIds\n        });\n        break;\n\n      default:\n        params = _objectSpread(_objectSpread({}, params), {}, {\n          tag: filterIds\n        });\n        break;\n    }\n\n    const response = await getConversationThreads(_objectSpread({\n      page: pageParam\n    }, params));\n    const threads = response.data.threads;\n    const meta = response.data.meta;\n\n    if (meta.page === 1 && !activeThread) {\n      setActiveThread(threads[0]);\n    }\n\n    return response;\n  };\n\n  const {\n    data,\n    hasNextPage,\n    fetchNextPage,\n    error: threadError,\n    isLoading: isFetchingThreads\n  } = useInfiniteQuery(['threads', activeFilter, filterIds], fetchThreads, {\n    getNextPageParam: lastPage => {\n      return lastPage.data.meta.page < lastPage.data.meta.page_count ? lastPage.data.meta.page + 1 : undefined;\n    },\n    // cacheTime: 0,\n    // refetchInterval: 2000,\n    refetchOnWindowFocus: false\n  });\n  const threads = (_data$pages$reduce = data === null || data === void 0 ? void 0 : data.pages.reduce((acc, page) => [...acc, ...page.data.threads], [])) !== null && _data$pages$reduce !== void 0 ? _data$pages$reduce : [];\n\n  const fetchThreadMessages = ({\n    pageParam = 1,\n    queryKey\n  }) => {\n    const thread = queryKey[1];\n    return getConversationMessages({\n      page: pageParam,\n      thread_id: thread !== null && thread !== void 0 ? thread : ''\n    });\n  };\n\n  const {\n    data: threadMessages,\n    error: threadMessagesError,\n    isLoading: isFetchingThreadMessges,\n    hasNextPage: threadMessagesHasNextPage,\n    fetchNextPage: threadMessagesFetchNextPage\n  } = useInfiniteQuery(['messages', activeThread === null || activeThread === void 0 ? void 0 : activeThread.uuid], fetchThreadMessages, {\n    getNextPageParam: lastPage => {\n      return lastPage.meta.page < lastPage.meta.page_count ? lastPage.meta.page + 1 : undefined;\n    },\n    // refetchInterval: 2000,\n    enabled: !!threads.length && !!activeThread && activeFilter !== 'queued'\n  });\n  const messages = (_threadMessages$pages = threadMessages === null || threadMessages === void 0 ? void 0 : threadMessages.pages.reduce((acc, page) => [...acc, ...page.messages], [])) !== null && _threadMessages$pages !== void 0 ? _threadMessages$pages : [];\n  const {\n    isLoading: isFetchingTags,\n    data: tags\n  } = useQuery('tags', getTags);\n  const {\n    data: filtersUnreadCount\n  } = useQuery('filters-unread-count', getThreadFiltersUnreadCount);\n  const {\n    isLoading: isFetchingChannels,\n    data: userChannels\n  } = useQuery('channels', getUserChannels);\n  let tagOptions = {};\n  let credentialsWithIssue = userChannels === null || userChannels === void 0 ? void 0 : userChannels.filter(item => item.status !== 'active');\n  tags === null || tags === void 0 ? void 0 : tags.forEach(({\n    name,\n    color\n  }) => {\n    tagOptions[name] = {\n      children: name,\n      iconColor: color,\n      icon: 'inbox-tag',\n      label: name.toLowerCase()\n    };\n  });\n\n  const threadTypes = _objectSpread(_objectSpread(_objectSpread({}, typeOptions), channelOptions), tagOptions);\n\n  useEffect(() => {\n    const showConnectChannelModal = Cookie.get('show_connect_channel_modal');\n\n    if (typeof userChannels !== 'undefined') {\n      if (!userChannels.length && !showConnectChannelModal) {\n        setIsConnectChannelsModalOpen(true);\n      } else {\n        setIsConnectChannelsModalOpen(false);\n      }\n    }\n  }, [userChannels]);\n\n  const handleFilter = (filter, ids, thread) => {\n    setIsNewConversation(false);\n    setActiveFilter(filter);\n    handleSetFilter(filter);\n    setFilterIds(ids !== null && ids !== void 0 ? ids : user_id);\n    setActiveThread(thread);\n    queryClient.invalidateQueries('filters-unread-count');\n  };\n\n  const handleAssignToSelf = thread => {\n    setIsNewConversation(false);\n    setActiveFilter('assigned');\n    handleSetFilter('assigned');\n    setFilterIds(user_id);\n    setActiveThread(thread);\n    queryClient.invalidateQueries('filters-unread-count');\n    queryClient.invalidateQueries(['threads', 'queued', user_id]);\n  };\n\n  const handleThreadItemClick = thread => {\n    setIsNewConversation(false);\n    setActiveThread(thread);\n  };\n\n  if (threadError) {\n    toast({\n      status: 'error',\n      position: 'bottom-left',\n      render: ({\n        onClose\n      }) => __jsx(ToastBox, {\n        onClose: onClose,\n        message: threadError === null || threadError === void 0 ? void 0 : threadError.message,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 32\n        }\n      })\n    });\n  }\n\n  if (threadMessagesError) {\n    toast({\n      status: 'error',\n      position: 'bottom-left',\n      render: ({\n        onClose\n      }) => __jsx(ToastBox, {\n        onClose: onClose,\n        message: threadMessagesError === null || threadMessagesError === void 0 ? void 0 : threadMessagesError.message,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 9\n        }\n      })\n    });\n  }\n\n  return __jsx(Stack, {\n    isInline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 5\n    }\n  }, __jsx(ConversationFilters, {\n    tags: tags,\n    onFilter: handleFilter,\n    channels: userChannels,\n    activeFilter: activeFilter,\n    isFetchingTags: isFetchingTags,\n    filtersUnreadCount: filtersUnreadCount,\n    isFetchingChannels: isFetchingChannels,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }\n  }), __jsx(ThreadSection, {\n    threads: threads,\n    hasMore: hasNextPage,\n    threadTypes: threadTypes,\n    activeThread: activeThread,\n    activeFilter: activeFilter,\n    isFetching: isFetchingThreads,\n    onFetchMoreData: fetchNextPage,\n    onThreadItemAssign: handleAssignToSelf,\n    onThreadItemClick: handleThreadItemClick,\n    credentialsWithIssue: credentialsWithIssue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }\n  }), __jsx(ConversationThread, {\n    tags: tags,\n    messages: messages,\n    thread: activeThread,\n    channels: userChannels,\n    setActiveThread: setActiveThread,\n    hasMore: threadMessagesHasNextPage,\n    isFetching: isFetchingThreadMessges,\n    onFetchMoreData: threadMessagesFetchNextPage,\n    setActiveFilter: () => handleFilter('assigned'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }\n  }), activeThread && (activeThread === null || activeThread === void 0 ? void 0 : activeThread.state) !== 'queued' && !isNewConversation && __jsx(MoreInfoSidebar, {\n    thread: activeThread,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 9\n    }\n  }), __jsx(WhatsappSetupModal, {\n    isOpen: isWhatsappModalOpen,\n    onClose: onCloseWhatsappModal,\n    onOpenQrCodeModal: onOpenQRCodeSetupModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }\n  }), __jsx(QRCodeSetupModal, {\n    channelID: qrCodeChannelId,\n    isOpen: isQRCodeSetupModalOpen,\n    onClose: onCloseQRCodeSetupModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }\n  }), __jsx(ConnectChannelModal, {\n    isOpen: isConnectChannelsModalOpen,\n    onClose: () => setIsConnectChannelsModalOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }\n  }));\n};\nexport function InboxComponent() {\n  const dispatch = useDispatch();\n  const user_id = useSelector(selectUserID);\n  const organisation_id = useSelector(selectOrganisationID);\n  useEffect(() => {\n    dispatch(loadScrollMemory()); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return user_id && organisation_id ? __jsx(Inbox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 39\n    }\n  }) : __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 51\n    }\n  });\n}","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/inbox.component.tsx"],"names":["Box","Stack","useToast","ToastBox","React","useEffect","useState","Cookie","useInfiniteQuery","useQuery","useQueryClient","useDispatch","useSelector","channelOptions","typeOptions","selectOrganisationID","selectUserID","getUserChannels","ConversationFilters","ConversationThread","MoreInfoSidebar","ThreadSection","WhatsappSetupModal","ConnectChannelModal","useInbox","QRCodeSetupModal","getConversationMessages","getConversationThreads","getTags","getThreadFiltersUnreadCount","loadScrollMemory","Inbox","toast","queryClient","isNewConversation","user_id","qrCodeChannelId","onCloseWhatsappModal","isWhatsappModalOpen","setIsNewConversation","isQRCodeSetupModalOpen","onOpenQRCodeSetupModal","onCloseQRCodeSetupModal","setActiveFilter","handleSetFilter","activeFilter","activeThread","setActiveThread","filterIds","setFilterIds","isConnectChannelsModalOpen","setIsConnectChannelsModalOpen","fetchThreads","pageParam","queryKey","params","cancelQueries","exact","state","mention","assigned","favorite","closed","channels","tag","response","page","threads","data","meta","hasNextPage","fetchNextPage","error","threadError","isLoading","isFetchingThreads","getNextPageParam","lastPage","page_count","undefined","refetchOnWindowFocus","pages","reduce","acc","fetchThreadMessages","thread","thread_id","threadMessages","threadMessagesError","isFetchingThreadMessges","threadMessagesHasNextPage","threadMessagesFetchNextPage","uuid","enabled","length","messages","isFetchingTags","tags","filtersUnreadCount","isFetchingChannels","userChannels","tagOptions","credentialsWithIssue","filter","item","status","forEach","name","color","children","iconColor","icon","label","toLowerCase","threadTypes","showConnectChannelModal","get","handleFilter","ids","invalidateQueries","handleAssignToSelf","handleThreadItemClick","position","render","onClose","message","InboxComponent","dispatch","organisation_id"],"mappings":"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","sourcesContent":["import { Box, Stack, useToast } from '@chakra-ui/core';\nimport { ToastBox } from 'app/components';\nimport { AxiosError } from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport Cookie from 'js-cookie';\nimport { useInfiniteQuery, useQuery, useQueryClient } from 'react-query';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { channelOptions, typeOptions } from '.';\nimport { selectOrganisationID, selectUserID } from '../../unauthenticated-app/authentication';\nimport { getUserChannels } from '../channels';\nimport {\n  ConversationFilters,\n  ConversationThread,\n  MoreInfoSidebar,\n  ThreadSection,\n  WhatsappSetupModal,\n} from './components';\nimport { ConnectChannelModal } from './components/connect-channel-modal';\nimport { useInbox } from './components/Provider';\nimport { QRCodeSetupModal } from './components/qr-code-setup-modal';\nimport {\n  getConversationMessages,\n  getConversationThreads,\n  getTags,\n  getThreadFiltersUnreadCount,\n} from './inbox.service';\nimport { FilterTypeOptions, InboxTag, ThreadSchema, UserChannelSchema } from './inbox.types';\nimport { loadScrollMemory } from './slices';\n\nexport const Inbox = () => {\n  const toast = useToast();\n  const queryClient = useQueryClient();\n  const { isNewConversation } = useInbox();\n  const user_id = useSelector(selectUserID);\n  const {\n    qrCodeChannelId,\n    onCloseWhatsappModal,\n    isWhatsappModalOpen,\n    setIsNewConversation,\n    isQRCodeSetupModalOpen,\n    onOpenQRCodeSetupModal,\n    onCloseQRCodeSetupModal,\n    setActiveFilter: handleSetFilter,\n  } = useInbox();\n\n  const [activeFilter, setActiveFilter] = useState('queued');\n  const [activeThread, setActiveThread] = useState<ThreadSchema | undefined>();\n  const [filterIds, setFilterIds] = useState<string | string[] | undefined>(user_id);\n  const [isConnectChannelsModalOpen, setIsConnectChannelsModalOpen] = useState(false);\n\n  const fetchThreads = async ({ pageParam = 1, queryKey }: any) => {\n    let params = {};\n    queryClient.cancelQueries(['threads', activeFilter, filterIds], { exact: true });\n    switch (queryKey[1]) {\n      case 'queued':\n        params = { ...params, state: 'queued' };\n        break;\n      case 'mentioned':\n        params = {\n          ...params,\n          mention: filterIds,\n        };\n        break;\n      case 'assigned':\n        params = {\n          ...params,\n          assigned: filterIds,\n        };\n        break;\n      case 'favorite':\n        params = {\n          ...params,\n          favorite: filterIds,\n        };\n        break;\n      case 'closed':\n        params = {\n          ...params,\n          closed: filterIds,\n        };\n        break;\n      case 'snoozed':\n        params = {\n          ...params,\n          closed: filterIds,\n        };\n        break;\n      case 'twitter':\n        params = {\n          ...params,\n          channels: filterIds,\n        };\n        break;\n      case 'whatsapp':\n        params = {\n          ...params,\n          channels: filterIds,\n        };\n        break;\n      case 'messenger':\n        params = {\n          ...params,\n          channels: filterIds,\n        };\n        break;\n      case 'phone':\n        params = {\n          ...params,\n          channels: filterIds,\n        };\n        break;\n      case 'email':\n        params = {\n          ...params,\n          channels: filterIds,\n        };\n        break;\n      default:\n        params = { ...params, tag: filterIds };\n        break;\n    }\n    const response = await getConversationThreads({ page: pageParam, ...params });\n    const threads = response.data.threads;\n    const meta = response.data.meta;\n\n    if (meta.page === 1 && !activeThread) {\n      setActiveThread(threads[0]);\n    }\n\n    return response;\n  };\n\n  const {\n    data,\n    hasNextPage,\n    fetchNextPage,\n    error: threadError,\n    isLoading: isFetchingThreads,\n  } = useInfiniteQuery<any, AxiosError>(['threads', activeFilter, filterIds], fetchThreads, {\n    getNextPageParam: lastPage => {\n      return lastPage.data.meta.page < lastPage.data.meta.page_count\n        ? lastPage.data.meta.page + 1\n        : undefined;\n    },\n    // cacheTime: 0,\n    // refetchInterval: 2000,\n    refetchOnWindowFocus: false,\n  });\n\n  const threads = data?.pages.reduce((acc, page) => [...acc, ...page.data.threads], []) ?? [];\n\n  const fetchThreadMessages = ({ pageParam = 1, queryKey }: any) => {\n    const thread = queryKey[1];\n    return getConversationMessages({ page: pageParam, thread_id: thread ?? '' });\n  };\n\n  const {\n    data: threadMessages,\n    error: threadMessagesError,\n    isLoading: isFetchingThreadMessges,\n    hasNextPage: threadMessagesHasNextPage,\n    fetchNextPage: threadMessagesFetchNextPage,\n  } = useInfiniteQuery<any, AxiosError>(['messages', activeThread?.uuid], fetchThreadMessages, {\n    getNextPageParam: lastPage => {\n      return lastPage.meta.page < lastPage.meta.page_count ? lastPage.meta.page + 1 : undefined;\n    },\n    // refetchInterval: 2000,\n    enabled: !!threads.length && !!activeThread && activeFilter !== 'queued',\n  });\n\n  const messages =\n    threadMessages?.pages.reduce((acc, page) => [...acc, ...page.messages], []) ?? [];\n\n  const { isLoading: isFetchingTags, data: tags } = useQuery('tags', getTags);\n  const { data: filtersUnreadCount } = useQuery(\n    'filters-unread-count',\n    getThreadFiltersUnreadCount,\n  );\n  const { isLoading: isFetchingChannels, data: userChannels } = useQuery(\n    'channels',\n    getUserChannels,\n  );\n\n  let tagOptions: any = {};\n  let credentialsWithIssue = userChannels?.filter(\n    (item: UserChannelSchema) => item.status !== 'active',\n  );\n\n  tags?.forEach(({ name, color }: InboxTag) => {\n    tagOptions[name] = {\n      children: name,\n      iconColor: color,\n      icon: 'inbox-tag',\n      label: name.toLowerCase(),\n    };\n  });\n\n  const threadTypes: { [key: string]: FilterTypeOptions } = {\n    ...typeOptions,\n    ...channelOptions,\n    ...tagOptions,\n  };\n\n  useEffect(() => {\n    const showConnectChannelModal = Cookie.get('show_connect_channel_modal');\n\n    if (typeof userChannels !== 'undefined') {\n      if (!userChannels.length && !showConnectChannelModal) {\n        setIsConnectChannelsModalOpen(true);\n      } else {\n        setIsConnectChannelsModalOpen(false);\n      }\n    }\n  }, [userChannels]);\n\n  const handleFilter = (filter: string, ids?: string[], thread?: any) => {\n    setIsNewConversation(false);\n    setActiveFilter(filter);\n    handleSetFilter(filter);\n    setFilterIds(ids ?? user_id);\n    setActiveThread(thread);\n    queryClient.invalidateQueries('filters-unread-count');\n  };\n\n  const handleAssignToSelf = (thread?: any) => {\n    setIsNewConversation(false);\n    setActiveFilter('assigned');\n    handleSetFilter('assigned');\n    setFilterIds(user_id);\n    setActiveThread(thread);\n    queryClient.invalidateQueries('filters-unread-count');\n    queryClient.invalidateQueries(['threads', 'queued', user_id]);\n  };\n\n  const handleThreadItemClick = (thread: any) => {\n    setIsNewConversation(false);\n    setActiveThread(thread);\n  };\n\n  if (threadError) {\n    toast({\n      status: 'error',\n      position: 'bottom-left',\n      render: ({ onClose }) => <ToastBox onClose={onClose} message={threadError?.message} />,\n    });\n  }\n\n  if (threadMessagesError) {\n    toast({\n      status: 'error',\n      position: 'bottom-left',\n      render: ({ onClose }) => (\n        <ToastBox onClose={onClose} message={threadMessagesError?.message} />\n      ),\n    });\n  }\n\n  return (\n    <Stack isInline>\n      <ConversationFilters\n        tags={tags}\n        onFilter={handleFilter}\n        channels={userChannels}\n        activeFilter={activeFilter}\n        isFetchingTags={isFetchingTags}\n        filtersUnreadCount={filtersUnreadCount}\n        isFetchingChannels={isFetchingChannels}\n      />\n      <ThreadSection\n        threads={threads}\n        hasMore={hasNextPage}\n        threadTypes={threadTypes}\n        activeThread={activeThread}\n        activeFilter={activeFilter}\n        isFetching={isFetchingThreads}\n        onFetchMoreData={fetchNextPage}\n        onThreadItemAssign={handleAssignToSelf}\n        onThreadItemClick={handleThreadItemClick}\n        credentialsWithIssue={credentialsWithIssue}\n      />\n      <ConversationThread\n        tags={tags}\n        messages={messages}\n        thread={activeThread}\n        channels={userChannels}\n        setActiveThread={setActiveThread}\n        hasMore={threadMessagesHasNextPage}\n        isFetching={isFetchingThreadMessges}\n        onFetchMoreData={threadMessagesFetchNextPage}\n        setActiveFilter={() => handleFilter('assigned')}\n      />\n      {activeThread && activeThread?.state !== 'queued' && !isNewConversation && (\n        <MoreInfoSidebar thread={activeThread} />\n      )}\n\n      <WhatsappSetupModal\n        isOpen={isWhatsappModalOpen}\n        onClose={onCloseWhatsappModal}\n        onOpenQrCodeModal={onOpenQRCodeSetupModal}\n      />\n      <QRCodeSetupModal\n        channelID={qrCodeChannelId}\n        isOpen={isQRCodeSetupModalOpen}\n        onClose={onCloseQRCodeSetupModal}\n      />\n      <ConnectChannelModal\n        isOpen={isConnectChannelsModalOpen}\n        onClose={() => setIsConnectChannelsModalOpen(false)}\n      />\n    </Stack>\n  );\n};\n\nexport function InboxComponent() {\n  const dispatch = useDispatch();\n  const user_id = useSelector(selectUserID);\n  const organisation_id = useSelector(selectOrganisationID);\n\n  useEffect(() => {\n    dispatch(loadScrollMemory());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return user_id && organisation_id ? <Inbox /> : <Box />;\n}\n"]},"metadata":{},"sourceType":"module"}