{"ast":null,"code":"import _extends from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/tables/components/table/table.components/TableCellEditable.tsx\";\nvar __jsx = React.createElement;\nimport { Flex, PseudoBox } from '@chakra-ui/core';\nimport React from 'react';\nimport { createContext } from '../../../../../../hooks';\nconst [Provider, useEditableTableCell] = createContext();\nexport function EditableTableCellProvider({\n  onEdit,\n  onBlur,\n  onChange,\n  onCancel,\n  onSubmit,\n  children,\n  placeholder,\n  submitOnBlur,\n  defaultValue,\n  value: valueProp\n}) {\n  const inputRef = React.useRef(null);\n  const {\n    current: isControlled\n  } = React.useRef(valueProp != null);\n  const [value, setValue] = React.useState(defaultValue || '');\n  const [isEditing, setIsEditing] = React.useState(false);\n\n  const _value = isControlled ? valueProp : value;\n\n  const [previousValue, setPreviousValue] = React.useState(_value);\n  const hasValue = _value != null && _value !== '';\n  React.useEffect(() => {\n    if (isEditing) {\n      onEdit && onEdit();\n    }\n  }, [isEditing, onEdit]);\n  React.useEffect(() => {\n    if (isEditing && inputRef.current) {\n      var _inputRef$current, _inputRef$current2;\n\n      //@ts-ignore\n      inputRef === null || inputRef === void 0 ? void 0 : (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus(); //@ts-ignore\n\n      inputRef === null || inputRef === void 0 ? void 0 : (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.select();\n    }\n  }, [isEditing]);\n\n  const handleChange = event => {\n    const {\n      value\n    } = event.target;\n\n    if (!isControlled) {\n      setValue(value);\n    }\n\n    onChange && onChange(value);\n  };\n\n  const handleBlur = event => {\n    submitOnBlur ? handleSubmit() : handleCancel();\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  const handleCancel = () => {\n    setIsEditing(false);\n    setValue(previousValue);\n\n    if (value !== previousValue) {\n      onChange && onChange(previousValue);\n    }\n\n    onCancel && onCancel(previousValue);\n  };\n\n  const handleSubmit = () => {\n    setIsEditing(false);\n    setPreviousValue(value);\n    onSubmit && onSubmit(value);\n  };\n\n  const handleKeyDown = event => {\n    const {\n      key\n    } = event;\n\n    if (key === 'Escape') {\n      handleCancel();\n      return;\n    }\n\n    if (key === 'Enter') {\n      handleSubmit();\n    }\n  };\n\n  const onRequestEdit = () => {\n    setIsEditing(true);\n  };\n\n  const context = {\n    hasValue,\n    inputRef,\n    isEditing,\n    handleBlur,\n    placeholder,\n    submitOnBlur,\n    handleChange,\n    onRequestEdit,\n    handleKeyDown,\n    value: _value\n  };\n  return __jsx(Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 10\n    }\n  }, children);\n}\nconst sharedProps = {\n  width: 'full',\n  bg: 'transparent',\n  fontSize: 'inherit',\n  fontWeight: 'inherit',\n  transition: 'all 0.2s'\n};\nexport function EditableTableCellPreview(props) {\n  const {\n    value,\n    hasValue,\n    isEditing,\n    placeholder\n  } = useEditableTableCell();\n\n  if (isEditing) {\n    return null;\n  }\n\n  return __jsx(PseudoBox, _extends({}, sharedProps, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }\n  }), hasValue ? value : placeholder);\n}\nexport function EditableTableCellInput(props) {\n  const {\n    value,\n    inputRef,\n    isEditing,\n    handleBlur,\n    placeholder,\n    handleChange,\n    handleKeyDown\n  } = useEditableTableCell();\n  const inputProps = {\n    value,\n    placeholder,\n    ref: inputRef,\n    onBlur: handleBlur,\n    onChange: handleChange,\n    onKeyDown: handleKeyDown\n  };\n\n  if (!isEditing) {\n    return null;\n  }\n\n  return __jsx(PseudoBox, _extends({\n    as: \"input\",\n    ref: inputRef,\n    outline: \"none\"\n  }, sharedProps, inputProps, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }\n  }));\n}\nexport function EditableTableCellContainer(props) {\n  const {\n    onRequestEdit\n  } = useEditableTableCell();\n  return __jsx(Flex, _extends({}, props, sharedProps, {\n    onDoubleClick: onRequestEdit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 5\n    }\n  }), props.children);\n}\nexport function EditableTableCell(props) {\n  return __jsx(EditableTableCellProvider, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 5\n    }\n  }), __jsx(EditableTableCellContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }\n  }, props.children));\n}","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/tables/components/table/table.components/TableCellEditable.tsx"],"names":["Flex","PseudoBox","React","createContext","Provider","useEditableTableCell","EditableTableCellProvider","onEdit","onBlur","onChange","onCancel","onSubmit","children","placeholder","submitOnBlur","defaultValue","value","valueProp","inputRef","useRef","current","isControlled","setValue","useState","isEditing","setIsEditing","_value","previousValue","setPreviousValue","hasValue","useEffect","focus","select","handleChange","event","target","handleBlur","handleSubmit","handleCancel","handleKeyDown","key","onRequestEdit","context","sharedProps","width","bg","fontSize","fontWeight","transition","EditableTableCellPreview","props","EditableTableCellInput","inputProps","ref","onKeyDown","EditableTableCellContainer","EditableTableCell"],"mappings":"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","sourcesContent":["import { Flex, FlexProps, PseudoBox, PseudoBoxProps } from '@chakra-ui/core';\nimport React from 'react';\nimport { createContext } from '../../../../../../hooks';\n\ntype EditableTableCellProps = {\n  value: string;\n  onEdit?: () => void;\n  placeholder?: string;\n  defaultValue?: string;\n  submitOnBlur?: boolean;\n  children: React.ReactNode;\n  onChange?: (value: string) => void;\n  onSubmit?: (newValue: string) => void;\n  onCancel?: (previousValue: string) => void;\n  onBlur?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\ntype T = {\n  value: string;\n  hasValue?: boolean;\n  isEditing?: boolean;\n  placeholder?: string;\n  submitOnBlur?: boolean;\n  onRequestEdit?: () => void;\n  inputRef?: React.Ref<HTMLInputElement>;\n  handleKeyDown?: (event: React.KeyboardEvent) => void;\n  handleBlur?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  handleChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst [Provider, useEditableTableCell] = createContext<T>();\n\nexport function EditableTableCellProvider({\n  onEdit,\n  onBlur,\n  onChange,\n  onCancel,\n  onSubmit,\n  children,\n  placeholder,\n  submitOnBlur,\n  defaultValue,\n  value: valueProp,\n}: EditableTableCellProps) {\n  const inputRef = React.useRef(null);\n  const { current: isControlled } = React.useRef(valueProp != null);\n  const [value, setValue] = React.useState(defaultValue || '');\n  const [isEditing, setIsEditing] = React.useState(false);\n  const _value = isControlled ? valueProp : value;\n  const [previousValue, setPreviousValue] = React.useState(_value);\n\n  const hasValue = _value != null && _value !== '';\n\n  React.useEffect(() => {\n    if (isEditing) {\n      onEdit && onEdit();\n    }\n  }, [isEditing, onEdit]);\n\n  React.useEffect(() => {\n    if (isEditing && inputRef.current) {\n      //@ts-ignore\n      inputRef?.current?.focus();\n      //@ts-ignore\n      inputRef?.current?.select();\n    }\n  }, [isEditing]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n    if (!isControlled) {\n      setValue(value);\n    }\n    onChange && onChange(value);\n  };\n\n  const handleBlur = (event: React.ChangeEvent<HTMLInputElement>) => {\n    submitOnBlur ? handleSubmit() : handleCancel();\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  const handleCancel = () => {\n    setIsEditing(false);\n    setValue(previousValue);\n    if (value !== previousValue) {\n      onChange && onChange(previousValue);\n    }\n    onCancel && onCancel(previousValue);\n  };\n\n  const handleSubmit = () => {\n    setIsEditing(false);\n    setPreviousValue(value);\n    onSubmit && onSubmit(value);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    const { key } = event;\n    if (key === 'Escape') {\n      handleCancel();\n      return;\n    }\n\n    if (key === 'Enter') {\n      handleSubmit();\n    }\n  };\n\n  const onRequestEdit = () => {\n    setIsEditing(true);\n  };\n\n  const context = {\n    hasValue,\n    inputRef,\n    isEditing,\n    handleBlur,\n    placeholder,\n    submitOnBlur,\n    handleChange,\n    onRequestEdit,\n    handleKeyDown,\n    value: _value,\n  };\n\n  return <Provider value={context}>{children}</Provider>;\n}\n\nconst sharedProps = {\n  width: 'full',\n  bg: 'transparent',\n  fontSize: 'inherit',\n  fontWeight: 'inherit',\n  transition: 'all 0.2s',\n};\n\nexport function EditableTableCellPreview(props: PseudoBoxProps) {\n  const { value, hasValue, isEditing, placeholder } = useEditableTableCell();\n\n  if (isEditing) {\n    return null;\n  }\n\n  return (\n    <PseudoBox {...sharedProps} {...props}>\n      {hasValue ? value : placeholder}\n    </PseudoBox>\n  );\n}\n\nexport function EditableTableCellInput(props: PseudoBoxProps) {\n  const {\n    value,\n    inputRef,\n    isEditing,\n    handleBlur,\n    placeholder,\n    handleChange,\n    handleKeyDown,\n  } = useEditableTableCell();\n\n  const inputProps = {\n    value,\n    placeholder,\n    ref: inputRef,\n    onBlur: handleBlur,\n    onChange: handleChange,\n    onKeyDown: handleKeyDown,\n  };\n\n  if (!isEditing) {\n    return null;\n  }\n\n  return (\n    <PseudoBox\n      as=\"input\"\n      ref={inputRef}\n      outline=\"none\"\n      {...sharedProps}\n      {...inputProps}\n      {...props}\n    />\n  );\n}\n\nexport function EditableTableCellContainer(props: FlexProps) {\n  const { onRequestEdit } = useEditableTableCell();\n  return (\n    <Flex {...props} {...sharedProps} onDoubleClick={onRequestEdit}>\n      {props.children}\n    </Flex>\n  );\n}\n\nexport function EditableTableCell(props: EditableTableCellProps) {\n  return (\n    <EditableTableCellProvider {...props}>\n      <EditableTableCellContainer>{props.children}</EditableTableCellContainer>\n    </EditableTableCellProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}