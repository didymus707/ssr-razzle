{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSelector, createSlice } from '@reduxjs/toolkit';\nconst teamsInitialState = {\n  teams: [],\n  team: {},\n  organisationMembers: [],\n  organizations: []\n};\nexport const teamsSlice = createSlice({\n  name: 'teams',\n  initialState: teamsInitialState,\n  reducers: {\n    getTeams(state, action) {\n      const {\n        teams\n      } = action.payload;\n      state.teams = teams;\n    },\n\n    createTeamItem(state, action) {\n      var _state$teams;\n\n      const {\n        team\n      } = action.payload;\n      (_state$teams = state.teams) === null || _state$teams === void 0 ? void 0 : _state$teams.unshift(team);\n    },\n\n    editTeamItem(state, action) {\n      const {\n        team\n      } = action.payload;\n      const index = state.teams.findIndex(item => item.id === team.id);\n      state.teams[index] = _objectSpread(_objectSpread({}, state.teams[index]), team);\n    },\n\n    deleteTeamItem(state, action) {\n      const {\n        id\n      } = action.payload;\n      state.teams = state.teams.filter(item => item.id !== id);\n    },\n\n    getTeamsMembers(state, action) {\n      const {\n        team\n      } = action.payload;\n      state.team = team;\n    },\n\n    removeTeamMember(state, action) {\n      const {\n        memberID\n      } = action.payload; // @ts-ignore\n\n      const members = state.team.members.filter(i => i.id !== memberID);\n      state.team = _objectSpread(_objectSpread({}, state.team), {}, {\n        members\n      });\n    },\n\n    removeTeamInvite(state, action) {\n      const {\n        inviteID\n      } = action.payload; // @ts-ignore\n\n      const invites = state.team.invites.filter(i => i.id !== inviteID);\n      state.team = _objectSpread(_objectSpread({}, state.team), {}, {\n        invites\n      });\n    },\n\n    getOrganisationMembers(state, action) {\n      const {\n        organisationMembers\n      } = action.payload;\n      state.organisationMembers = organisationMembers;\n    },\n\n    getOrganizations(state, action) {\n      const {\n        organizations\n      } = action.payload;\n      state.organizations = organizations;\n    }\n\n  }\n});\nexport const selectOrgMembers = createSelector(state => state.teams, teams => teams.organisationMembers);\nexport const selectOrgMemberByID = createSelector(selectOrgMembers, (_, memberID) => memberID, (orgMembers, memberID) => orgMembers.find(({\n  id\n}) => memberID === id));\nexport const makeSelectOrgMemberByID = () => selectOrgMemberByID;\nexport const selectOtherOrgMembers = createSelector(selectOrgMembers, (_, payload) => payload, (orgMembers, {\n  user_id\n}) => orgMembers.filter(({\n  id\n}) => user_id !== id));\nexport const selectTeams = createSelector(state => state.teams, teams => teams.teams);\nexport const selectOrganisations = createSelector(state => state.teams, teams => teams.organizations);\nexport const selectOrganisationIDs = createSelector(selectOrganisations, organizations => organizations.map(({\n  id\n}) => id));","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/settings/slices/teams.ts"],"names":["createSelector","createSlice","teamsInitialState","teams","team","organisationMembers","organizations","teamsSlice","name","initialState","reducers","getTeams","state","action","payload","createTeamItem","unshift","editTeamItem","index","findIndex","item","id","deleteTeamItem","filter","getTeamsMembers","removeTeamMember","memberID","members","i","removeTeamInvite","inviteID","invites","getOrganisationMembers","getOrganizations","selectOrgMembers","selectOrgMemberByID","_","orgMembers","find","makeSelectOrgMemberByID","selectOtherOrgMembers","user_id","selectTeams","selectOrganisations","selectOrganisationIDs","map"],"mappings":"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","sourcesContent":["import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../../../root';\nimport { Organization } from '../../../unauthenticated-app/authentication/service';\nimport { Team, TeamInvite, TeamMember, TeamsState } from '../settings.types';\n\nconst teamsInitialState = {\n  teams: [],\n  team: {} as Team,\n  organisationMembers: [],\n  organizations: [],\n} as TeamsState;\n\nexport const teamsSlice = createSlice({\n  name: 'teams',\n  initialState: teamsInitialState,\n  reducers: {\n    getTeams(state, action: PayloadAction<{ teams: Team[] }>) {\n      const { teams } = action.payload;\n      state.teams = teams;\n    },\n    createTeamItem(state, action: PayloadAction<{ team: Team }>) {\n      const { team } = action.payload;\n      state.teams?.unshift(team);\n    },\n    editTeamItem(state, action: PayloadAction<{ team: Team }>) {\n      const { team } = action.payload;\n      const index = state.teams.findIndex(item => item.id === team.id);\n      state.teams[index] = { ...state.teams[index], ...team };\n    },\n    deleteTeamItem(state, action: PayloadAction<{ id: Team['id'] }>) {\n      const { id } = action.payload;\n      state.teams = state.teams.filter(item => item.id !== id);\n    },\n    getTeamsMembers(state, action: PayloadAction<{ team: Team }>) {\n      const { team } = action.payload;\n      state.team = team;\n    },\n    removeTeamMember(state, action: PayloadAction<{ memberID: String }>) {\n      const { memberID } = action.payload;\n      // @ts-ignore\n      const members = state.team.members.filter((i): TeamMember => i.id !== memberID);\n      state.team = {\n        ...state.team,\n        members,\n      };\n    },\n    removeTeamInvite(state, action: PayloadAction<{ inviteID: TeamInvite['id'] }>) {\n      const { inviteID } = action.payload;\n      // @ts-ignore\n      const invites = state.team.invites.filter((i): TeamInvite => i.id !== inviteID);\n      state.team = {\n        ...state.team,\n        invites,\n      };\n    },\n    getOrganisationMembers(state, action: PayloadAction<{ organisationMembers: TeamMember[] }>) {\n      const { organisationMembers } = action.payload;\n      state.organisationMembers = organisationMembers;\n    },\n    getOrganizations(state, action: PayloadAction<{ organizations: Organization[] }>) {\n      const { organizations } = action.payload;\n      state.organizations = organizations;\n    },\n  },\n});\n\nexport const selectOrgMembers = createSelector(\n  (state: RootState) => state.teams,\n  teams => teams.organisationMembers,\n);\n\nexport const selectOrgMemberByID = createSelector(\n  selectOrgMembers,\n  (_: RootState, memberID: string) => memberID,\n  (orgMembers, memberID) => orgMembers.find(({ id }) => memberID === id),\n);\n\nexport const makeSelectOrgMemberByID = () => selectOrgMemberByID;\n\nexport const selectOtherOrgMembers = createSelector(\n  selectOrgMembers,\n  (_: RootState, payload: { user_id: string }) => payload,\n  (orgMembers, { user_id }) => orgMembers.filter(({ id }) => user_id !== id),\n);\n\nexport const selectTeams = createSelector(\n  (state: RootState) => state.teams,\n  teams => teams.teams,\n);\n\nexport const selectOrganisations = createSelector(\n  (state: RootState) => state.teams,\n  teams => teams.organizations,\n);\n\nexport const selectOrganisationIDs = createSelector(selectOrganisations, organizations =>\n  organizations.map(({ id }) => id),\n);\n"]},"metadata":{},"sourceType":"module"}