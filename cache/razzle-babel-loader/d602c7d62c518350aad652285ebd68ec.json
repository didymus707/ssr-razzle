{"ast":null,"code":"var _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/settings/component/connection-modal.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Icon, ModalBody, ModalCloseButton, PseudoBox, Stack, useToast } from '@chakra-ui/core';\nimport { getUserChannels } from 'app/authenticated-app/channels';\nimport { selectDataModels, selectLists, selectListsById } from 'app/authenticated-app/lists/lists.selectors';\nimport { selectContactListID } from 'app/authenticated-app/lists/lists.slice';\nimport { BodyText, Button, Menu, MenuItem, ModalContainer, SmallText, ToastBox, XSmallText } from 'app/components';\nimport { icons } from 'feather-icons';\nimport { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\nimport { useSelector } from 'react-redux';\nimport { channelOptions } from '../..';\nimport { InboxSearch } from '../../components';\nimport { createInboxConnection } from '../../inbox.service';\nexport const ConnectionModal = props => {\n  var _payload$table_id, _payload$table_id2;\n\n  const {\n    isOpen,\n    onClose,\n    connections\n  } = props;\n  const toast = useToast();\n  const queryClient = useQueryClient();\n  const lists = useSelector(selectLists);\n  const segments = useSelector(selectDataModels);\n  const lists_by_id = useSelector(selectListsById);\n  const contactListId = useSelector(selectContactListID);\n  const {\n    0: step,\n    1: setStep\n  } = useState(1);\n  const {\n    0: resources,\n    1: setResources\n  } = useState([]);\n  const {\n    0: payload,\n    1: setPayload\n  } = useState({\n    filters: [],\n    type: 'list',\n    table_id: null,\n    data_model_id: null\n  });\n  const listArray = lists_by_id //@ts-ignore\n  .map(id => lists[id]);\n  useEffect(() => {\n    if (payload.type === 'list') {\n      setResources(listArray);\n    } else {\n      setResources(segments);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [payload.type]);\n  const {\n    data: channels\n  } = useQuery('channels', getUserChannels);\n  const {\n    mutate: createConnection,\n    isLoading: isCreatingConnection\n  } = useMutation(payload => createInboxConnection(payload), {\n    onMutate: async newConnection => {\n      await queryClient.cancelQueries('inbox-connections');\n      const previousConnections = queryClient.getQueryData('inbox-connections'); //@ts-ignore\n\n      queryClient.setQueryData('inbox-connections', old => [...old, newConnection]);\n      return {\n        previousConnections\n      };\n    },\n    onError: (err, newConnection, context) => {\n      queryClient.setQueryData('inbox-connections', context.previousConnections);\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: err.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 34\n          }\n        })\n      });\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries('inbox-connections');\n      handleClose();\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          status: \"success\",\n          onClose: onClose,\n          message: \"Connection created successfully\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 11\n          }\n        })\n      });\n    }\n  });\n  const uniqChannels = new Set(channels === null || channels === void 0 ? void 0 : channels.map(item => item.user.channel_name)); //@ts-ignore\n\n  const userChannels = [...uniqChannels];\n  const channelsWithId = {};\n  channels === null || channels === void 0 ? void 0 : channels.forEach(({\n    uuid,\n    user\n  }) => {\n    if (Object.keys(channelsWithId).includes(user.channel_name)) {\n      channelsWithId[user.channel_name].push(uuid);\n      return;\n    }\n\n    channelsWithId[user.channel_name] = [uuid];\n  });\n  const stepTitle = {\n    1: {\n      title: 'What would you like to connect?',\n      subtitle: 'Would you like to connect a list or a data model.'\n    },\n    2: {\n      title: 'Select your list',\n      subtitle: 'Choose the list you want to connect to inbox.'\n    },\n    3: {\n      title: 'Select your unique identifier',\n      subtitle: 'Choose the list you want to connect to inbox.'\n    }\n  };\n\n  const handleClose = () => {\n    onClose === null || onClose === void 0 ? void 0 : onClose();\n    setStep(1);\n    setPayload({\n      filters: [],\n      type: 'list',\n      data_model_id: null,\n      table_id: contactListId !== null && contactListId !== void 0 ? contactListId : null\n    });\n  };\n\n  const handleGoBack = () => {\n    setStep(step - 1);\n  };\n\n  const handleSubmit = data => {\n    if (step === 3) {\n      const {\n        table_id,\n        data_model_id,\n        filters\n      } = _objectSpread(_objectSpread({}, payload), data);\n\n      createConnection({\n        table_id,\n        data_model_id,\n        variables: {\n          filters\n        }\n      });\n    } else {\n      setPayload(_objectSpread(_objectSpread({}, payload), data));\n      setStep(step + 1);\n    }\n  };\n\n  return __jsx(ModalContainer, {\n    size: \"sm\",\n    isOpen: isOpen,\n    closeOnEsc: false,\n    onClose: handleClose,\n    closeOnOverlayClick: false,\n    title: stepTitle[step].title,\n    titleStyleProps: {\n      px: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }\n  }, __jsx(ModalCloseButton, {\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }), __jsx(ModalBody, {\n    px: \"1rem\",\n    pt: \"0\",\n    pb: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, __jsx(SmallText, {\n    color: \"gray.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, stepTitle[step].subtitle), __jsx(React.Fragment, null, step === 1 && __jsx(StepOne, {\n    type: payload.type,\n    connections: connections,\n    onNext: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }), step === 2 && __jsx(StepTwo, {\n    type: payload.type,\n    onNext: handleSubmit,\n    resources: resources,\n    onBack: handleGoBack,\n    resource: (_payload$table_id = payload.table_id) !== null && _payload$table_id !== void 0 ? _payload$table_id : payload.data_model_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }), step === 3 && __jsx(StepThree, {\n    onBack: handleGoBack,\n    resources: resources,\n    onNext: handleSubmit,\n    channels: userChannels,\n    filters: payload.filters,\n    isLoading: isCreatingConnection,\n    resourceId: (_payload$table_id2 = payload.table_id) !== null && _payload$table_id2 !== void 0 ? _payload$table_id2 : payload.data_model_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  }))));\n};\n\nconst StepOne = props => {\n  const {\n    type,\n    onNext,\n    connections\n  } = props;\n  const {\n    0: selectedType,\n    1: setSelectedType\n  } = useState(type !== null && type !== void 0 ? type : 'list');\n  const hasListConnection = !!(connections !== null && connections !== void 0 && connections.find(item => !!item.table_id));\n  const hasDataModelConnection = !!(connections !== null && connections !== void 0 && connections.find(item => !!item.data_model_id));\n  return __jsx(React.Fragment, null, __jsx(Stack, {\n    py: \"0.5rem\",\n    spacing: \"0.2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }\n  }, !hasListConnection && __jsx(PseudoBox, {\n    as: \"button\",\n    rounded: \"12px\",\n    p: \"1rem 0.5rem\",\n    _hover: {\n      bg: 'blue.100'\n    },\n    onClick: () => setSelectedType('list'),\n    bg: selectedType === 'list' ? 'blue.100' : 'transparent',\n    color: selectedType === 'list' ? 'blue.500' : 'gray.900',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }\n  }, __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }\n  }, __jsx(Icon, {\n    name: \"grid2\",\n    size: \"1.7rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 15\n    }\n  }), __jsx(BodyText, {\n    fontWeight: \"bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 15\n    }\n  }, \"List\"))), !hasDataModelConnection && __jsx(PseudoBox, {\n    as: \"button\",\n    rounded: \"12px\",\n    p: \"1rem 0.5rem\",\n    _hover: {\n      bg: 'blue.100'\n    },\n    onClick: () => setSelectedType('segment'),\n    bg: selectedType === 'segment' ? 'blue.100' : 'transparent',\n    color: selectedType === 'segment' ? 'blue.500' : 'gray.900',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 11\n    }\n  }, __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }\n  }, __jsx(Icon, {\n    name: \"segment-2\",\n    size: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 15\n    }\n  }), __jsx(BodyText, {\n    fontWeight: \"bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 15\n    }\n  }, \"Data model\")))), __jsx(Button, {\n    isFullWidth: true,\n    variantColor: \"blue\",\n    onClick: () => onNext({\n      type: selectedType\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }\n  }, \"Next\"));\n};\n\nconst StepTwo = props => {\n  const {\n    type,\n    resource,\n    resources: resourcesProps,\n    onNext,\n    onBack\n  } = props;\n  const {\n    0: resources,\n    1: setResources\n  } = useState(resourcesProps);\n  const {\n    0: selectedResource,\n    1: setSelectedResource\n  } = useState(resource !== null && resource !== void 0 ? resource : '');\n\n  const handleChange = value => {\n    if (value) {\n      setResources(resources.filter(({\n        name\n      }) => name.toLowerCase().includes(value.toLowerCase())));\n    } else {\n      setResources(resourcesProps);\n    }\n  };\n\n  useEffect(() => {\n    setResources(resourcesProps);\n  }, [resourcesProps]);\n  return __jsx(React.Fragment, null, __jsx(Box, {\n    pt: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }\n  }, __jsx(InboxSearch, {\n    showButton: false,\n    onSearch: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 9\n    }\n  })), __jsx(Stack, {\n    py: \"0.5rem\",\n    spacing: \"0.2rem\",\n    height: \"200px\",\n    overflow: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }\n  }, resources.map(resource => __jsx(PseudoBox, {\n    as: \"button\",\n    rounded: \"12px\",\n    p: \"1rem 0.5rem\",\n    key: resource.id,\n    _hover: {\n      bg: 'blue.100'\n    },\n    onClick: () => setSelectedResource(resource.id),\n    bg: selectedResource === resource.id ? 'blue.100' : 'transparent',\n    color: selectedResource === resource.id ? 'blue.500' : 'gray.900',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 11\n    }\n  }, __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 13\n    }\n  }, resource.icon ? __jsx(Box, {\n    width: \"40px\",\n    height: \"40px\",\n    display: \"flex\",\n    rounded: \"12px\",\n    className: \"box\",\n    alignItems: \"center\",\n    bg: resource.color,\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 17\n    }\n  }, __jsx(\"img\", {\n    alt: \"list-icon\",\n    style: {\n      height: '20px'\n    },\n    src: `data:image/svg+xml;utf8,${icons[resource.icon].toSvg({\n      color: 'white'\n    })}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 19\n    }\n  })) : __jsx(Icon, {\n    name: \"segment-2\",\n    size: \"1.7rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 17\n    }\n  }), __jsx(BodyText, {\n    fontWeight: \"bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 15\n    }\n  }, resource.name))))), __jsx(Stack, {\n    isInline: true,\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    width: \"48%\",\n    variant: \"outline\",\n    onClick: onBack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 9\n    }\n  }, \"Back\"), __jsx(Button, {\n    width: \"48%\",\n    isFullWidth: true,\n    variantColor: \"blue\",\n    isDisabled: !selectedResource,\n    onClick: () => {\n      let data_model_id, table_id;\n      if (type === 'list') table_id = selectedResource;\n      if (type === 'segment') data_model_id = selectedResource;\n      onNext({\n        data_model_id,\n        table_id\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 9\n    }\n  }, \"Next\")));\n};\n\nconst StepThree = props => {\n  const {\n    onNext,\n    onBack,\n    channels,\n    resources,\n    isLoading,\n    resourceId,\n    filters: filtersProp\n  } = props;\n  const {\n    0: filters,\n    1: setFilters\n  } = useState(filtersProp !== null && filtersProp !== void 0 ? filtersProp : []);\n  const selectedResourceData = resources.find(item => item.id === resourceId);\n\n  const handleFilterChange = (filterData, channel) => {\n    let newFilters = filters;\n    const isChannelAdded = !!filters.find(filter => filter.channel === channel);\n\n    if (isChannelAdded) {\n      newFilters = filters.map(filter => {\n        if (filter.channel === channel) {\n          return _objectSpread(_objectSpread({}, filterData), {}, {\n            channel\n          });\n        }\n\n        return filter;\n      });\n    } else {\n      newFilters = [...filters, _objectSpread(_objectSpread({}, filterData), {}, {\n        channel\n      })];\n    }\n\n    setFilters(newFilters);\n  };\n\n  const renderResourceColumns = (item, _, channel) => {\n    var _item$label;\n\n    const filter = {\n      value: null,\n      name: item.name,\n      columnID: item.id,\n      operator: 'contains',\n      columnType: item.type\n    };\n    return __jsx(MenuItem, {\n      key: item.id,\n      onClick: () => handleFilterChange(filter, channel),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 7\n      }\n    }, __jsx(SmallText, {\n      color: \"gray.900\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }\n    }, (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : item.key));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Stack, {\n    py: \"0.5rem\",\n    spacing: \"0.2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 7\n    }\n  }, channels.map((channel, index) => {\n    const options = channelOptions[channel];\n    const filterColum = filters.find(filter => filter.channel === channel);\n    return __jsx(PseudoBox, {\n      display: \"flex\",\n      p: \"1rem 0.5rem\",\n      key: index.toString(),\n      justifyContent: \"space-between\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 13\n      }\n    }, __jsx(Stack, {\n      isInline: true,\n      alignItems: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 15\n      }\n    }, __jsx(Icon, {\n      name: options.icon,\n      size: \"1.7rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 17\n      }\n    }), __jsx(BodyText, {\n      fontWeight: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 17\n      }\n    }, options.children)), __jsx(Stack, {\n      isInline: true,\n      alignItems: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 15\n      }\n    }, !!filterColum && __jsx(Box, {\n      w: \"160px\",\n      rounded: \"4px\",\n      p: \"0.3rem 1rem\",\n      borderWidth: \"1px\",\n      borderColor: \"gray.300\",\n      textTransform: \"capitalize\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 19\n      }\n    }, __jsx(XSmallText, {\n      color: \"gray.900\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 21\n      }\n    }, filterColum.name)), __jsx(Menu, {\n      renderItem: (item, index) => renderResourceColumns(item, index, channel),\n      options: selectedResourceData.columns,\n      menuListProps: {\n        width: '160px',\n        height: '200px',\n        overflow: 'auto',\n        placement: 'right-start'\n      },\n      menuButtonProps: {\n        px: '0',\n        minW: 'unset',\n        children: __jsx(Icon, {\n          size: \"1rem\",\n          color: \"#333333\",\n          name: \"chevron-down\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 31\n          }\n        })\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 17\n      }\n    })));\n  })), __jsx(Stack, {\n    isInline: true,\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    width: \"48%\",\n    variant: \"outline\",\n    onClick: onBack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 9\n    }\n  }, \"Back\"), __jsx(Button, {\n    width: \"48%\",\n    isFullWidth: true,\n    variantColor: \"blue\",\n    isLoading: isLoading,\n    isDisabled: isEmpty(filters),\n    onClick: () => onNext({\n      filters\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 9\n    }\n  }, \"Next\")));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/settings/component/connection-modal.tsx"],"names":["Box","Icon","ModalBody","ModalCloseButton","PseudoBox","Stack","useToast","getUserChannels","selectDataModels","selectLists","selectListsById","selectContactListID","BodyText","Button","Menu","MenuItem","ModalContainer","SmallText","ToastBox","XSmallText","icons","isEmpty","React","useEffect","useState","useMutation","useQuery","useQueryClient","useSelector","channelOptions","InboxSearch","createInboxConnection","ConnectionModal","props","isOpen","onClose","connections","toast","queryClient","lists","segments","lists_by_id","contactListId","step","setStep","resources","setResources","payload","setPayload","filters","type","table_id","data_model_id","listArray","map","id","data","channels","mutate","createConnection","isLoading","isCreatingConnection","onMutate","newConnection","cancelQueries","previousConnections","getQueryData","setQueryData","old","onError","err","context","position","render","message","onSettled","invalidateQueries","handleClose","uniqChannels","Set","item","user","channel_name","userChannels","channelsWithId","forEach","uuid","Object","keys","includes","push","stepTitle","title","subtitle","handleGoBack","handleSubmit","variables","px","StepOne","onNext","selectedType","setSelectedType","hasListConnection","find","hasDataModelConnection","bg","StepTwo","resource","resourcesProps","onBack","selectedResource","setSelectedResource","handleChange","value","filter","name","toLowerCase","icon","color","height","toSvg","StepThree","resourceId","filtersProp","setFilters","selectedResourceData","handleFilterChange","filterData","channel","newFilters","isChannelAdded","renderResourceColumns","_","columnID","operator","columnType","label","key","index","options","filterColum","toString","children","columns","width","overflow","placement","minW"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Icon,\n  ModalBody,\n  ModalCloseButton,\n  PseudoBox,\n  Stack,\n  useToast,\n} from '@chakra-ui/core';\nimport { getUserChannels } from 'app/authenticated-app/channels';\nimport {\n  selectDataModels,\n  selectLists,\n  selectListsById,\n} from 'app/authenticated-app/lists/lists.selectors';\nimport { selectContactListID } from 'app/authenticated-app/lists/lists.slice';\nimport {\n  BodyText,\n  Button,\n  Menu,\n  MenuItem,\n  ModalContainer,\n  ModalContainerOptions,\n  SmallText,\n  ToastBox,\n  XSmallText,\n} from 'app/components';\nimport { AxiosError } from 'axios';\nimport { icons } from 'feather-icons';\nimport { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\nimport { useSelector } from 'react-redux';\nimport { channelOptions } from '../..';\nimport { InboxSearch } from '../../components';\nimport { createInboxConnection } from '../../inbox.service';\nimport { Channel, InboxConnection } from '../../inbox.types';\n\nexport type ConnectionModalProps = ModalContainerOptions & {\n  connections: InboxConnection[];\n};\n\nexport const ConnectionModal = (props: ConnectionModalProps) => {\n  const { isOpen, onClose, connections } = props;\n\n  const toast = useToast();\n  const queryClient = useQueryClient();\n  const lists = useSelector(selectLists);\n  const segments = useSelector(selectDataModels);\n  const lists_by_id = useSelector(selectListsById);\n  const contactListId = useSelector(selectContactListID);\n\n  const [step, setStep] = useState(1);\n  const [resources, setResources] = useState<any[]>([]);\n  const [payload, setPayload] = useState<{\n    filters: any[];\n    type: ConnectionType;\n    table_id?: string | null;\n    data_model_id?: string | null;\n  }>({\n    filters: [],\n    type: 'list',\n    table_id: null,\n    data_model_id: null,\n  });\n\n  const listArray = lists_by_id\n    //@ts-ignore\n    .map((id: string) => lists[id]);\n\n  useEffect(() => {\n    if (payload.type === 'list') {\n      setResources(listArray);\n    } else {\n      setResources(segments);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [payload.type]);\n\n  const { data: channels } = useQuery('channels', getUserChannels);\n  const { mutate: createConnection, isLoading: isCreatingConnection } = useMutation<\n    any,\n    AxiosError,\n    any,\n    any\n  >(payload => createInboxConnection(payload), {\n    onMutate: async newConnection => {\n      await queryClient.cancelQueries('inbox-connections');\n\n      const previousConnections = queryClient.getQueryData('inbox-connections');\n\n      //@ts-ignore\n      queryClient.setQueryData('inbox-connections', old => [...old, newConnection]);\n\n      return { previousConnections };\n    },\n    onError: (err, newConnection, context) => {\n      queryClient.setQueryData('inbox-connections', context.previousConnections);\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={err.message} />,\n      });\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries('inbox-connections');\n      handleClose();\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox status=\"success\" onClose={onClose} message=\"Connection created successfully\" />\n        ),\n      });\n    },\n  });\n  const uniqChannels = new Set(channels?.map((item: any) => item.user.channel_name));\n  //@ts-ignore\n  const userChannels: Channel[] = [...uniqChannels];\n  const channelsWithId: any = {};\n\n  channels?.forEach(({ uuid, user }: { uuid: string; user: any }) => {\n    if (Object.keys(channelsWithId).includes(user.channel_name)) {\n      channelsWithId[user.channel_name].push(uuid);\n      return;\n    }\n    channelsWithId[user.channel_name] = [uuid];\n  });\n\n  const stepTitle: { [key: number]: { title: string; subtitle: string } } = {\n    1: {\n      title: 'What would you like to connect?',\n      subtitle: 'Would you like to connect a list or a data model.',\n    },\n    2: {\n      title: 'Select your list',\n      subtitle: 'Choose the list you want to connect to inbox.',\n    },\n    3: {\n      title: 'Select your unique identifier',\n      subtitle: 'Choose the list you want to connect to inbox.',\n    },\n  };\n\n  const handleClose = () => {\n    onClose?.();\n    setStep(1);\n    setPayload({\n      filters: [],\n      type: 'list',\n      data_model_id: null,\n      table_id: contactListId ?? null,\n    });\n  };\n\n  const handleGoBack = () => {\n    setStep(step - 1);\n  };\n\n  const handleSubmit = (data: {\n    filters?: any[];\n    table_id?: string;\n    data_model_id?: string;\n    type?: ConnectionType;\n  }) => {\n    if (step === 3) {\n      const { table_id, data_model_id, filters } = { ...payload, ...data };\n      createConnection({ table_id, data_model_id, variables: { filters } });\n    } else {\n      setPayload({ ...payload, ...data });\n      setStep(step + 1);\n    }\n  };\n\n  return (\n    <ModalContainer\n      size=\"sm\"\n      isOpen={isOpen}\n      closeOnEsc={false}\n      onClose={handleClose}\n      closeOnOverlayClick={false}\n      title={stepTitle[step].title}\n      titleStyleProps={{ px: '1rem' }}\n    >\n      <ModalCloseButton size=\"sm\" />\n      <ModalBody px=\"1rem\" pt=\"0\" pb=\"1.5rem\">\n        <SmallText color=\"gray.500\">{stepTitle[step].subtitle}</SmallText>\n        <>\n          {step === 1 && (\n            <StepOne type={payload.type} connections={connections} onNext={handleSubmit} />\n          )}\n          {step === 2 && (\n            <StepTwo\n              type={payload.type}\n              onNext={handleSubmit}\n              resources={resources}\n              onBack={handleGoBack}\n              resource={payload.table_id ?? payload.data_model_id}\n            />\n          )}\n          {step === 3 && (\n            <StepThree\n              onBack={handleGoBack}\n              resources={resources}\n              onNext={handleSubmit}\n              channels={userChannels}\n              filters={payload.filters}\n              isLoading={isCreatingConnection}\n              resourceId={payload.table_id ?? payload.data_model_id}\n            />\n          )}\n        </>\n      </ModalBody>\n    </ModalContainer>\n  );\n};\n\ntype ConnectionType = 'list' | 'segment';\n\nconst StepOne = (props: {\n  type: ConnectionType;\n  connections?: ConnectionModalProps['connections'];\n  onNext(payload: { type: ConnectionType }): void;\n}) => {\n  const { type, onNext, connections } = props;\n  const [selectedType, setSelectedType] = useState<ConnectionType>(type ?? 'list');\n\n  const hasListConnection = !!connections?.find(item => !!item.table_id);\n  const hasDataModelConnection = !!connections?.find(item => !!item.data_model_id);\n\n  return (\n    <>\n      <Stack py=\"0.5rem\" spacing=\"0.2rem\">\n        {!hasListConnection && (\n          <PseudoBox\n            as=\"button\"\n            rounded=\"12px\"\n            p=\"1rem 0.5rem\"\n            _hover={{ bg: 'blue.100' }}\n            onClick={() => setSelectedType('list')}\n            bg={selectedType === 'list' ? 'blue.100' : 'transparent'}\n            color={selectedType === 'list' ? 'blue.500' : 'gray.900'}\n          >\n            <Stack isInline alignItems=\"center\">\n              <Icon name=\"grid2\" size=\"1.7rem\" />\n              <BodyText fontWeight=\"bold\">List</BodyText>\n            </Stack>\n          </PseudoBox>\n        )}\n        {!hasDataModelConnection && (\n          <PseudoBox\n            as=\"button\"\n            rounded=\"12px\"\n            p=\"1rem 0.5rem\"\n            _hover={{ bg: 'blue.100' }}\n            onClick={() => setSelectedType('segment')}\n            bg={selectedType === 'segment' ? 'blue.100' : 'transparent'}\n            color={selectedType === 'segment' ? 'blue.500' : 'gray.900'}\n          >\n            <Stack isInline alignItems=\"center\">\n              <Icon name=\"segment-2\" size=\"2rem\" />\n              <BodyText fontWeight=\"bold\">Data model</BodyText>\n            </Stack>\n          </PseudoBox>\n        )}\n      </Stack>\n      <Button isFullWidth variantColor=\"blue\" onClick={() => onNext({ type: selectedType })}>\n        Next\n      </Button>\n    </>\n  );\n};\n\nconst StepTwo = (props: {\n  onBack(): void;\n  resources: any[];\n  type: ConnectionType;\n  resource?: string | null;\n  onNext(payload: { data_model_id?: string; table_id?: string }): void;\n}) => {\n  const { type, resource, resources: resourcesProps, onNext, onBack } = props;\n\n  const [resources, setResources] = useState(resourcesProps);\n  const [selectedResource, setSelectedResource] = useState(resource ?? '');\n\n  const handleChange = (value: string) => {\n    if (value) {\n      setResources(\n        resources.filter(({ name }) => name.toLowerCase().includes(value.toLowerCase())),\n      );\n    } else {\n      setResources(resourcesProps);\n    }\n  };\n\n  useEffect(() => {\n    setResources(resourcesProps);\n  }, [resourcesProps]);\n\n  return (\n    <>\n      <Box pt=\"0.5rem\">\n        <InboxSearch showButton={false} onSearch={handleChange} />\n      </Box>\n      <Stack py=\"0.5rem\" spacing=\"0.2rem\" height=\"200px\" overflow=\"auto\">\n        {resources.map(resource => (\n          <PseudoBox\n            as=\"button\"\n            rounded=\"12px\"\n            p=\"1rem 0.5rem\"\n            key={resource.id}\n            _hover={{ bg: 'blue.100' }}\n            onClick={() => setSelectedResource(resource.id)}\n            bg={selectedResource === resource.id ? 'blue.100' : 'transparent'}\n            color={selectedResource === resource.id ? 'blue.500' : 'gray.900'}\n          >\n            <Stack isInline alignItems=\"center\">\n              {resource.icon ? (\n                <Box\n                  width=\"40px\"\n                  height=\"40px\"\n                  display=\"flex\"\n                  rounded=\"12px\"\n                  className=\"box\"\n                  alignItems=\"center\"\n                  bg={resource.color}\n                  justifyContent=\"center\"\n                >\n                  <img\n                    alt=\"list-icon\"\n                    style={{ height: '20px' }}\n                    src={`data:image/svg+xml;utf8,${icons[resource.icon].toSvg({\n                      color: 'white',\n                    })}`}\n                  />\n                </Box>\n              ) : (\n                <Icon name=\"segment-2\" size=\"1.7rem\" />\n              )}\n              <BodyText fontWeight=\"bold\">{resource.name}</BodyText>\n            </Stack>\n          </PseudoBox>\n        ))}\n      </Stack>\n      <Stack isInline width=\"100%\">\n        <Button width=\"48%\" variant=\"outline\" onClick={onBack}>\n          Back\n        </Button>\n        <Button\n          width=\"48%\"\n          isFullWidth\n          variantColor=\"blue\"\n          isDisabled={!selectedResource}\n          onClick={() => {\n            let data_model_id, table_id;\n            if (type === 'list') table_id = selectedResource;\n            if (type === 'segment') data_model_id = selectedResource;\n            onNext({ data_model_id, table_id });\n          }}\n        >\n          Next\n        </Button>\n      </Stack>\n    </>\n  );\n};\n\nconst StepThree = (props: {\n  onBack(): void;\n  filters: any[];\n  resources: any[];\n  channels: Channel[];\n  isLoading?: boolean;\n  segmentId?: string | null;\n  resourceId?: string | null;\n  onNext(payload: { filters: any }): void;\n}) => {\n  const {\n    onNext,\n    onBack,\n    channels,\n    resources,\n    isLoading,\n    resourceId,\n    filters: filtersProp,\n  } = props;\n\n  const [filters, setFilters] = useState<any[]>(filtersProp ?? []);\n\n  const selectedResourceData = resources.find(item => item.id === resourceId);\n\n  const handleFilterChange = (filterData?: any, channel?: Channel) => {\n    let newFilters = filters;\n    const isChannelAdded = !!filters.find(filter => filter.channel === channel);\n    if (isChannelAdded) {\n      newFilters = filters.map(filter => {\n        if (filter.channel === channel) {\n          return {\n            ...filterData,\n            channel,\n          };\n        }\n        return filter;\n      });\n    } else {\n      newFilters = [...filters, { ...filterData, channel }];\n    }\n    setFilters(newFilters);\n  };\n\n  const renderResourceColumns = (item: any, _?: number, channel?: Channel) => {\n    const filter = {\n      value: null,\n      name: item.name,\n      columnID: item.id,\n      operator: 'contains',\n      columnType: item.type,\n    };\n\n    return (\n      <MenuItem key={item.id} onClick={() => handleFilterChange(filter, channel)}>\n        <SmallText color=\"gray.900\">{item.label ?? item.key}</SmallText>\n      </MenuItem>\n    );\n  };\n\n  return (\n    <>\n      <Stack py=\"0.5rem\" spacing=\"0.2rem\">\n        {channels.map((channel: Channel, index) => {\n          const options = channelOptions[channel];\n          const filterColum = filters.find(filter => filter.channel === channel);\n\n          return (\n            <PseudoBox\n              display=\"flex\"\n              p=\"1rem 0.5rem\"\n              key={index.toString()}\n              justifyContent=\"space-between\"\n            >\n              <Stack isInline alignItems=\"center\">\n                <Icon name={options.icon} size=\"1.7rem\" />\n                <BodyText fontWeight=\"bold\">{options.children}</BodyText>\n              </Stack>\n              <Stack isInline alignItems=\"center\">\n                {!!filterColum && (\n                  <Box\n                    w=\"160px\"\n                    rounded=\"4px\"\n                    p=\"0.3rem 1rem\"\n                    borderWidth=\"1px\"\n                    borderColor=\"gray.300\"\n                    textTransform=\"capitalize\"\n                  >\n                    <XSmallText color=\"gray.900\">{filterColum.name}</XSmallText>\n                  </Box>\n                )}\n                <Menu\n                  renderItem={(item, index) => renderResourceColumns(item, index, channel)}\n                  options={selectedResourceData.columns}\n                  menuListProps={{\n                    width: '160px',\n                    height: '200px',\n                    overflow: 'auto',\n                    placement: 'right-start',\n                  }}\n                  menuButtonProps={{\n                    px: '0',\n                    minW: 'unset',\n                    children: <Icon size=\"1rem\" color=\"#333333\" name=\"chevron-down\" />,\n                  }}\n                />\n              </Stack>\n            </PseudoBox>\n          );\n        })}\n      </Stack>\n      <Stack isInline width=\"100%\">\n        <Button width=\"48%\" variant=\"outline\" onClick={onBack}>\n          Back\n        </Button>\n        <Button\n          width=\"48%\"\n          isFullWidth\n          variantColor=\"blue\"\n          isLoading={isLoading}\n          isDisabled={isEmpty(filters)}\n          onClick={() =>\n            onNext({\n              filters,\n            })\n          }\n        >\n          Next\n        </Button>\n      </Stack>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}