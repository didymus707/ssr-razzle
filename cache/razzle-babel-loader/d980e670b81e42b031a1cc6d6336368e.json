{"ast":null,"code":"const _excluded = [\"type\", \"body\"],\n      _excluded2 = [\"amount\"];\nvar _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/components/messages/ConversationThreadFooter.tsx\";\nvar __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Stack, useToast } from '@chakra-ui/core';\nimport { selectOtherOrgMembers } from 'app/authenticated-app/settings/slices';\nimport { html2Text } from 'app/authenticated-app/marketing/templates/templates.utils';\nimport { ToastBox } from 'app/components';\nimport { selectProfile, selectUserID } from 'app/unauthenticated-app/authentication';\nimport { endOfTomorrow } from 'date-fns';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useSelector } from 'react-redux';\nimport { INITIAL_PAYMENT_REQUEST } from '../..';\nimport { resolveConversationThread, sendMessage, sendPaymentRequest, startThread } from '../../inbox.service';\nimport { useInbox } from '../Provider';\nimport { CommentCompose, EmailMessageCompose, MessageComposeForm } from './compose';\nimport { createRow } from 'app/authenticated-app/tables';\nimport { selectContactList } from 'app/authenticated-app/lists/lists.slice';\nimport { sendAmplitudeData } from 'utils/amplitude';\nexport const ConversationThreadFooter = props => {\n  var _lastMessage$content, _lastMessage$meta, _lastMessage$meta$cc, _lastMessage$meta2, _lastMessage$meta2$bc;\n\n  const {\n    isNewConversation\n  } = useInbox();\n  const {\n    lastMessage,\n    twoWayPayload,\n    text: textProp,\n    setActiveThread,\n    setActiveFilter,\n    setTwoWayPayload,\n    onCloseEmailCompose,\n    thread = {},\n    isTemplateMode: isTemplateModeProp,\n    showEmailCompose = isNewConversation\n  } = props;\n  const {\n    uuid: currentThreadID,\n    receiver,\n    sender = {}\n  } = thread;\n  const {\n    channel_name,\n    uuid: sender_id\n  } = sender;\n  const INITIAL_PAYMENT_ITEM = {\n    name: '',\n    amount: 0,\n    id: new Date().getTime().toString()\n  };\n  const toast = useToast();\n  const queryClient = useQueryClient();\n  const user_id = useSelector(selectUserID);\n  const profile = useSelector(selectProfile);\n  const contactList = useSelector(selectContactList);\n  const otherOrgMembers = useSelector(state => selectOtherOrgMembers(state, {\n    user_id: user_id || ''\n  }));\n  const {\n    0: text,\n    1: setText\n  } = useState(textProp !== null && textProp !== void 0 ? textProp : '');\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const {\n    0: isModalOpened,\n    1: setIsModalOpened\n  } = useState(false);\n  const {\n    0: isTemplateMode,\n    1: setIsTemplateMode\n  } = useState(isTemplateModeProp !== null && isTemplateModeProp !== void 0 ? isTemplateModeProp : false);\n  const [paymentItems, setPaymentItems] = React.useState([INITIAL_PAYMENT_ITEM]);\n  const {\n    0: paymentLinkMeta,\n    1: setPaymentLinkMeta\n  } = useState({\n    provider: {\n      value: 'paystack',\n      text: 'Paystack'\n    },\n    expiry_date: {\n      value: endOfTomorrow().getTime(),\n      text: 'Tomorrow'\n    }\n  });\n  const {\n    0: paymentRequest,\n    1: setPaymentRequest\n  } = useState(INITIAL_PAYMENT_REQUEST);\n  const {\n    0: commentAttachedFiles,\n    1: setCommentAttachedFiles\n  } = useState([]);\n  const threadRef = useRef(null);\n  const textAreaRef = useRef(null);\n  const {\n    mutate: mutateSendMessage\n  } = useMutation(payload => sendMessage(payload), {\n    onMutate: async data => {\n      const {\n        body,\n        body_html,\n        from,\n        bcc,\n        cc,\n        type,\n        files,\n        subject,\n        content_type\n      } = data;\n      const newMessage = {\n        type,\n        meta: {\n          cc: cc ? JSON.parse(cc) : [],\n          bcc: bcc ? JSON.parse(bcc) : []\n        },\n        content: {\n          body,\n          subject,\n          body_html,\n          content_type\n        },\n        attachments: files,\n        author: {\n          uuid: user_id,\n          is_customer: false,\n          platform_nick: from,\n          name: `${profile === null || profile === void 0 ? void 0 : profile.first_name} ${profile === null || profile === void 0 ? void 0 : profile.last_name}`\n        }\n      };\n      await queryClient.cancelQueries(['messages', thread.uuid]);\n      const previousMessages = queryClient.getQueryData(['messages', thread.uuid]);\n      queryClient.setQueryData(['messages', thread.uuid], old => _objectSpread(_objectSpread({}, old), {}, {\n        //@ts-ignore\n        pages: old.pages.map(page => {\n          if (page.meta.page === 1) {\n            return _objectSpread(_objectSpread({}, page), {}, {\n              messages: [newMessage, ...page.messages]\n            });\n          }\n\n          return page;\n        })\n      })); // Return a context object with the snapshotted value\n\n      return {\n        previousMessages\n      };\n    },\n    onError: error => {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => {\n          var _error$message;\n\n          return __jsx(ToastBox, {\n            onClose: onClose,\n            message: (_error$message = error.message) !== null && _error$message !== void 0 ? _error$message : 'Error! Failed to send the message',\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 13\n            }\n          });\n        }\n      });\n    },\n    onSuccess: (data, variables) => {\n      sendAmplitudeData('send-message', variables);\n      queryClient.invalidateQueries(['messages', thread.uuid]);\n      queryClient.invalidateQueries('threads');\n    }\n  });\n  const {\n    mutate: onAddToContactList\n  } = useMutation(({\n    columns,\n    table_id\n  }) => createRow({\n    columns,\n    table_id\n  }), {\n    onError: error => {\n      toast({\n        position: 'bottom-left',\n        render: () => __jsx(ToastBox, {\n          message: error.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }\n        })\n      });\n    }\n  });\n  const {\n    mutate: mutateStartThread\n  } = useMutation(payload => startThread(payload), {\n    onSuccess: (data, variables) => {\n      setActiveFilter === null || setActiveFilter === void 0 ? void 0 : setActiveFilter();\n      setActiveThread === null || setActiveThread === void 0 ? void 0 : setActiveThread(data.thread);\n      setTwoWayPayload({\n        contactName: '',\n        contact_id: undefined,\n        senderPlatformNick: ''\n      });\n\n      if (variables.user_nick) {\n        const columns = getContactRowData(variables);\n        onAddToContactList({\n          columns,\n          table_id: contactList.id\n        });\n      }\n\n      sendAmplitudeData('new-message', variables);\n    },\n    onError: error => {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => {\n          var _error$message2;\n\n          return __jsx(ToastBox, {\n            onClose: onClose,\n            message: (_error$message2 = error.message) !== null && _error$message2 !== void 0 ? _error$message2 : 'Error! Failed to send message',\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 13\n            }\n          });\n        }\n      });\n    }\n  });\n  const {\n    isLoading: isCreatingLink,\n    mutate: mutateSendPaymentRequest\n  } = useMutation(({\n    payload\n  }) => sendPaymentRequest(payload), {\n    onError: error => {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => {\n          var _error$message3;\n\n          return __jsx(ToastBox, {\n            onClose: onClose,\n            message: (_error$message3 = error.message) !== null && _error$message3 !== void 0 ? _error$message3 : 'Error! Failed to send payment request',\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 11\n            }\n          });\n        }\n      });\n    },\n    onSuccess: (data, variables) => {\n      setIsModalOpened(false);\n\n      if (variables.callback) {\n        variables.callback();\n      } else {\n        setPaymentRequest(INITIAL_PAYMENT_REQUEST);\n      }\n\n      if (isNewConversation) {\n        setActiveFilter === null || setActiveFilter === void 0 ? void 0 : setActiveFilter();\n        setActiveThread === null || setActiveThread === void 0 ? void 0 : setActiveThread(data.thread);\n      } else {\n        queryClient.invalidateQueries(['messages', thread.uuid]);\n        queryClient.invalidateQueries('threads');\n      }\n\n      sendAmplitudeData('send-payment-request', variables.payload);\n    }\n  });\n  const {\n    mutate: closeMutate\n  } = useMutation(thread => resolveConversationThread(thread), {\n    onMutate: async newThread => {\n      await queryClient.cancelQueries(['threads', newThread.uuid]);\n      const previousThread = queryClient.getQueryData(['threads', thread.uuid]);\n      queryClient.setQueryData(['threads', newThread.uuid], newThread);\n      return {\n        previousThread,\n        newThread\n      };\n    },\n    onError: (err, newThread, context) => {\n      queryClient.setQueryData(['threads', context.newThread.uuid], context.previousTodo);\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: err.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 36\n          }\n        })\n      });\n    },\n    onSettled: newThread => {\n      queryClient.invalidateQueries(['threads', newThread.uuid]);\n    }\n  });\n\n  const getContactRowData = data => {\n    const nameColumn = contactList.columns.find(item => item.name.toLowerCase() === 'name');\n    const phoneNumberColumn = contactList.columns.find(item => item.type.toLowerCase() === 'phone number');\n    const emailColumn = contactList.columns.find(item => item.type.toLowerCase() === 'email');\n    let columns = {\n      [nameColumn.id]: data === null || data === void 0 ? void 0 : data.contact_name\n    };\n\n    if (channel_name === 'email' && emailColumn) {\n      columns[emailColumn.id] = data === null || data === void 0 ? void 0 : data.user_nick;\n    }\n\n    if (phoneNumberColumn && (channel_name === 'phone' || channel_name === 'whatsapp' || channel_name === 'whatsappWeb')) {\n      columns[phoneNumberColumn.id] = data === null || data === void 0 ? void 0 : data.user_nick;\n    }\n\n    return columns;\n  };\n\n  const handleTextChange = (text, isTemplateMode) => {\n    var _textAreaRef$current;\n\n    setText(html2Text(text)); // setIsTemplateMode(!!isTemplateMode);\n\n    (_textAreaRef$current = textAreaRef.current) === null || _textAreaRef$current === void 0 ? void 0 : _textAreaRef$current.focus();\n  };\n\n  const handleSendMessage = async payload => {\n    const {\n      type,\n      body: bodyText\n    } = payload,\n          rest = _objectWithoutProperties(payload, _excluded);\n\n    const body = html2Text(bodyText);\n    const body_html = channel_name === 'email' ? bodyText : undefined;\n\n    const data = _objectSpread(_objectSpread({}, rest), {}, {\n      body,\n      body_html\n    });\n\n    if (isNewConversation) {\n      mutateStartThread(data);\n    } else {\n      mutateSendMessage(data);\n    }\n  };\n\n  const handleSendComment = payload => {\n    var _payload$body;\n\n    const body = html2Text((_payload$body = payload === null || payload === void 0 ? void 0 : payload.body) !== null && _payload$body !== void 0 ? _payload$body : '');\n\n    const data = _objectSpread(_objectSpread({}, payload), {}, {\n      body,\n      type: 'comment'\n    });\n\n    mutateSendMessage(data);\n    sendAmplitudeData('send-comment', data);\n  };\n\n  const handleSendPaymentRequest = (paymentRequest, callback) => {\n    const {\n      credential_id,\n      senderPlatformNick\n    } = twoWayPayload;\n    let payload = {\n      request: _objectSpread(_objectSpread({}, paymentRequest), {}, {\n        items: paymentRequest.items.map(_ref => {\n          let {\n            amount\n          } = _ref,\n              rest = _objectWithoutProperties(_ref, _excluded2);\n\n          return _objectSpread(_objectSpread({}, rest), {}, {\n            amount_unit: parseFloat(amount)\n          });\n        })\n      })\n    };\n\n    if (isNewConversation) {\n      payload = _objectSpread(_objectSpread({}, payload), {}, {\n        credential_id,\n        user_nick: senderPlatformNick,\n        receiver_id: thread.receiver.uuid\n      });\n    } else {\n      payload = _objectSpread(_objectSpread({}, payload), {}, {\n        thread_id: thread.uuid\n      });\n    }\n\n    mutateSendPaymentRequest({\n      payload,\n      callback\n    });\n  };\n\n  const handleSendAndClose = payload => {\n    try {\n      if (thread) {\n        mutateSendMessage(payload);\n        closeMutate(_objectSpread(_objectSpread({}, thread), {}, {\n          state: 'resolved'\n        }));\n        sendAmplitudeData('close-conversation');\n      }\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  };\n\n  useEffect(() => {\n    setIsTemplateMode(isTemplateModeProp !== null && isTemplateModeProp !== void 0 ? isTemplateModeProp : false);\n  }, [isTemplateModeProp]);\n  useEffect(() => {\n    if (textAreaRef.current && !isNewConversation) {\n      textAreaRef.current.focus();\n    }\n\n    setText('');\n  }, [thread, isNewConversation]);\n  useEffect(() => {\n    if (isNewConversation) {\n      setText(textProp !== null && textProp !== void 0 ? textProp : '');\n    }\n  }, [textProp, isNewConversation]);\n  return __jsx(Stack, {\n    spacing: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 5\n    }\n  }, channel_name !== 'email' ? __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 9\n    }\n  }, __jsx(MessageComposeForm, {\n    text: text,\n    thread: thread,\n    threadRef: threadRef,\n    textAreaRef: textAreaRef,\n    setText: handleTextChange,\n    onSubmit: handleSendMessage,\n    twoWayPayload: twoWayPayload,\n    isModalOpened: isModalOpened,\n    isTemplateMode: isTemplateMode,\n    isCreatingLink: isCreatingLink,\n    sendAndClose: handleSendAndClose,\n    setIsModalOpened: setIsModalOpened,\n    setTwoWayPayload: setTwoWayPayload,\n    setIsTemplateMode: setIsTemplateMode,\n    currentThreadID: currentThreadID !== null && currentThreadID !== void 0 ? currentThreadID : 'new',\n    onSendPaymentRequest: handleSendPaymentRequest,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 11\n    }\n  })) : showEmailCompose && __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 11\n    }\n  }, __jsx(EmailMessageCompose, {\n    thread: thread,\n    channel: channel_name,\n    sender_id: sender_id !== null && sender_id !== void 0 ? sender_id : '',\n    onSubmit: handleSendMessage,\n    twoWayPayload: twoWayPayload,\n    sendAndClose: handleSendAndClose,\n    onCloseCompose: onCloseEmailCompose,\n    initialValues: {\n      text,\n      subject: isNewConversation ? '' : lastMessage === null || lastMessage === void 0 ? void 0 : (_lastMessage$content = lastMessage.content) === null || _lastMessage$content === void 0 ? void 0 : _lastMessage$content.subject,\n      cc: isNewConversation ? undefined : lastMessage === null || lastMessage === void 0 ? void 0 : (_lastMessage$meta = lastMessage.meta) === null || _lastMessage$meta === void 0 ? void 0 : (_lastMessage$meta$cc = _lastMessage$meta.cc) === null || _lastMessage$meta$cc === void 0 ? void 0 : _lastMessage$meta$cc.join(', '),\n      to: isNewConversation ? receiver.platform_nick : sender === null || sender === void 0 ? void 0 : sender.platform_nick,\n      bcc: isNewConversation ? undefined : lastMessage === null || lastMessage === void 0 ? void 0 : (_lastMessage$meta2 = lastMessage.meta) === null || _lastMessage$meta2 === void 0 ? void 0 : (_lastMessage$meta2$bc = _lastMessage$meta2.bcc) === null || _lastMessage$meta2$bc === void 0 ? void 0 : _lastMessage$meta2$bc.join(', '),\n      from: isNewConversation ? sender.platform_nick : receiver === null || receiver === void 0 ? void 0 : receiver.platform_nick\n    },\n    requestProps: {\n      paymentItems,\n      isModalOpened,\n      isCreatingLink,\n      paymentRequest,\n      paymentLinkMeta,\n      setPaymentItems,\n      setIsModalOpened,\n      setPaymentRequest,\n      setPaymentLinkMeta,\n      onSendPaymentRequest: handleSendPaymentRequest\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 13\n    }\n  })), !isNewConversation && __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 9\n    }\n  }, __jsx(CommentCompose, {\n    thread: thread,\n    text: commentText,\n    setText: setCommentText,\n    onSubmit: handleSendComment,\n    attachedFiles: commentAttachedFiles,\n    setAttachedFiles: setCommentAttachedFiles,\n    mentions: otherOrgMembers.map(item => ({\n      name: `${item.first_name} ${item.last_name}`\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 11\n    }\n  })));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/components/messages/ConversationThreadFooter.tsx"],"names":["Box","Stack","useToast","selectOtherOrgMembers","html2Text","ToastBox","selectProfile","selectUserID","endOfTomorrow","React","useEffect","useRef","useState","useMutation","useQueryClient","useSelector","INITIAL_PAYMENT_REQUEST","resolveConversationThread","sendMessage","sendPaymentRequest","startThread","useInbox","CommentCompose","EmailMessageCompose","MessageComposeForm","createRow","selectContactList","sendAmplitudeData","ConversationThreadFooter","props","isNewConversation","lastMessage","twoWayPayload","text","textProp","setActiveThread","setActiveFilter","setTwoWayPayload","onCloseEmailCompose","thread","isTemplateMode","isTemplateModeProp","showEmailCompose","uuid","currentThreadID","receiver","sender","channel_name","sender_id","INITIAL_PAYMENT_ITEM","name","amount","id","Date","getTime","toString","toast","queryClient","user_id","profile","contactList","otherOrgMembers","state","setText","commentText","setCommentText","isModalOpened","setIsModalOpened","setIsTemplateMode","paymentItems","setPaymentItems","paymentLinkMeta","setPaymentLinkMeta","provider","value","expiry_date","paymentRequest","setPaymentRequest","commentAttachedFiles","setCommentAttachedFiles","threadRef","textAreaRef","mutate","mutateSendMessage","payload","onMutate","data","body","body_html","from","bcc","cc","type","files","subject","content_type","newMessage","meta","JSON","parse","content","attachments","author","is_customer","platform_nick","first_name","last_name","cancelQueries","previousMessages","getQueryData","setQueryData","old","pages","map","page","messages","onError","error","position","render","onClose","message","onSuccess","variables","invalidateQueries","onAddToContactList","columns","table_id","mutateStartThread","contactName","contact_id","undefined","senderPlatformNick","user_nick","getContactRowData","isLoading","isCreatingLink","mutateSendPaymentRequest","callback","closeMutate","newThread","previousThread","err","context","previousTodo","onSettled","nameColumn","find","item","toLowerCase","phoneNumberColumn","emailColumn","contact_name","handleTextChange","current","focus","handleSendMessage","bodyText","rest","handleSendComment","handleSendPaymentRequest","credential_id","request","items","amount_unit","parseFloat","receiver_id","thread_id","handleSendAndClose","join","to","onSendPaymentRequest"],"mappings":"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","sourcesContent":["import { Box, Stack, useToast } from '@chakra-ui/core';\nimport { selectOtherOrgMembers } from 'app/authenticated-app/settings/slices';\nimport { html2Text } from 'app/authenticated-app/marketing/templates/templates.utils';\nimport { ToastBox } from 'app/components';\nimport { selectProfile, selectUserID } from 'app/unauthenticated-app/authentication';\nimport { AxiosError } from 'axios';\nimport { endOfTomorrow } from 'date-fns';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useSelector } from 'react-redux';\nimport { RootState } from 'root';\nimport { INITIAL_PAYMENT_REQUEST } from '../..';\nimport {\n  resolveConversationThread,\n  sendMessage,\n  sendPaymentRequest,\n  startThread,\n} from '../../inbox.service';\nimport {\n  PaymentItemSchema,\n  PaymentLinkMetaSchema,\n  PaymentRequestSchema,\n  ThreadSchema,\n} from '../../inbox.types';\nimport { useInbox } from '../Provider';\nimport {\n  CommentCompose,\n  EmailMessageCompose,\n  MessageComposeForm,\n  MessageComposeFormProps,\n} from './compose';\nimport { createRow } from 'app/authenticated-app/tables';\nimport { selectContactList } from 'app/authenticated-app/lists/lists.slice';\nimport { sendAmplitudeData } from 'utils/amplitude';\n\nexport type ConversationThreadFooterProps = {\n  text?: string;\n  thread?: ThreadSchema;\n  setActiveFilter?(): void;\n  isTemplateMode?: boolean;\n  showEmailCompose?: boolean;\n  onCloseEmailCompose?(): void;\n  lastMessage?: ThreadSchema['last_message'];\n  twoWayPayload: MessageComposeFormProps['twoWayPayload'];\n  setTwoWayPayload: MessageComposeFormProps['setTwoWayPayload'];\n  setActiveThread?: React.Dispatch<React.SetStateAction<ThreadSchema | undefined>>;\n};\n\nexport const ConversationThreadFooter = (props: ConversationThreadFooterProps) => {\n  const { isNewConversation } = useInbox();\n  const {\n    lastMessage,\n    twoWayPayload,\n    text: textProp,\n    setActiveThread,\n    setActiveFilter,\n    setTwoWayPayload,\n    onCloseEmailCompose,\n    thread = {} as ThreadSchema,\n    isTemplateMode: isTemplateModeProp,\n    showEmailCompose = isNewConversation,\n  } = props;\n  const { uuid: currentThreadID, receiver, sender = {} as ThreadSchema['sender'] } = thread;\n  const { channel_name, uuid: sender_id } = sender;\n\n  const INITIAL_PAYMENT_ITEM: PaymentItemSchema = {\n    name: '',\n    amount: 0,\n    id: new Date().getTime().toString(),\n  };\n\n  const toast = useToast();\n  const queryClient = useQueryClient();\n  const user_id = useSelector(selectUserID);\n  const profile = useSelector(selectProfile);\n  const contactList = useSelector(selectContactList);\n  const otherOrgMembers = useSelector((state: RootState) =>\n    selectOtherOrgMembers(state, { user_id: user_id || '' }),\n  );\n\n  const [text, setText] = useState(textProp ?? '');\n  const [commentText, setCommentText] = useState('');\n  const [isModalOpened, setIsModalOpened] = useState(false);\n  const [isTemplateMode, setIsTemplateMode] = useState(isTemplateModeProp ?? false);\n  const [paymentItems, setPaymentItems] = React.useState<PaymentItemSchema[]>([\n    INITIAL_PAYMENT_ITEM,\n  ]);\n  const [paymentLinkMeta, setPaymentLinkMeta] = useState<PaymentLinkMetaSchema>({\n    provider: { value: 'paystack', text: 'Paystack' },\n    expiry_date: { value: endOfTomorrow().getTime(), text: 'Tomorrow' },\n  });\n  const [paymentRequest, setPaymentRequest] = useState<PaymentRequestSchema>(\n    INITIAL_PAYMENT_REQUEST,\n  );\n  const [commentAttachedFiles, setCommentAttachedFiles] = useState<File[]>([]);\n\n  const threadRef = useRef<HTMLDivElement>(null);\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n\n  const { mutate: mutateSendMessage } = useMutation<any, AxiosError, any, any>(\n    (payload: any) => sendMessage(payload),\n    {\n      onMutate: async data => {\n        const { body, body_html, from, bcc, cc, type, files, subject, content_type } = data;\n        const newMessage = {\n          type,\n          meta: {\n            cc: cc ? JSON.parse(cc) : [],\n            bcc: bcc ? JSON.parse(bcc) : [],\n          },\n          content: {\n            body,\n            subject,\n            body_html,\n            content_type,\n          },\n          attachments: files,\n          author: {\n            uuid: user_id,\n            is_customer: false,\n            platform_nick: from,\n            name: `${profile?.first_name} ${profile?.last_name}`,\n          },\n        };\n        await queryClient.cancelQueries(['messages', thread.uuid]);\n        const previousMessages = queryClient.getQueryData(['messages', thread.uuid]);\n        queryClient.setQueryData(['messages', thread.uuid], old => ({\n          //@ts-ignore\n          ...old,\n          //@ts-ignore\n          pages: old.pages.map(page => {\n            if (page.meta.page === 1) {\n              return {\n                ...page,\n                messages: [newMessage, ...page.messages],\n              };\n            }\n            return page;\n          }),\n        }));\n\n        // Return a context object with the snapshotted value\n        return { previousMessages };\n      },\n      onError: error => {\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => (\n            <ToastBox\n              onClose={onClose}\n              message={error.message ?? 'Error! Failed to send the message'}\n            />\n          ),\n        });\n      },\n      onSuccess: (data, variables) => {\n        sendAmplitudeData('send-message', variables);\n        queryClient.invalidateQueries(['messages', thread.uuid]);\n        queryClient.invalidateQueries('threads');\n      },\n    },\n  );\n\n  const { mutate: onAddToContactList } = useMutation<any, AxiosError, any, any>(\n    ({ columns, table_id }) => createRow({ columns, table_id }),\n    {\n      onError: error => {\n        toast({\n          position: 'bottom-left',\n          render: () => <ToastBox message={error.message} />,\n        });\n      },\n    },\n  );\n\n  const { mutate: mutateStartThread } = useMutation<any, AxiosError, any, any>(\n    (payload: any) => startThread(payload),\n    {\n      onSuccess: (data, variables) => {\n        setActiveFilter?.();\n        setActiveThread?.(data.thread);\n        setTwoWayPayload({\n          contactName: '',\n          contact_id: undefined,\n          senderPlatformNick: '',\n        });\n\n        if (variables.user_nick) {\n          const columns = getContactRowData(variables);\n          onAddToContactList({ columns, table_id: contactList.id });\n        }\n        sendAmplitudeData('new-message', variables);\n      },\n      onError: error => {\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => (\n            <ToastBox\n              onClose={onClose}\n              message={error.message ?? 'Error! Failed to send message'}\n            />\n          ),\n        });\n      },\n    },\n  );\n\n  const { isLoading: isCreatingLink, mutate: mutateSendPaymentRequest } = useMutation<\n    any,\n    AxiosError,\n    any,\n    any\n  >(({ payload }: any) => sendPaymentRequest(payload), {\n    onError: error => {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox\n            onClose={onClose}\n            message={error.message ?? 'Error! Failed to send payment request'}\n          />\n        ),\n      });\n    },\n    onSuccess: (data, variables) => {\n      setIsModalOpened(false);\n      if (variables.callback) {\n        variables.callback();\n      } else {\n        setPaymentRequest(INITIAL_PAYMENT_REQUEST);\n      }\n      if (isNewConversation) {\n        setActiveFilter?.();\n        setActiveThread?.(data.thread);\n      } else {\n        queryClient.invalidateQueries(['messages', thread.uuid]);\n        queryClient.invalidateQueries('threads');\n      }\n      sendAmplitudeData('send-payment-request', variables.payload);\n    },\n  });\n\n  const { mutate: closeMutate } = useMutation<any, AxiosError, any, any>(\n    (thread: ThreadSchema) => resolveConversationThread(thread),\n    {\n      onMutate: async newThread => {\n        await queryClient.cancelQueries(['threads', newThread.uuid]);\n        const previousThread = queryClient.getQueryData(['threads', thread.uuid]);\n        queryClient.setQueryData(['threads', newThread.uuid], newThread);\n        return { previousThread, newThread };\n      },\n      onError: (err, newThread, context) => {\n        queryClient.setQueryData(['threads', context.newThread.uuid], context.previousTodo);\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => <ToastBox onClose={onClose} message={err.message} />,\n        });\n      },\n      onSettled: newThread => {\n        queryClient.invalidateQueries(['threads', newThread.uuid]);\n      },\n    },\n  );\n\n  const getContactRowData = (data: any) => {\n    const nameColumn = contactList.columns.find((item: any) => item.name.toLowerCase() === 'name');\n    const phoneNumberColumn = contactList.columns.find(\n      (item: any) => item.type.toLowerCase() === 'phone number',\n    );\n    const emailColumn = contactList.columns.find(\n      (item: any) => item.type.toLowerCase() === 'email',\n    );\n\n    let columns = {\n      [nameColumn.id]: data?.contact_name,\n    };\n\n    if (channel_name === 'email' && emailColumn) {\n      columns[emailColumn.id] = data?.user_nick;\n    }\n    if (\n      phoneNumberColumn &&\n      (channel_name === 'phone' || channel_name === 'whatsapp' || channel_name === 'whatsappWeb')\n    ) {\n      columns[phoneNumberColumn.id] = data?.user_nick;\n    }\n\n    return columns;\n  };\n\n  const handleTextChange = (text: string, isTemplateMode?: boolean) => {\n    setText(html2Text(text));\n    // setIsTemplateMode(!!isTemplateMode);\n    textAreaRef.current?.focus();\n  };\n\n  const handleSendMessage = async (payload?: any) => {\n    const { type, body: bodyText, ...rest } = payload;\n    const body = html2Text(bodyText);\n    const body_html = channel_name === 'email' ? bodyText : undefined;\n    const data = { ...rest, body, body_html };\n\n    if (isNewConversation) {\n      mutateStartThread(data);\n    } else {\n      mutateSendMessage(data);\n    }\n  };\n\n  const handleSendComment = (payload?: { body?: string; thread_id?: string; files?: File[] }) => {\n    const body = html2Text(payload?.body ?? '');\n    const data = { ...payload, body, type: 'comment' };\n\n    mutateSendMessage(data);\n    sendAmplitudeData('send-comment', data);\n  };\n\n  const handleSendPaymentRequest = (paymentRequest: any, callback?: () => void) => {\n    const { credential_id, senderPlatformNick } = twoWayPayload;\n    let payload: any = {\n      request: {\n        ...paymentRequest,\n        items: paymentRequest.items.map(({ amount, ...rest }: any) => ({\n          ...rest,\n          amount_unit: parseFloat(amount),\n        })),\n      },\n    };\n    if (isNewConversation) {\n      payload = {\n        ...payload,\n        credential_id,\n        user_nick: senderPlatformNick,\n        receiver_id: thread.receiver.uuid,\n      };\n    } else {\n      payload = {\n        ...payload,\n        thread_id: thread.uuid,\n      };\n    }\n    mutateSendPaymentRequest({ payload, callback });\n  };\n\n  const handleSendAndClose = (payload: any) => {\n    try {\n      if (thread) {\n        mutateSendMessage(payload);\n        closeMutate({ ...thread, state: 'resolved' });\n        sendAmplitudeData('close-conversation');\n      }\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n  };\n\n  useEffect(() => {\n    setIsTemplateMode(isTemplateModeProp ?? false);\n  }, [isTemplateModeProp]);\n\n  useEffect(() => {\n    if (textAreaRef.current && !isNewConversation) {\n      textAreaRef.current.focus();\n    }\n    setText('');\n  }, [thread, isNewConversation]);\n\n  useEffect(() => {\n    if (isNewConversation) {\n      setText(textProp ?? '');\n    }\n  }, [textProp, isNewConversation]);\n\n  return (\n    <Stack spacing=\"1.5rem\">\n      {channel_name !== 'email' ? (\n        <Box>\n          <MessageComposeForm\n            text={text}\n            thread={thread}\n            threadRef={threadRef}\n            textAreaRef={textAreaRef}\n            setText={handleTextChange}\n            onSubmit={handleSendMessage}\n            twoWayPayload={twoWayPayload}\n            isModalOpened={isModalOpened}\n            isTemplateMode={isTemplateMode}\n            isCreatingLink={isCreatingLink}\n            sendAndClose={handleSendAndClose}\n            setIsModalOpened={setIsModalOpened}\n            setTwoWayPayload={setTwoWayPayload}\n            setIsTemplateMode={setIsTemplateMode}\n            currentThreadID={currentThreadID ?? 'new'}\n            onSendPaymentRequest={handleSendPaymentRequest}\n          />\n        </Box>\n      ) : (\n        showEmailCompose && (\n          <Box>\n            <EmailMessageCompose\n              thread={thread}\n              channel={channel_name}\n              sender_id={sender_id ?? ''}\n              onSubmit={handleSendMessage}\n              twoWayPayload={twoWayPayload}\n              sendAndClose={handleSendAndClose}\n              onCloseCompose={onCloseEmailCompose}\n              initialValues={{\n                text,\n                subject: isNewConversation ? '' : lastMessage?.content?.subject,\n                cc: isNewConversation ? undefined : lastMessage?.meta?.cc?.join(', '),\n                to: isNewConversation ? receiver.platform_nick : sender?.platform_nick,\n                bcc: isNewConversation ? undefined : lastMessage?.meta?.bcc?.join(', '),\n                from: isNewConversation ? sender.platform_nick : receiver?.platform_nick,\n              }}\n              requestProps={{\n                paymentItems,\n                isModalOpened,\n                isCreatingLink,\n                paymentRequest,\n                paymentLinkMeta,\n                setPaymentItems,\n                setIsModalOpened,\n                setPaymentRequest,\n                setPaymentLinkMeta,\n                onSendPaymentRequest: handleSendPaymentRequest,\n              }}\n            />\n          </Box>\n        )\n      )}\n      {!isNewConversation && (\n        <Box>\n          <CommentCompose\n            thread={thread}\n            text={commentText}\n            setText={setCommentText}\n            onSubmit={handleSendComment}\n            attachedFiles={commentAttachedFiles}\n            setAttachedFiles={setCommentAttachedFiles}\n            mentions={otherOrgMembers.map(item => ({\n              name: `${item.first_name} ${item.last_name}`,\n            }))}\n          />\n        </Box>\n      )}\n    </Stack>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}