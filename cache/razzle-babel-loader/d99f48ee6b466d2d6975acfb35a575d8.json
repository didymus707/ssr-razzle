{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/components/conversation/ConversationList.tsx\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Skeleton, Spinner, Stack } from '@chakra-ui/core';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectOrganisationID } from '../../../../unauthenticated-app/authentication';\nimport { fetchThreadsByState, makeSelectStatusByState, selectThreadIdsByState, updateHasMore } from '../../slices';\nimport { ConversationItem } from './ConversationItem';\nimport emptyViewImage from '../no-thread.svg';\nexport function ConversationList({\n  heading = '',\n  highlight,\n  list\n}) {\n  const selectStatus = useMemo(makeSelectStatusByState, []);\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState(false);\n  const dispatch = useDispatch();\n  const organisation_id = useSelector(selectOrganisationID);\n  const listIDs = useSelector(state => selectThreadIdsByState(state, {\n    state: heading,\n    organisation_id: organisation_id || ''\n  }));\n  const {\n    meta,\n    hasMore\n  } = useSelector(state => selectStatus(state, {\n    statusState: heading,\n    organisation_id: organisation_id || ''\n  }));\n\n  const fetchMoreData = async () => {\n    if (organisation_id && !list) {\n      const {\n        count,\n        page\n      } = meta;\n\n      if (count !== 0 && Math.ceil(count / 15 - page) === 0) {\n        return dispatch(updateHasMore({\n          state: heading,\n          organisation_id: organisation_id || ''\n        }));\n      }\n\n      if (listIDs.length === 0) {\n        setLoading(true);\n      }\n\n      await dispatch(fetchThreadsByState({\n        organisation_id,\n        state: heading,\n        page: meta.page + 1\n      }));\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchMoreData(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [organisation_id]);\n  return __jsx(Stack, {\n    className: \"thread-list\",\n    flexDirection: \"column\",\n    spacing: \".25rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, listIDs.length > 0 || (list || []).length > 0 ? __jsx(InfiniteScroll, {\n    dataLength: list ? list.length : listIDs.length,\n    next: fetchMoreData,\n    scrollableTarget: \"scrollableDiv\",\n    hasMore: hasMore,\n    loader: __jsx(Box, {\n      textAlign: \"center\",\n      paddingTop: \"2rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, __jsx(Spinner, {\n      color: \"blue.500\",\n      size: \"md\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, (list ? list : listIDs).map(itemID => isLoading ? Array.from({\n    length: 15\n  }, (v, i) => __jsx(Box, {\n    px: \"1rem\",\n    borderBottomWidth: \"1px\",\n    key: `${i.toString()}-${new Date().getTime()}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, __jsx(Skeleton, {\n    height: \"10px\",\n    width: \"80%\",\n    my: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 19\n    }\n  }), __jsx(Skeleton, {\n    height: \"10px\",\n    my: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 19\n    }\n  }))) : __jsx(ConversationItem, {\n    key: `${heading}-${itemID}`,\n    highlight: highlight,\n    itemID: itemID,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }))) : __jsx(Flex, {\n    marginTop: \"8.625rem\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, __jsx(Image, {\n    src: emptyViewImage,\n    size: \"4rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/components/conversation/ConversationList.tsx"],"names":["Box","Flex","Image","Skeleton","Spinner","Stack","React","useEffect","useMemo","useState","InfiniteScroll","useDispatch","useSelector","selectOrganisationID","fetchThreadsByState","makeSelectStatusByState","selectThreadIdsByState","updateHasMore","ConversationItem","emptyViewImage","ConversationList","heading","highlight","list","selectStatus","isLoading","setLoading","dispatch","organisation_id","listIDs","state","meta","hasMore","statusState","fetchMoreData","count","page","Math","ceil","length","map","itemID","Array","from","v","i","toString","Date","getTime"],"mappings":"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","sourcesContent":["import { Box, Flex, Image, Skeleton, Spinner, Stack } from '@chakra-ui/core';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../../../../root';\nimport { selectOrganisationID } from '../../../../unauthenticated-app/authentication';\nimport { ConversationListProps, ThreadSchema } from '../../inbox.types';\nimport {\n  fetchThreadsByState,\n  makeSelectStatusByState,\n  selectThreadIdsByState,\n  updateHasMore,\n} from '../../slices';\nimport { ConversationItem } from './ConversationItem';\nimport emptyViewImage from '../no-thread.svg';\n\nexport function ConversationList({ heading = '', highlight, list }: ConversationListProps) {\n  const selectStatus = useMemo(makeSelectStatusByState, []);\n  const [isLoading, setLoading] = useState(false);\n\n  const dispatch = useDispatch();\n  const organisation_id = useSelector(selectOrganisationID);\n  const listIDs = useSelector((state: RootState) =>\n    selectThreadIdsByState(state, {\n      state: heading as ThreadSchema['state'],\n      organisation_id: organisation_id || '',\n    }),\n  );\n  const { meta, hasMore } = useSelector((state: RootState) =>\n    selectStatus(state, { statusState: heading, organisation_id: organisation_id || '' }),\n  );\n\n  const fetchMoreData = async () => {\n    if (organisation_id && !list) {\n      const { count, page } = meta;\n      if (count !== 0 && Math.ceil(count / 15 - page) === 0) {\n        return dispatch(\n          updateHasMore({\n            state: heading as ThreadSchema['state'],\n            organisation_id: organisation_id || '',\n          }),\n        );\n      }\n      if (listIDs.length === 0) {\n        setLoading(true);\n      }\n\n      await dispatch(\n        fetchThreadsByState({\n          organisation_id,\n          state: heading,\n          page: meta.page + 1,\n        }),\n      );\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchMoreData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [organisation_id]);\n\n  return (\n    <Stack className=\"thread-list\" flexDirection=\"column\" spacing=\".25rem\">\n      {listIDs.length > 0 || (list || []).length > 0 ? (\n        <InfiniteScroll\n          dataLength={list ? list.length : listIDs.length}\n          next={fetchMoreData}\n          scrollableTarget=\"scrollableDiv\"\n          hasMore={hasMore}\n          loader={\n            <Box textAlign=\"center\" paddingTop=\"2rem\">\n              <Spinner color=\"blue.500\" size=\"md\" />\n            </Box>\n          }\n        >\n          {(list ? list : listIDs).map(itemID =>\n            isLoading ? (\n              Array.from({ length: 15 }, (v, i) => (\n                <Box\n                  px=\"1rem\"\n                  borderBottomWidth=\"1px\"\n                  key={`${i.toString()}-${new Date().getTime()}`}\n                >\n                  <Skeleton height=\"10px\" width=\"80%\" my=\"10px\" />\n                  <Skeleton height=\"10px\" my=\"10px\" />\n                </Box>\n              ))\n            ) : (\n              <ConversationItem\n                key={`${heading}-${itemID}`}\n                highlight={highlight}\n                itemID={itemID}\n              />\n            ),\n          )}\n        </InfiniteScroll>\n      ) : (\n        <Flex marginTop=\"8.625rem\" justifyContent=\"center\" alignItems=\"center\">\n          <Image src={emptyViewImage} size=\"4rem\" />\n        </Flex>\n      )}\n    </Stack>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}