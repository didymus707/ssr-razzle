{"ast":null,"code":"import * as React from 'react';\nimport { arrayMove } from 'react-sortable-hoc';\nimport { PROPERTIES } from '../property';\nimport { SORT_ORDER_LIST } from './sort.data';\nexport const useSort = ({\n  properties,\n  onChange\n}) => {\n  const [sortList, setSortList] = React.useState([]);\n  const SORT_PROPERTIES = properties.map(property => {\n    const selectProperty = PROPERTIES.find(item => item.label.toLowerCase() === property.type.toLowerCase());\n    const propertyIcon = selectProperty && selectProperty.icon;\n    return {\n      label: property.label,\n      value: property.name,\n      icon: propertyIcon\n    };\n  });\n\n  function reset() {\n    setSortList([]);\n  }\n\n  function add() {\n    const newData = [...sortList, {\n      name: SORT_PROPERTIES[0].value,\n      order: SORT_ORDER_LIST[0].value\n    }];\n    setSortList(newData);\n    onChange && onChange(newData);\n  }\n\n  function update(value, index) {\n    const newData = [...sortList];\n    newData[index] = value;\n    setSortList(newData);\n    onChange && onChange(newData);\n  }\n\n  function remove(index) {\n    const newData = sortList.filter((x, idx) => index !== idx);\n    setSortList(newData);\n    onChange && onChange(newData);\n  }\n\n  function reorder({\n    oldIndex,\n    newIndex\n  }) {\n    const newData = arrayMove(sortList, oldIndex, newIndex);\n    setSortList(newData);\n    onChange && onChange(newData);\n  }\n\n  return {\n    sortList,\n    actions: {\n      add,\n      reset,\n      update,\n      remove,\n      reorder\n    }\n  };\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/tables/components/sort/sort.hook.ts"],"names":["React","arrayMove","PROPERTIES","SORT_ORDER_LIST","useSort","properties","onChange","sortList","setSortList","useState","SORT_PROPERTIES","map","property","selectProperty","find","item","label","toLowerCase","type","propertyIcon","icon","value","name","reset","add","newData","order","update","index","remove","filter","x","idx","reorder","oldIndex","newIndex","actions"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,eAAT,QAAgC,aAAhC;AAGA,OAAO,MAAMC,OAAO,GAAG,CAAC;AACtBC,EAAAA,UADsB;AAEtBC,EAAAA;AAFsB,CAAD,KAGmC;AACxD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,KAAK,CAACS,QAAN,CAAkC,EAAlC,CAAhC;AAEA,QAAMC,eAAe,GAAGL,UAAU,CAACM,GAAX,CAAeC,QAAQ,IAAI;AACjD,UAAMC,cAAc,GAAGX,UAAU,CAACY,IAAX,CACrBC,IAAI,IAAIA,IAAI,CAACC,KAAL,CAAWC,WAAX,OAA6BL,QAAQ,CAACM,IAAT,CAAcD,WAAd,EADhB,CAAvB;AAGA,UAAME,YAAY,GAAGN,cAAc,IAAIA,cAAc,CAACO,IAAtD;AACA,WAAO;AACLJ,MAAAA,KAAK,EAAEJ,QAAQ,CAACI,KADX;AAELK,MAAAA,KAAK,EAAET,QAAQ,CAACU,IAFX;AAGLF,MAAAA,IAAI,EAAED;AAHD,KAAP;AAKD,GAVuB,CAAxB;;AAYA,WAASI,KAAT,GAAiB;AACff,IAAAA,WAAW,CAAC,EAAD,CAAX;AACD;;AAED,WAASgB,GAAT,GAAe;AACb,UAAMC,OAAO,GAAG,CACd,GAAGlB,QADW,EAEd;AACEe,MAAAA,IAAI,EAAEZ,eAAe,CAAC,CAAD,CAAf,CAAmBW,KAD3B;AAEEK,MAAAA,KAAK,EAAEvB,eAAe,CAAC,CAAD,CAAf,CAAmBkB;AAF5B,KAFc,CAAhB;AAOAb,IAAAA,WAAW,CAACiB,OAAD,CAAX;AACAnB,IAAAA,QAAQ,IAAIA,QAAQ,CAACmB,OAAD,CAApB;AACD;;AAED,WAASE,MAAT,CAAgBN,KAAhB,EAAwCO,KAAxC,EAAuD;AACrD,UAAMH,OAAO,GAAG,CAAC,GAAGlB,QAAJ,CAAhB;AACAkB,IAAAA,OAAO,CAACG,KAAD,CAAP,GAAiBP,KAAjB;AACAb,IAAAA,WAAW,CAACiB,OAAD,CAAX;AACAnB,IAAAA,QAAQ,IAAIA,QAAQ,CAACmB,OAAD,CAApB;AACD;;AAED,WAASI,MAAT,CAAgBD,KAAhB,EAA+B;AAC7B,UAAMH,OAAO,GAAGlB,QAAQ,CAACuB,MAAT,CAAgB,CAACC,CAAD,EAAqBC,GAArB,KAAqCJ,KAAK,KAAKI,GAA/D,CAAhB;AACAxB,IAAAA,WAAW,CAACiB,OAAD,CAAX;AACAnB,IAAAA,QAAQ,IAAIA,QAAQ,CAACmB,OAAD,CAApB;AACD;;AAED,WAASQ,OAAT,CAAiB;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAjB,EAAiF;AAC/E,UAAMV,OAAO,GAAGxB,SAAS,CAACM,QAAD,EAAW2B,QAAX,EAAqBC,QAArB,CAAzB;AACA3B,IAAAA,WAAW,CAACiB,OAAD,CAAX;AACAnB,IAAAA,QAAQ,IAAIA,QAAQ,CAACmB,OAAD,CAApB;AACD;;AAED,SAAO;AAAElB,IAAAA,QAAF;AAAY6B,IAAAA,OAAO,EAAE;AAAEZ,MAAAA,GAAF;AAAOD,MAAAA,KAAP;AAAcI,MAAAA,MAAd;AAAsBE,MAAAA,MAAtB;AAA8BI,MAAAA;AAA9B;AAArB,GAAP;AACD,CAtDM","sourcesContent":["import * as React from 'react';\nimport { arrayMove } from 'react-sortable-hoc';\nimport { PROPERTIES } from '../property';\nimport { SORT_ORDER_LIST } from './sort.data';\nimport { SortDropdownProps, SortItemOptions } from './sort.types';\n\nexport const useSort = ({\n  properties,\n  onChange,\n}: Pick<SortDropdownProps, 'onChange' | 'properties'>) => {\n  const [sortList, setSortList] = React.useState<SortItemOptions[]>([]);\n\n  const SORT_PROPERTIES = properties.map(property => {\n    const selectProperty = PROPERTIES.find(\n      item => item.label.toLowerCase() === property.type.toLowerCase()\n    );\n    const propertyIcon = selectProperty && selectProperty.icon;\n    return {\n      label: property.label,\n      value: property.name,\n      icon: propertyIcon,\n    };\n  });\n\n  function reset() {\n    setSortList([]);\n  }\n\n  function add() {\n    const newData = [\n      ...sortList,\n      {\n        name: SORT_PROPERTIES[0].value,\n        order: SORT_ORDER_LIST[0].value,\n      },\n    ];\n    setSortList(newData);\n    onChange && onChange(newData);\n  }\n\n  function update(value: SortItemOptions, index: number) {\n    const newData = [...sortList];\n    newData[index] = value;\n    setSortList(newData);\n    onChange && onChange(newData);\n  }\n\n  function remove(index: number) {\n    const newData = sortList.filter((x: SortItemOptions, idx: number) => index !== idx);\n    setSortList(newData);\n    onChange && onChange(newData);\n  }\n\n  function reorder({ oldIndex, newIndex }: { oldIndex: number; newIndex: number }) {\n    const newData = arrayMove(sortList, oldIndex, newIndex);\n    setSortList(newData);\n    onChange && onChange(newData);\n  }\n\n  return { sortList, actions: { add, reset, update, remove, reorder } };\n};\n"]},"metadata":{},"sourceType":"module"}