{"ast":null,"code":"const _excluded = [\"id\", \"name\", \"label\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport camelCase from 'lodash/camelCase';\nimport * as React from 'react';\nimport { arrayMove } from 'react-sortable-hoc';\n\n/**\n * Hook for managing table columns.\n * Manages add, update, delete, reorder actions for table columns\n */\nexport function usePropertiesAsync({\n  user,\n  tableId,\n  onChange,\n  properties\n}) {\n  const [columns, setColumns] = React.useState(properties);\n  React.useEffect(() => {\n    setColumns(properties);\n  }, [properties]);\n\n  async function handlePropertyAdd(value) {\n    let column = {};\n\n    if (value) {\n      column = {\n        hidden: false,\n        label: value.label,\n        name: camelCase(value.label),\n        type: value.type.toUpperCase()\n      };\n    } else {\n      column = {\n        hidden: false,\n        label: 'Column',\n        type: 'text'.toUpperCase(),\n        name: `column ${columns.length}`\n      };\n    }\n\n    if (value !== null && value !== void 0 && value.type.toLowerCase().includes('select')) {\n      column.options = [];\n    }\n\n    const data = [...columns, column];\n    setColumns(data);\n    onChange && onChange({\n      id: tableId,\n      user_id: user === null || user === void 0 ? void 0 : user.id,\n      columns: data\n    });\n  }\n\n  async function handlePropertyUpdate(value, index) {\n    const data = [...columns];\n\n    if (value.type.toLowerCase().includes('select') && !value.options) {\n      value.options = [];\n    }\n\n    if (!value.type.toLowerCase().includes('select') && value.options) {\n      delete value.options;\n    }\n\n    data[index] = value;\n    setColumns([...data]);\n    onChange && onChange({\n      id: tableId,\n      user_id: user === null || user === void 0 ? void 0 : user.id,\n      columns: [...data]\n    });\n  }\n\n  async function handlePropertyDelete(index) {\n    const data = columns.filter((x, idx) => index !== idx);\n    setColumns(data);\n    onChange && onChange({\n      id: tableId,\n      user_id: user === null || user === void 0 ? void 0 : user.id,\n      columns: data\n    });\n  }\n\n  async function handlePropertyDuplicate(value) {\n    const {\n      id,\n      name,\n      label\n    } = value,\n          rest = _objectWithoutProperties(value, _excluded);\n\n    const property = _objectSpread(_objectSpread({}, rest), {}, {\n      name: `${name}${columns.length + 1}`,\n      label: `${label} ${columns.length + 1}`\n    });\n\n    const data = [...columns, property];\n    setColumns(data);\n    onChange && onChange({\n      id: tableId,\n      user_id: user === null || user === void 0 ? void 0 : user.id,\n      columns: data\n    });\n  }\n\n  async function handlePropertyDrag({\n    oldIndex,\n    newIndex\n  }) {\n    const data = arrayMove(columns, oldIndex, newIndex);\n    setColumns(data);\n    onChange && onChange({\n      id: tableId,\n      user_id: user === null || user === void 0 ? void 0 : user.id,\n      columns: data\n    });\n  }\n\n  return {\n    properties: columns,\n    onPropertyAdd: handlePropertyAdd,\n    onPropertyDrag: handlePropertyDrag,\n    onPropertyUpdate: handlePropertyUpdate,\n    onPropertyDelete: handlePropertyDelete,\n    onPropertyDuplicate: handlePropertyDuplicate\n  };\n}","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/tables/components/table/table.hooks/use-columns-async.tsx"],"names":["camelCase","React","arrayMove","usePropertiesAsync","user","tableId","onChange","properties","columns","setColumns","useState","useEffect","handlePropertyAdd","value","column","hidden","label","name","type","toUpperCase","length","toLowerCase","includes","options","data","id","user_id","handlePropertyUpdate","index","handlePropertyDelete","filter","x","idx","handlePropertyDuplicate","rest","property","handlePropertyDrag","oldIndex","newIndex","onPropertyAdd","onPropertyDrag","onPropertyUpdate","onPropertyDelete","onPropertyDuplicate"],"mappings":"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","sourcesContent":["import camelCase from 'lodash/camelCase';\nimport * as React from 'react';\nimport { arrayMove } from 'react-sortable-hoc';\nimport { User } from '../../../../../unauthenticated-app/authentication';\nimport { PropertySchema } from '../../property';\nimport { TablePropertiesOptions } from '../../../tables.types';\n\n/**\n * Hook for managing table columns.\n * Manages add, update, delete, reorder actions for table columns\n */\n\nexport function usePropertiesAsync({\n  user,\n  tableId,\n  onChange,\n  properties,\n}: {\n  user?: User | null;\n  tableId?: string | undefined;\n  properties: PropertySchema[];\n  onChange?(\n    payload: Pick<TablePropertiesOptions, 'columns' | 'id' | 'user_id'>\n  ): void;\n}) {\n  const [columns, setColumns] = React.useState<PropertySchema[]>(properties);\n\n  React.useEffect(() => {\n    setColumns(properties);\n  }, [properties]);\n\n  async function handlePropertyAdd(\n    value?: Pick<PropertySchema, 'label' | 'type'>\n  ) {\n    let column = {} as PropertySchema;\n    if (value) {\n      column = {\n        hidden: false,\n        label: value.label,\n        name: camelCase(value.label),\n        type: value.type.toUpperCase(),\n      } as PropertySchema;\n    } else {\n      column = {\n        hidden: false,\n        label: 'Column',\n        type: 'text'.toUpperCase(),\n        name: `column ${columns.length}`,\n      } as PropertySchema;\n    }\n    if (value?.type.toLowerCase().includes('select')) {\n      column.options = [];\n    }\n    const data = [...columns, column];\n    setColumns(data);\n    onChange &&\n      onChange({\n        id: tableId,\n        user_id: user?.id,\n        columns: data,\n      });\n  }\n\n  async function handlePropertyUpdate(value: PropertySchema, index: number) {\n    const data = [...columns];\n    if (value.type.toLowerCase().includes('select') && !value.options) {\n      value.options = [];\n    }\n    if (!value.type.toLowerCase().includes('select') && value.options) {\n      delete value.options;\n    }\n    data[index] = value;\n    setColumns([...data]);\n    onChange &&\n      onChange({\n        id: tableId,\n        user_id: user?.id,\n        columns: [...data],\n      });\n  }\n\n  async function handlePropertyDelete(index: number) {\n    const data = columns.filter(\n      (x: PropertySchema, idx: number) => index !== idx\n    );\n    setColumns(data);\n\n    onChange &&\n      onChange({\n        id: tableId,\n        user_id: user?.id,\n        columns: data,\n      });\n  }\n\n  async function handlePropertyDuplicate(value: PropertySchema) {\n    const { id, name, label, ...rest } = value;\n    const property = {\n      ...rest,\n      name: `${name}${columns.length + 1}`,\n      label: `${label} ${columns.length + 1}`,\n    };\n    const data = [...columns, property];\n    setColumns(data);\n    onChange &&\n      onChange({\n        id: tableId,\n        user_id: user?.id,\n        columns: data,\n      });\n  }\n\n  async function handlePropertyDrag({\n    oldIndex,\n    newIndex,\n  }: {\n    oldIndex: number;\n    newIndex: number;\n  }) {\n    const data = arrayMove(columns, oldIndex, newIndex);\n    setColumns(data);\n    onChange &&\n      onChange({\n        id: tableId,\n        user_id: user?.id,\n        columns: data,\n      });\n  }\n\n  return {\n    properties: columns,\n    onPropertyAdd: handlePropertyAdd,\n    onPropertyDrag: handlePropertyDrag,\n    onPropertyUpdate: handlePropertyUpdate,\n    onPropertyDelete: handlePropertyDelete,\n    onPropertyDuplicate: handlePropertyDuplicate,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}