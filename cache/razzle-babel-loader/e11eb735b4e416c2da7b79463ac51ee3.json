{"ast":null,"code":"var _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/settings/component/tag-form.tsx\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Popover, PopoverBody, PopoverContent, PopoverTrigger, Stack } from '@chakra-ui/core';\nimport { Button, FormLabel, Input } from 'app/components';\nimport { useFormik } from 'formik';\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as yup from 'yup';\nimport { ColorPicker } from '../../components/filters/ColorPicker';\nexport const TagForm = props => {\n  var _values$color;\n\n  const {\n    onSubmit,\n    isLoading,\n    isDeleting,\n    onDelete,\n    onCancel,\n    initialValues\n  } = props;\n  const {\n    values,\n    errors,\n    touched,\n    handleSubmit,\n    handleChange,\n    setFieldValue\n  } = useFormik({\n    onSubmit,\n    enableReinitialize: true,\n    initialValues: initialValues !== null && initialValues !== void 0 ? initialValues : {\n      name: '',\n      color: '#DA9728',\n      description: ''\n    },\n    validationSchema: yup.object().shape({\n      name: yup.string().required('Tag name is required')\n    })\n  });\n  const inputRef = useRef(null);\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n\n  const open = () => setIsOpen(!isOpen);\n\n  const close = () => setIsOpen(false);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, __jsx(FormLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, \"Name\"), __jsx(Input, {\n    mb: \"4rem\",\n    name: \"name\",\n    ref: inputRef,\n    value: values.name,\n    onChange: handleChange,\n    errorMessage: errors.name,\n    placeholder: \"Enter tag name\",\n    isInvalid: !!touched.name && !!errors.name,\n    rightIcon: __jsx(Popover, {\n      isOpen: isOpen,\n      onClose: close,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }, __jsx(PopoverTrigger, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, __jsx(Button, {\n      size: \"xs\",\n      onClick: open,\n      variant: \"unstyled\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }\n    }, __jsx(Box, {\n      bg: values.color,\n      rounded: \"4px\",\n      width: \"1rem\",\n      height: \"1rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }))), __jsx(PopoverContent, {\n      zIndex: 4,\n      top: \"2rem\",\n      right: \"0\",\n      width: \"200px\",\n      borderWidth: \"0\",\n      position: \"absolute\",\n      onClick: e => e.stopPropagation(),\n      boxShadow: \"0px 10px 15px rgba(0, 0, 0, 0.06)\",\n      _focus: {\n        boxShadow: '0px 10px 15px rgba(0, 0, 0, 0.06)'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, __jsx(PopoverBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }, __jsx(ColorPicker, {\n      color: (_values$color = values.color) !== null && _values$color !== void 0 ? _values$color : '',\n      onChange: color => setFieldValue('color', color),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    })))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), __jsx(Flex, {\n    pt: \"1.5rem\",\n    borderTopWidth: \"1px\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    onClick: onCancel,\n    variant: \"outline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \"Cancel\"), __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, initialValues && __jsx(Button, {\n    isLoading: isDeleting,\n    onClick: onDelete,\n    variantColor: \"red\",\n    variant: \"outline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, \"Delete tag\"), __jsx(Button, {\n    type: \"submit\",\n    isLoading: isLoading,\n    variantColor: \"blue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, \"Save\"))));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/settings/component/tag-form.tsx"],"names":["Box","Flex","Popover","PopoverBody","PopoverContent","PopoverTrigger","Stack","Button","FormLabel","Input","useFormik","React","useEffect","useRef","useState","yup","ColorPicker","TagForm","props","onSubmit","isLoading","isDeleting","onDelete","onCancel","initialValues","values","errors","touched","handleSubmit","handleChange","setFieldValue","enableReinitialize","name","color","description","validationSchema","object","shape","string","required","inputRef","isOpen","setIsOpen","open","close","current","focus","e","stopPropagation","boxShadow"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Flex,\n  Popover,\n  PopoverBody,\n  PopoverContent,\n  PopoverTrigger,\n  Stack,\n} from '@chakra-ui/core';\nimport { Button, FormLabel, Input } from 'app/components';\nimport { FormikConfig, useFormik } from 'formik';\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as yup from 'yup';\nimport { ColorPicker } from '../../components/filters/ColorPicker';\nimport { InboxTag } from '../../inbox.types';\n\nexport type TagFormValues = Partial<InboxTag> & { color: string };\n\nexport type TagFormProps = {\n  isLoading?: boolean;\n  isDeleting?: boolean;\n  onDelete?(): void;\n  onCancel?(): void;\n  initialValues?: TagFormValues;\n  onSubmit: FormikConfig<TagFormValues>['onSubmit'];\n};\n\nexport const TagForm = (props: TagFormProps) => {\n  const { onSubmit, isLoading, isDeleting, onDelete, onCancel, initialValues } = props;\n  const {\n    values,\n    errors,\n    touched,\n    handleSubmit,\n    handleChange,\n    setFieldValue,\n  } = useFormik<TagFormValues>({\n    onSubmit,\n    enableReinitialize: true,\n    initialValues: initialValues ?? { name: '', color: '#DA9728', description: '' },\n    validationSchema: yup.object().shape({\n      name: yup.string().required('Tag name is required'),\n    }),\n  });\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const open = () => setIsOpen(!isOpen);\n  const close = () => setIsOpen(false);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <FormLabel>Name</FormLabel>\n      <Input\n        mb=\"4rem\"\n        name=\"name\"\n        ref={inputRef}\n        value={values.name}\n        onChange={handleChange}\n        errorMessage={errors.name}\n        placeholder=\"Enter tag name\"\n        isInvalid={!!touched.name && !!errors.name}\n        rightIcon={\n          <Popover isOpen={isOpen} onClose={close}>\n            <PopoverTrigger>\n              <Button size=\"xs\" onClick={open} variant=\"unstyled\">\n                <Box bg={values.color} rounded=\"4px\" width=\"1rem\" height=\"1rem\" />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent\n              zIndex={4}\n              top=\"2rem\"\n              right=\"0\"\n              width=\"200px\"\n              borderWidth=\"0\"\n              position=\"absolute\"\n              onClick={e => e.stopPropagation()}\n              boxShadow=\"0px 10px 15px rgba(0, 0, 0, 0.06)\"\n              _focus={{ boxShadow: '0px 10px 15px rgba(0, 0, 0, 0.06)' }}\n            >\n              <PopoverBody>\n                <ColorPicker\n                  color={values.color ?? ''}\n                  onChange={color => setFieldValue('color', color)}\n                />\n              </PopoverBody>\n            </PopoverContent>\n          </Popover>\n        }\n      />\n      <Flex pt=\"1.5rem\" borderTopWidth=\"1px\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Button onClick={onCancel} variant=\"outline\">\n          Cancel\n        </Button>\n        <Stack isInline alignItems=\"center\">\n          {initialValues && (\n            <Button isLoading={isDeleting} onClick={onDelete} variantColor=\"red\" variant=\"outline\">\n              Delete tag\n            </Button>\n          )}\n          <Button type=\"submit\" isLoading={isLoading} variantColor=\"blue\">\n            Save\n          </Button>\n        </Stack>\n      </Flex>\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}