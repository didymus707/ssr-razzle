{"ast":null,"code":"var _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/component/lists/components/lists/create-list/stages/select-resource.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState } from 'react';\nimport { Box, Icon, SimpleGrid, useToast } from '@chakra-ui/core/dist';\nimport { Button } from 'app/components';\nimport { useSelector } from 'react-redux';\nimport { selectListResources } from '../../../../../../lists.selectors';\nimport { resource_types } from '../../../../../../list.data';\nimport { useHistory } from 'react-router-dom';\nimport { EmptyState, ToastBox } from '../../../../../../../../components';\nimport noResources from '../../../../../../assets/no-resources.svg';\nimport { getListResourceIcon } from '../../../../../../lists.utils';\n\nconst ResourceItem = props => {\n  return __jsx(Box, {\n    className: \"list-item--list\",\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, __jsx(Icon, {\n    className: \"box\",\n    name: getListResourceIcon(props.provider),\n    size: \"22px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }), __jsx(Box, {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    overflow: \"hidden\" // @ts-ignore\n    ,\n    textOverflow: \"ellipsis\",\n    maxWidth: \"260px\",\n    fontWeight: \"500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }, props.name))), props.selected && __jsx(Icon, {\n    name: \"check-circle\",\n    color: \"#3d43df\",\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 26\n    }\n  }));\n};\n\nexport const SelectListResource = props => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    selectedResource,\n    setSelectedResource\n  } = props;\n  const resources = useSelector(selectListResources);\n  const resourceType = resource_types.find(i => props.importType === i.key);\n  const routerHistory = useHistory();\n  const filteredResources = resources.filter(i => i.provider === (resourceType === null || resourceType === void 0 ? void 0 : resourceType.key));\n  useEffect(() => {\n    if (filteredResources.length > 0 && !selectedResource) {\n      setSelectedResource(filteredResources[0].id);\n    } else if (filteredResources.length > 0 && !filteredResources.find(i => i.id === selectedResource)) {\n      setSelectedResource(filteredResources[0].id);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  const toast = useToast();\n\n  const fetchSheets = async () => {\n    setLoading(true);\n\n    try {\n      const sheets = await props.fetchGSheetSpreadSheets(selectedResource);\n      props.setSources(sheets);\n      props.setStage('select-source');\n      return;\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: () => __jsx(ToastBox, {\n          message: \"Unable to fetch connection data, please try again\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 23\n          }\n        })\n      });\n    }\n\n    setLoading(false);\n  };\n\n  const fetchSchema = async () => {\n    setLoading(true);\n\n    try {\n      const schema = await props.fetchResourceSchema(selectedResource);\n      props.setSources(schema);\n      props.setStage('select-source');\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: () => __jsx(ToastBox, {\n          message: \"Unable to fetch connection data, please try again\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 23\n          }\n        })\n      });\n    }\n\n    setLoading(false);\n  };\n\n  const fetchAppEndpoints = async type => {\n    setLoading(true);\n\n    try {\n      const endpoints = await props.fetchAppEndpoints(type);\n      props.setSources(endpoints);\n      props.setStage('select-source');\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: () => __jsx(ToastBox, {\n          message: \"Unable to fetch connection data, please try again\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 23\n          }\n        })\n      });\n    }\n\n    setLoading(false);\n  };\n\n  const proceed = async () => {\n    if (!resourceType) return;\n    if (resourceType.key === 'google-sheets') return await fetchSheets();\n\n    if (['shopify', 'woo-commerce', 'mambu'].includes(resourceType.key || '')) {\n      await fetchAppEndpoints(resourceType.key);\n    } else await fetchSchema();\n  };\n\n  return __jsx(React.Fragment, null, filteredResources.length === 0 && __jsx(EmptyState, {\n    image: noResources,\n    paddingY: \"20px\",\n    heading: \"Oops, no connections here\",\n    subheading: \"Setup a connection to enable easier and faster imports and data synchronization between data sources\",\n    subheadingProps: {\n      width: '400px'\n    },\n    children: __jsx(Button, {\n      variant: \"outline\",\n      variantColor: \"blue\",\n      size: \"sm\",\n      onClick: () => routerHistory.push('/s/lists/connections'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, \"Add resource\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }), filteredResources.length > 0 && __jsx(React.Fragment, null, __jsx(Box, {\n    className: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, \"Select the \", resourceType === null || resourceType === void 0 ? void 0 : resourceType.label, \" connection which you would like to import data from\"), __jsx(SimpleGrid, {\n    columns: 2,\n    spacing: \"10px\",\n    marginY: \"25px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, filteredResources.map(i => __jsx(ResourceItem, _extends({\n    key: i.id,\n    id: i.id,\n    name: i.name\n  }, i, {\n    onClick: () => setSelectedResource(i.id),\n    selected: selectedResource === i.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 15\n    }\n  })))), __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    variantColor: \"blue\",\n    variant: \"solid\",\n    onClick: proceed,\n    isLoading: loading,\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }, \"Proceed\"))));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/component/lists/components/lists/create-list/stages/select-resource.tsx"],"names":["React","useEffect","useState","Box","Icon","SimpleGrid","useToast","Button","useSelector","selectListResources","resource_types","useHistory","EmptyState","ToastBox","noResources","getListResourceIcon","ResourceItem","props","onClick","provider","name","selected","SelectListResource","loading","setLoading","selectedResource","setSelectedResource","resources","resourceType","find","i","importType","key","routerHistory","filteredResources","filter","length","id","toast","fetchSheets","sheets","fetchGSheetSpreadSheets","setSources","setStage","e","position","render","fetchSchema","schema","fetchResourceSchema","fetchAppEndpoints","type","endpoints","proceed","includes","width","push","label","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Box, Icon, SimpleGrid, useToast } from '@chakra-ui/core/dist';\nimport { Button } from 'app/components';\nimport { useSelector } from 'react-redux';\nimport { ListImportType } from '../../../../../../lists.types';\nimport { selectListResources } from '../../../../../../lists.selectors';\nimport { resource_types } from '../../../../../../list.data';\nimport { useHistory } from 'react-router-dom';\nimport { EmptyState, ToastBox } from '../../../../../../../../components';\nimport noResources from '../../../../../../assets/no-resources.svg';\nimport { getListResourceIcon } from '../../../../../../lists.utils';\n\ninterface ItemProps {\n  id: string;\n  name: string;\n  type?: string;\n  selected?: boolean;\n  provider: string;\n  created_datetime?: string;\n  onClick: () => void;\n}\n\nconst ResourceItem = (props: ItemProps) => {\n  return (\n    <Box className=\"list-item--list\" onClick={props.onClick}>\n      <Box display=\"flex\" alignItems=\"center\">\n        <Icon className=\"box\" name={getListResourceIcon(props.provider)} size=\"22px\" />\n        <Box className=\"label\">\n          <Box\n            overflow=\"hidden\"\n            // @ts-ignore\n            textOverflow=\"ellipsis\"\n            maxWidth=\"260px\"\n            fontWeight=\"500\"\n          >\n            {props.name}\n          </Box>\n        </Box>\n      </Box>\n      {props.selected && <Icon name=\"check-circle\" color=\"#3d43df\" size=\"20px\" />}\n    </Box>\n  );\n};\n\ninterface Props {\n  fetchSources: Function;\n  setSources: Function;\n  setStage: Function;\n  selectedResource: string | null;\n  setSelectedResource: Function;\n  importType: ListImportType | null;\n  fetchResourceSchema: Function;\n  fetchGSheetSpreadSheets: Function;\n  fetchAppEndpoints: Function;\n}\n\nexport const SelectListResource = (props: Props) => {\n  const [loading, setLoading] = useState(false);\n\n  const { selectedResource, setSelectedResource } = props;\n\n  const resources: any[] = useSelector(selectListResources);\n  const resourceType = resource_types.find((i: any) => props.importType === i.key);\n\n  const routerHistory = useHistory();\n  const filteredResources = resources.filter((i: any) => i.provider === resourceType?.key);\n\n  useEffect(() => {\n    if (filteredResources.length > 0 && !selectedResource) {\n      setSelectedResource(filteredResources[0].id);\n    } else if (\n      filteredResources.length > 0 &&\n      !filteredResources.find((i: any) => i.id === selectedResource)\n    ) {\n      setSelectedResource(filteredResources[0].id);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const toast = useToast();\n\n  const fetchSheets = async () => {\n    setLoading(true);\n    try {\n      const sheets: any[] = await props.fetchGSheetSpreadSheets(selectedResource);\n      props.setSources(sheets);\n      props.setStage('select-source');\n      return;\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: () => <ToastBox message=\"Unable to fetch connection data, please try again\" />,\n      });\n    }\n    setLoading(false);\n  };\n\n  const fetchSchema = async () => {\n    setLoading(true);\n    try {\n      const schema: any[] = await props.fetchResourceSchema(selectedResource);\n      props.setSources(schema);\n      props.setStage('select-source');\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: () => <ToastBox message=\"Unable to fetch connection data, please try again\" />,\n      });\n    }\n    setLoading(false);\n  };\n\n  const fetchAppEndpoints = async (type: string | null) => {\n    setLoading(true);\n    try {\n      const endpoints = await props.fetchAppEndpoints(type);\n      props.setSources(endpoints);\n      props.setStage('select-source');\n    } catch (e) {\n      toast({\n        position: 'bottom-left',\n        render: () => <ToastBox message=\"Unable to fetch connection data, please try again\" />,\n      });\n    }\n    setLoading(false);\n  };\n\n  const proceed = async () => {\n    if (!resourceType) return;\n    if (resourceType.key === 'google-sheets') return await fetchSheets();\n    if (['shopify', 'woo-commerce', 'mambu'].includes(resourceType.key || '')) {\n      await fetchAppEndpoints(resourceType.key);\n    } else await fetchSchema();\n  };\n\n  return (\n    <>\n      {filteredResources.length === 0 && (\n        <EmptyState\n          image={noResources}\n          paddingY=\"20px\"\n          heading=\"Oops, no connections here\"\n          subheading=\"Setup a connection to enable easier and faster imports and data synchronization between data sources\"\n          subheadingProps={{\n            width: '400px',\n          }}\n          children={\n            <Button\n              variant=\"outline\"\n              variantColor=\"blue\"\n              size=\"sm\"\n              onClick={() => routerHistory.push('/s/lists/connections')}\n            >\n              Add resource\n            </Button>\n          }\n        />\n      )}\n\n      {filteredResources.length > 0 && (\n        <>\n          <Box className=\"description\">\n            Select the {resourceType?.label} connection which you would like to import data from\n          </Box>\n\n          <SimpleGrid columns={2} spacing=\"10px\" marginY=\"25px\">\n            {filteredResources.map((i: any) => (\n              <ResourceItem\n                key={i.id}\n                id={i.id}\n                name={i.name}\n                {...i}\n                onClick={() => setSelectedResource(i.id)}\n                selected={selectedResource === i.id}\n              />\n            ))}\n          </SimpleGrid>\n\n          <Box display=\"flex\" justifyContent=\"flex-end\">\n            <Button\n              variantColor=\"blue\"\n              variant=\"solid\"\n              onClick={proceed}\n              isLoading={loading}\n              size=\"sm\"\n            >\n              Proceed\n            </Button>\n          </Box>\n        </>\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}