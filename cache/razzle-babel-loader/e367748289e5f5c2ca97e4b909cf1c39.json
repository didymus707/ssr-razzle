{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/lists/components/cell-properties/email/field.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Input } from '@chakra-ui/core';\nexport const EmailFieldComponent = props => {\n  const {\n    0: dummyValue,\n    1: setDummyValue\n  } = useState('');\n  const {\n    0: pristine,\n    1: setPristine\n  } = useState(true);\n  const inputRef = useRef(null);\n  const {\n    column,\n    placeholder\n  } = props;\n\n  const handleDummyValueChanged = event => {\n    const updated_value = event.target.value;\n    setDummyValue(updated_value);\n    setPristine(false);\n  };\n\n  const handleOnEnterPressed = event => {\n    event.stopPropagation();\n    if (event.key !== 'Enter') return;\n    if (pristine) return;\n    if (dummyValue === props.value) return;\n    props.updateCellValue(dummyValue, column.uid);\n    event.target.blur();\n    setPristine(true);\n  };\n\n  const handleOnBlur = () => {\n    if (pristine) return;\n    props.updateCellValue(dummyValue, column.uid);\n    setPristine(true);\n  };\n\n  useEffect(() => {\n    setDummyValue(props.value || '');\n  }, [props.value]);\n  return __jsx(Input, {\n    ref: inputRef,\n    value: dummyValue,\n    onBlur: handleOnBlur,\n    onChange: handleDummyValueChanged,\n    onKeyPress: handleOnEnterPressed,\n    textDecor: dummyValue ? 'underline' : 'none',\n    color: \"#344ceb\",\n    placeholder: placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  });\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/lists/components/cell-properties/email/field.tsx"],"names":["React","useEffect","useRef","useState","Input","EmailFieldComponent","props","dummyValue","setDummyValue","pristine","setPristine","inputRef","column","placeholder","handleDummyValueChanged","event","updated_value","target","value","handleOnEnterPressed","stopPropagation","key","updateCellValue","uid","blur","handleOnBlur"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,KAAT,QAAsB,iBAAtB;AAEA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAgB;AACjD,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BL,QAAQ,CAAS,EAAT,CAA5C;AACA,QAAM;AAAA,OAACM,QAAD;AAAA,OAAWC;AAAX,MAA0BP,QAAQ,CAAU,IAAV,CAAxC;AACA,QAAMQ,QAAQ,GAAGT,MAAM,CAAC,IAAD,CAAvB;AAEA,QAAM;AAAEU,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAA0BP,KAAhC;;AAEA,QAAMQ,uBAAuB,GAAIC,KAAD,IAAgB;AAC9C,UAAMC,aAAa,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAnC;AACAV,IAAAA,aAAa,CAACQ,aAAD,CAAb;AACAN,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GAJD;;AAMA,QAAMS,oBAAoB,GAAIJ,KAAD,IAAgB;AAC3CA,IAAAA,KAAK,CAACK,eAAN;AACA,QAAIL,KAAK,CAACM,GAAN,KAAc,OAAlB,EAA2B;AAC3B,QAAIZ,QAAJ,EAAc;AACd,QAAIF,UAAU,KAAKD,KAAK,CAACY,KAAzB,EAAgC;AAChCZ,IAAAA,KAAK,CAACgB,eAAN,CAAsBf,UAAtB,EAAkCK,MAAM,CAACW,GAAzC;AACAR,IAAAA,KAAK,CAACE,MAAN,CAAaO,IAAb;AACAd,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GARD;;AAUA,QAAMe,YAAY,GAAG,MAAM;AACzB,QAAIhB,QAAJ,EAAc;AACdH,IAAAA,KAAK,CAACgB,eAAN,CAAsBf,UAAtB,EAAkCK,MAAM,CAACW,GAAzC;AACAb,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAJD;;AAMAT,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,aAAa,CAACF,KAAK,CAACY,KAAN,IAAe,EAAhB,CAAb;AACD,GAFQ,EAEN,CAACZ,KAAK,CAACY,KAAP,CAFM,CAAT;AAIA,SACE,MAAC,KAAD;AACE,IAAA,GAAG,EAAEP,QADP;AAEE,IAAA,KAAK,EAAEJ,UAFT;AAGE,IAAA,MAAM,EAAEkB,YAHV;AAIE,IAAA,QAAQ,EAAEX,uBAJZ;AAKE,IAAA,UAAU,EAAEK,oBALd;AAME,IAAA,SAAS,EAAEZ,UAAU,GAAG,WAAH,GAAiB,MANxC;AAOE,IAAA,KAAK,EAAC,SAPR;AAQE,IAAA,WAAW,EAAEM,WARf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAYD,CA7CM","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Input } from '@chakra-ui/core';\n\nexport const EmailFieldComponent = (props: any) => {\n  const [dummyValue, setDummyValue] = useState<string>('');\n  const [pristine, setPristine] = useState<boolean>(true);\n  const inputRef = useRef(null);\n\n  const { column, placeholder } = props;\n\n  const handleDummyValueChanged = (event: any) => {\n    const updated_value = event.target.value;\n    setDummyValue(updated_value);\n    setPristine(false);\n  };\n\n  const handleOnEnterPressed = (event: any) => {\n    event.stopPropagation();\n    if (event.key !== 'Enter') return;\n    if (pristine) return;\n    if (dummyValue === props.value) return;\n    props.updateCellValue(dummyValue, column.uid);\n    event.target.blur();\n    setPristine(true);\n  };\n\n  const handleOnBlur = () => {\n    if (pristine) return;\n    props.updateCellValue(dummyValue, column.uid);\n    setPristine(true);\n  };\n\n  useEffect(() => {\n    setDummyValue(props.value || '');\n  }, [props.value]);\n\n  return (\n    <Input\n      ref={inputRef}\n      value={dummyValue}\n      onBlur={handleOnBlur}\n      onChange={handleDummyValueChanged}\n      onKeyPress={handleOnEnterPressed}\n      textDecor={dummyValue ? 'underline' : 'none'}\n      color=\"#344ceb\"\n      placeholder={placeholder}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}