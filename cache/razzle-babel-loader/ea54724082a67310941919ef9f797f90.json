{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { normalize, schema } from 'normalizr';\nimport * as channelService from './channel.service';\nconst customerStruct = new schema.Entity('customers', {}, {\n  idAttribute: 'uuid'\n});\nconst connectivityStruct = new schema.Entity('connectivities', {}, {\n  idAttribute: 'uuid'\n});\nconst credentialStruct = new schema.Entity('credentials', {\n  user: customerStruct,\n  connectivities: [connectivityStruct]\n}, {\n  idAttribute: 'uuid'\n});\nexport const fetchSupportedChannels = createAsyncThunk('credentials/fetch', async () => {\n  const response = await channelService.fetchCredentials();\n  const normalized = normalize(response.data.credentials, [credentialStruct]);\n  return normalized.entities;\n});\nexport const disconnectCredential = createAsyncThunk('credentials/disconnect', async params => {\n  const response = await channelService.removeCredential(params);\n  const normalized = normalize(response.data.disconnected_credential, credentialStruct);\n  return normalized.entities;\n});\nexport const getPotentialAccts = createAsyncThunk('potential-accts/list', async params => {\n  const response = await channelService.fetchPotentialAccts(params);\n  return response.data;\n});\nexport const connectChannelAcct = createAsyncThunk('potential-accts/connect', async params => {\n  const response = await channelService.connectCredential(params);\n\n  if (!response.data.credentials) {\n    return {};\n  }\n\n  const normalized = normalize(response.data.credentials, [credentialStruct]);\n  return normalized.entities;\n});\nexport const getSupportedCountries = createAsyncThunk('supported-countries/list', async () => {\n  const response = await channelService.fetchSupportedCountries();\n  return response.data;\n});\nexport const setChannelName = createAsyncThunk('credentials/update/name', async params => {\n  const response = await channelService.updateChannelName(params);\n  const normalized = normalize(response.data.customer, customerStruct);\n  return normalized.entities;\n});\nexport const submitDetailToBeNotify = createAsyncThunk('channel/notiftForm/submit', async params => {\n  const response = await channelService.registerToBeNotify(params);\n  return response;\n});\nexport const useChannelInstance = createAsyncThunk('channel/use-here', async params => {\n  const response = await channelService.useHere(params);\n  return response.data;\n});","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/channels/channel.thunks.ts"],"names":["createAsyncThunk","normalize","schema","channelService","customerStruct","Entity","idAttribute","connectivityStruct","credentialStruct","user","connectivities","fetchSupportedChannels","response","fetchCredentials","normalized","data","credentials","entities","disconnectCredential","params","removeCredential","disconnected_credential","getPotentialAccts","fetchPotentialAccts","connectChannelAcct","connectCredential","getSupportedCountries","fetchSupportedCountries","setChannelName","updateChannelName","customer","submitDetailToBeNotify","registerToBeNotify","useChannelInstance","useHere"],"mappings":"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","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { normalize, schema } from 'normalizr';\nimport { CustomerSchema } from '../inbox';\nimport * as channelService from './channel.service'\nimport { ConnectivitySchema, CredentialSchema } from './channels.types';\n\nconst customerStruct = new schema.Entity<CustomerSchema>('customers', {}, { idAttribute: 'uuid' });\nconst connectivityStruct = new schema.Entity<ConnectivitySchema>('connectivities', {}, { idAttribute: 'uuid' });\nconst credentialStruct = new schema.Entity<CredentialSchema>('credentials', {\n  user: customerStruct,\n  connectivities: [connectivityStruct],\n}, { idAttribute: 'uuid' });\n\nexport const fetchSupportedChannels = createAsyncThunk<\nany\n>(\n  'credentials/fetch', async () => {\n    const response = await channelService.fetchCredentials();\n    const normalized = normalize(response.data.credentials, [credentialStruct]);\n\n    return normalized.entities;\n  }\n);\n\nexport const disconnectCredential = createAsyncThunk<\nany, any\n>(\n  'credentials/disconnect', async (params) => {\n    const response = await channelService.removeCredential(params);\n    const normalized = normalize(response.data.disconnected_credential, credentialStruct);\n\n    return normalized.entities;\n  }\n);\n\nexport const getPotentialAccts = createAsyncThunk<\nany, any, any\n>(\n  'potential-accts/list', async (params) => {\n    const response = await channelService.fetchPotentialAccts(params);\n\n    return response.data;\n  }\n);\n\nexport const connectChannelAcct = createAsyncThunk<\nany, any, any\n>(\n  'potential-accts/connect', async (params) => {\n    const response = await channelService.connectCredential(params);\n\n    if (!response.data.credentials) {\n      return {};\n    }\n\n    const normalized = normalize(response.data.credentials, [credentialStruct]);\n\n    return normalized.entities;\n  }\n);\n\nexport const getSupportedCountries = createAsyncThunk<\nany\n>(\n  'supported-countries/list', async () => {\n    const response = await channelService.fetchSupportedCountries();\n\n    return response.data;\n  }\n);\n\nexport const setChannelName = createAsyncThunk<\nany, any, any\n>(\n  'credentials/update/name', async (params) => {\n    const response = await channelService.updateChannelName(params);\n    const normalized = normalize(response.data.customer, customerStruct);\n\n    return normalized.entities;\n  }\n);\n\nexport const submitDetailToBeNotify = createAsyncThunk<\nany, any, any\n>(\n  'channel/notiftForm/submit', async (params) => {\n    const response = await channelService.registerToBeNotify(params);\n\n    return response;\n  }\n);\n\nexport const useChannelInstance = createAsyncThunk<\nany, any, any\n>(\n  'channel/use-here', async (params) => {\n    const response = await channelService.useHere(params);\n\n    return response.data;\n  }\n);\n"]},"metadata":{},"sourceType":"module"}