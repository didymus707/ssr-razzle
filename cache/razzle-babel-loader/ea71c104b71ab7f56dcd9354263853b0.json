{"ast":null,"code":"import _extends from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/components/cell-properties/date/date-fomat-select.tsx\";\nvar __jsx = React.createElement;\n// @ts-nocheck\nimport React from 'react';\nimport { Box, Icon, Popover, PopoverContent, PopoverTrigger } from '@chakra-ui/core';\nimport { parseDate } from '../../../lists.utils';\nimport { available_date_formats, calendarOutputFormat } from '../../../list.data';\nimport { PopoverWrapper } from '../../../list-view.styles';\n\nconst DateFormatOption = props => {\n  const {\n    label,\n    format,\n    date_today\n  } = props;\n  return __jsx(Box, {\n    className: `list-item ${props.active ? 'active' : ''}`,\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, `${label} (${format !== 'relative' ? date_today.format(format) : date_today.calendar(null, calendarOutputFormat)})`);\n};\n\nexport const DateFormatSelect = props => {\n  var _props$column;\n\n  let customization = (props === null || props === void 0 ? void 0 : (_props$column = props.column) === null || _props$column === void 0 ? void 0 : _props$column.customization) || {};\n  let date_format = (customization === null || customization === void 0 ? void 0 : customization.date_format) || 'D/MM/YYYY';\n  let selected_format_option = available_date_formats.find(i => i.format === date_format);\n  const date_today = parseDate(new Date().toString());\n\n  const handleFormatSelect = format => {\n    props.updateCustomization(props.column.uid, _objectSpread(_objectSpread({}, customization), {}, {\n      date_format: format\n    }));\n  };\n\n  return __jsx(Popover, {\n    trigger: \"hover\",\n    placement: \"right-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, ({\n    onClose\n  }) => __jsx(React.Fragment, null, __jsx(PopoverTrigger, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"list-item-no-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, `${selected_format_option.label} (${selected_format_option.format !== 'relative' ? date_today.format(selected_format_option.format) : date_today.calendar(null, calendarOutputFormat)})`, __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 15\n    }\n  }, __jsx(Icon, {\n    name: \"chevron-right\",\n    size: \"12.5px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  })))), __jsx(PopoverContent, {\n    zIndex: 4,\n    width: \"max-content\",\n    boxShadow: \"none\",\n    _focus: {\n      boxShadow: 'none',\n      outline: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, __jsx(PopoverWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, available_date_formats.map((i, index) => __jsx(DateFormatOption, _extends({}, i, {\n    key: index,\n    date_today: date_today,\n    active: i.format === selected_format_option.format,\n    onClick: () => {\n      handleFormatSelect(i.format);\n      onClose();\n      props.close();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  })))))));\n};","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/components/cell-properties/date/date-fomat-select.tsx"],"names":["React","Box","Icon","Popover","PopoverContent","PopoverTrigger","parseDate","available_date_formats","calendarOutputFormat","PopoverWrapper","DateFormatOption","props","label","format","date_today","active","onClick","calendar","DateFormatSelect","customization","column","date_format","selected_format_option","find","i","Date","toString","handleFormatSelect","updateCustomization","uid","onClose","boxShadow","outline","map","index","close"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport React from 'react';\nimport { Box, Icon, Popover, PopoverContent, PopoverTrigger } from '@chakra-ui/core';\nimport { parseDate } from '../../../lists.utils';\nimport { available_date_formats, calendarOutputFormat } from '../../../list.data';\nimport { PopoverWrapper } from '../../../list-view.styles';\n\nconst DateFormatOption = (props: any) => {\n  const { label, format, date_today } = props;\n  return (\n    <Box className={`list-item ${props.active ? 'active' : ''}`} onClick={props.onClick}>\n      {`${label} (${\n        format !== 'relative'\n          ? date_today.format(format)\n          : date_today.calendar(null, calendarOutputFormat)\n      })`}\n    </Box>\n  );\n};\n\nexport const DateFormatSelect = (props: any) => {\n  let customization = props?.column?.customization || {};\n\n  let date_format = customization?.date_format || 'D/MM/YYYY';\n\n  let selected_format_option = available_date_formats.find((i: any) => i.format === date_format);\n\n  const date_today = parseDate(new Date().toString());\n\n  const handleFormatSelect = (format: string) => {\n    props.updateCustomization(props.column.uid, {\n      ...customization,\n      date_format: format,\n    });\n  };\n\n  return (\n    <Popover trigger=\"hover\" placement=\"right-start\">\n      {({ onClose }) => (\n        <>\n          <PopoverTrigger>\n            <div className=\"list-item-no-icon\">\n              {`${selected_format_option.label} (${\n                selected_format_option.format !== 'relative'\n                  ? date_today.format(selected_format_option.format)\n                  : date_today.calendar(null, calendarOutputFormat)\n              })`}\n              <Box display=\"flex\" justifyContent=\"flex-end\" alignItems=\"center\">\n                <Icon name=\"chevron-right\" size=\"12.5px\" />\n              </Box>\n            </div>\n          </PopoverTrigger>\n          <PopoverContent\n            zIndex={4}\n            width=\"max-content\"\n            boxShadow=\"none\"\n            _focus={{\n              boxShadow: 'none',\n              outline: 'none',\n            }}\n          >\n            <PopoverWrapper>\n              {available_date_formats.map((i: any, index) => (\n                <DateFormatOption\n                  {...i}\n                  key={index}\n                  date_today={date_today}\n                  active={i.format === selected_format_option.format}\n                  onClick={() => {\n                    handleFormatSelect(i.format);\n                    onClose();\n                    props.close();\n                  }}\n                />\n              ))}\n            </PopoverWrapper>\n          </PopoverContent>\n        </>\n      )}\n    </Popover>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}