{"ast":null,"code":"import { createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport { onWebSocketAccountDisconnected, onWebSocketWhatsAppAccountStatusChange } from '../../inbox';\nimport { connectChannelAcct, disconnectCredential, fetchSupportedChannels } from '../channel.thunks';\nconst connectivitysAdapter = createEntityAdapter({\n  selectId: connectivity => connectivity.uuid,\n  sortComparer: (a, b) => (b.updated_datetime || '').localeCompare(a.updated_datetime || '')\n});\n\nconst upsertCallback = (state, action) => {\n  const {\n    connectivities\n  } = action.payload;\n  connectivities && connectivitysAdapter.upsertMany(state, connectivities);\n};\n\nexport const connectivitiesSlice = createSlice({\n  name: 'connectivities',\n  initialState: connectivitysAdapter.getInitialState(),\n  reducers: {},\n\n  extraReducers(builder) {\n    builder.addCase(fetchSupportedChannels.fulfilled, upsertCallback).addCase(disconnectCredential.fulfilled, upsertCallback).addCase(connectChannelAcct.fulfilled, upsertCallback).addCase(onWebSocketAccountDisconnected, upsertCallback).addCase(onWebSocketWhatsAppAccountStatusChange, upsertCallback);\n  }\n\n});\nexport const connectivitysReducer = connectivitiesSlice.reducer;\nexport const {\n  selectById: selectconnectivityById,\n  selectIds: selectconnectivityIds,\n  selectEntities: selectconnectivityEntities,\n  selectAll: selectAllconnectivitys,\n  selectTotal: selectTotalconnectivitys\n} = connectivitysAdapter.getSelectors(state => state.channel.entities.connectivities);","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/channels/slices/connectivity.ts"],"names":["createEntityAdapter","createSlice","onWebSocketAccountDisconnected","onWebSocketWhatsAppAccountStatusChange","connectChannelAcct","disconnectCredential","fetchSupportedChannels","connectivitysAdapter","selectId","connectivity","uuid","sortComparer","a","b","updated_datetime","localeCompare","upsertCallback","state","action","connectivities","payload","upsertMany","connectivitiesSlice","name","initialState","getInitialState","reducers","extraReducers","builder","addCase","fulfilled","connectivitysReducer","reducer","selectById","selectconnectivityById","selectIds","selectconnectivityIds","selectEntities","selectconnectivityEntities","selectAll","selectAllconnectivitys","selectTotal","selectTotalconnectivitys","getSelectors","channel","entities"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,WAA9B,QAAiD,kBAAjD;AAEA,SAASC,8BAAT,EAAyCC,sCAAzC,QAAuF,aAAvF;AACA,SAASC,kBAAT,EAA6BC,oBAA7B,EAAmDC,sBAAnD,QAAiF,mBAAjF;AAGA,MAAMC,oBAAoB,GAAGP,mBAAmB,CAAqB;AACnEQ,EAAAA,QAAQ,EAAEC,YAAY,IAAIA,YAAY,CAACC,IAD4B;AAEnEC,EAAAA,YAAY,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAU,CAACA,CAAC,CAACC,gBAAF,IAAsB,EAAvB,EAA2BC,aAA3B,CAAyCH,CAAC,CAACE,gBAAF,IAAsB,EAA/D;AAF2C,CAArB,CAAhD;;AAKA,MAAME,cAAc,GAAG,CAACC,KAAD,EAAaC,MAAb,KAA6B;AAClD,QAAM;AAAEC,IAAAA;AAAF,MAAqBD,MAAM,CAACE,OAAlC;AACAD,EAAAA,cAAc,IAAIZ,oBAAoB,CAACc,UAArB,CAAgCJ,KAAhC,EAAuCE,cAAvC,CAAlB;AACD,CAHD;;AAKA,OAAO,MAAMG,mBAAmB,GAAGrB,WAAW,CAAC;AAC7CsB,EAAAA,IAAI,EAAE,gBADuC;AAE7CC,EAAAA,YAAY,EAAEjB,oBAAoB,CAACkB,eAArB,EAF+B;AAG7CC,EAAAA,QAAQ,EAAE,EAHmC;;AAI7CC,EAAAA,aAAa,CAACC,OAAD,EAAU;AACrBA,IAAAA,OAAO,CACNC,OADD,CACSvB,sBAAsB,CAACwB,SADhC,EAC2Cd,cAD3C,EAECa,OAFD,CAESxB,oBAAoB,CAACyB,SAF9B,EAEyCd,cAFzC,EAGCa,OAHD,CAGSzB,kBAAkB,CAAC0B,SAH5B,EAGuCd,cAHvC,EAICa,OAJD,CAIS3B,8BAJT,EAIyCc,cAJzC,EAKCa,OALD,CAKS1B,sCALT,EAKiDa,cALjD;AAMD;;AAX4C,CAAD,CAAvC;AAcP,OAAO,MAAMe,oBAAoB,GAAGT,mBAAmB,CAACU,OAAjD;AAEP,OAAO,MAAM;AACXC,EAAAA,UAAU,EAAEC,sBADD;AAEXC,EAAAA,SAAS,EAAEC,qBAFA;AAGXC,EAAAA,cAAc,EAAEC,0BAHL;AAIXC,EAAAA,SAAS,EAAEC,sBAJA;AAKXC,EAAAA,WAAW,EAAEC;AALF,IAMTnC,oBAAoB,CAACoC,YAArB,CAA8C1B,KAAD,IAAWA,KAAK,CAAC2B,OAAN,CAAcC,QAAd,CAAuB1B,cAA/E,CANG","sourcesContent":["import { createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../../../root';\nimport { onWebSocketAccountDisconnected, onWebSocketWhatsAppAccountStatusChange } from '../../inbox';\nimport { connectChannelAcct, disconnectCredential, fetchSupportedChannels } from '../channel.thunks';\nimport { ConnectivitySchema } from '../channels.types';\n\nconst connectivitysAdapter = createEntityAdapter<ConnectivitySchema>({\n  selectId: connectivity => connectivity.uuid,\n  sortComparer: (a, b) => (b.updated_datetime || '').localeCompare(a.updated_datetime || ''),\n});\n\nconst upsertCallback = (state: any, action: any) => {\n  const { connectivities } = action.payload;\n  connectivities && connectivitysAdapter.upsertMany(state, connectivities);\n};\n\nexport const connectivitiesSlice = createSlice({\n  name: 'connectivities',\n  initialState: connectivitysAdapter.getInitialState(),\n  reducers: {},\n  extraReducers(builder) {\n    builder\n    .addCase(fetchSupportedChannels.fulfilled, upsertCallback)\n    .addCase(disconnectCredential.fulfilled, upsertCallback)\n    .addCase(connectChannelAcct.fulfilled, upsertCallback)\n    .addCase(onWebSocketAccountDisconnected, upsertCallback)\n    .addCase(onWebSocketWhatsAppAccountStatusChange, upsertCallback);\n  }\n});\n\nexport const connectivitysReducer = connectivitiesSlice.reducer;\n\nexport const {\n  selectById: selectconnectivityById,\n  selectIds: selectconnectivityIds,\n  selectEntities: selectconnectivityEntities,\n  selectAll: selectAllconnectivitys,\n  selectTotal: selectTotalconnectivitys,\n} = connectivitysAdapter.getSelectors<RootState>((state) => state.channel.entities.connectivities);\n"]},"metadata":{},"sourceType":"module"}