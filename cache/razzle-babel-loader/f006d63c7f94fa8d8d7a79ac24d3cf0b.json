{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/components/conversation/ThreadList.tsx\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Skeleton, Spinner, Stack } from '@chakra-ui/core';\nimport React from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { ThreadItem } from './ThreadItem';\nimport emptyViewImage from '../no-thread.svg';\nimport { BodyText } from 'app/components';\nexport const ThreadList = props => {\n  const {\n    threads,\n    hasMore,\n    activeThread,\n    isFetching,\n    onFetchMoreData,\n    onThreadItemAssign,\n    onThreadItemClick\n  } = props;\n\n  if (isFetching) {\n    return __jsx(Stack, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    }, Array.from({\n      length: 15\n    }, (v, i) => __jsx(Box, {\n      py: \"0.5rem\",\n      px: \"0.75rem\",\n      borderBottomWidth: \"1px\",\n      key: `${i.toString()}-${new Date().getTime()}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }\n    }, __jsx(Skeleton, {\n      height: \"10px\",\n      width: \"80%\",\n      my: \"10px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }), __jsx(Skeleton, {\n      height: \"10px\",\n      my: \"10px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n  return !!threads.length ? __jsx(InfiniteScroll, {\n    hasMore: hasMore !== null && hasMore !== void 0 ? hasMore : false,\n    dataLength: threads.length,\n    style: {\n      overflow: 'hidden'\n    },\n    next: () => onFetchMoreData === null || onFetchMoreData === void 0 ? void 0 : onFetchMoreData(),\n    loader: __jsx(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      paddingTop: \"2rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, __jsx(Spinner, {\n      color: \"blue.500\",\n      size: \"md\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    })),\n    endMessage: __jsx(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      paddingTop: \"2rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, __jsx(BodyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }, \"~ All loaded ~\")),\n    scrollableTarget: \"scrollableDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, __jsx(Stack, {\n    spacing: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, threads.map(thread => __jsx(Box, {\n    key: thread.uuid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, __jsx(ThreadItem, {\n    thread: thread,\n    onClick: onThreadItemClick,\n    onAssign: onThreadItemAssign,\n    isActive: (activeThread === null || activeThread === void 0 ? void 0 : activeThread.uuid) === thread.uuid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }))))) : __jsx(Flex, {\n    height: \"100%\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, __jsx(Image, {\n    src: emptyViewImage,\n    size: \"4rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/inbox/components/conversation/ThreadList.tsx"],"names":["Box","Flex","Image","Skeleton","Spinner","Stack","React","InfiniteScroll","ThreadItem","emptyViewImage","BodyText","ThreadList","props","threads","hasMore","activeThread","isFetching","onFetchMoreData","onThreadItemAssign","onThreadItemClick","Array","from","length","v","i","toString","Date","getTime","overflow","map","thread","uuid"],"mappings":"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","sourcesContent":["import { Box, Flex, Image, Skeleton, Spinner, Stack } from '@chakra-ui/core';\nimport React from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { ThreadItem } from './ThreadItem';\nimport emptyViewImage from '../no-thread.svg';\nimport { BodyText } from 'app/components';\n\nexport type ThreadListProps = {\n  threads: any[];\n  hasMore?: boolean;\n  activeThread?: any;\n  isFetching?: boolean;\n  onFetchMoreData?(): void;\n  onThreadItemClick?(thread: any): void;\n  onThreadItemAssign?(thread?: any): void;\n};\n\nexport const ThreadList = (props: ThreadListProps) => {\n  const {\n    threads,\n    hasMore,\n    activeThread,\n    isFetching,\n    onFetchMoreData,\n    onThreadItemAssign,\n    onThreadItemClick,\n  } = props;\n\n  if (isFetching) {\n    return (\n      <Stack>\n        {Array.from({ length: 15 }, (v, i) => (\n          <Box\n            py=\"0.5rem\"\n            px=\"0.75rem\"\n            borderBottomWidth=\"1px\"\n            key={`${i.toString()}-${new Date().getTime()}`}\n          >\n            <Skeleton height=\"10px\" width=\"80%\" my=\"10px\" />\n            <Skeleton height=\"10px\" my=\"10px\" />\n          </Box>\n        ))}\n      </Stack>\n    );\n  }\n\n  return !!threads.length ? (\n    <InfiniteScroll\n      hasMore={hasMore ?? false}\n      dataLength={threads.length}\n      style={{ overflow: 'hidden' }}\n      next={() => onFetchMoreData?.()}\n      loader={\n        <Flex alignItems=\"center\" justifyContent=\"center\" paddingTop=\"2rem\">\n          <Spinner color=\"blue.500\" size=\"md\" />\n        </Flex>\n      }\n      endMessage={\n        <Flex alignItems=\"center\" justifyContent=\"center\" paddingTop=\"2rem\">\n          <BodyText>~ All loaded ~</BodyText>\n        </Flex>\n      }\n      scrollableTarget=\"scrollableDiv\"\n    >\n      <Stack spacing=\"0\">\n        {threads.map(thread => (\n          <Box key={thread.uuid}>\n            <ThreadItem\n              thread={thread}\n              onClick={onThreadItemClick}\n              onAssign={onThreadItemAssign}\n              isActive={activeThread?.uuid === thread.uuid}\n            />\n          </Box>\n        ))}\n      </Stack>\n    </InfiniteScroll>\n  ) : (\n    <Flex height=\"100%\" justifyContent=\"center\" alignItems=\"center\">\n      <Image src={emptyViewImage} size=\"4rem\" />\n    </Flex>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}