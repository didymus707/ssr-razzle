{"ast":null,"code":"const _excluded = [\"channel\"];\nvar _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/integrations/components/PlatformIntegration.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { Box, Text, Flex, Link, useToast, Stack, Spinner, ModalBody, ModalOverlay, Modal, ModalContent, ModalHeader, ModalCloseButton } from '@chakra-ui/core';\nimport { SocialIcon, ToastBox, Button } from 'app/components';\nimport { connectChannelAcct, disconnectCredential, getErrorMessage, getPotentialAccts } from '../../channels';\nimport { getQueryParams } from '../integrations.utis';\nimport { ConnectedAccounts } from './ConnectedAccts';\nimport { NavLink, useHistory, useLocation } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectOrganisationID } from '../../../unauthenticated-app/authentication';\nexport function PlatformIntegration(_ref) {\n  let {\n    channel\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  const {\n    0: pageLoader\n  } = useState(false);\n  const {\n    0: isDisconnectLoading,\n    1: setIsDisconnectLoading\n  } = useState(false);\n  const {\n    0: isModalOpen,\n    1: setIsModalOpen\n  } = useState(false);\n  const {\n    0: temp,\n    1: setTemp\n  } = useState({\n    data: {},\n    status: 'none'\n  });\n  const toast = useToast();\n  const location = useLocation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const organisation_id = useSelector(selectOrganisationID) || '';\n  const {\n    list: tempList\n  } = (temp === null || temp === void 0 ? void 0 : temp.data) || {\n    image_url: '',\n    platform_name: '',\n    platform_nick: '',\n    list: []\n  };\n  const meta = {\n    twitter: {\n      title: 'Twitter DMs',\n      subHeading: 'Handles',\n      baseUrl: 'https://twitter.com'\n    },\n    messenger: {\n      title: 'Facebook Mesenger',\n      subHeading: 'Facebook Pages',\n      baseUrl: 'https://web.facebook.com'\n    }\n  };\n  const {\n    title,\n    subHeading,\n    disconnectBtnText,\n    baseUrl\n  } = meta[channel] || {\n    title: '',\n    subHeading: '',\n    disconnectBtnText: '',\n    baseUrl: ''\n  };\n  const pathNameArray = location.pathname.split('/');\n  const locationParam = pathNameArray[pathNameArray.length - 1];\n  const {\n    status,\n    name: statusName,\n    code: statusCode\n  } = getQueryParams(location.search);\n  const isStatusPageList = status === 'page-list';\n  const isStatusReconfirm = status === 'reconfirm';\n  const isStatusError = status === 'error';\n  let isStatus = false;\n\n  if (status) {\n    isStatus = true;\n  }\n\n  const handleAccountDisconnection = async (platform_nick, credential_id) => {\n    setIsDisconnectLoading(true);\n\n    try {\n      if (platform_nick) {\n        await dispatch(disconnectCredential({\n          credential_id\n        }));\n        setIsModalOpen(false);\n        toast({\n          position: 'bottom-left',\n          render: ({\n            onClose\n          }) => __jsx(ToastBox, {\n            status: \"success\",\n            onClose: onClose,\n            message: `${platform_nick} account disconnected successfully`,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 13\n            }\n          })\n        });\n      }\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n\n    setIsDisconnectLoading(false);\n  };\n\n  const handlePageSelection = async pageID => {\n    try {\n      await dispatch(connectChannelAcct({\n        pageID,\n        channel,\n        id: locationParam\n      }));\n      history.push(`/s/integrations/${channel}-integration`);\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (organisation_id && isStatusError && statusName) {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: getErrorMessage(statusName, statusCode),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 11\n          }\n        })\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  useEffect(() => {\n    const fetch = async () => {\n      if (isStatusReconfirm || isStatusPageList) {\n        try {\n          setTemp(_objectSpread(_objectSpread({}, temp), {}, {\n            status: 'loading'\n          }));\n          const result = await dispatch(getPotentialAccts({\n            channel,\n            id: locationParam\n          }));\n          setTemp({\n            data: _objectSpread(_objectSpread({}, temp.data), {}, {\n              list: result.payload.list\n            }),\n            status: 'none'\n          });\n        } catch (error) {\n          setTemp({\n            data: null,\n            status: 'error'\n          });\n          toast({\n            position: 'bottom-left',\n            render: ({\n              onClose\n            }) => __jsx(ToastBox, {\n              onClose: onClose,\n              message: error,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 38\n              }\n            })\n          });\n          history.push(`/s/integrations/${channel}-integration`);\n        }\n      }\n    };\n\n    fetch(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isStatusReconfirm, isStatusPageList]);\n  return __jsx(Box, {\n    height: \"100vh\",\n    backgroundColor: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }\n  }, __jsx(NavLink, {\n    to: \"/s/channels\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, __jsx(Text, {\n    as: \"span\",\n    fontWeight: 500,\n    color: \"rgba(17, 17, 17, 0.5)\",\n    marginTop: \"2rem\",\n    display: \"inline-block\",\n    marginLeft: \"2.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, \"Back to Apps\")), __jsx(Box, {\n    paddingTop: \"1.25rem\",\n    marginX: \"auto\",\n    maxWidth: \"20.125rem\",\n    color: \"brandBlack\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }, pageLoader ? __jsx(Box, {\n    textAlign: \"center\",\n    paddingTop: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 11\n    }\n  }, __jsx(Spinner, {\n    color: \"blue.500\",\n    size: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }\n  })) : __jsx(React.Fragment, null, __jsx(Flex, {\n    justifyContent: \"center\",\n    marginBottom: \".875rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }, __jsx(SocialIcon, {\n    which: channel,\n    size: \"2.875rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 15\n    }\n  })), __jsx(Text, {\n    fontSize: \"1.125rem\",\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    marginBottom: \"2.8125rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }\n  }, title), __jsx(ConnectedAccounts, _extends({\n    channel: channel,\n    disconnectAccount: handleAccountDisconnection,\n    isDisconnectLoading: isDisconnectLoading,\n    isModalOpen: isModalOpen,\n    handleModelOpen: setIsModalOpen,\n    data: {\n      organisation_id,\n      subHeading,\n      baseUrl,\n      disconnectBtnText\n    }\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  })))), __jsx(Modal, {\n    closeOnOverlayClick: false,\n    onClose: () => history.push(`/s/integrations/${channel}-integration`),\n    size: isStatusPageList ? 'sm' : 'lg',\n    isOpen: isStatus && !isStatusError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  }), __jsx(ModalContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }\n  }, isStatusPageList && __jsx(React.Fragment, null, __jsx(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 15\n    }\n  }, \"Select Facebook Page\"), __jsx(ModalCloseButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 15\n    }\n  }), __jsx(ModalBody, {\n    paddingBottom: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 15\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 17\n    }\n  }, (tempList || []).length === 0 ? __jsx(Text, {\n    fontSize: \".875rem\",\n    textAlign: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 21\n    }\n  }, \"It seems you are not an admin on any Facebook pages. Please click the\", __jsx(Link, {\n    href: \"https://web.facebook.com/pages/create\",\n    isExternal: true,\n    marginX: \".25rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 23\n    }\n  }, \"link\"), \"to create one.\") : tempList.map(({\n    id,\n    name\n  }) => __jsx(Button, {\n    key: id,\n    justifyContent: \"flex-start\",\n    variant: \"ghost\",\n    fontSize: \".875rem\",\n    marginLeft: \"-1rem\",\n    onClick: () => handlePageSelection(id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 23\n    }\n  }, name))))))));\n}","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/integrations/components/PlatformIntegration.tsx"],"names":["React","useState","useEffect","Box","Text","Flex","Link","useToast","Stack","Spinner","ModalBody","ModalOverlay","Modal","ModalContent","ModalHeader","ModalCloseButton","SocialIcon","ToastBox","Button","connectChannelAcct","disconnectCredential","getErrorMessage","getPotentialAccts","getQueryParams","ConnectedAccounts","NavLink","useHistory","useLocation","useDispatch","useSelector","selectOrganisationID","PlatformIntegration","channel","props","pageLoader","isDisconnectLoading","setIsDisconnectLoading","isModalOpen","setIsModalOpen","temp","setTemp","data","status","toast","location","history","dispatch","organisation_id","list","tempList","image_url","platform_name","platform_nick","meta","twitter","title","subHeading","baseUrl","messenger","disconnectBtnText","pathNameArray","pathname","split","locationParam","length","name","statusName","code","statusCode","search","isStatusPageList","isStatusReconfirm","isStatusError","isStatus","handleAccountDisconnection","credential_id","position","render","onClose","error","handlePageSelection","pageID","id","push","fetch","result","payload","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Text,\n  Flex,\n  Link,\n  useToast,\n  Stack,\n  Spinner,\n  ModalBody,\n  ModalOverlay,\n  Modal,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n} from '@chakra-ui/core';\nimport { PlatformIntegrationProps } from '../integrations.type';\nimport { SocialIcon, ToastBox, Button } from 'app/components';\nimport {\n  connectChannelAcct,\n  disconnectCredential,\n  getErrorMessage,\n  getPotentialAccts,\n} from '../../channels';\nimport { getQueryParams } from '../integrations.utis';\nimport { ConnectedAccounts } from './ConnectedAccts';\nimport { NavLink, useHistory, useLocation } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectOrganisationID } from '../../../unauthenticated-app/authentication';\n\ntype FBPageSchema = { id: string; name: string };\n\nexport function PlatformIntegration({ channel, ...props }: PlatformIntegrationProps) {\n  const [pageLoader] = useState(false);\n  const [isDisconnectLoading, setIsDisconnectLoading] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [temp, setTemp] = useState<{\n    data: any;\n    status: string;\n  }>({ data: {}, status: 'none' });\n  const toast = useToast();\n\n  const location = useLocation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const organisation_id = useSelector(selectOrganisationID) || '';\n  const { list: tempList } = temp?.data || {\n    image_url: '',\n    platform_name: '',\n    platform_nick: '',\n    list: [],\n  };\n\n  const meta: {\n    [keys: string]: {\n      title: string;\n      subHeading: string;\n      baseUrl: string;\n      disconnectBtnText?: string;\n    };\n  } = {\n    twitter: {\n      title: 'Twitter DMs',\n      subHeading: 'Handles',\n      baseUrl: 'https://twitter.com',\n    },\n    messenger: {\n      title: 'Facebook Mesenger',\n      subHeading: 'Facebook Pages',\n      baseUrl: 'https://web.facebook.com',\n    },\n  };\n\n  const { title, subHeading, disconnectBtnText, baseUrl } = meta[channel] || {\n    title: '',\n    subHeading: '',\n    disconnectBtnText: '',\n    baseUrl: '',\n  };\n\n  const pathNameArray = location.pathname.split('/');\n  const locationParam = pathNameArray[pathNameArray.length - 1];\n  const { status, name: statusName, code: statusCode } = getQueryParams(location.search);\n  const isStatusPageList = status === 'page-list';\n  const isStatusReconfirm = status === 'reconfirm';\n  const isStatusError = status === 'error';\n  let isStatus = false;\n\n  if (status) {\n    isStatus = true;\n  }\n\n  const handleAccountDisconnection = async (platform_nick: string, credential_id: string) => {\n    setIsDisconnectLoading(true);\n\n    try {\n      if (platform_nick) {\n        await dispatch(disconnectCredential({ credential_id }));\n\n        setIsModalOpen(false);\n\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => (\n            <ToastBox\n              status=\"success\"\n              onClose={onClose}\n              message={`${platform_nick} account disconnected successfully`}\n            />\n          ),\n        });\n      }\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n\n    setIsDisconnectLoading(false);\n  };\n\n  const handlePageSelection = async (pageID: string) => {\n    try {\n      await dispatch(connectChannelAcct({ pageID, channel, id: locationParam }));\n      history.push(`/s/integrations/${channel}-integration`);\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (organisation_id && isStatusError && statusName) {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox onClose={onClose} message={getErrorMessage(statusName, statusCode)} />\n        ),\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const fetch = async () => {\n      if (isStatusReconfirm || isStatusPageList) {\n        try {\n          setTemp({ ...temp, status: 'loading' });\n          const result: any = await dispatch(\n            getPotentialAccts({\n              channel,\n              id: locationParam,\n            }),\n          );\n\n          setTemp({ data: { ...temp.data, list: result.payload.list }, status: 'none' });\n        } catch (error) {\n          setTemp({ data: null, status: 'error' });\n          toast({\n            position: 'bottom-left',\n            render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n          });\n\n          history.push(`/s/integrations/${channel}-integration`);\n        }\n      }\n    };\n\n    fetch();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isStatusReconfirm, isStatusPageList]);\n\n  return (\n    <Box height=\"100vh\" backgroundColor=\"white\">\n      <NavLink to=\"/s/channels\">\n        <Text\n          as=\"span\"\n          fontWeight={500}\n          color=\"rgba(17, 17, 17, 0.5)\"\n          marginTop=\"2rem\"\n          display=\"inline-block\"\n          marginLeft=\"2.5rem\"\n        >\n          Back to Apps\n        </Text>\n      </NavLink>\n\n      <Box paddingTop=\"1.25rem\" marginX=\"auto\" maxWidth=\"20.125rem\" color=\"brandBlack\">\n        {pageLoader ? (\n          <Box textAlign=\"center\" paddingTop=\"2rem\">\n            <Spinner color=\"blue.500\" size=\"md\" />\n          </Box>\n        ) : (\n          <>\n            <Flex justifyContent=\"center\" marginBottom=\".875rem\">\n              <SocialIcon which={channel} size=\"2.875rem\" />\n            </Flex>\n\n            <Text fontSize=\"1.125rem\" fontWeight=\"bold\" textAlign=\"center\" marginBottom=\"2.8125rem\">\n              {title}\n            </Text>\n\n            <ConnectedAccounts\n              channel={channel}\n              disconnectAccount={handleAccountDisconnection}\n              isDisconnectLoading={isDisconnectLoading}\n              isModalOpen={isModalOpen}\n              handleModelOpen={setIsModalOpen}\n              data={{\n                organisation_id,\n                subHeading,\n                baseUrl,\n                disconnectBtnText,\n              }}\n              {...props}\n            />\n          </>\n        )}\n      </Box>\n\n      <Modal\n        closeOnOverlayClick={false}\n        onClose={() => history.push(`/s/integrations/${channel}-integration`)}\n        size={isStatusPageList ? 'sm' : 'lg'}\n        isOpen={isStatus && !isStatusError}\n      >\n        <ModalOverlay />\n\n        <ModalContent>\n          {isStatusPageList && (\n            <>\n              <ModalHeader>Select Facebook Page</ModalHeader>\n\n              <ModalCloseButton />\n\n              <ModalBody paddingBottom=\"1rem\">\n                <Stack>\n                  {(tempList || []).length === 0 ? (\n                    <Text fontSize=\".875rem\" textAlign=\"left\">\n                      It seems you are not an admin on any Facebook pages. Please click the\n                      <Link\n                        href=\"https://web.facebook.com/pages/create\"\n                        isExternal\n                        marginX=\".25rem\"\n                      >\n                        link\n                      </Link>\n                      to create one.\n                    </Text>\n                  ) : (\n                    (tempList as FBPageSchema[]).map(({ id, name }) => (\n                      <Button\n                        key={id}\n                        justifyContent=\"flex-start\"\n                        variant=\"ghost\"\n                        fontSize=\".875rem\"\n                        marginLeft=\"-1rem\"\n                        onClick={() => handlePageSelection(id)}\n                      >\n                        {name}\n                      </Button>\n                    ))\n                  )}\n                </Stack>\n              </ModalBody>\n            </>\n          )}\n        </ModalContent>\n      </Modal>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}