{"ast":null,"code":"const _excluded = [\"author_id\", \"created_datetime\", \"children\"];\nvar _jsxFileName = \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/components/more-info/Note.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Avatar, Box, Flex, IconButton, Spinner, Stack, Text, useToast } from '@chakra-ui/core';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchThreadNotes, selectNoteById, selectThreadNoteIDs, sendThreadNote, selectNoteMetaByThreadID } from '../../slices';\nimport { selectOrgMemberByID } from '../../../settings/slices';\nimport { INBOX_INIT } from '../../inbox.data';\nimport { formatMessageDateTime } from '../../inbox.utils';\nimport { Editor } from '../messages';\nimport { ToastBox } from '../../../../components';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nfunction NoteItemAuthor(_ref) {\n  let {\n    author_id,\n    created_datetime,\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  const {\n    first_name,\n    last_name\n  } = useSelector(state => selectOrgMemberByID(state, author_id)) || {\n    id: '',\n    first_name: '',\n    last_name: ''\n  };\n  const authorName = `${first_name} ${last_name}`;\n  return __jsx(Stack, _extends({\n    isInline: true,\n    marginTop: \".625rem\",\n    spacing: \".625rem\",\n    alignItems: \"flex-start\"\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }), __jsx(Avatar, {\n    size: \"2xs\",\n    name: authorName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    isInline: true,\n    color: \"#828282\",\n    spacing: \".5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, authorName), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, `- ${formatMessageDateTime(created_datetime ? new Date(created_datetime) : new Date())}`)), children));\n}\n\nfunction NoteItem({\n  noteID\n}) {\n  const {\n    author_id,\n    created_datetime,\n    content\n  } = useSelector(state => selectNoteById(state, noteID)) || INBOX_INIT.note;\n  return __jsx(NoteItemAuthor, {\n    author_id: author_id,\n    created_datetime: created_datetime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, __jsx(Text, {\n    color: \"#333\",\n    marginTop: \".5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport function Note(_ref2) {\n  let props = Object.assign({}, _ref2);\n  const dispatch = useDispatch();\n  const params = useParams();\n  const textAreaRef = useRef(null);\n  const {\n    0: text,\n    1: setText\n  } = useState('');\n  const toast = useToast();\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  const noteIDs = useSelector(state => selectThreadNoteIDs(state, {\n    thread_id: params.id\n  }));\n  const meta = useSelector(state => selectNoteMetaByThreadID(state, {\n    thread_id: params.id\n  }));\n\n  const handleSubmit = async () => {\n    if (text.trim() && params.id !== 'start') {\n      try {\n        await dispatch(sendThreadNote({\n          content: text,\n          thread_id: params.id\n        }));\n        setText('');\n      } catch (message) {\n        toast({\n          position: 'bottom-left',\n          render: ({\n            onClose\n          }) => __jsx(ToastBox, {\n            onClose: onClose,\n            message: message,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 36\n            }\n          })\n        });\n      }\n    }\n  };\n\n  const fetchMoreData = () => {\n    const {\n      count: number = 0,\n      page = 0\n    } = meta || {};\n\n    if (count !== 0 && Math.ceil(count / 15 - page) === 0) {\n      return setHasMore(false);\n    }\n\n    return params.id && params.id !== 'start' && dispatch(fetchThreadNotes({\n      page: page + 1,\n      thread_id: params.id\n    }));\n  }; // fetch the conversation messages\n\n\n  useEffect(() => {\n    setHasMore(true);\n    fetchMoreData(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [params.id]);\n  useEffect(() => {\n    setText('');\n  }, [params.id]);\n  return __jsx(Flex, _extends({\n    flexDirection: \"column\",\n    flex: 1,\n    className: \"notes-container\",\n    overflowY: \"hidden\"\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }\n  }), noteIDs.length > 0 && __jsx(Stack, {\n    flexDirection: \"column-reverse\",\n    overflowY: \"auto\",\n    flex: 1,\n    className: \"notes\",\n    id: \"note-scrollable\",\n    marginTop: \".75rem\",\n    fontSize: \".75rem\",\n    lineHeight: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, __jsx(InfiniteScroll, {\n    dataLength: noteIDs.length,\n    next: fetchMoreData,\n    hasMore: hasMore,\n    inverse: true,\n    scrollableTarget: \"note-scrollable\",\n    loader: __jsx(Box, {\n      textAlign: \"center\",\n      paddingTop: \"2rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 15\n      }\n    }, __jsx(Spinner, {\n      color: \"blue.500\",\n      size: \"md\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }\n    })),\n    style: {\n      flex: 1,\n      display: 'flex',\n      paddingRight: '1.5rem',\n      flexDirection: 'column-reverse'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, noteIDs.map(noteID => __jsx(NoteItem, {\n    key: noteID,\n    noteID: noteID,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 15\n    }\n  })))), __jsx(Box, {\n    className: \"editor\",\n    position: \"relative\",\n    marginRight: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }, __jsx(IconButton // @ts-ignore\n  , {\n    icon: \"send\",\n    \"aria-label\": \"send-note\",\n    variant: \"ghost\",\n    color: \"#333\",\n    padding: \".25rem\",\n    position: \"absolute\",\n    height: \"auto\",\n    minWidth: \"auto\",\n    bottom: \"0.90625rem\",\n    right: \".375rem\",\n    isDisabled: !text.trim(),\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }), __jsx(Editor, {\n    setText: setText,\n    handleSubmit: handleSubmit,\n    textAreaRef: textAreaRef,\n    value: text,\n    onChange: e => setText(e.target.value),\n    placeholder: \"Write a note...\",\n    style: {\n      backgroundColor: '#f2f2f2',\n      borderRadius: '3px',\n      width: '100%',\n      marginTop: '1rem',\n      padding: '.625rem .5rem',\n      resize: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/inbox/components/more-info/Note.tsx"],"names":["React","useEffect","useRef","useState","Avatar","Box","Flex","IconButton","Spinner","Stack","Text","useToast","useParams","useDispatch","useSelector","fetchThreadNotes","selectNoteById","selectThreadNoteIDs","sendThreadNote","selectNoteMetaByThreadID","selectOrgMemberByID","INBOX_INIT","formatMessageDateTime","Editor","ToastBox","InfiniteScroll","NoteItemAuthor","author_id","created_datetime","children","props","first_name","last_name","state","id","authorName","Date","NoteItem","noteID","content","note","Note","dispatch","params","textAreaRef","text","setText","toast","hasMore","setHasMore","noteIDs","thread_id","meta","handleSubmit","trim","message","position","render","onClose","fetchMoreData","count","number","page","Math","ceil","length","flex","display","paddingRight","flexDirection","map","e","target","value","backgroundColor","borderRadius","width","marginTop","padding","resize"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport {\n  Avatar,\n  Box,\n  BoxProps,\n  Flex,\n  IconButton,\n  Spinner,\n  Stack,\n  StackProps,\n  Text,\n  useToast,\n} from '@chakra-ui/core';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../../../../root';\nimport {\n  fetchThreadNotes,\n  selectNoteById,\n  selectThreadNoteIDs,\n  sendThreadNote,\n  selectNoteMetaByThreadID,\n} from '../../slices';\nimport { NoteSchema } from '../../inbox.types';\nimport { selectOrgMemberByID } from '../../../settings/slices';\nimport { INBOX_INIT } from '../../inbox.data';\nimport { formatMessageDateTime } from '../../inbox.utils';\nimport { Editor } from '../messages';\nimport { ToastBox } from '../../../../components';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nfunction NoteItemAuthor({\n  author_id,\n  created_datetime,\n  children,\n  ...props\n}: Pick<NoteSchema, 'author_id' | 'created_datetime'> & StackProps) {\n  const { first_name, last_name } = useSelector((state: RootState) =>\n    selectOrgMemberByID(state, author_id),\n  ) || { id: '', first_name: '', last_name: '' };\n\n  const authorName = `${first_name} ${last_name}`;\n\n  return (\n    <Stack isInline marginTop=\".625rem\" spacing=\".625rem\" alignItems=\"flex-start\" {...props}>\n      <Avatar size=\"2xs\" name={authorName} />\n\n      <Box>\n        <Stack isInline color=\"#828282\" spacing=\".5rem\">\n          <Text>{authorName}</Text>\n          <Text>\n            {`- ${formatMessageDateTime(\n              created_datetime ? new Date(created_datetime) : new Date(),\n            )}`}\n          </Text>\n        </Stack>\n\n        {children}\n      </Box>\n    </Stack>\n  );\n}\n\nfunction NoteItem({ noteID }: { noteID: NoteSchema['uuid'] }) {\n  const { author_id, created_datetime, content } =\n    useSelector((state: RootState) => selectNoteById(state, noteID)) || INBOX_INIT.note;\n\n  return (\n    <NoteItemAuthor author_id={author_id} created_datetime={created_datetime}>\n      <Text color=\"#333\" marginTop=\".5rem\">\n        {content}\n      </Text>\n    </NoteItemAuthor>\n  );\n}\n\nexport function Note({ ...props }: BoxProps) {\n  const dispatch = useDispatch();\n  const params = useParams<{ id: string }>();\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n  const [text, setText] = useState('');\n  const toast = useToast();\n  const [hasMore, setHasMore] = useState(true);\n  const noteIDs = useSelector((state: RootState) =>\n    selectThreadNoteIDs(state, { thread_id: params.id }),\n  );\n  const meta = useSelector((state: RootState) =>\n    selectNoteMetaByThreadID(state, { thread_id: params.id }),\n  );\n\n  const handleSubmit = async () => {\n    if (text.trim() && params.id !== 'start') {\n      try {\n        await dispatch(\n          sendThreadNote({\n            content: text,\n            thread_id: params.id,\n          }),\n        );\n        setText('');\n      } catch (message) {\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => <ToastBox onClose={onClose} message={message} />,\n        });\n      }\n    }\n  };\n\n  const fetchMoreData = () => {\n    const { count: number = 0, page = 0 } = meta || {};\n    if (count !== 0 && Math.ceil(count / 15 - page) === 0) {\n      return setHasMore(false);\n    }\n\n    return (\n      params.id &&\n      params.id !== 'start' &&\n      dispatch(\n        fetchThreadNotes({\n          page: page + 1,\n          thread_id: params.id,\n        }),\n      )\n    );\n  };\n\n  // fetch the conversation messages\n  useEffect(() => {\n    setHasMore(true);\n    fetchMoreData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [params.id]);\n\n  useEffect(() => {\n    setText('');\n  }, [params.id]);\n\n  return (\n    <Flex flexDirection=\"column\" flex={1} className=\"notes-container\" overflowY=\"hidden\" {...props}>\n      {noteIDs.length > 0 && (\n        <Stack\n          flexDirection=\"column-reverse\"\n          overflowY=\"auto\"\n          flex={1}\n          className=\"notes\"\n          id=\"note-scrollable\"\n          marginTop=\".75rem\"\n          fontSize=\".75rem\"\n          lineHeight=\"1rem\"\n        >\n          <InfiniteScroll\n            dataLength={noteIDs.length}\n            next={fetchMoreData}\n            hasMore={hasMore}\n            inverse={true}\n            scrollableTarget=\"note-scrollable\"\n            loader={\n              <Box textAlign=\"center\" paddingTop=\"2rem\">\n                <Spinner color=\"blue.500\" size=\"md\" />\n              </Box>\n            }\n            style={{\n              flex: 1,\n              display: 'flex',\n              paddingRight: '1.5rem',\n              flexDirection: 'column-reverse',\n            }}\n          >\n            {noteIDs.map(noteID => (\n              <NoteItem key={noteID} noteID={noteID} />\n            ))}\n          </InfiniteScroll>\n        </Stack>\n      )}\n\n      <Box className=\"editor\" position=\"relative\" marginRight=\"1.5rem\">\n        <IconButton\n          // @ts-ignore\n          icon=\"send\"\n          aria-label=\"send-note\"\n          variant=\"ghost\"\n          color=\"#333\"\n          padding=\".25rem\"\n          position=\"absolute\"\n          height=\"auto\"\n          minWidth=\"auto\"\n          bottom=\"0.90625rem\"\n          right=\".375rem\"\n          isDisabled={!text.trim()}\n          onClick={handleSubmit}\n        />\n\n        <Editor\n          setText={setText}\n          handleSubmit={handleSubmit}\n          textAreaRef={textAreaRef}\n          value={text}\n          onChange={(e: any) => setText(e.target.value)}\n          placeholder=\"Write a note...\"\n          style={{\n            backgroundColor: '#f2f2f2',\n            borderRadius: '3px',\n            width: '100%',\n            marginTop: '1rem',\n            padding: '.625rem .5rem',\n            resize: 'none',\n          }}\n        />\n      </Box>\n    </Flex>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}