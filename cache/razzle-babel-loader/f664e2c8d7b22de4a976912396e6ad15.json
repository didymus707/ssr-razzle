{"ast":null,"code":"import _extends from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nconst _excluded = [\"smart_sending\"];\nvar _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/marketing/campaigns/components/planner/planner.setup.tsx\";\nvar __jsx = React.createElement;\nimport { Box, FormControl, FormErrorMessage, FormLabel, Icon, Radio, RadioGroup, Stack, Text, Tooltip, useDisclosure, useToast } from '@chakra-ui/core';\nimport { Input } from 'app/components';\nimport { useFormik } from 'formik';\nimport { isEmpty } from 'lodash';\nimport React from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport * as yup from 'yup';\nimport { useLoading } from '../../../../../../hooks';\nimport { client, numberWithCommas, toFormData } from '../../../../../../utils';\nimport { sendAmplitudeData } from '../../../../../../utils/amplitude';\nimport { AdvancedSelect, ToastBox } from '../../../../../components';\nimport { getCampaignAudience } from '../../campaigns.service';\nimport { NewAudienceModal } from './new-audience-modal';\nimport { SectionFooter } from './planner.layout';\nexport const Setup = ({\n  lists,\n  states,\n  genders,\n  onGoBack,\n  onSubmit,\n  religions,\n  addAudience,\n  hasAudiences,\n  ethnicGroups,\n  initialValues,\n  isAbTest = false,\n  organisationName,\n  importBulkUpload\n}) => {\n  var _initialValues$varian, _initialValues$conten;\n\n  const setupInitialValues = {\n    name: '',\n    count: 0,\n    table_id: null,\n    import_id: null,\n    campaign_id: '',\n    segment_id: null,\n    audience_id: null,\n    smart_sending: '1',\n    variants_count: '',\n    smart_list_id: null,\n    sender_id: organisationName !== null && organisationName !== void 0 ? organisationName : ''\n  };\n  const validationSchema = yup.object().shape({\n    name: yup.string().required('Campaign name is required'),\n    campaign_id: yup.string().required('Select campaign recipients'),\n    variants_count: isAbTest ? yup.string().required('Variant count is required') : yup.string()\n  });\n  const toast = useToast();\n  const {\n    dispatch,\n    loading\n  } = useLoading();\n  const {\n    isOpen: isOpenNewAudienceModal,\n    onOpen: onOpenNewAudienceModal,\n    onClose: onCloseNewAudienceModal\n  } = useDisclosure();\n  const {\n    touched,\n    errors,\n    values,\n    handleSubmit,\n    handleChange,\n    setFieldValue\n  } = useFormik({\n    validationSchema,\n    enableReinitialize: true,\n    onSubmit: values => {\n      const {\n        smart_sending\n      } = values,\n            rest = _objectWithoutProperties(values, _excluded);\n\n      onSubmit(_objectSpread(_objectSpread({}, rest), {}, {\n        smart_sending,\n        is_smart_send: smart_sending === '1'\n      }));\n    },\n    initialValues: isEmpty(initialValues) ? setupInitialValues : _objectSpread(_objectSpread({}, initialValues), {}, {\n      campaign_id: (initialValues === null || initialValues === void 0 ? void 0 : initialValues.smart_list_id) || (initialValues === null || initialValues === void 0 ? void 0 : initialValues.table_id) || (initialValues === null || initialValues === void 0 ? void 0 : initialValues.import_id) || (initialValues === null || initialValues === void 0 ? void 0 : initialValues.segment_id) || (initialValues === null || initialValues === void 0 ? void 0 : initialValues.audience_id),\n      smart_sending: initialValues !== null && initialValues !== void 0 && initialValues.is_smart_send ? '1' : '0',\n      variants_count: (_initialValues$varian = initialValues === null || initialValues === void 0 ? void 0 : initialValues.variants_count) !== null && _initialValues$varian !== void 0 ? _initialValues$varian : initialValues === null || initialValues === void 0 ? void 0 : (_initialValues$conten = initialValues.contents) === null || _initialValues$conten === void 0 ? void 0 : _initialValues$conten.length.toString()\n    })\n  });\n  const inputRef = React.useRef(null);\n  React.useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const handleGetListCount = async payload => {\n    try {\n      const {\n        audience\n      } = await getCampaignAudience(payload);\n      return audience.count;\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  };\n\n  const handleGetAudience = async audienceId => {\n    try {\n      const response = await client(`audience_list/${audienceId}`);\n      const {\n        audience_list\n      } = response.data;\n      return audience_list;\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  };\n\n  const handleBulkUpload = async files => {\n    const file = files[0];\n\n    if (importBulkUpload) {\n      try {\n        const payload = toFormData({\n          name: file.name\n        }, file, 'file');\n        const data = await importBulkUpload(payload);\n        setFieldValue('import_id', data.import.id);\n        setFieldValue('campaign_id', data.import.id);\n        setFieldValue('count', data.import.count);\n        setFieldValue('table_id', null);\n        setFieldValue('smart_list_id', null);\n        setFieldValue('segment_id', null);\n        setFieldValue('audience_type', 3);\n        sendAmplitudeData('campaignBulkUpload', {\n          count: data.import.count,\n          id: data.import.id\n        });\n        toast({\n          position: 'bottom-left',\n          render: ({\n            onClose\n          }) => __jsx(ToastBox, {\n            status: \"success\",\n            onClose: onClose,\n            message: \"File uploaded successfully\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 13\n            }\n          })\n        });\n      } catch (error) {\n        toast({\n          position: 'bottom-left',\n          render: ({\n            onClose\n          }) => __jsx(ToastBox, {\n            onClose: onClose,\n            message: error,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 36\n            }\n          })\n        });\n      }\n    }\n  };\n\n  const handleAudienceChange = async value => {\n    if (value === 'import') {\n      open();\n    } else if (value === 'new-audience') {\n      onOpenNewAudienceModal();\n    } else {\n      var _value, _value2, _value3;\n\n      if ((_value = value) !== null && _value !== void 0 && _value.endsWith('-smartList')) {\n        value = value.replace('-smartList', '');\n        const count = await handleGetListCount({\n          smart_list_id: value,\n          audience_type: 2\n        });\n        setFieldValue('smart_list_id', value);\n        setFieldValue('campaign_id', value);\n        setFieldValue('table_id', null);\n        setFieldValue('import_id', null);\n        setFieldValue('audience_id', null);\n        setFieldValue('segment_id', null);\n        setFieldValue('count', count);\n        setFieldValue('audience_type', 2);\n        sendAmplitudeData('campaignListSelected', {\n          smart_list_id: value\n        });\n      } else if ((_value2 = value) !== null && _value2 !== void 0 && _value2.endsWith('-audience')) {\n        var _audience$filters$cou;\n\n        value = value.replace('-audience', '');\n        const audience = await handleGetAudience(value);\n        setFieldValue('audience_id', value);\n        setFieldValue('campaign_id', value);\n        setFieldValue('table_id', null);\n        setFieldValue('import_id', null);\n        setFieldValue('smart_list_id', null);\n        setFieldValue('segment_id', null);\n        setFieldValue('count', (_audience$filters$cou = audience.filters.count) !== null && _audience$filters$cou !== void 0 ? _audience$filters$cou : 0);\n        setFieldValue('audience_type', 1);\n        sendAmplitudeData('campaignListSelected', {\n          audience_id: value\n        });\n      } else if ((_value3 = value) !== null && _value3 !== void 0 && _value3.endsWith('-segment')) {\n        var _audience$filters$cou2, _audience$filters;\n\n        value = value.replace('-segment', '');\n        const audience = await handleGetListCount({\n          segment_id: value,\n          audience_type: 2\n        });\n        setFieldValue('segment_id', value);\n        setFieldValue('campaign_id', value);\n        setFieldValue('table_id', null);\n        setFieldValue('import_id', null);\n        setFieldValue('smart_list_id', null);\n        setFieldValue('audience_id', null);\n        setFieldValue('count', (_audience$filters$cou2 = audience === null || audience === void 0 ? void 0 : (_audience$filters = audience.filters) === null || _audience$filters === void 0 ? void 0 : _audience$filters.count) !== null && _audience$filters$cou2 !== void 0 ? _audience$filters$cou2 : 0);\n        setFieldValue('audience_type', 2);\n        sendAmplitudeData('campaignListSelected', {\n          audience_id: value\n        });\n      } else {\n        const count = await handleGetListCount({\n          table_id: value,\n          audience_type: 2\n        });\n        setFieldValue('table_id', value);\n        setFieldValue('campaign_id', value);\n        setFieldValue('import_id', null);\n        setFieldValue('smart_list_id', null);\n        setFieldValue('audience_id', null);\n        setFieldValue('segment_id', null);\n        setFieldValue('count', count);\n        setFieldValue('audience_type', 2);\n        sendAmplitudeData('campaignListSelected', {\n          table_id: value\n        });\n      }\n    }\n  };\n\n  const handleCreateNewAudience = async payload => {\n    try {\n      const {\n        name,\n        state,\n        lga,\n        gender,\n        count,\n        predicted_religion,\n        predicted_ethnicity\n      } = payload;\n      dispatch({\n        type: 'LOADING_STARTED'\n      });\n      const audience_list = await addAudience({\n        name,\n        filters: {\n          lga: lga ? lga : undefined,\n          state: state ? state : undefined,\n          count: count ? count : undefined,\n          gender: gender ? gender : undefined,\n          predicted_religion: predicted_religion ? predicted_religion : undefined,\n          predicted_ethnicity: predicted_ethnicity ? predicted_ethnicity : undefined\n        }\n      });\n      dispatch({\n        type: 'LOADING_RESOLVED'\n      });\n      setFieldValue('audience_id', `${audience_list.id}`);\n      setFieldValue('campaign_id', `${audience_list.id}`);\n      setFieldValue('count', audience_list.filters.count);\n      setFieldValue('audience_type', 1);\n      onCloseNewAudienceModal();\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          status: \"success\",\n          onClose: onClose,\n          message: \"Audience created\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 11\n          }\n        })\n      });\n      sendAmplitudeData('newAudienceCreated', {\n        data: payload\n      });\n    } catch (error) {\n      dispatch({\n        type: 'LOADING_RESOLVED'\n      });\n      toast({\n        position: 'bottom-left',\n        render: ({\n          onClose\n        }) => __jsx(ToastBox, {\n          onClose: onClose,\n          message: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 34\n          }\n        })\n      });\n    }\n  };\n\n  const {\n    getInputProps,\n    open\n  } = useDropzone({\n    // Disable click and keydown behavior\n    noClick: true,\n    noKeyboard: true,\n    maxSize: 52428800,\n    onDrop: handleBulkUpload,\n    accept: '.csv, .xls, .xlsx'\n  });\n\n  const getAudienceValue = () => {\n    const {\n      table_id,\n      audience_id,\n      smart_list_id,\n      segment_id\n    } = values;\n\n    if (!!table_id) {\n      return table_id;\n    }\n\n    if (!!smart_list_id) {\n      return `${smart_list_id}-smartList`;\n    }\n\n    if (!!audience_id) {\n      return `${audience_id}-audience`;\n    }\n\n    if (!!segment_id) {\n      return `${segment_id}-segment`;\n    }\n\n    return '';\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Box, {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    className: \"left-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", _extends({}, getInputProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 11\n    }\n  })), __jsx(Box, {\n    mb: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    ref: inputRef,\n    value: values.name,\n    label: \"Campaign name\",\n    onChange: handleChange,\n    errorMessage: errors.name,\n    placeholder: \"Give your campaign a name\",\n    isInvalid: !!touched.name && !!errors.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 13\n    }\n  })), __jsx(Box, {\n    mb: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    type: \"text\",\n    isDisabled: true,\n    name: \"sender_id\",\n    onChange: handleChange,\n    value: values.sender_id,\n    errorMessage: errors.sender_id,\n    isInvalid: !!touched.sender_id && !!errors.sender_id,\n    label: __jsx(Stack, {\n      isInline: true,\n      alignItems: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 17\n      }\n    }, __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 19\n      }\n    }, \"Campaign sender ID\"), __jsx(Tooltip, {\n      zIndex: 10000,\n      placement: \"right\",\n      \"aria-label\": \"Campaign sender id\",\n      label: \"A Sender ID is a quick way to let recipients of your campaign know exactly who it is from.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 19\n      }\n    }, __jsx(Icon, {\n      size: \"0.75rem\",\n      name: \"info\",\n      color: \"gray.500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 21\n      }\n    }))),\n    placeholder: \"Give your campaign a sender ID\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 13\n    }\n  })), isAbTest && __jsx(FormControl, {\n    mb: \"2rem\",\n    isInvalid: !!touched.variants_count && !!errors.variants_count,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 13\n    }\n  }, __jsx(AdvancedSelect, {\n    options: [1, 2, 3, 4].map(item => ({\n      value: item.toString(),\n      label: item.toString()\n    })),\n    value: values.variants_count,\n    placeholder: \"Select the number of variants\",\n    isInvalid: !!touched.variants_count && !!errors.variants_count,\n    onChange: ({\n      value\n    }) => setFieldValue('variants_count', value),\n    label: __jsx(Stack, {\n      isInline: true,\n      alignItems: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 19\n      }\n    }, __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 21\n      }\n    }, \"Number of message variants\"), __jsx(Tooltip, {\n      zIndex: 10000,\n      placement: \"right\",\n      \"aria-label\": \"Number of message variants\",\n      label: \"More recipients means more accurate results. We recommend at least 500 recipients per message variant.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 21\n      }\n    }, __jsx(Icon, {\n      size: \"0.75rem\",\n      name: \"info\",\n      color: \"gray.500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 23\n      }\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 15\n    }\n  }), __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 15\n    }\n  }, errors.variants_count)), __jsx(FormControl, {\n    mb: \"1rem\",\n    isInvalid: !!touched.campaign_id && !!errors.campaign_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 11\n    }\n  }, __jsx(AdvancedSelect, {\n    isGroup: true,\n    isSearchable: true,\n    options: lists,\n    value: getAudienceValue(),\n    label: __jsx(Stack, {\n      isInline: true,\n      alignItems: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 17\n      }\n    }, __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 19\n      }\n    }, \"Who will you send this campaign to?\"), __jsx(Tooltip, {\n      zIndex: 10000,\n      placement: \"right\",\n      \"aria-label\": \"Campaign recipients\",\n      label: \"Choose from your list, smart lists, segments, or target new audiences.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 19\n      }\n    }, __jsx(Icon, {\n      size: \"0.75rem\",\n      name: \"info\",\n      color: \"gray.500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 21\n      }\n    }))),\n    placeholder: \"Search & Select a list\",\n    onChange: ({\n      value\n    }) => handleAudienceChange(value),\n    isInvalid: !!touched.campaign_id && !!errors.campaign_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 13\n    }\n  }), __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 13\n    }\n  }, errors.campaign_id)), __jsx(Stack, {\n    spacing: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 11\n    }\n  }, __jsx(FormLabel, {\n    pb: \"0\",\n    fontSize: \"0.875rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 13\n    }\n  }, __jsx(Stack, {\n    isInline: true,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 15\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 17\n    }\n  }, \"Do you want to use Smart Sending?\"), __jsx(Tooltip, {\n    zIndex: 10000,\n    placement: \"right\",\n    \"aria-label\": \"Campaign smart sending\",\n    label: \"Smart Sending automatically prevents subscribers who've recently received a one-time message from receiving another too quickly.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 17\n    }\n  }, __jsx(Icon, {\n    size: \"0.75rem\",\n    name: \"info\",\n    color: \"gray.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 19\n    }\n  })))), __jsx(Text, {\n    fontSize: \"0.75rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 13\n    }\n  }, \"If used, subscribers who have received a message within your Smart Sending (8 hours) will be muted from this send.\"), __jsx(RadioGroup, {\n    isInline: true,\n    spacing: 5,\n    name: \"smart_sending\",\n    onChange: handleChange,\n    value: values.smart_sending,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 13\n    }\n  }, __jsx(Radio, {\n    size: \"sm\",\n    value: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 15\n    }\n  }, \"Use Smart Sending\"), __jsx(Radio, {\n    size: \"sm\",\n    value: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 15\n    }\n  }, \"Don't use Smart Sending\"))), __jsx(SectionFooter, {\n    onGoBack: onGoBack,\n    goBackLabel: \"Cancel\",\n    onContinue: handleSubmit,\n    continueLabel: \"Save & Continue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 11\n    }\n  })), __jsx(Box, {\n    className: \"right-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    px: \"2rem\",\n    py: \"1rem\",\n    width: \"80%\",\n    borderRadius: \"8px\",\n    boxShadow: \"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    pb: \"0.5rem\",\n    fontSize: \"0.875rem\",\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 13\n    }\n  }, \"Estimated recipients\"), __jsx(Text, {\n    fontSize: \"1rem\",\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 13\n    }\n  }, numberWithCommas(values.count))))), __jsx(NewAudienceModal, {\n    states: states,\n    genders: genders,\n    religions: religions,\n    ethnicGroups: ethnicGroups,\n    hasAudiences: hasAudiences,\n    isOpen: isOpenNewAudienceModal,\n    isLoading: loading === 'pending',\n    onClose: onCloseNewAudienceModal,\n    onSubmit: handleCreateNewAudience,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/marketing/campaigns/components/planner/planner.setup.tsx"],"names":["Box","FormControl","FormErrorMessage","FormLabel","Icon","Radio","RadioGroup","Stack","Text","Tooltip","useDisclosure","useToast","Input","useFormik","isEmpty","React","useDropzone","yup","useLoading","client","numberWithCommas","toFormData","sendAmplitudeData","AdvancedSelect","ToastBox","getCampaignAudience","NewAudienceModal","SectionFooter","Setup","lists","states","genders","onGoBack","onSubmit","religions","addAudience","hasAudiences","ethnicGroups","initialValues","isAbTest","organisationName","importBulkUpload","setupInitialValues","name","count","table_id","import_id","campaign_id","segment_id","audience_id","smart_sending","variants_count","smart_list_id","sender_id","validationSchema","object","shape","string","required","toast","dispatch","loading","isOpen","isOpenNewAudienceModal","onOpen","onOpenNewAudienceModal","onClose","onCloseNewAudienceModal","touched","errors","values","handleSubmit","handleChange","setFieldValue","enableReinitialize","rest","is_smart_send","contents","length","toString","inputRef","useRef","useEffect","current","focus","handleGetListCount","payload","audience","error","position","render","handleGetAudience","audienceId","response","audience_list","data","handleBulkUpload","files","file","import","id","handleAudienceChange","value","open","endsWith","replace","audience_type","filters","handleCreateNewAudience","state","lga","gender","predicted_religion","predicted_ethnicity","type","undefined","getInputProps","noClick","noKeyboard","maxSize","onDrop","accept","getAudienceValue","map","item","label"],"mappings":"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","sourcesContent":["import {\n  Box,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Icon,\n  Radio,\n  RadioGroup,\n  Stack,\n  Text,\n  Tooltip,\n  useDisclosure,\n  useToast,\n} from '@chakra-ui/core';\nimport { Input } from 'app/components';\nimport { useFormik } from 'formik';\nimport { isEmpty } from 'lodash';\nimport React from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport * as yup from 'yup';\nimport { useLoading } from '../../../../../../hooks';\nimport { client, numberWithCommas, toFormData } from '../../../../../../utils';\nimport { sendAmplitudeData } from '../../../../../../utils/amplitude';\nimport { AdvancedSelect, ToastBox } from '../../../../../components';\nimport { getCampaignAudience } from '../../campaigns.service';\nimport { NewAudienceModal } from './new-audience-modal';\nimport { CampaignPayload } from './planner.index';\nimport { SectionFooter, SectionFooterProps } from './planner.layout';\n\ninterface SetupProps {\n  lists?: any;\n  audience?: [];\n  states?: any[];\n  genders?: any[];\n  religions?: any[];\n  isAbTest?: boolean;\n  ethnicGroups?: any[];\n  hasAudiences?: boolean;\n  organisationName?: string;\n  initialValues?: CampaignPayload;\n  onGoBack: SectionFooterProps['onGoBack'];\n  onSubmit: (data: CampaignPayload) => void;\n  importBulkUpload?: (payload: FormData) => Promise<any>;\n  addAudience: (payload: {\n    name: string;\n    filters: { [key: string]: string[] | string | number | undefined };\n  }) => any;\n}\n\nexport const Setup = ({\n  lists,\n  states,\n  genders,\n  onGoBack,\n  onSubmit,\n  religions,\n  addAudience,\n  hasAudiences,\n  ethnicGroups,\n  initialValues,\n  isAbTest = false,\n  organisationName,\n  importBulkUpload,\n}: SetupProps) => {\n  const setupInitialValues: CampaignPayload = {\n    name: '',\n    count: 0,\n    table_id: null,\n    import_id: null,\n    campaign_id: '',\n    segment_id: null,\n    audience_id: null,\n    smart_sending: '1',\n    variants_count: '',\n    smart_list_id: null,\n    sender_id: organisationName ?? '',\n  };\n  const validationSchema = yup.object().shape({\n    name: yup.string().required('Campaign name is required'),\n    campaign_id: yup.string().required('Select campaign recipients'),\n    variants_count: isAbTest ? yup.string().required('Variant count is required') : yup.string(),\n  });\n\n  const toast = useToast();\n  const { dispatch, loading } = useLoading();\n  const {\n    isOpen: isOpenNewAudienceModal,\n    onOpen: onOpenNewAudienceModal,\n    onClose: onCloseNewAudienceModal,\n  } = useDisclosure();\n  const { touched, errors, values, handleSubmit, handleChange, setFieldValue } = useFormik({\n    validationSchema,\n    enableReinitialize: true,\n    onSubmit: values => {\n      const { smart_sending, ...rest } = values;\n      onSubmit({\n        ...rest,\n        smart_sending,\n        is_smart_send: smart_sending === '1',\n      });\n    },\n    initialValues: isEmpty(initialValues)\n      ? setupInitialValues\n      : {\n          ...initialValues,\n          campaign_id:\n            initialValues?.smart_list_id ||\n            initialValues?.table_id ||\n            initialValues?.import_id ||\n            initialValues?.segment_id ||\n            initialValues?.audience_id,\n          smart_sending: initialValues?.is_smart_send ? '1' : '0',\n          variants_count:\n            initialValues?.variants_count ?? initialValues?.contents?.length.toString(),\n        },\n  });\n\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const handleGetListCount = async (payload: {\n    smart_list_id?: string;\n    table_id?: string;\n    group_id?: string;\n    segment_id?: string;\n    audience_type: number;\n  }) => {\n    try {\n      const { audience } = await getCampaignAudience(payload);\n      return audience.count;\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n  };\n\n  const handleGetAudience = async (audienceId: string) => {\n    try {\n      const response = await client(`audience_list/${audienceId}`);\n      const { audience_list } = response.data;\n      return audience_list;\n    } catch (error) {\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n  };\n\n  const handleBulkUpload = async (files: File[]) => {\n    const file = files[0];\n    if (importBulkUpload) {\n      try {\n        const payload = toFormData({ name: file.name }, file, 'file');\n        const data = await importBulkUpload(payload);\n        setFieldValue('import_id', data.import.id);\n        setFieldValue('campaign_id', data.import.id);\n        setFieldValue('count', data.import.count);\n        setFieldValue('table_id', null);\n        setFieldValue('smart_list_id', null);\n        setFieldValue('segment_id', null);\n        setFieldValue('audience_type', 3);\n        sendAmplitudeData('campaignBulkUpload', {\n          count: data.import.count,\n          id: data.import.id,\n        });\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => (\n            <ToastBox status=\"success\" onClose={onClose} message=\"File uploaded successfully\" />\n          ),\n        });\n      } catch (error) {\n        toast({\n          position: 'bottom-left',\n          render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n        });\n      }\n    }\n  };\n\n  const handleAudienceChange = async (value?: string) => {\n    if (value === 'import') {\n      open();\n    } else if (value === 'new-audience') {\n      onOpenNewAudienceModal();\n    } else {\n      if (value?.endsWith('-smartList')) {\n        value = value.replace('-smartList', '');\n        const count = await handleGetListCount({ smart_list_id: value, audience_type: 2 });\n        setFieldValue('smart_list_id', value);\n        setFieldValue('campaign_id', value);\n        setFieldValue('table_id', null);\n        setFieldValue('import_id', null);\n        setFieldValue('audience_id', null);\n        setFieldValue('segment_id', null);\n        setFieldValue('count', count);\n        setFieldValue('audience_type', 2);\n        sendAmplitudeData('campaignListSelected', {\n          smart_list_id: value,\n        });\n      } else if (value?.endsWith('-audience')) {\n        value = value.replace('-audience', '');\n        const audience = await handleGetAudience(value);\n        setFieldValue('audience_id', value);\n        setFieldValue('campaign_id', value);\n        setFieldValue('table_id', null);\n        setFieldValue('import_id', null);\n        setFieldValue('smart_list_id', null);\n        setFieldValue('segment_id', null);\n        setFieldValue('count', audience.filters.count ?? 0);\n        setFieldValue('audience_type', 1);\n        sendAmplitudeData('campaignListSelected', {\n          audience_id: value,\n        });\n      } else if (value?.endsWith('-segment')) {\n        value = value.replace('-segment', '');\n        const audience = await handleGetListCount({ segment_id: value, audience_type: 2 });\n        setFieldValue('segment_id', value);\n        setFieldValue('campaign_id', value);\n        setFieldValue('table_id', null);\n        setFieldValue('import_id', null);\n        setFieldValue('smart_list_id', null);\n        setFieldValue('audience_id', null);\n        setFieldValue('count', audience?.filters?.count ?? 0);\n        setFieldValue('audience_type', 2);\n        sendAmplitudeData('campaignListSelected', {\n          audience_id: value,\n        });\n      } else {\n        const count = await handleGetListCount({ table_id: value, audience_type: 2 });\n        setFieldValue('table_id', value);\n        setFieldValue('campaign_id', value);\n        setFieldValue('import_id', null);\n        setFieldValue('smart_list_id', null);\n        setFieldValue('audience_id', null);\n        setFieldValue('segment_id', null);\n        setFieldValue('count', count);\n        setFieldValue('audience_type', 2);\n        sendAmplitudeData('campaignListSelected', {\n          table_id: value,\n        });\n      }\n    }\n  };\n\n  const handleCreateNewAudience = async (payload: {\n    name: string;\n    count: number;\n    lga?: string[];\n    state?: string[];\n    gender?: string[];\n    predicted_religion?: string[];\n    predicted_ethnicity?: string[];\n  }) => {\n    try {\n      const { name, state, lga, gender, count, predicted_religion, predicted_ethnicity } = payload;\n      dispatch({ type: 'LOADING_STARTED' });\n      const audience_list = await addAudience({\n        name,\n        filters: {\n          lga: lga ? lga : undefined,\n          state: state ? state : undefined,\n          count: count ? count : undefined,\n          gender: gender ? gender : undefined,\n          predicted_religion: predicted_religion ? predicted_religion : undefined,\n          predicted_ethnicity: predicted_ethnicity ? predicted_ethnicity : undefined,\n        },\n      });\n      dispatch({ type: 'LOADING_RESOLVED' });\n      setFieldValue('audience_id', `${audience_list.id}`);\n      setFieldValue('campaign_id', `${audience_list.id}`);\n      setFieldValue('count', audience_list.filters.count);\n      setFieldValue('audience_type', 1);\n      onCloseNewAudienceModal();\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => (\n          <ToastBox status=\"success\" onClose={onClose} message=\"Audience created\" />\n        ),\n      });\n      sendAmplitudeData('newAudienceCreated', { data: payload });\n    } catch (error) {\n      dispatch({ type: 'LOADING_RESOLVED' });\n      toast({\n        position: 'bottom-left',\n        render: ({ onClose }) => <ToastBox onClose={onClose} message={error} />,\n      });\n    }\n  };\n\n  const { getInputProps, open } = useDropzone({\n    // Disable click and keydown behavior\n    noClick: true,\n    noKeyboard: true,\n    maxSize: 52428800,\n    onDrop: handleBulkUpload,\n    accept: '.csv, .xls, .xlsx',\n  });\n\n  const getAudienceValue = () => {\n    const { table_id, audience_id, smart_list_id, segment_id } = values;\n    if (!!table_id) {\n      return table_id;\n    }\n    if (!!smart_list_id) {\n      return `${smart_list_id}-smartList`;\n    }\n    if (!!audience_id) {\n      return `${audience_id}-audience`;\n    }\n    if (!!segment_id) {\n      return `${segment_id}-segment`;\n    }\n    return '';\n  };\n\n  return (\n    <>\n      <Box className=\"content\">\n        <Box className=\"left-section\">\n          <input {...getInputProps()} />\n          <Box mb=\"2rem\">\n            <Input\n              type=\"text\"\n              name=\"name\"\n              ref={inputRef}\n              value={values.name}\n              label=\"Campaign name\"\n              onChange={handleChange}\n              errorMessage={errors.name}\n              placeholder=\"Give your campaign a name\"\n              isInvalid={!!touched.name && !!errors.name}\n            />\n          </Box>\n          <Box mb=\"2rem\">\n            <Input\n              type=\"text\"\n              isDisabled\n              name=\"sender_id\"\n              onChange={handleChange}\n              value={values.sender_id}\n              errorMessage={errors.sender_id}\n              isInvalid={!!touched.sender_id && !!errors.sender_id}\n              label={\n                <Stack isInline alignItems=\"center\">\n                  <Text>Campaign sender ID</Text>\n                  <Tooltip\n                    zIndex={10000}\n                    placement=\"right\"\n                    aria-label=\"Campaign sender id\"\n                    label=\"A Sender ID is a quick way to let recipients of your campaign know exactly who it is from.\"\n                  >\n                    <Icon size=\"0.75rem\" name=\"info\" color=\"gray.500\" />\n                  </Tooltip>\n                </Stack>\n              }\n              placeholder=\"Give your campaign a sender ID\"\n            />\n          </Box>\n          {isAbTest && (\n            <FormControl mb=\"2rem\" isInvalid={!!touched.variants_count && !!errors.variants_count}>\n              <AdvancedSelect\n                options={[1, 2, 3, 4].map(item => ({\n                  value: item.toString(),\n                  label: item.toString(),\n                }))}\n                value={values.variants_count}\n                placeholder=\"Select the number of variants\"\n                isInvalid={!!touched.variants_count && !!errors.variants_count}\n                onChange={({ value }) => setFieldValue('variants_count', value)}\n                label={\n                  <Stack isInline alignItems=\"center\">\n                    <Text>Number of message variants</Text>\n                    <Tooltip\n                      zIndex={10000}\n                      placement=\"right\"\n                      aria-label=\"Number of message variants\"\n                      label=\"More recipients means more accurate results. We recommend at least 500 recipients per message variant.\"\n                    >\n                      <Icon size=\"0.75rem\" name=\"info\" color=\"gray.500\" />\n                    </Tooltip>\n                  </Stack>\n                }\n              />\n              <FormErrorMessage>{errors.variants_count}</FormErrorMessage>\n            </FormControl>\n          )}\n          <FormControl mb=\"1rem\" isInvalid={!!touched.campaign_id && !!errors.campaign_id}>\n            <AdvancedSelect\n              isGroup\n              isSearchable\n              options={lists}\n              value={getAudienceValue()}\n              label={\n                <Stack isInline alignItems=\"center\">\n                  <Text>Who will you send this campaign to?</Text>\n                  <Tooltip\n                    zIndex={10000}\n                    placement=\"right\"\n                    aria-label=\"Campaign recipients\"\n                    label=\"Choose from your list, smart lists, segments, or target new audiences.\"\n                  >\n                    <Icon size=\"0.75rem\" name=\"info\" color=\"gray.500\" />\n                  </Tooltip>\n                </Stack>\n              }\n              placeholder=\"Search & Select a list\"\n              onChange={({ value }) => handleAudienceChange(value)}\n              isInvalid={!!touched.campaign_id && !!errors.campaign_id}\n            />\n            <FormErrorMessage>{errors.campaign_id}</FormErrorMessage>\n          </FormControl>\n\n          <Stack spacing=\"0.5rem\">\n            <FormLabel pb=\"0\" fontSize=\"0.875rem\">\n              <Stack isInline alignItems=\"center\">\n                <Text>Do you want to use Smart Sending?</Text>\n                <Tooltip\n                  zIndex={10000}\n                  placement=\"right\"\n                  aria-label=\"Campaign smart sending\"\n                  label=\"Smart Sending automatically prevents subscribers who've recently received a one-time message from receiving another too quickly.\"\n                >\n                  <Icon size=\"0.75rem\" name=\"info\" color=\"gray.500\" />\n                </Tooltip>\n              </Stack>\n            </FormLabel>\n            <Text fontSize=\"0.75rem\">\n              If used, subscribers who have received a message within your Smart Sending (8 hours)\n              will be muted from this send.\n            </Text>\n            <RadioGroup\n              isInline\n              spacing={5}\n              name=\"smart_sending\"\n              onChange={handleChange}\n              value={values.smart_sending}\n            >\n              <Radio size=\"sm\" value=\"1\">\n                Use Smart Sending\n              </Radio>\n              <Radio size=\"sm\" value=\"0\">\n                Don't use Smart Sending\n              </Radio>\n            </RadioGroup>\n          </Stack>\n          <SectionFooter\n            onGoBack={onGoBack}\n            goBackLabel=\"Cancel\"\n            onContinue={handleSubmit}\n            continueLabel=\"Save & Continue\"\n          />\n        </Box>\n        <Box className=\"right-section\">\n          <Box\n            px=\"2rem\"\n            py=\"1rem\"\n            width=\"80%\"\n            borderRadius=\"8px\"\n            boxShadow=\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n          >\n            <Text pb=\"0.5rem\" fontSize=\"0.875rem\" fontWeight={500}>\n              Estimated recipients\n            </Text>\n            <Text fontSize=\"1rem\" fontWeight={600}>\n              {numberWithCommas(values.count)}\n            </Text>\n          </Box>\n        </Box>\n      </Box>\n      <NewAudienceModal\n        states={states}\n        genders={genders}\n        religions={religions}\n        ethnicGroups={ethnicGroups}\n        hasAudiences={hasAudiences}\n        isOpen={isOpenNewAudienceModal}\n        isLoading={loading === 'pending'}\n        onClose={onCloseNewAudienceModal}\n        onSubmit={handleCreateNewAudience}\n      />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}