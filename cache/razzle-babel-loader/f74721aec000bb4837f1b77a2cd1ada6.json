{"ast":null,"code":"import _objectSpread from \"/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n// @ts-nocheck\nimport { createSelector, createSlice } from '@reduxjs/toolkit';\nconst PAGE_LIMIT = Number(process.env.REACT_APP_PAGINATION_LIMIT) || 200;\nconst initialMeta = {\n  count: 0,\n  count_total: 0,\n  page: 1,\n  per_page: PAGE_LIMIT,\n  next_page: true,\n  prev_page: false\n};\nconst initialState = {\n  lists: {},\n  lists_by_id: [],\n  smart_lists: {},\n  smart_lists_by_id: [],\n  favorites: [],\n  groups: {},\n  groups_by_id: [],\n  columns: {},\n  columns_by_id: [],\n  column_id_map: {},\n  rows: {},\n  rows_by_id: [],\n  trash: {},\n  trash_by_id: [],\n  selected_list: null,\n  selected_smart_list: null,\n  selected_list_pending_update: false,\n  selected_rows: [],\n  smart_lists_loading: false,\n  lists_loading: false,\n  favorites_loading: false,\n  trash_loading: false,\n  rows_loading: false,\n  rows_syncing: false,\n  list_syncing: false,\n  lists_fetched: false,\n  smart_lists_fetched: false,\n  lists_pending_update: [],\n  favorites_pending_mark: [],\n  favorites_pending_unmark: [],\n  smart_lists_pending_update: [],\n  rows_pending_delete: [],\n  rows_pending_update: [],\n  rows_pending_insert: [],\n  filters: {},\n  filters_by_id: [],\n  sorts: {},\n  sorts_by_id: [],\n  meta: initialMeta,\n  search_query: '',\n  initial_list: null,\n  audiences: {},\n  audiences_by_id: [],\n  audiences_fetched: false,\n  audiences_loading: false,\n  resources: {\n    data: {},\n    by_id: [],\n    meta: {},\n    loading: false\n  }\n};\nexport const listsSlice = createSlice({\n  name: 'lists',\n  initialState,\n  reducers: {\n    setLists: (state, action) => {\n      const {\n        data,\n        by_id\n      } = action.payload;\n      state.lists = data;\n      state.lists_by_id = by_id;\n      state.lists_fetched = true;\n    },\n    setAudiences: (state, action) => {\n      const {\n        data,\n        by_id\n      } = action.payload;\n      state.audiences = data;\n      state.audiences_by_id = by_id;\n      state.audiences_fetched = true;\n    },\n    setListsLoading: (state, action) => {\n      const {\n        is_loading\n      } = action.payload;\n      state.lists_loading = is_loading;\n    },\n    setAudiencesLoading: (state, action) => {\n      const {\n        is_loading\n      } = action.payload;\n      state.audiences_loading = is_loading;\n    },\n    setRowsLoading: (state, action) => {\n      const {\n        is_loading\n      } = action.payload;\n      state.rows_loading = is_loading;\n    },\n    setSelectedList: (state, action) => {\n      const {\n        list_id,\n        columns,\n        columns_by_id,\n        column_id_map,\n        smart_list_id = initialState.selected_smart_list,\n        filters = initialState.filters,\n        filters_by_id = initialState.filters_by_id,\n        meta = initialMeta\n      } = action.payload;\n      state.selected_list = list_id;\n      state.columns = columns;\n      state.columns_by_id = columns_by_id;\n      state.column_id_map = column_id_map;\n      state.selected_smart_list = smart_list_id;\n      state.filters = filters;\n      state.filters_by_id = filters_by_id;\n      state.rows = {};\n      state.meta = meta;\n    },\n    resetSelectedList: state => {\n      state.selected_list = null;\n      state.selected_smart_list = null;\n      state.columns = {};\n      state.rows = {};\n      state.columns_by_id = [];\n      state.rows_by_id = [];\n      state.selected_rows = [];\n      state.filters = {};\n      state.filters_by_id = [];\n      state.sorts = {};\n      state.sorts_by_id = [];\n      state.meta = initialMeta;\n      state.search_query = '';\n    },\n    setRows: (state, action) => {\n      const {\n        data,\n        by_id,\n        meta\n      } = action.payload; // @ts-ignore\n\n      state.rows_by_id = [...state.rows_by_id, ...by_id];\n      state.rows = _objectSpread(_objectSpread({}, state.rows), data);\n      state.meta = _objectSpread(_objectSpread({}, state.meta), meta);\n    },\n    setList: (state, action) => {\n      const list = action.payload;\n      const list_id = state.selected_list ? state.selected_list : list.id;\n      state.lists = _objectSpread(_objectSpread({}, state.lists), {}, {\n        [list_id]: list\n      });\n    },\n    setSmartList: (state, action) => {\n      const smart_list = action.payload;\n      const smart_list_id = state.selected_smart_list ? state.selected_smart_list : smart_list.id;\n      state.smart_lists = _objectSpread(_objectSpread({}, state.smart_lists), {}, {\n        [smart_list_id]: smart_list\n      });\n    },\n    setColumnArrangement: (state, action) => {\n      const columns_by_id = action.payload;\n      state.columns_by_id = columns_by_id;\n    },\n    setRowCell: (state, action) => {\n      let {\n        row_index,\n        columnID,\n        value,\n        row_id\n      } = action.payload;\n      if (!row_id) row_id = state.rows_by_id[row_index];\n\n      const updated_row = _objectSpread(_objectSpread({}, state.rows[row_id]), {}, {\n        columns: _objectSpread(_objectSpread({}, state.rows[row_id].columns), {}, {\n          [columnID]: value\n        })\n      });\n\n      state.rows = _objectSpread(_objectSpread({}, state.rows), {}, {\n        [row_id]: updated_row\n      });\n\n      if (!state.rows_pending_insert.includes(row_id) && !state.rows_pending_update.includes(row_id)) {\n        state.rows_pending_update = [...state.rows_pending_update, row_id];\n      }\n    },\n    addRowsPendingUpdate: (state, action) => {\n      const row_ids = action.payload;\n      state.rows_pending_update = [...state.rows_pending_update, ...row_ids];\n    },\n    removeRowsPendingUpdate: (state, action) => {\n      const {\n        row_ids\n      } = action.payload;\n      state.rows_pending_update = state.rows_pending_update.filter(row_id => !row_ids.includes(row_id));\n    },\n    addRowsPendingInsert: (state, action) => {\n      const {\n        row_ids\n      } = action.payload;\n      state.rows_pending_insert = [...state.rows_pending_insert, ...row_ids];\n    },\n    removeRowsPendingInsert: (state, action) => {\n      const {\n        row_ids\n      } = action.payload;\n      state.rows_pending_insert = state.rows_pending_insert.filter(row_id => !row_ids.includes(row_id));\n    },\n    addListPendingUpdate: (state, action) => {\n      const list_id = action.payload;\n      state.lists_pending_update = [...state.lists_pending_update, list_id];\n    },\n    removeListsPendingUpdate: (state, action) => {\n      const list_ids = action.payload;\n      state.lists_pending_update = state.lists_pending_update.filter(id => !list_ids.includes(id));\n    },\n    addSmartListPendingUpdate: (state, action) => {\n      const smart_list_id = action.payload;\n      state.smart_lists_pending_update = state.smart_lists_pending_update.includes(smart_list_id) ? state.smart_lists_pending_update : [...state.smart_lists_pending_update, smart_list_id];\n    },\n    removeSmartListsPendingUpdate: (state, action) => {\n      const smart_list_ids = action.payload;\n      state.smart_lists_pending_update = state.smart_lists_pending_update.filter(id => !smart_list_ids.includes(id));\n    },\n    setListPendingUpdate: (state, action) => {\n      const pending_update = action.payload;\n      state.selected_list_pending_update = pending_update;\n    },\n    setListSyncing: (state, action) => {\n      const list_syncing = action.payload;\n      state.list_syncing = list_syncing;\n    },\n    setRowsSyncing: (state, action) => {\n      const rows_syncing = action.payload;\n      state.rows_syncing = rows_syncing;\n    },\n    setColumns: (state, action) => {\n      const {\n        columns_by_id,\n        columns,\n        column_id_map\n      } = action.payload;\n      state.columns_by_id = columns_by_id;\n      state.column_id_map = column_id_map;\n      state.columns = columns;\n    },\n    setSelectedRows: (state, action) => {\n      const selected_rows = action.payload;\n      state.selected_rows = selected_rows;\n    },\n    removeRowsByID: (state, action) => {\n      const row_ids = action.payload;\n      state.rows_by_id = state.rows_by_id.filter(row_id => !row_ids.includes(row_id));\n    },\n    addRowsPendingDelete: (state, action) => {\n      const row_ids = action.payload;\n      state.rows_pending_delete = [...state.rows_pending_delete, ...row_ids.filter(row_id => !state.rows_pending_delete.includes(row_id))];\n    },\n    removeRowsPendingDelete: (state, action) => {\n      const row_ids = action.payload;\n      state.rows_pending_delete = state.rows_pending_insert.filter(row_id => !row_ids.includes(row_id));\n    },\n    setFilterData: (state, action) => {\n      const {\n        data,\n        by_id\n      } = action.payload;\n      state.filters = data;\n      state.filters_by_id = by_id;\n    },\n    setSortData: (state, action) => {\n      const {\n        data,\n        by_id\n      } = action.payload;\n      state.sorts = data;\n      state.sorts_by_id = by_id;\n    },\n    resetRows: (state, action) => {\n      state.rows = {};\n      state.rows_by_id = [];\n      state.selected_rows = [];\n      state.rows_pending_delete = [];\n      state.rows_pending_update = [];\n      state.rows_pending_insert = [];\n      state.meta = initialMeta;\n      state.rows_loading = false;\n    },\n    setSmartLists: (state, action) => {\n      const {\n        data,\n        by_id\n      } = action.payload;\n      state.smart_lists = data;\n      state.smart_lists_by_id = by_id;\n      state.smart_lists_fetched = true;\n    },\n    setSmartListsLoading: (state, action) => {\n      const {\n        is_loading\n      } = action.payload;\n      state.smart_lists_loading = is_loading;\n    },\n    setSelectedSmartListID: (state, action) => {\n      const smart_list_id = action.payload;\n      state.selected_smart_list = smart_list_id;\n    },\n    setFavoritesLoading: (state, action) => {\n      const {\n        is_loading\n      } = action.payload;\n      state.favorites_loading = is_loading;\n    },\n    setFavorites: (state, action) => {\n      const favorites = action.payload;\n      state.favorites = favorites;\n    },\n    setFavoritesPendingMark: (state, action) => {\n      const pending_mark = action.payload;\n      state.favorites_pending_mark = pending_mark;\n    },\n    setFavoritesPendingUnmark: (state, action) => {\n      const pending_unmark = action.payload;\n      state.favorites_pending_unmark = pending_unmark;\n    },\n    setTrashLoading: (state, action) => {\n      const {\n        is_loading\n      } = action.payload;\n      state.trash_loading = is_loading;\n    },\n    setTrash: (state, action) => {\n      const {\n        data,\n        by_id\n      } = action.payload;\n      state.trash = data;\n      state.trash_by_id = by_id;\n    },\n    setSearchQuery: (state, action) => {\n      state.search_query = action.payload;\n    },\n    setInitialList: (state, action) => {\n      state.initial_list = action.payload;\n    },\n    setResourcesData: (state, action) => {\n      const {\n        data,\n        by_id,\n        meta\n      } = action.payload;\n      state.resources.data = data;\n      state.resources.by_id = by_id;\n      state.resources.meta = meta;\n    },\n    setResourcesLoading: (state, action) => {\n      const loading = action.payload;\n      state.resources.loading = loading;\n    }\n  }\n});\nconst selectListState = createSelector(state => state.lists, lists => lists);\nexport const selectContactListID = createSelector(selectListState, listState => listState.initial_list);\nexport const selectLists = createSelector(selectListState, listState => listState.lists);\nexport const selectContactList = createSelector(selectLists, selectContactListID, (lists, contactListID) => lists[contactListID]);","map":{"version":3,"sources":["/Users/okechukwuiheagwara/Documents/Adewale/simpu/razzle/with-typescript/src/app/authenticated-app/lists/lists.slice.ts"],"names":["createSelector","createSlice","PAGE_LIMIT","Number","process","env","REACT_APP_PAGINATION_LIMIT","initialMeta","count","count_total","page","per_page","next_page","prev_page","initialState","lists","lists_by_id","smart_lists","smart_lists_by_id","favorites","groups","groups_by_id","columns","columns_by_id","column_id_map","rows","rows_by_id","trash","trash_by_id","selected_list","selected_smart_list","selected_list_pending_update","selected_rows","smart_lists_loading","lists_loading","favorites_loading","trash_loading","rows_loading","rows_syncing","list_syncing","lists_fetched","smart_lists_fetched","lists_pending_update","favorites_pending_mark","favorites_pending_unmark","smart_lists_pending_update","rows_pending_delete","rows_pending_update","rows_pending_insert","filters","filters_by_id","sorts","sorts_by_id","meta","search_query","initial_list","audiences","audiences_by_id","audiences_fetched","audiences_loading","resources","data","by_id","loading","listsSlice","name","reducers","setLists","state","action","payload","setAudiences","setListsLoading","is_loading","setAudiencesLoading","setRowsLoading","setSelectedList","list_id","smart_list_id","resetSelectedList","setRows","setList","list","id","setSmartList","smart_list","setColumnArrangement","setRowCell","row_index","columnID","value","row_id","updated_row","includes","addRowsPendingUpdate","row_ids","removeRowsPendingUpdate","filter","addRowsPendingInsert","removeRowsPendingInsert","addListPendingUpdate","removeListsPendingUpdate","list_ids","addSmartListPendingUpdate","removeSmartListsPendingUpdate","smart_list_ids","setListPendingUpdate","pending_update","setListSyncing","setRowsSyncing","setColumns","setSelectedRows","removeRowsByID","addRowsPendingDelete","removeRowsPendingDelete","setFilterData","setSortData","resetRows","setSmartLists","setSmartListsLoading","setSelectedSmartListID","setFavoritesLoading","setFavorites","setFavoritesPendingMark","pending_mark","setFavoritesPendingUnmark","pending_unmark","setTrashLoading","setTrash","setSearchQuery","setInitialList","setResourcesData","setResourcesLoading","selectListState","selectContactListID","listState","selectLists","selectContactList","contactListID"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { createSelector, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../../root';\n\nconst PAGE_LIMIT: number = Number(process.env.REACT_APP_PAGINATION_LIMIT) || 200;\n\nconst initialMeta = {\n  count: 0,\n  count_total: 0,\n  page: 1,\n  per_page: PAGE_LIMIT,\n  next_page: true,\n  prev_page: false,\n};\n\nconst initialState = {\n  lists: {},\n  lists_by_id: [],\n  smart_lists: {},\n  smart_lists_by_id: [],\n  favorites: [],\n  groups: {},\n  groups_by_id: [],\n  columns: {},\n  columns_by_id: [],\n  column_id_map: {},\n  rows: {},\n  rows_by_id: [],\n  trash: {},\n  trash_by_id: [],\n  selected_list: null,\n  selected_smart_list: null,\n  selected_list_pending_update: false,\n  selected_rows: [],\n  smart_lists_loading: false,\n  lists_loading: false,\n  favorites_loading: false,\n  trash_loading: false,\n  rows_loading: false,\n  rows_syncing: false,\n  list_syncing: false,\n  lists_fetched: false,\n  smart_lists_fetched: false,\n  lists_pending_update: [],\n  favorites_pending_mark: [],\n  favorites_pending_unmark: [],\n  smart_lists_pending_update: [],\n  rows_pending_delete: [],\n  rows_pending_update: [],\n  rows_pending_insert: [],\n  filters: {},\n  filters_by_id: [],\n  sorts: {},\n  sorts_by_id: [],\n  meta: initialMeta,\n  search_query: '',\n  initial_list: null,\n  audiences: {},\n  audiences_by_id: [],\n  audiences_fetched: false,\n  audiences_loading: false,\n  resources: {\n    data: {},\n    by_id: [],\n    meta: {},\n    loading: false,\n  },\n};\n\nexport const listsSlice = createSlice({\n  name: 'lists',\n  initialState,\n  reducers: {\n    setLists: (state, action) => {\n      const { data, by_id } = action.payload;\n      state.lists = data;\n      state.lists_by_id = by_id;\n      state.lists_fetched = true;\n    },\n    setAudiences: (state, action) => {\n      const { data, by_id } = action.payload;\n      state.audiences = data;\n      state.audiences_by_id = by_id;\n      state.audiences_fetched = true;\n    },\n    setListsLoading: (state, action) => {\n      const { is_loading } = action.payload;\n      state.lists_loading = is_loading;\n    },\n    setAudiencesLoading: (state, action) => {\n      const { is_loading } = action.payload;\n      state.audiences_loading = is_loading;\n    },\n    setRowsLoading: (state, action) => {\n      const { is_loading } = action.payload;\n      state.rows_loading = is_loading;\n    },\n    setSelectedList: (state, action) => {\n      const {\n        list_id,\n        columns,\n        columns_by_id,\n        column_id_map,\n        smart_list_id = initialState.selected_smart_list,\n        filters = initialState.filters,\n        filters_by_id = initialState.filters_by_id,\n        meta = initialMeta,\n      } = action.payload;\n      state.selected_list = list_id;\n      state.columns = columns;\n      state.columns_by_id = columns_by_id;\n      state.column_id_map = column_id_map;\n      state.selected_smart_list = smart_list_id;\n      state.filters = filters;\n      state.filters_by_id = filters_by_id;\n      state.rows = {};\n      state.meta = meta;\n    },\n    resetSelectedList: state => {\n      state.selected_list = null;\n      state.selected_smart_list = null;\n      state.columns = {};\n      state.rows = {};\n      state.columns_by_id = [];\n      state.rows_by_id = [];\n      state.selected_rows = [];\n      state.filters = {};\n      state.filters_by_id = [];\n      state.sorts = {};\n      state.sorts_by_id = [];\n      state.meta = initialMeta;\n      state.search_query = '';\n    },\n    setRows: (state, action) => {\n      const { data, by_id, meta } = action.payload;\n      // @ts-ignore\n      state.rows_by_id = [...state.rows_by_id, ...by_id];\n      state.rows = { ...state.rows, ...data };\n      state.meta = { ...state.meta, ...meta };\n    },\n    setList: (state, action) => {\n      const list = action.payload;\n      const list_id = state.selected_list ? state.selected_list : list.id;\n      state.lists = {\n        ...state.lists,\n        [list_id]: list,\n      };\n    },\n    setSmartList: (state, action) => {\n      const smart_list = action.payload;\n      const smart_list_id = state.selected_smart_list ? state.selected_smart_list : smart_list.id;\n      state.smart_lists = {\n        ...state.smart_lists,\n        [smart_list_id]: smart_list,\n      };\n    },\n    setColumnArrangement: (state, action) => {\n      const columns_by_id = action.payload;\n      state.columns_by_id = columns_by_id;\n    },\n    setRowCell: (state, action) => {\n      let { row_index, columnID, value, row_id } = action.payload;\n      if (!row_id) row_id = state.rows_by_id[row_index];\n      const updated_row = {\n        ...state.rows[row_id],\n        columns: {\n          ...state.rows[row_id].columns,\n          [columnID]: value,\n        },\n      };\n      state.rows = {\n        ...state.rows,\n        [row_id]: updated_row,\n      };\n\n      if (\n        !state.rows_pending_insert.includes(row_id) &&\n        !state.rows_pending_update.includes(row_id)\n      ) {\n        state.rows_pending_update = [...state.rows_pending_update, row_id];\n      }\n    },\n    addRowsPendingUpdate: (state, action) => {\n      const row_ids = action.payload;\n      state.rows_pending_update = [...state.rows_pending_update, ...row_ids];\n    },\n    removeRowsPendingUpdate: (state, action) => {\n      const { row_ids } = action.payload;\n      state.rows_pending_update = state.rows_pending_update.filter(\n        row_id => !row_ids.includes(row_id),\n      );\n    },\n    addRowsPendingInsert: (state, action) => {\n      const { row_ids } = action.payload;\n      state.rows_pending_insert = [...state.rows_pending_insert, ...row_ids];\n    },\n    removeRowsPendingInsert: (state, action) => {\n      const { row_ids } = action.payload;\n      state.rows_pending_insert = state.rows_pending_insert.filter(\n        row_id => !row_ids.includes(row_id),\n      );\n    },\n    addListPendingUpdate: (state, action) => {\n      const list_id = action.payload;\n      state.lists_pending_update = [...state.lists_pending_update, list_id];\n    },\n    removeListsPendingUpdate: (state, action) => {\n      const list_ids = action.payload;\n      state.lists_pending_update = state.lists_pending_update.filter(id => !list_ids.includes(id));\n    },\n    addSmartListPendingUpdate: (state, action) => {\n      const smart_list_id = action.payload;\n      state.smart_lists_pending_update = state.smart_lists_pending_update.includes(smart_list_id)\n        ? state.smart_lists_pending_update\n        : [...state.smart_lists_pending_update, smart_list_id];\n    },\n    removeSmartListsPendingUpdate: (state, action) => {\n      const smart_list_ids = action.payload;\n      state.smart_lists_pending_update = state.smart_lists_pending_update.filter(\n        (id: string) => !smart_list_ids.includes(id),\n      );\n    },\n    setListPendingUpdate: (state, action) => {\n      const pending_update: boolean = action.payload;\n      state.selected_list_pending_update = pending_update;\n    },\n    setListSyncing: (state, action) => {\n      const list_syncing = action.payload;\n      state.list_syncing = list_syncing;\n    },\n    setRowsSyncing: (state, action) => {\n      const rows_syncing = action.payload;\n      state.rows_syncing = rows_syncing;\n    },\n    setColumns: (state, action) => {\n      const { columns_by_id, columns, column_id_map } = action.payload;\n      state.columns_by_id = columns_by_id;\n      state.column_id_map = column_id_map;\n      state.columns = columns;\n    },\n    setSelectedRows: (state, action) => {\n      const selected_rows = action.payload;\n      state.selected_rows = selected_rows;\n    },\n    removeRowsByID: (state, action) => {\n      const row_ids = action.payload;\n      state.rows_by_id = state.rows_by_id.filter(row_id => !row_ids.includes(row_id));\n    },\n    addRowsPendingDelete: (state, action) => {\n      const row_ids = action.payload;\n      state.rows_pending_delete = [\n        ...state.rows_pending_delete,\n        ...row_ids.filter(row_id => !state.rows_pending_delete.includes(row_id)),\n      ];\n    },\n    removeRowsPendingDelete: (state, action) => {\n      const row_ids = action.payload;\n      state.rows_pending_delete = state.rows_pending_insert.filter(\n        row_id => !row_ids.includes(row_id),\n      );\n    },\n    setFilterData: (state, action) => {\n      const { data, by_id } = action.payload;\n      state.filters = data;\n      state.filters_by_id = by_id;\n    },\n    setSortData: (state, action) => {\n      const { data, by_id } = action.payload;\n      state.sorts = data;\n      state.sorts_by_id = by_id;\n    },\n    resetRows: (state, action) => {\n      state.rows = {};\n      state.rows_by_id = [];\n      state.selected_rows = [];\n      state.rows_pending_delete = [];\n      state.rows_pending_update = [];\n      state.rows_pending_insert = [];\n      state.meta = initialMeta;\n      state.rows_loading = false;\n    },\n    setSmartLists: (state, action) => {\n      const { data, by_id } = action.payload;\n      state.smart_lists = data;\n      state.smart_lists_by_id = by_id;\n      state.smart_lists_fetched = true;\n    },\n    setSmartListsLoading: (state, action) => {\n      const { is_loading } = action.payload;\n      state.smart_lists_loading = is_loading;\n    },\n    setSelectedSmartListID: (state, action) => {\n      const smart_list_id = action.payload;\n      state.selected_smart_list = smart_list_id;\n    },\n    setFavoritesLoading: (state, action) => {\n      const { is_loading } = action.payload;\n      state.favorites_loading = is_loading;\n    },\n    setFavorites: (state, action) => {\n      const favorites = action.payload;\n      state.favorites = favorites;\n    },\n    setFavoritesPendingMark: (state, action) => {\n      const pending_mark = action.payload;\n      state.favorites_pending_mark = pending_mark;\n    },\n    setFavoritesPendingUnmark: (state, action) => {\n      const pending_unmark = action.payload;\n      state.favorites_pending_unmark = pending_unmark;\n    },\n    setTrashLoading: (state, action) => {\n      const { is_loading } = action.payload;\n      state.trash_loading = is_loading;\n    },\n    setTrash: (state, action) => {\n      const { data, by_id } = action.payload;\n      state.trash = data;\n      state.trash_by_id = by_id;\n    },\n    setSearchQuery: (state, action) => {\n      state.search_query = action.payload;\n    },\n    setInitialList: (state, action) => {\n      state.initial_list = action.payload;\n    },\n    setResourcesData: (state, action) => {\n      const { data, by_id, meta } = action.payload;\n      state.resources.data = data;\n      state.resources.by_id = by_id;\n      state.resources.meta = meta;\n    },\n    setResourcesLoading: (state, action) => {\n      const loading = action.payload;\n      state.resources.loading = loading;\n    },\n  },\n});\n\nconst selectListState = createSelector(\n  (state: RootState) => state.lists,\n  lists => lists,\n);\n\nexport const selectContactListID = createSelector(\n  selectListState,\n  listState => listState.initial_list,\n);\n\nexport const selectLists = createSelector(selectListState, listState => listState.lists);\n\nexport const selectContactList = createSelector(\n  selectLists,\n  selectContactListID,\n  (lists, contactListID) => lists[contactListID],\n);\n"]},"metadata":{},"sourceType":"module"}