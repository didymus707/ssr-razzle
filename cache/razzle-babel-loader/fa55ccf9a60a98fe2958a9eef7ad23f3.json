{"ast":null,"code":"import _objectSpread from \"/Users/public1/Documents/Projects/ssr-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n// @ts-nocheck\nimport { v4 as uuid } from 'uuid';\nimport { buildAppsURL, client } from '../../../utils';\nimport { setListsLoading, setLists, setRows, setSelectedList, setRowsLoading, setListPendingUpdate, setColumnArrangement, setListSyncing, setRowCell, setRowsSyncing, setColumns, removeRowsPendingUpdate, addRowsPendingInsert, removeRowsPendingInsert, setSelectedRows, addRowsPendingUpdate, removeRowsByID, addRowsPendingDelete, removeRowsPendingDelete, setList, setFilterData, setSortData, resetRows, resetSelectedList, addListPendingUpdate, removeListsPendingUpdate, setSmartLists, setSmartListsLoading, setSmartList, addSmartListPendingUpdate, removeSmartListsPendingUpdate, setSelectedSmartListID, setFavoritesLoading, setFavorites, setFavoritesPendingMark, setFavoritesPendingUnmark, setTrashLoading, setTrash, setSearchQuery, setInitialList, setAudiences, setAudiencesLoading } from './lists.reducer';\nimport { generateFilterPayload, generateRandomSelectColor, generateSortPayload, generateUpdatedRows, wait } from './lists.utils';\nimport { available_operators } from './list.data';\nimport { sendAmplitudeData } from '../../../utils/amplitude';\nconst PAGE_LIMIT = Number(process.env.REACT_APP_PAGINATION_LIMIT) || 200;\nexport const fetchLists = () => async dispatch => {\n  dispatch(setListsLoading({\n    is_loading: true\n  }));\n  dispatch(fetchInitialContactList());\n\n  try {\n    const {\n      data: {\n        tables\n      }\n    } = await client('tables', {\n      method: 'GET'\n    });\n    const data = {};\n    const by_id = [];\n    tables.forEach(i => {\n      data[i.id] = i;\n      by_id.push(i.id);\n    });\n    dispatch(setLists({\n      data,\n      by_id\n    }));\n    dispatch(setListsLoading({\n      is_loading: false\n    }));\n    return data;\n  } catch (e) {\n    dispatch(setListsLoading({\n      is_loading: false\n    }));\n    return null;\n  }\n};\nexport const fetchAudiences = () => async dispatch => {\n  dispatch(setAudiencesLoading({\n    is_loading: true\n  }));\n\n  try {\n    const {\n      data: {\n        audience_lists\n      }\n    } = await client('audience_lists/all', {\n      method: 'GET'\n    });\n    const data = {};\n    const by_id = [];\n    audience_lists.forEach(i => {\n      data[i.id] = i;\n      by_id.push(i.id);\n    });\n    dispatch(setAudiences({\n      data,\n      by_id\n    }));\n    dispatch(setAudiencesLoading({\n      is_loading: false\n    }));\n    return data;\n  } catch (e) {\n    dispatch(setAudiencesLoading({\n      is_loading: false\n    }));\n    return null;\n  }\n};\nexport const addList = list => async (dispatch, getState) => {\n  const {\n    lists: {\n      lists,\n      lists_by_id\n    }\n  } = getState();\n  sendAmplitudeData('addList');\n\n  const data = _objectSpread(_objectSpread({}, lists), {}, {\n    [list.id]: list\n  });\n\n  const by_id = [...lists_by_id, list.id];\n  dispatch(setLists({\n    data,\n    by_id\n  }));\n};\nexport const addAudience = payload => async (dispatch, getState) => {\n  const {\n    lists: {\n      audiences,\n      audiences_by_id\n    }\n  } = getState();\n\n  try {\n    const {\n      data: {\n        audience_list\n      }\n    } = await client('audience_lists/create', {\n      data: payload,\n      method: 'POST'\n    });\n    sendAmplitudeData('addAudience');\n\n    const data = _objectSpread(_objectSpread({}, audiences), {}, {\n      [audience_list.id]: audience_list\n    });\n\n    const by_id = [...audiences_by_id, audience_list.id];\n    dispatch(setAudiences({\n      data,\n      by_id\n    }));\n    return audience_list;\n  } catch (error) {\n    return error;\n  }\n};\nexport const selectList = list_id => async (dispatch, getState) => {\n  const {\n    lists: {\n      lists\n    }\n  } = getState(); // @ts-ignore\n\n  const _columns = lists[list_id]['columns'];\n  const columns = {};\n  const columns_by_id = [];\n  const column_id_map = {};\n  sendAmplitudeData('selectList');\n\n  _columns.forEach(i => {\n    const uid = uuid();\n    column_id_map[uid] = i.id;\n    columns[uid] = _objectSpread(_objectSpread({}, i), {}, {\n      uid,\n      name: !!i.name ? i.name : '',\n      label: !!i.label ? i.label : ''\n    });\n    columns_by_id.push(uid);\n  });\n\n  dispatch(setSelectedList({\n    list_id,\n    columns,\n    columns_by_id,\n    column_id_map\n  }));\n  dispatch(fetchRows({\n    list: list_id,\n    page: 1\n  }));\n};\nexport const selectSmartList = smart_list_id => async (dispatch, getState) => {\n  const {\n    lists: {\n      lists,\n      smart_lists\n    }\n  } = getState();\n  sendAmplitudeData('selectSmartList');\n  const smart_list = smart_lists[smart_list_id];\n  const parent_list = lists[smart_list.list_id];\n  const _columns = parent_list['columns'];\n  const columns = {};\n  const columns_by_id = [];\n  const column_id_map = {};\n\n  _columns.forEach(i => {\n    const uid = uuid();\n    column_id_map[uid] = i.id;\n    columns[uid] = _objectSpread(_objectSpread({}, i), {}, {\n      uid\n    });\n    columns_by_id.push(uid);\n  });\n\n  const _filters = smart_list['filters'];\n  const filters = {};\n  const filters_by_id = [];\n\n  _filters.forEach(_filter => {\n    const _col_id = columns_by_id.find(col_id => column_id_map[col_id] === _filter.columnID);\n\n    if (!_col_id) return;\n    const filter_uid = uuid();\n\n    const filter_obj = _objectSpread(_objectSpread({}, _filter), {}, {\n      uid: filter_uid,\n      columnID: _col_id\n    });\n\n    filters[filter_uid] = filter_obj;\n    filters_by_id.push(filter_uid);\n  });\n\n  dispatch(setSelectedList({\n    list_id: parent_list.id,\n    columns,\n    columns_by_id,\n    column_id_map,\n    smart_list_id,\n    filters,\n    filters_by_id\n  }));\n  dispatch(fetchRows({\n    list: parent_list.id,\n    page: 1\n  }));\n};\nexport const selectSmartListID = smart_list_id => async dispatch => {\n  dispatch(setSelectedSmartListID(smart_list_id));\n};\nexport const fetchRows = ({\n  list,\n  page\n}) => async (dispatch, getState) => {\n  dispatch(setRowsLoading({\n    is_loading: true\n  }));\n  const {\n    lists: {\n      filters,\n      filters_by_id,\n      sorts,\n      sorts_by_id,\n      column_id_map,\n      search_query,\n      columns,\n      selected_list,\n      selected_smart_list\n    }\n  } = getState();\n\n  try {\n    const {\n      data: {\n        rows,\n        meta,\n        table\n      }\n    } = await client(`rows/filter`, {\n      method: 'POST',\n      data: {\n        table_id: list,\n        filters: generateFilterPayload(filters, filters_by_id, column_id_map, columns),\n        sorts: generateSortPayload(sorts, sorts_by_id, column_id_map, columns),\n        page,\n        limit: PAGE_LIMIT,\n        query: search_query\n      }\n    });\n    const data = {};\n    const by_id = [];\n    rows.forEach(i => {\n      const _columns = {};\n      Object.keys(i.columns).forEach(j => {\n        const col_uid = Object.keys(column_id_map).find(x => String(column_id_map[x]) === String(j));\n        if (col_uid) _columns[col_uid] = i.columns[j];\n      });\n      const uid = uuid();\n      data[uid] = _objectSpread(_objectSpread({}, i), {}, {\n        uid,\n        columns: _columns\n      });\n      by_id.push(uid);\n    });\n    if (!selected_list) return;\n    if (!selected_list && !selected_smart_list) return;\n    if (table.id !== selected_list) return;\n    dispatch(setRows({\n      data,\n      by_id,\n      meta\n    }));\n  } catch (e) {\n    console.log((e === null || e === void 0 ? void 0 : e.message) || e);\n  }\n\n  dispatch(setRowsLoading({\n    is_loading: false\n  }));\n};\nexport const updateListName = (value, list_id = null) => async (dispatch, getState) => {\n  sendAmplitudeData('updateListName');\n  const {\n    lists: {\n      selected_list,\n      lists\n    }\n  } = getState();\n  let list;\n  if (list_id) list = lists[list_id];else list = lists[selected_list];\n\n  const updated_list = _objectSpread(_objectSpread({}, list), {}, {\n    name: value\n  });\n\n  dispatch(setList(updated_list));\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n};\nexport const updateRowCell = ({\n  row_index,\n  row_id,\n  columnID,\n  value\n}) => async dispatch => {\n  sendAmplitudeData('updateList');\n  dispatch(setRowCell({\n    row_index,\n    row_id,\n    columnID,\n    value\n  }));\n  dispatch(syncRows());\n};\nexport const updateList = (list_id, payload) => async (dispatch, getState) => {\n  const {\n    lists: {\n      lists\n    }\n  } = getState();\n  const list = lists[list_id];\n\n  const updated_list = _objectSpread(_objectSpread({}, list), payload);\n\n  sendAmplitudeData('updateList');\n  dispatch(setList(updated_list));\n  dispatch(addListPendingUpdate(list_id));\n  dispatch(syncLists());\n};\nexport const updateSmartList = (smart_list_id, payload) => async (dispatch, getState) => {\n  const {\n    lists: {\n      smart_lists\n    }\n  } = getState();\n  const smart_list = smart_lists[smart_list_id];\n\n  const updated_smart_list = _objectSpread(_objectSpread({}, smart_list), payload);\n\n  sendAmplitudeData('updateSmartList');\n  dispatch(setSmartList(updated_smart_list));\n  dispatch(addSmartListPendingUpdate(smart_list_id));\n  dispatch(syncLists());\n};\nexport const syncLists = () => async (dispatch, getState) => {\n  const {\n    lists: {\n      lists_pending_update,\n      smart_lists_pending_update,\n      favorites_pending_mark,\n      favorites_pending_unmark\n    }\n  } = getState();\n  if (lists_pending_update.length > 0) await dispatch(syncListsPendingUpdate());\n  if (smart_lists_pending_update.length > 0) await dispatch(syncSmartListsPendingUpdate());\n  if (favorites_pending_mark.length > 0) await dispatch(syncFavoritesPendingMark());\n  if (favorites_pending_unmark.length > 0) await dispatch(syncFavoritesPendingUnmark());\n};\nexport const syncFavoritesPendingMark = () => async (dispatch, getState) => {\n  const {\n    lists: {\n      favorites_pending_mark\n    }\n  } = getState();\n  const client_calls = favorites_pending_mark.map(id => client('tables/favourites', {\n    method: 'PATCH',\n    data: {\n      id,\n      is_favourite: true\n    }\n  }));\n\n  try {\n    await Promise.all(client_calls);\n    dispatch(setFavoritesPendingMark([]));\n  } catch (e) {}\n};\nexport const syncFavoritesPendingUnmark = () => async (dispatch, getState) => {\n  const {\n    lists: {\n      favorites_pending_unmark\n    }\n  } = getState();\n  const client_calls = favorites_pending_unmark.map(id => client('tables/favourites', {\n    method: 'PATCH',\n    data: {\n      id,\n      is_favourite: false\n    }\n  }));\n\n  try {\n    await Promise.all(client_calls);\n    dispatch(setFavoritesPendingUnmark([]));\n  } catch (e) {}\n};\nexport const syncListsPendingUpdate = () => async (dispatch, getState) => {\n  const {\n    lists: {\n      lists_pending_update,\n      lists\n    },\n    auth: {\n      user: {\n        id: user_id\n      }\n    }\n  } = getState();\n  const updated_lists = lists_pending_update.map(list_id => _objectSpread(_objectSpread({}, lists[list_id]), {}, {\n    user_id\n  }));\n  const client_calls = updated_lists.map(payload => client('tables/update', {\n    method: 'PATCH',\n    data: payload\n  }));\n\n  try {\n    await Promise.all(client_calls);\n    dispatch(removeListsPendingUpdate(lists_pending_update));\n  } catch (e) {}\n};\nexport const syncSmartListsPendingUpdate = () => async (dispatch, getState) => {\n  const {\n    lists: {\n      smart_lists_pending_update,\n      smart_lists\n    }\n  } = getState();\n  dispatch(setListSyncing(true));\n  const updated_smart_lists = smart_lists_pending_update.map(smart_list_id => ({\n    id: smart_list_id,\n    name: smart_lists[smart_list_id].name,\n    filters: smart_lists[smart_list_id].filters\n  }));\n  const client_calls = updated_smart_lists.map(payload => client('smart_lists/update', {\n    method: 'PATCH',\n    data: payload\n  }));\n\n  try {\n    await Promise.all(client_calls);\n    dispatch(removeSmartListsPendingUpdate(smart_lists_pending_update));\n  } catch (e) {}\n\n  dispatch(setListSyncing(false));\n};\nexport const syncList = () => async (dispatch, getState) => {\n  const {\n    lists: {\n      list_syncing,\n      lists_by_id,\n      selected_list,\n      columns_by_id,\n      columns,\n      selected_list_pending_update,\n      lists,\n      column_id_map\n    },\n    auth: {\n      user: {\n        id: user_id\n      }\n    }\n  } = getState();\n  if (list_syncing) return;\n  if (!selected_list) return;\n  if (!selected_list_pending_update) return;\n  dispatch(setListSyncing(true));\n  const list = lists[selected_list];\n  const updated_columns = columns_by_id.map(id => {\n    const col = Object.keys(columns[id]).filter(key => key !== 'uid' && columns[id][key] !== undefined && columns[id][key] !== null).reduce((acc, key) => _objectSpread(_objectSpread({}, acc), {}, {\n      [key]: columns[id][key]\n    }), {});\n    return col;\n  });\n\n  const updated_list = _objectSpread(_objectSpread({}, list), {}, {\n    columns: updated_columns\n  });\n\n  try {\n    const {\n      data: {\n        table: data\n      }\n    } = await client('tables/update', {\n      method: 'PATCH',\n      data: _objectSpread(_objectSpread({}, updated_list), {}, {\n        user_id\n      })\n    });\n\n    const _columns = _objectSpread({}, columns);\n\n    const _column_id_map = _objectSpread({}, column_id_map);\n\n    const _lists = _objectSpread(_objectSpread({}, lists), {}, {\n      [updated_list.id]: data\n    });\n\n    data.columns.forEach((i, index) => {\n      if (!Object.values(column_id_map).includes(i.id)) {\n        const col_uid = columns_by_id[index];\n        _column_id_map[col_uid] = i.id;\n        _columns[col_uid] = _objectSpread(_objectSpread({}, i), {}, {\n          uid: col_uid\n        });\n      }\n    });\n    dispatch(setLists({\n      data: _lists,\n      by_id: lists_by_id\n    }));\n    dispatch(setColumns({\n      columns_by_id,\n      columns: _columns,\n      column_id_map: _column_id_map\n    }));\n    dispatch(setListPendingUpdate(false));\n  } catch (e) {}\n\n  dispatch(setListSyncing(false));\n};\nexport const syncRows = () => async (dispatch, getState) => {\n  const {\n    lists: {\n      rows_pending_insert,\n      rows_pending_update,\n      rows_pending_delete,\n      rows_syncing,\n      selected_list\n    }\n  } = getState();\n  if (rows_syncing) return;\n  if (!selected_list) return;\n  dispatch(setRowsSyncing(true));\n  if (rows_pending_insert.length > 0) await dispatch(syncRowsPendingInsert());\n  if (rows_pending_update.length > 0) await dispatch(syncRowsPendingUpdate());\n  if (rows_pending_delete.length > 0) await dispatch(syncRowsPendingDelete());\n  dispatch(setRowsSyncing(false));\n};\nexport const syncRowsPendingInsert = () => async (dispatch, getState) => {\n  const {\n    lists: {\n      rows,\n      rows_pending_insert,\n      column_id_map,\n      meta\n    }\n  } = getState();\n  let updated_rows = generateUpdatedRows(rows_pending_insert, rows, column_id_map);\n  const client_calls = updated_rows.map(payload => client('rows/create', {\n    method: 'POST',\n    data: payload\n  }));\n\n  try {\n    const response = await Promise.all(client_calls);\n    const new_row_ids = response.map(res => res.data.row.id);\n    updated_rows = {};\n    rows_pending_insert.forEach((row_id, index) => {\n      updated_rows[row_id] = _objectSpread(_objectSpread({}, rows[row_id]), {}, {\n        id: new_row_ids[index]\n      });\n    });\n    dispatch(setRows({\n      data: updated_rows,\n      by_id: [],\n      meta\n    }));\n    dispatch(removeRowsPendingInsert({\n      row_ids: rows_pending_insert\n    }));\n  } catch (e) {}\n};\nexport const syncRowsPendingUpdate = () => async (dispatch, getState) => {\n  const {\n    lists: {\n      rows,\n      rows_pending_update,\n      column_id_map\n    }\n  } = getState();\n  const updated_rows = generateUpdatedRows(rows_pending_update, rows, column_id_map);\n  const client_calls = updated_rows.map(payload => client('rows/update', {\n    method: 'PATCH',\n    data: payload\n  }));\n\n  try {\n    await Promise.all(client_calls);\n    dispatch(removeRowsPendingUpdate({\n      row_ids: rows_pending_update\n    }));\n  } catch (e) {}\n};\nexport const syncRowsPendingDelete = () => async (dispatch, getState) => {\n  const {\n    lists: {\n      rows,\n      rows_pending_delete\n    }\n  } = getState();\n  const client_calls = rows_pending_delete.map(row_id => client('rows/delete', {\n    method: 'DELETE',\n    data: {\n      id: rows[row_id].id\n    }\n  }));\n\n  try {\n    await Promise.all(client_calls);\n    dispatch(removeRowsPendingDelete(rows_pending_delete));\n  } catch (e) {}\n};\nexport const updateColumnArrangement = columns_by_id => async dispatch => {\n  sendAmplitudeData('updateListColumnArrangement');\n  dispatch(setColumnArrangement(columns_by_id));\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n};\nexport const createColumn = (payload = {}) => async (dispatch, getState) => {\n  const {\n    lists: {\n      columns,\n      columns_by_id,\n      column_id_map\n    }\n  } = getState();\n  sendAmplitudeData('createListColumn');\n  const col_uid = uuid();\n\n  const col_obj = _objectSpread({\n    id: null,\n    uid: col_uid,\n    type: 'TEXT',\n    name: 'column',\n    label: 'Column',\n    customization: {}\n  }, payload);\n\n  const updated_col_by_id = [...columns_by_id, col_uid];\n\n  const updated_columns = _objectSpread(_objectSpread({}, columns), {}, {\n    [col_uid]: col_obj\n  });\n\n  const updated_col_id_map = _objectSpread(_objectSpread({}, column_id_map), {}, {\n    [col_uid]: null\n  });\n\n  dispatch(setColumns({\n    columns_by_id: updated_col_by_id,\n    columns: updated_columns,\n    column_id_map: updated_col_id_map\n  }));\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n  return col_obj;\n};\nexport const deleteColumn = columnID => async (dispatch, getState) => {\n  const {\n    lists: {\n      columns_by_id\n    }\n  } = getState();\n  sendAmplitudeData('deleteListColumn');\n  const updated_columns_by_id = columns_by_id.filter(i => i !== columnID);\n  dispatch(setColumnArrangement(updated_columns_by_id));\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n};\nexport const hideColumn = columnID => async (dispatch, getState) => {\n  const {\n    lists: {\n      columns,\n      columns_by_id,\n      column_id_map\n    }\n  } = getState();\n  sendAmplitudeData('hideListColumn');\n\n  const col_obj = _objectSpread(_objectSpread({}, columns[columnID]), {}, {\n    hidden: true\n  });\n\n  const updated_columns = _objectSpread(_objectSpread({}, columns), {}, {\n    [columnID]: col_obj\n  });\n\n  dispatch(setColumns({\n    columns_by_id,\n    column_id_map,\n    columns: updated_columns\n  }));\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n};\nexport const showColumn = columnID => async (dispatch, getState) => {\n  const {\n    lists: {\n      columns,\n      columns_by_id,\n      column_id_map\n    }\n  } = getState();\n  sendAmplitudeData('showListColumn');\n\n  const col_obj = _objectSpread(_objectSpread({}, columns[columnID]), {}, {\n    hidden: false\n  });\n\n  const updated_columns = _objectSpread(_objectSpread({}, columns), {}, {\n    [columnID]: col_obj\n  });\n\n  dispatch(setColumns({\n    columns_by_id,\n    column_id_map,\n    columns: updated_columns\n  }));\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n};\nexport const updateColumnLabel = (columnID, label) => async (dispatch, getState) => {\n  sendAmplitudeData('updateListColumn');\n  const {\n    lists: {\n      columns,\n      columns_by_id,\n      column_id_map\n    }\n  } = getState();\n\n  const col_obj = _objectSpread(_objectSpread({}, columns[columnID]), {}, {\n    label,\n    name: label.toLowerCase()\n  });\n\n  const updated_columns = _objectSpread(_objectSpread({}, columns), {}, {\n    [columnID]: col_obj\n  });\n\n  dispatch(setColumns({\n    columns_by_id,\n    column_id_map,\n    columns: updated_columns\n  }));\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n};\nexport const updateColumn = (columnID, payload = {}) => async (dispatch, getState) => {\n  sendAmplitudeData('updateListColumn');\n  const {\n    lists: {\n      columns,\n      columns_by_id,\n      column_id_map\n    }\n  } = getState();\n\n  if (payload.type && payload.type === 'DND' && columns[columnID].type !== payload.type) {\n    const first_phone_col = Object.values(columns).filter(i => i.uid !== columnID && i.type === 'PHONE NUMBER')[0];\n    payload['customization'] = {\n      tracked_column: first_phone_col ? first_phone_col['id'] : null\n    };\n  }\n\n  const col_obj = _objectSpread(_objectSpread({}, columns[columnID]), payload);\n\n  col_obj['name'] = col_obj['label'].toLowerCase();\n\n  const updated_columns = _objectSpread(_objectSpread({}, columns), {}, {\n    [columnID]: col_obj\n  });\n\n  dispatch(setColumns({\n    columns_by_id,\n    column_id_map,\n    columns: updated_columns\n  }));\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n};\nexport const updateColumnType = (columnID, type) => async (dispatch, getState) => {\n  const {\n    lists: {\n      columns,\n      columns_by_id,\n      column_id_map\n    }\n  } = getState();\n  sendAmplitudeData('updateListColumn');\n  const payload = {\n    type\n  };\n\n  if (['SELECT', 'MULTI SELECT'].includes(type)) {\n    payload['options'] = columns[columnID].options || [];\n  }\n\n  if (type === 'DND') {\n    const first_phone_col = Object.values(columns).filter(i => i.uid !== columnID && i.type === 'PHONE NUMBER')[0];\n    payload['customization'] = {\n      tracked_column: first_phone_col ? first_phone_col['id'] : null\n    };\n  }\n\n  const col_obj = _objectSpread(_objectSpread({}, columns[columnID]), payload);\n\n  const updated_columns = _objectSpread(_objectSpread({}, columns), {}, {\n    [columnID]: col_obj\n  });\n\n  dispatch(setColumns({\n    columns_by_id,\n    column_id_map,\n    columns: updated_columns\n  }));\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n};\nexport const updateColumnCustomization = (columnID, customization) => async (dispatch, getState) => {\n  sendAmplitudeData('updateListColumn');\n  const {\n    lists: {\n      columns,\n      columns_by_id,\n      column_id_map\n    }\n  } = getState();\n\n  const col_obj = _objectSpread(_objectSpread({}, columns[columnID]), {}, {\n    customization\n  });\n\n  const updated_columns = _objectSpread(_objectSpread({}, columns), {}, {\n    [columnID]: col_obj\n  });\n\n  dispatch(setColumns({\n    columns_by_id,\n    column_id_map,\n    columns: updated_columns\n  }));\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n};\nexport const createRow = () => async (dispatch, getState) => {\n  sendAmplitudeData('createListRow');\n  const {\n    lists: {\n      selected_list,\n      meta\n    }\n  } = getState();\n  const row_uid = uuid();\n  const new_row = {\n    uid: row_uid,\n    columns: {},\n    table_id: selected_list,\n    id: null\n  };\n  dispatch(setRows({\n    data: {\n      [row_uid]: new_row\n    },\n    by_id: [row_uid],\n    meta: _objectSpread(_objectSpread({}, meta), {}, {\n      count_total: meta.count_total + 1\n    })\n  }));\n  dispatch(addRowsPendingInsert({\n    row_ids: [row_uid]\n  }));\n  dispatch(syncRows());\n};\nexport const selectRows = (row_indices, mode = 'index') => async (dispatch, getState) => {\n  const {\n    lists: {\n      rows_by_id\n    }\n  } = getState();\n  sendAmplitudeData('selectListRows');\n  let selected_rows = [];\n\n  if (mode = 'id') {\n    selected_rows = row_indices;\n  } else {\n    selected_rows = row_indices.map(row_index => rows_by_id[row_index]);\n  }\n\n  dispatch(setSelectedRows(selected_rows));\n};\nexport const clearRows = () => async (dispatch, getState) => {\n  const {\n    lists: {\n      selected_rows,\n      rows,\n      meta\n    }\n  } = getState();\n  if (selected_rows.length === 0) return;\n  sendAmplitudeData('clearListRows');\n  const updated_rows = {};\n  selected_rows.forEach(row_id => {\n    updated_rows[row_id] = _objectSpread(_objectSpread({}, rows[row_id]), {}, {\n      columns: {}\n    });\n  });\n  dispatch(setRows({\n    data: updated_rows,\n    by_id: [],\n    meta\n  }));\n  dispatch(addRowsPendingUpdate(selected_rows));\n  dispatch(setSelectedRows([]));\n  dispatch(syncRows());\n};\nexport const deleteRows = () => async (dispatch, getState) => {\n  const {\n    lists: {\n      selected_rows,\n      meta\n    }\n  } = getState();\n  if (selected_rows.length === 0) return;\n  sendAmplitudeData('clearListRows');\n  dispatch(removeRowsByID(selected_rows));\n  dispatch(addRowsPendingDelete(selected_rows));\n  dispatch(setSelectedRows([]));\n  dispatch(setRows({\n    by_id: [],\n    data: {},\n    meta: _objectSpread(_objectSpread({}, meta), {}, {\n      count_total: meta.count_total - selected_rows.length\n    })\n  }));\n  dispatch(syncRows());\n};\nexport const addFilter = () => async (dispatch, getState) => {\n  const {\n    lists: {\n      filters,\n      filters_by_id,\n      columns,\n      columns_by_id\n    }\n  } = getState();\n  sendAmplitudeData('addListFilter');\n  if (columns_by_id.length === 0) return;\n  const first_col = columns[columns_by_id[0]];\n  const filter_uid = uuid();\n  let operator = 'contains';\n  let subOperator = null;\n\n  if (['SELECT', 'MULTI SELECT'].includes(first_col.type)) {\n    operator = 'isAnyOf';\n  }\n\n  if (first_col.type === 'DATE') {\n    operator = 'dateEqual';\n    subOperator = 'exact date';\n  }\n\n  if (first_col.type === 'NUMBER') {\n    operator = 'equals';\n  }\n\n  const filter_obj = {\n    uid: filter_uid,\n    columnID: first_col['uid'],\n    operator,\n    subOperator,\n    value: '',\n    name: first_col['name']\n  };\n  if (filters_by_id.length > 0) filter_obj['conjunction'] = 'and';\n\n  if (filters_by_id.length > 1) {\n    filter_obj['conjunction'] = filters[filters_by_id[1]]['conjunction'];\n  }\n\n  const updated_filters = _objectSpread(_objectSpread({}, filters), {}, {\n    [filter_uid]: filter_obj\n  });\n\n  const updated_filters_by_id = [...filters_by_id, filter_uid];\n  dispatch(setFilterData({\n    data: updated_filters,\n    by_id: updated_filters_by_id\n  }));\n  dispatch(applyFilter());\n};\nexport const updateFilter = (filter_uid, payload) => async (dispatch, getState) => {\n  const {\n    lists: {\n      filters,\n      filters_by_id,\n      columns\n    }\n  } = getState();\n  sendAmplitudeData('updateListFilter');\n  const filter = filters[filter_uid];\n\n  const updated_filter = _objectSpread(_objectSpread({}, filter), payload);\n\n  if (filter.columnID !== updated_filter.columnID) {\n    const column = columns[updated_filter.columnID];\n    const allowed_operator = Object.values(available_operators).find(i => i.column_types.includes(column.type));\n    updated_filter['operator'] = allowed_operator['key'];\n    if (column.type === 'DATE') updated_filter['subOperator'] = 'exact date';else updated_filter['subOperator'] = null;\n    updated_filter['operator'] = allowed_operator['key'];\n    if (column.type === 'DND') updated_filter['value'] = true;\n  }\n\n  const updated_filters = _objectSpread(_objectSpread({}, filters), {}, {\n    [filter_uid]: updated_filter\n  });\n\n  if (filter.cunjunction !== updated_filter.conjunction) {\n    filters_by_id.forEach((i, index) => {\n      if (index > 1) {\n        updated_filters[i] = _objectSpread(_objectSpread({}, updated_filters[i]), {}, {\n          conjunction: updated_filter['conjunction']\n        });\n      }\n    });\n  }\n\n  dispatch(setFilterData({\n    data: updated_filters,\n    by_id: filters_by_id\n  }));\n  dispatch(applyFilter());\n};\nexport const deleteFilter = filter_uid => async (dispatch, getState) => {\n  const {\n    lists: {\n      filters,\n      filters_by_id\n    }\n  } = getState();\n  sendAmplitudeData('removeListFilter');\n  const updated_filters_by_id = filters_by_id.filter(i => i !== filter_uid);\n  const updated_filters = updated_filters_by_id.reduce((acc, i, index) => {\n    const filter_item = _objectSpread({}, filters[i]);\n\n    if (index === 0 && filter_item.conjunction) delete filter_item.conjunction;\n    return _objectSpread(_objectSpread({}, acc), {}, {\n      [i]: filter_item\n    });\n  }, {});\n  dispatch(setFilterData({\n    data: updated_filters,\n    by_id: updated_filters_by_id\n  }));\n  dispatch(applyFilter());\n};\nexport const applyFilter = () => async (dispatch, getState) => {\n  const {\n    lists: {\n      selected_list\n    }\n  } = getState();\n  dispatch(resetRows());\n  dispatch(fetchRows({\n    list: selected_list,\n    page: 1\n  }));\n};\nexport const addSort = () => async (dispatch, getState) => {\n  const {\n    lists: {\n      sorts,\n      sorts_by_id,\n      columns_by_id,\n      columns\n    }\n  } = getState();\n  sendAmplitudeData('addListSort');\n  const sorted_columns = Object.values(sorts).reduce((acc, i) => {\n    if (acc.includes(i.columnID)) return acc;\n    return [...acc, i.columnID];\n  }, []);\n  const available_columns = columns_by_id.filter(i => !sorted_columns.includes(i));\n  if (columns_by_id.length === 0) return;\n  if (available_columns.length === 0) return;\n  const first_col = columns[available_columns[0]];\n  const sort_uid = uuid();\n  const sort_item = {\n    uid: sort_uid,\n    columnID: first_col['uid'],\n    name: first_col['name'],\n    order: 'ASC'\n  };\n\n  const updated_sorts = _objectSpread(_objectSpread({}, sorts), {}, {\n    [sort_uid]: sort_item\n  });\n\n  const updated_sorts_by_id = [...sorts_by_id, sort_uid];\n  dispatch(setSortData({\n    data: updated_sorts,\n    by_id: updated_sorts_by_id\n  }));\n  dispatch(applySorts());\n};\nexport const updateSort = (sort_uid, payload) => async (dispatch, getState) => {\n  sendAmplitudeData('updateListSort');\n  const {\n    lists: {\n      sorts,\n      sorts_by_id\n    }\n  } = getState();\n  const sort_item = sorts[sort_uid];\n\n  const updated_sort_item = _objectSpread(_objectSpread({}, sort_item), payload);\n\n  const updated_sorts = _objectSpread(_objectSpread({}, sorts), {}, {\n    [sort_uid]: updated_sort_item\n  });\n\n  dispatch(setSortData({\n    data: updated_sorts,\n    by_id: sorts_by_id\n  }));\n  dispatch(applySorts());\n};\nexport const deleteSort = sort_uid => async (dispatch, getState) => {\n  const {\n    lists: {\n      sorts,\n      sorts_by_id\n    }\n  } = getState();\n  sendAmplitudeData('deleteListSort');\n  const updated_sorts_by_id = sorts_by_id.filter(i => i !== sort_uid);\n  const updated_sorts = updated_sorts_by_id.reduce((acc, i) => _objectSpread(_objectSpread({}, acc), {}, {\n    [i]: sorts[i]\n  }), {});\n  dispatch(setSortData({\n    data: updated_sorts,\n    by_id: updated_sorts_by_id\n  }));\n  dispatch(applySorts());\n};\nexport const applySorts = () => async (dispatch, getState) => {\n  const {\n    lists: {\n      selected_list\n    }\n  } = getState();\n  dispatch(resetRows());\n  dispatch(fetchRows({\n    list: selected_list,\n    page: 1\n  }));\n};\nexport const applySearch = () => async (dispatch, getState) => {\n  const {\n    lists: {\n      selected_list\n    }\n  } = getState();\n  dispatch(resetRows());\n  dispatch(fetchRows({\n    list: selected_list,\n    page: 1\n  }));\n};\nexport const deleteList = list_id => async (dispatch, getState) => {\n  const {\n    lists: {\n      lists_by_id,\n      lists,\n      trash,\n      trash_by_id,\n      favorites\n    }\n  } = getState();\n  sendAmplitudeData('deleteList');\n  dispatch(resetSelectedList());\n  const by_id = lists_by_id.filter(i => i !== list_id);\n  const data = by_id.reduce((acc, i) => _objectSpread(_objectSpread({}, acc), {}, {\n    [i]: lists[i]\n  }), {});\n  const updated_favorites = favorites.filter(i => i !== list_id);\n  const updated_trash_by_id = [...trash_by_id, list_id];\n\n  const updated_trash = _objectSpread(_objectSpread({}, trash), {}, {\n    [list_id]: lists[list_id]\n  });\n\n  dispatch(setLists({\n    data,\n    by_id\n  }));\n  dispatch(setFavorites(updated_favorites));\n  dispatch(setTrash({\n    data: updated_trash,\n    by_id: updated_trash_by_id\n  }));\n\n  try {\n    await client('tables/trash', {\n      method: 'PATCH',\n      data: {\n        id: list_id,\n        is_trash: true\n      }\n    });\n  } catch (e) {}\n};\nexport const restoreList = trash_list_id => async (dispatch, getState) => {\n  const {\n    lists: {\n      lists_by_id,\n      lists,\n      trash,\n      trash_by_id\n    }\n  } = getState();\n  sendAmplitudeData('restoreList');\n  const by_id = [...lists_by_id, trash_list_id];\n\n  const data = _objectSpread(_objectSpread({}, lists), {}, {\n    [trash_list_id]: trash[trash_list_id]\n  });\n\n  const updated_trash_by_id = trash_by_id.filter(id => id !== trash_list_id);\n  const updated_trash = updated_trash_by_id.reduce((acc, i) => _objectSpread(_objectSpread({}, acc), {}, {\n    [i]: trash[i]\n  }), {});\n  dispatch(setLists({\n    data,\n    by_id\n  }));\n  dispatch(setTrash({\n    data: updated_trash,\n    by_id: updated_trash_by_id\n  }));\n\n  try {\n    await client('tables/trash', {\n      method: 'PATCH',\n      data: {\n        id: trash_list_id,\n        is_trash: false\n      }\n    });\n    dispatch(fetchListFavorites());\n  } catch (e) {}\n};\nexport const deleteListPermanently = trash_list_id => async (dispatch, getState) => {\n  const {\n    lists: {\n      trash,\n      trash_by_id\n    }\n  } = getState();\n  sendAmplitudeData('deleteListPermanently');\n  const updated_trash_by_id = trash_by_id.filter(id => id !== trash_list_id);\n  const updated_trash = updated_trash_by_id.reduce((acc, i) => _objectSpread(_objectSpread({}, acc), {}, {\n    [i]: trash[i]\n  }), {});\n  dispatch(setTrash({\n    data: updated_trash,\n    by_id: updated_trash_by_id\n  }));\n\n  try {\n    await client('tables/delete', {\n      method: 'DELETE',\n      data: {\n        id: trash_list_id\n      }\n    });\n  } catch (e) {}\n};\nexport const deleteTrashPermanently = () => async (dispatch, getState) => {\n  const {\n    lists: {\n      trash_by_id\n    }\n  } = getState();\n  sendAmplitudeData('deleteListPermanently');\n  const client_calls = trash_by_id.map(id => client('tables/delete', {\n    method: 'DELETE',\n    data: {\n      id\n    }\n  }));\n  const updated_trash_by_id = [];\n  const updated_trash = {};\n\n  try {\n    await Promise.all(client_calls);\n    dispatch(setFavoritesPendingMark([]));\n    dispatch(setTrash({\n      data: updated_trash,\n      by_id: updated_trash_by_id\n    }));\n    return true;\n  } catch (e) {\n    return null;\n  }\n};\nexport const deleteSmartList = smart_list_id => async (dispatch, getState) => {\n  const {\n    lists: {\n      smart_lists_by_id,\n      smart_lists\n    }\n  } = getState();\n  dispatch(resetSelectedList());\n  sendAmplitudeData('deleteSmartList');\n  const by_id = smart_lists_by_id.filter(i => i !== smart_list_id);\n  const data = by_id.reduce((acc, i) => _objectSpread(_objectSpread({}, acc), {}, {\n    [i]: smart_lists[i]\n  }), {});\n  dispatch(setSmartLists({\n    data,\n    by_id\n  }));\n\n  try {\n    await client('smart_lists/delete', {\n      method: 'DELETE',\n      data: {\n        id: smart_list_id\n      }\n    });\n  } catch (e) {}\n};\nexport const addSelectOption = (columnID, value, color) => async (dispatch, getState) => {\n  const {\n    lists: {\n      columns,\n      columns_by_id,\n      column_id_map\n    }\n  } = getState();\n  sendAmplitudeData('addListColumnSelectOption');\n  const column = columns[columnID];\n  const options = column.options || [];\n  const option_id = options.length + 1;\n  const new_option = {\n    id: option_id,\n    name: value,\n    type: 'option',\n    is_deleted: false,\n    color: color || generateRandomSelectColor()\n  };\n  const updated_options = [...options, new_option];\n\n  const updated_column = _objectSpread(_objectSpread({}, column), {}, {\n    options: updated_options\n  });\n\n  dispatch(setColumns({\n    columns: _objectSpread(_objectSpread({}, columns), {}, {\n      [columnID]: updated_column\n    }),\n    columns_by_id,\n    column_id_map\n  }));\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n  return new_option;\n};\nexport const updateSelectOption = (columnID, option_id, payload) => async (dispatch, getState) => {\n  const {\n    lists: {\n      columns,\n      columns_by_id,\n      column_id_map\n    }\n  } = getState();\n  sendAmplitudeData('updateListColumnSelectOption');\n  const column = columns[columnID];\n  const option_index = column.options.findIndex(option => option.id === option_id);\n  const option = column.options[option_index];\n\n  const updated_option = _objectSpread(_objectSpread({}, option), payload);\n\n  const updated_options = [...column.options];\n  updated_options[option_index] = updated_option;\n\n  const updated_column = _objectSpread(_objectSpread({}, column), {}, {\n    options: updated_options\n  });\n\n  dispatch(setColumns({\n    columns: _objectSpread(_objectSpread({}, columns), {}, {\n      [columnID]: updated_column\n    }),\n    columns_by_id,\n    column_id_map\n  }));\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n  return updated_options;\n};\nexport const getRowByIndex = row_index => async (dispatch, getState) => {\n  const {\n    lists: {\n      rows,\n      rows_by_id\n    }\n  } = getState();\n  const row_id = rows_by_id[row_index];\n  return rows[row_id];\n};\nexport const createSmartList = smart_list_name => async (dispatch, getState) => {\n  sendAmplitudeData('createSmartList');\n  const {\n    lists: {\n      filters,\n      filters_by_id,\n      selected_list,\n      column_id_map,\n      smart_lists,\n      smart_lists_by_id,\n      columns\n    }\n  } = getState();\n  const filter_payload = generateFilterPayload(filters, filters_by_id, column_id_map, columns);\n  const payload = {\n    table_id: selected_list,\n    filters: filter_payload,\n    name: smart_list_name\n  };\n\n  try {\n    const {\n      data: {\n        smart_list\n      }\n    } = await client('smart_lists/create', {\n      method: 'POST',\n      data: payload\n    });\n\n    const data = _objectSpread(_objectSpread({}, smart_lists), {}, {\n      [smart_list.id]: _objectSpread(_objectSpread({}, smart_list), {}, {\n        list_id: selected_list\n      })\n    });\n\n    const by_id = [...smart_lists_by_id, smart_list.id];\n    dispatch(setSmartLists({\n      data,\n      by_id\n    }));\n    return smart_list;\n  } catch (e) {\n    console.log(e.message);\n    return null;\n  }\n};\nexport const updateSmartListFilters = smart_list_id => async (dispatch, getState) => {\n  sendAmplitudeData('updateSmartListFilters');\n  const {\n    lists: {\n      filters,\n      filters_by_id,\n      column_id_map,\n      columns\n    }\n  } = getState();\n  const payload = {\n    filters: generateFilterPayload(filters, filters_by_id, column_id_map, columns)\n  };\n  dispatch(updateSmartList(smart_list_id, payload));\n};\nexport const clearFilters = () => async dispatch => {\n  await dispatch(setFilterData({\n    data: {},\n    by_id: []\n  }));\n  dispatch(applyFilter());\n};\nexport const fetchSmartLists = () => async dispatch => {\n  dispatch(setSmartListsLoading({\n    is_loading: true\n  }));\n\n  try {\n    const {\n      data: {\n        smart_lists\n      }\n    } = await client('smart_lists/all', {\n      method: 'GET'\n    });\n    const data = {};\n    const by_id = [];\n    smart_lists.forEach(i => {\n      const {\n        smart_id: id,\n        smart_lists_name: name,\n        table_id: list_id,\n        filters\n      } = i;\n      data[id] = {\n        id,\n        name: name || 'Untitled',\n        list_id,\n        filters\n      };\n      by_id.push(id);\n    });\n    dispatch(setSmartLists({\n      data,\n      by_id\n    }));\n    dispatch(setSmartListsLoading({\n      is_loading: false\n    }));\n    return data;\n  } catch (e) {\n    dispatch(setSmartListsLoading({\n      is_loading: false\n    }));\n    return null;\n  }\n};\nexport const fetchListFavorites = () => async dispatch => {\n  dispatch(setFavoritesLoading({\n    is_loading: true\n  }));\n\n  try {\n    const {\n      data: {\n        table\n      }\n    } = await client('tables/favourites', {\n      method: 'GET'\n    });\n    const favorites = table.map(i => i.id);\n    dispatch(setFavorites(favorites));\n    dispatch(setFavoritesLoading({\n      is_loading: false\n    }));\n    return favorites;\n  } catch (e) {\n    dispatch(setFavoritesLoading({\n      is_loading: false\n    }));\n    return null;\n  }\n};\nexport const markListFavorite = list_id => async (dispatch, getState) => {\n  const {\n    lists: {\n      favorites,\n      favorites_pending_mark\n    }\n  } = getState();\n  sendAmplitudeData('markListFavorite');\n  const updated_favorites = [...favorites, list_id];\n  const updated_favorites_pending_mark = [...favorites_pending_mark, list_id];\n  dispatch(setFavorites(updated_favorites));\n  dispatch(setFavoritesPendingMark(updated_favorites_pending_mark));\n  dispatch(syncLists());\n};\nexport const unMarkListFavorite = list_id => async (dispatch, getState) => {\n  const {\n    lists: {\n      favorites,\n      favorites_pending_unmark\n    }\n  } = getState();\n  sendAmplitudeData('unMarkListFavorite');\n  const updated_favorites = favorites.filter(id => id !== list_id);\n  const updated_favorites_pending_unmark = [...favorites_pending_unmark, list_id];\n  dispatch(setFavorites(updated_favorites));\n  dispatch(setFavoritesPendingUnmark(updated_favorites_pending_unmark));\n  dispatch(syncLists());\n};\nexport const fetchListTrash = () => async dispatch => {\n  dispatch(setTrashLoading({\n    is_loading: true\n  }));\n\n  try {\n    const {\n      data: {\n        table\n      }\n    } = await client('tables/trash', {\n      method: 'GET'\n    });\n    const data = {};\n    const by_id = [];\n    table.forEach(i => {\n      data[i.id] = i;\n      by_id.push(i.id);\n    });\n    dispatch(setTrash({\n      data,\n      by_id\n    }));\n    dispatch(setTrashLoading({\n      is_loading: false\n    }));\n    return favorites;\n  } catch (e) {\n    dispatch(setTrashLoading({\n      is_loading: false\n    }));\n    return null;\n  }\n};\nexport const updateSearchQuery = value => async dispatch => {\n  dispatch(setSearchQuery(value));\n  dispatch(applySearch());\n};\nexport const fetchInitialContactList = () => async dispatch => {\n  try {\n    const {\n      data: {\n        table\n      }\n    } = await client('table/type/contact', {\n      method: 'GET'\n    });\n    dispatch(setInitialList(table.id));\n  } catch (e) {\n    return null;\n  }\n};\nexport const enrichColumnData = tracked_column => async (dispatch, getState) => {\n  const {\n    lists: {\n      selected_list,\n      selected_smart_list,\n      columns\n    }\n  } = getState();\n  sendAmplitudeData('enrichColumnData');\n\n  try {\n    const already_enriched = !!Object.values(columns).find(i => i.type === 'DND' && i.customization.tracked_column === tracked_column);\n\n    if (!already_enriched) {\n      await dispatch(createColumn({\n        name: 'is_dnd',\n        label: 'On DND',\n        type: 'DND',\n        customization: {\n          tracked_column: tracked_column\n        }\n      }));\n    }\n\n    await client('lookups/queue', {\n      method: 'POST',\n      data: {\n        tracked_column,\n        table_id: !selected_smart_list ? selected_list : null,\n        smart_list_id: selected_smart_list ? selected_smart_list : null\n      }\n    });\n    await wait(2000);\n    dispatch(resetRows());\n    dispatch(fetchRows({\n      list: selected_list,\n      page: 1\n    }));\n    return true;\n  } catch (e) {\n    return null;\n  }\n};\nexport const requestGoogleSheetsAuth = resourceName => async () => {\n  const response = await client('lists/resource/google-sheets/auth/request', {\n    method: 'GET',\n    params: {\n      name: resourceName\n    }\n  });\n  return response.data['auth_url'];\n};\nexport const fetchGSheetSpreadSheets = resourceID => async () => {\n  const response = await client(`lists/resource/google-sheets/sheets/${resourceID}`, {\n    method: 'GET'\n  });\n  return response.data;\n};\nexport const fetchGSheetMetadata = (resourceID, spreadsheetID) => async () => {\n  const response = await client('lists/resource/google-sheets/schema', {\n    method: 'POST',\n    data: {\n      resource: resourceID,\n      spreadsheet: spreadsheetID\n    }\n  });\n  return response.data;\n};\nexport const queueResourceImport = (payload, resourceType = 'google-sheets') => async dispatch => {\n  const response = await client(`lists/resource/${resourceType}/import`, {\n    method: 'POST',\n    data: payload\n  });\n  dispatch(addList(response.data));\n  return response.data;\n};\nexport const queueAppImport = (payload, resourceType = 'shopify') => async dispatch => {\n  const response = await client('', {\n    url: buildAppsURL(`/${resourceType}/endpoints/import`),\n    method: 'POST',\n    data: payload\n  });\n  dispatch(addList(response.data));\n  return response.data;\n};\nexport * from './thunks';","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/lists/lists.thunks.ts"],"names":["v4","uuid","buildAppsURL","client","setListsLoading","setLists","setRows","setSelectedList","setRowsLoading","setListPendingUpdate","setColumnArrangement","setListSyncing","setRowCell","setRowsSyncing","setColumns","removeRowsPendingUpdate","addRowsPendingInsert","removeRowsPendingInsert","setSelectedRows","addRowsPendingUpdate","removeRowsByID","addRowsPendingDelete","removeRowsPendingDelete","setList","setFilterData","setSortData","resetRows","resetSelectedList","addListPendingUpdate","removeListsPendingUpdate","setSmartLists","setSmartListsLoading","setSmartList","addSmartListPendingUpdate","removeSmartListsPendingUpdate","setSelectedSmartListID","setFavoritesLoading","setFavorites","setFavoritesPendingMark","setFavoritesPendingUnmark","setTrashLoading","setTrash","setSearchQuery","setInitialList","setAudiences","setAudiencesLoading","generateFilterPayload","generateRandomSelectColor","generateSortPayload","generateUpdatedRows","wait","available_operators","sendAmplitudeData","PAGE_LIMIT","Number","process","env","REACT_APP_PAGINATION_LIMIT","fetchLists","dispatch","is_loading","fetchInitialContactList","data","tables","method","by_id","forEach","i","id","push","e","fetchAudiences","audience_lists","addList","list","getState","lists","lists_by_id","addAudience","payload","audiences","audiences_by_id","audience_list","error","selectList","list_id","_columns","columns","columns_by_id","column_id_map","uid","name","label","fetchRows","page","selectSmartList","smart_list_id","smart_lists","smart_list","parent_list","_filters","filters","filters_by_id","_filter","_col_id","find","col_id","columnID","filter_uid","filter_obj","selectSmartListID","sorts","sorts_by_id","search_query","selected_list","selected_smart_list","rows","meta","table","table_id","limit","query","Object","keys","j","col_uid","x","String","console","log","message","updateListName","value","updated_list","syncList","updateRowCell","row_index","row_id","syncRows","updateList","syncLists","updateSmartList","updated_smart_list","lists_pending_update","smart_lists_pending_update","favorites_pending_mark","favorites_pending_unmark","length","syncListsPendingUpdate","syncSmartListsPendingUpdate","syncFavoritesPendingMark","syncFavoritesPendingUnmark","client_calls","map","is_favourite","Promise","all","auth","user","user_id","updated_lists","updated_smart_lists","list_syncing","selected_list_pending_update","updated_columns","col","filter","key","undefined","reduce","acc","_column_id_map","_lists","index","values","includes","rows_pending_insert","rows_pending_update","rows_pending_delete","rows_syncing","syncRowsPendingInsert","syncRowsPendingUpdate","syncRowsPendingDelete","updated_rows","response","new_row_ids","res","row","row_ids","updateColumnArrangement","createColumn","col_obj","type","customization","updated_col_by_id","updated_col_id_map","deleteColumn","updated_columns_by_id","hideColumn","hidden","showColumn","updateColumnLabel","toLowerCase","updateColumn","first_phone_col","tracked_column","updateColumnType","options","updateColumnCustomization","createRow","row_uid","new_row","count_total","selectRows","row_indices","mode","rows_by_id","selected_rows","clearRows","deleteRows","addFilter","first_col","operator","subOperator","updated_filters","updated_filters_by_id","applyFilter","updateFilter","updated_filter","column","allowed_operator","column_types","cunjunction","conjunction","deleteFilter","filter_item","addSort","sorted_columns","available_columns","sort_uid","sort_item","order","updated_sorts","updated_sorts_by_id","applySorts","updateSort","updated_sort_item","deleteSort","applySearch","deleteList","trash","trash_by_id","favorites","updated_favorites","updated_trash_by_id","updated_trash","is_trash","restoreList","trash_list_id","fetchListFavorites","deleteListPermanently","deleteTrashPermanently","deleteSmartList","smart_lists_by_id","addSelectOption","color","option_id","new_option","is_deleted","updated_options","updated_column","updateSelectOption","option_index","findIndex","option","updated_option","getRowByIndex","createSmartList","smart_list_name","filter_payload","updateSmartListFilters","clearFilters","fetchSmartLists","smart_id","smart_lists_name","markListFavorite","updated_favorites_pending_mark","unMarkListFavorite","updated_favorites_pending_unmark","fetchListTrash","updateSearchQuery","enrichColumnData","already_enriched","requestGoogleSheetsAuth","resourceName","params","fetchGSheetSpreadSheets","resourceID","fetchGSheetMetadata","spreadsheetID","resource","spreadsheet","queueResourceImport","resourceType","queueAppImport","url"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { v4 as uuid } from 'uuid';\nimport { buildAppsURL, client } from '../../../utils';\nimport {\n  setListsLoading,\n  setLists,\n  setRows,\n  setSelectedList,\n  setRowsLoading,\n  setListPendingUpdate,\n  setColumnArrangement,\n  setListSyncing,\n  setRowCell,\n  setRowsSyncing,\n  setColumns,\n  removeRowsPendingUpdate,\n  addRowsPendingInsert,\n  removeRowsPendingInsert,\n  setSelectedRows,\n  addRowsPendingUpdate,\n  removeRowsByID,\n  addRowsPendingDelete,\n  removeRowsPendingDelete,\n  setList,\n  setFilterData,\n  setSortData,\n  resetRows,\n  resetSelectedList,\n  addListPendingUpdate,\n  removeListsPendingUpdate,\n  setSmartLists,\n  setSmartListsLoading,\n  setSmartList,\n  addSmartListPendingUpdate,\n  removeSmartListsPendingUpdate,\n  setSelectedSmartListID,\n  setFavoritesLoading,\n  setFavorites,\n  setFavoritesPendingMark,\n  setFavoritesPendingUnmark,\n  setTrashLoading,\n  setTrash,\n  setSearchQuery,\n  setInitialList,\n  setAudiences,\n  setAudiencesLoading,\n} from './lists.reducer';\nimport { AppThunk } from '../../../root';\nimport {\n  generateFilterPayload,\n  generateRandomSelectColor,\n  generateSortPayload,\n  generateUpdatedRows,\n  wait,\n} from './lists.utils';\nimport { available_operators } from './list.data';\nimport { sendAmplitudeData } from '../../../utils/amplitude';\n\nconst PAGE_LIMIT: number = Number(process.env.REACT_APP_PAGINATION_LIMIT) || 200;\n\nexport const fetchLists = (): AppThunk => async dispatch => {\n  dispatch(setListsLoading({ is_loading: true }));\n  dispatch(fetchInitialContactList());\n  try {\n    const {\n      data: { tables },\n    } = await client('tables', { method: 'GET' });\n    const data = {};\n    const by_id: [] = [];\n    tables.forEach((i: any) => {\n      data[i.id] = i;\n      by_id.push(i.id);\n    });\n    dispatch(setLists({ data, by_id }));\n    dispatch(setListsLoading({ is_loading: false }));\n    return data;\n  } catch (e) {\n    dispatch(setListsLoading({ is_loading: false }));\n    return null;\n  }\n};\n\nexport const fetchAudiences = (): AppThunk => async dispatch => {\n  dispatch(setAudiencesLoading({ is_loading: true }));\n  try {\n    const {\n      data: { audience_lists },\n    } = await client('audience_lists/all', { method: 'GET' });\n    const data = {};\n    const by_id: [] = [];\n    audience_lists.forEach((i: any) => {\n      data[i.id] = i;\n      by_id.push(i.id);\n    });\n    dispatch(setAudiences({ data, by_id }));\n    dispatch(setAudiencesLoading({ is_loading: false }));\n    return data;\n  } catch (e) {\n    dispatch(setAudiencesLoading({ is_loading: false }));\n    return null;\n  }\n};\n\nexport const addList = (list): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { lists, lists_by_id },\n  } = getState();\n  sendAmplitudeData('addList');\n\n  const data = { ...lists, [list.id]: list };\n  const by_id = [...lists_by_id, list.id];\n\n  dispatch(setLists({ data, by_id }));\n};\n\nexport const addAudience = (payload: {\n  name: string;\n  filters: { [key: string]: string[] | string | number | undefined };\n}): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { audiences, audiences_by_id },\n  } = getState();\n\n  try {\n    const {\n      data: { audience_list },\n    } = await client('audience_lists/create', { data: payload, method: 'POST' });\n\n    sendAmplitudeData('addAudience');\n\n    const data = { ...audiences, [audience_list.id]: audience_list };\n    const by_id = [...audiences_by_id, audience_list.id];\n\n    dispatch(setAudiences({ data, by_id }));\n\n    return audience_list;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const selectList = (list_id: string): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { lists },\n  } = getState();\n  // @ts-ignore\n  const _columns = lists[list_id]['columns'];\n  const columns = {};\n  const columns_by_id: [] = [];\n  const column_id_map = {};\n\n  sendAmplitudeData('selectList');\n\n  _columns.forEach((i: any) => {\n    const uid: string = uuid();\n    column_id_map[uid] = i.id;\n    columns[uid] = { ...i, uid, name: !!i.name ? i.name : '', label: !!i.label ? i.label : '' };\n    columns_by_id.push(uid);\n  });\n  dispatch(setSelectedList({ list_id, columns, columns_by_id, column_id_map }));\n  dispatch(fetchRows({ list: list_id, page: 1 }));\n};\n\nexport const selectSmartList = (smart_list_id: string): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { lists, smart_lists },\n  } = getState();\n\n  sendAmplitudeData('selectSmartList');\n\n  const smart_list = smart_lists[smart_list_id];\n  const parent_list = lists[smart_list.list_id];\n\n  const _columns = parent_list['columns'];\n  const columns = {};\n  const columns_by_id: [] = [];\n  const column_id_map = {};\n  _columns.forEach((i: any) => {\n    const uid: string = uuid();\n    column_id_map[uid] = i.id;\n    columns[uid] = { ...i, uid };\n    columns_by_id.push(uid);\n  });\n\n  const _filters = smart_list['filters'];\n  const filters = {};\n  const filters_by_id = [];\n  _filters.forEach((_filter: any) => {\n    const _col_id = columns_by_id.find(\n      (col_id: string) => column_id_map[col_id] === _filter.columnID,\n    );\n    if (!_col_id) return;\n\n    const filter_uid = uuid();\n    const filter_obj = {\n      ..._filter,\n      uid: filter_uid,\n      columnID: _col_id,\n    };\n    filters[filter_uid] = filter_obj;\n    filters_by_id.push(filter_uid);\n  });\n  dispatch(\n    setSelectedList({\n      list_id: parent_list.id,\n      columns,\n      columns_by_id,\n      column_id_map,\n      smart_list_id,\n      filters,\n      filters_by_id,\n    }),\n  );\n  dispatch(fetchRows({ list: parent_list.id, page: 1 }));\n};\n\nexport const selectSmartListID = (smart_list_id: string): AppThunk => async dispatch => {\n  dispatch(setSelectedSmartListID(smart_list_id));\n};\n\nexport const fetchRows = ({ list, page }: { list: string; page: number }): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  dispatch(setRowsLoading({ is_loading: true }));\n\n  const {\n    lists: {\n      filters,\n      filters_by_id,\n      sorts,\n      sorts_by_id,\n      column_id_map,\n      search_query,\n      columns,\n      selected_list,\n      selected_smart_list,\n    },\n  } = getState();\n\n  try {\n    const {\n      data: { rows, meta, table },\n    } = await client(`rows/filter`, {\n      method: 'POST',\n      data: {\n        table_id: list,\n        filters: generateFilterPayload(filters, filters_by_id, column_id_map, columns),\n        sorts: generateSortPayload(sorts, sorts_by_id, column_id_map, columns),\n        page,\n        limit: PAGE_LIMIT,\n        query: search_query,\n      },\n    });\n\n    const data = {};\n    const by_id: [] = [];\n\n    rows.forEach((i: any) => {\n      const _columns = {};\n      Object.keys(i.columns).forEach((j: any) => {\n        const col_uid = Object.keys(column_id_map).find(\n          x => String(column_id_map[x]) === String(j),\n        );\n        if (col_uid) _columns[col_uid] = i.columns[j];\n      });\n\n      const uid: string = uuid();\n      data[uid] = {\n        ...i,\n        uid,\n        columns: _columns,\n      };\n      by_id.push(uid);\n    });\n\n    if (!selected_list) return;\n    if (!selected_list && !selected_smart_list) return;\n    if (table.id !== selected_list) return;\n\n    dispatch(setRows({ data, by_id, meta }));\n  } catch (e) {\n    console.log(e?.message || e);\n  }\n  dispatch(setRowsLoading({ is_loading: false }));\n};\n\nexport const updateListName = (value: string, list_id?: string = null): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  sendAmplitudeData('updateListName');\n\n  const {\n    lists: { selected_list, lists },\n  } = getState();\n\n  let list;\n\n  if (list_id) list = lists[list_id];\n  else list = lists[selected_list];\n\n  const updated_list = {\n    ...list,\n    name: value,\n  };\n\n  dispatch(setList(updated_list));\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n};\n\nexport const updateRowCell = ({\n  row_index,\n  row_id,\n  columnID,\n  value,\n}): AppThunk => async dispatch => {\n  sendAmplitudeData('updateList');\n  dispatch(setRowCell({ row_index, row_id, columnID, value }));\n  dispatch(syncRows());\n};\n\nexport const updateList = (list_id: string, payload: {}): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  const {\n    lists: { lists },\n  } = getState();\n  const list = lists[list_id];\n  const updated_list = {\n    ...list,\n    ...payload,\n  };\n  sendAmplitudeData('updateList');\n  dispatch(setList(updated_list));\n  dispatch(addListPendingUpdate(list_id));\n  dispatch(syncLists());\n};\n\nexport const updateSmartList = (smart_list_id: string, payload: {}): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  const {\n    lists: { smart_lists },\n  } = getState();\n  const smart_list = smart_lists[smart_list_id];\n  const updated_smart_list = {\n    ...smart_list,\n    ...payload,\n  };\n  sendAmplitudeData('updateSmartList');\n  dispatch(setSmartList(updated_smart_list));\n  dispatch(addSmartListPendingUpdate(smart_list_id));\n  dispatch(syncLists());\n};\n\nexport const syncLists = (): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: {\n      lists_pending_update,\n      smart_lists_pending_update,\n      favorites_pending_mark,\n      favorites_pending_unmark,\n    },\n  } = getState();\n\n  if (lists_pending_update.length > 0) await dispatch(syncListsPendingUpdate());\n  if (smart_lists_pending_update.length > 0) await dispatch(syncSmartListsPendingUpdate());\n  if (favorites_pending_mark.length > 0) await dispatch(syncFavoritesPendingMark());\n  if (favorites_pending_unmark.length > 0) await dispatch(syncFavoritesPendingUnmark());\n};\n\nexport const syncFavoritesPendingMark = (): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { favorites_pending_mark },\n  } = getState();\n\n  const client_calls = favorites_pending_mark.map((id: string) =>\n    client('tables/favourites', {\n      method: 'PATCH',\n      data: {\n        id,\n        is_favourite: true,\n      },\n    }),\n  );\n  try {\n    await Promise.all(client_calls);\n    dispatch(setFavoritesPendingMark([]));\n  } catch (e) {}\n};\n\nexport const syncFavoritesPendingUnmark = (): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { favorites_pending_unmark },\n  } = getState();\n  const client_calls = favorites_pending_unmark.map((id: string) =>\n    client('tables/favourites', {\n      method: 'PATCH',\n      data: {\n        id,\n        is_favourite: false,\n      },\n    }),\n  );\n  try {\n    await Promise.all(client_calls);\n    dispatch(setFavoritesPendingUnmark([]));\n  } catch (e) {}\n};\n\nexport const syncListsPendingUpdate = (): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { lists_pending_update, lists },\n    auth: {\n      user: { id: user_id },\n    },\n  } = getState();\n  const updated_lists = lists_pending_update.map((list_id: string) => ({\n    ...lists[list_id],\n    user_id,\n  }));\n\n  const client_calls = updated_lists.map((payload: object) =>\n    client('tables/update', {\n      method: 'PATCH',\n      data: payload,\n    }),\n  );\n  try {\n    await Promise.all(client_calls);\n    dispatch(removeListsPendingUpdate(lists_pending_update));\n  } catch (e) {}\n};\n\nexport const syncSmartListsPendingUpdate = (): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { smart_lists_pending_update, smart_lists },\n  } = getState();\n\n  dispatch(setListSyncing(true));\n\n  const updated_smart_lists = smart_lists_pending_update.map((smart_list_id: string) => ({\n    id: smart_list_id,\n    name: smart_lists[smart_list_id].name,\n    filters: smart_lists[smart_list_id].filters,\n  }));\n\n  const client_calls = updated_smart_lists.map((payload: object) =>\n    client('smart_lists/update', {\n      method: 'PATCH',\n      data: payload,\n    }),\n  );\n  try {\n    await Promise.all(client_calls);\n    dispatch(removeSmartListsPendingUpdate(smart_lists_pending_update));\n  } catch (e) {}\n\n  dispatch(setListSyncing(false));\n};\n\nexport const syncList = (): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: {\n      list_syncing,\n      lists_by_id,\n      selected_list,\n      columns_by_id,\n      columns,\n      selected_list_pending_update,\n      lists,\n      column_id_map,\n    },\n    auth: {\n      user: { id: user_id },\n    },\n  } = getState();\n  if (list_syncing) return;\n  if (!selected_list) return;\n  if (!selected_list_pending_update) return;\n\n  dispatch(setListSyncing(true));\n\n  const list = lists[selected_list];\n  const updated_columns = columns_by_id.map((id: string) => {\n    const col = Object.keys(columns[id])\n      .filter(key => key !== 'uid' && columns[id][key] !== undefined && columns[id][key] !== null)\n      .reduce((acc, key) => ({ ...acc, [key]: columns[id][key] }), {});\n\n    return col;\n  });\n  const updated_list = { ...list, columns: updated_columns };\n\n  try {\n    const {\n      data: { table: data },\n    } = await client('tables/update', {\n      method: 'PATCH',\n      data: { ...updated_list, user_id },\n    });\n\n    const _columns = { ...columns };\n    const _column_id_map = { ...column_id_map };\n\n    const _lists = { ...lists, [updated_list.id]: data };\n\n    data.columns.forEach((i: any, index: number) => {\n      if (!Object.values(column_id_map).includes(i.id)) {\n        const col_uid = columns_by_id[index];\n        _column_id_map[col_uid] = i.id;\n        _columns[col_uid] = { ...i, uid: col_uid };\n      }\n    });\n\n    dispatch(setLists({ data: _lists, by_id: lists_by_id }));\n    dispatch(\n      setColumns({\n        columns_by_id,\n        columns: _columns,\n        column_id_map: _column_id_map,\n      }),\n    );\n    dispatch(setListPendingUpdate(false));\n  } catch (e) {}\n  dispatch(setListSyncing(false));\n};\n\nexport const syncRows = (): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: {\n      rows_pending_insert,\n      rows_pending_update,\n      rows_pending_delete,\n      rows_syncing,\n      selected_list,\n    },\n  } = getState();\n\n  if (rows_syncing) return;\n  if (!selected_list) return;\n\n  dispatch(setRowsSyncing(true));\n  if (rows_pending_insert.length > 0) await dispatch(syncRowsPendingInsert());\n  if (rows_pending_update.length > 0) await dispatch(syncRowsPendingUpdate());\n  if (rows_pending_delete.length > 0) await dispatch(syncRowsPendingDelete());\n  dispatch(setRowsSyncing(false));\n};\n\nexport const syncRowsPendingInsert = (): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { rows, rows_pending_insert, column_id_map, meta },\n  } = getState();\n\n  let updated_rows = generateUpdatedRows(rows_pending_insert, rows, column_id_map);\n  const client_calls = updated_rows.map((payload: object) =>\n    client('rows/create', {\n      method: 'POST',\n      data: payload,\n    }),\n  );\n  try {\n    const response = await Promise.all(client_calls);\n    const new_row_ids = response.map((res: any) => res.data.row.id);\n\n    updated_rows = {};\n    rows_pending_insert.forEach((row_id: string, index: number) => {\n      updated_rows[row_id] = { ...rows[row_id], id: new_row_ids[index] };\n    });\n\n    dispatch(\n      setRows({\n        data: updated_rows,\n        by_id: [],\n        meta,\n      }),\n    );\n\n    dispatch(removeRowsPendingInsert({ row_ids: rows_pending_insert }));\n  } catch (e) {}\n};\nexport const syncRowsPendingUpdate = (): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { rows, rows_pending_update, column_id_map },\n  } = getState();\n\n  const updated_rows = generateUpdatedRows(rows_pending_update, rows, column_id_map);\n  const client_calls = updated_rows.map((payload: object) =>\n    client('rows/update', {\n      method: 'PATCH',\n      data: payload,\n    }),\n  );\n  try {\n    await Promise.all(client_calls);\n    dispatch(removeRowsPendingUpdate({ row_ids: rows_pending_update }));\n  } catch (e) {}\n};\nexport const syncRowsPendingDelete = (): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { rows, rows_pending_delete },\n  } = getState();\n\n  const client_calls = rows_pending_delete.map((row_id: string) =>\n    client('rows/delete', {\n      method: 'DELETE',\n      data: { id: rows[row_id].id },\n    }),\n  );\n  try {\n    await Promise.all(client_calls);\n    dispatch(removeRowsPendingDelete(rows_pending_delete));\n  } catch (e) {}\n};\n\nexport const updateColumnArrangement = (columns_by_id): AppThunk => async dispatch => {\n  sendAmplitudeData('updateListColumnArrangement');\n\n  dispatch(setColumnArrangement(columns_by_id));\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n};\n\nexport const createColumn = (payload = {}): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { columns, columns_by_id, column_id_map },\n  } = getState();\n\n  sendAmplitudeData('createListColumn');\n\n  const col_uid = uuid();\n\n  const col_obj = {\n    id: null,\n    uid: col_uid,\n    type: 'TEXT',\n    name: 'column',\n    label: 'Column',\n    customization: {},\n    ...payload,\n  };\n\n  const updated_col_by_id = [...columns_by_id, col_uid];\n  const updated_columns = { ...columns, [col_uid]: col_obj };\n  const updated_col_id_map = { ...column_id_map, [col_uid]: null };\n\n  dispatch(\n    setColumns({\n      columns_by_id: updated_col_by_id,\n      columns: updated_columns,\n      column_id_map: updated_col_id_map,\n    }),\n  );\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n\n  return col_obj;\n};\n\nexport const deleteColumn = (columnID): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { columns_by_id },\n  } = getState();\n\n  sendAmplitudeData('deleteListColumn');\n\n  const updated_columns_by_id = columns_by_id.filter((i: string) => i !== columnID);\n  dispatch(setColumnArrangement(updated_columns_by_id));\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n};\n\nexport const hideColumn = (columnID: string): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { columns, columns_by_id, column_id_map },\n  } = getState();\n\n  sendAmplitudeData('hideListColumn');\n\n  const col_obj = {\n    ...columns[columnID],\n    hidden: true,\n  };\n\n  const updated_columns = { ...columns, [columnID]: col_obj };\n\n  dispatch(\n    setColumns({\n      columns_by_id,\n      column_id_map,\n      columns: updated_columns,\n    }),\n  );\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n};\n\nexport const showColumn = (columnID: string): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { columns, columns_by_id, column_id_map },\n  } = getState();\n\n  sendAmplitudeData('showListColumn');\n\n  const col_obj = {\n    ...columns[columnID],\n    hidden: false,\n  };\n\n  const updated_columns = { ...columns, [columnID]: col_obj };\n\n  dispatch(\n    setColumns({\n      columns_by_id,\n      column_id_map,\n      columns: updated_columns,\n    }),\n  );\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n};\n\nexport const updateColumnLabel = (columnID: string, label: string): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  sendAmplitudeData('updateListColumn');\n\n  const {\n    lists: { columns, columns_by_id, column_id_map },\n  } = getState();\n\n  const col_obj = {\n    ...columns[columnID],\n    label,\n    name: label.toLowerCase(),\n  };\n\n  const updated_columns = { ...columns, [columnID]: col_obj };\n\n  dispatch(\n    setColumns({\n      columns_by_id,\n      column_id_map,\n      columns: updated_columns,\n    }),\n  );\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n};\n\nexport const updateColumn = (columnID: string, payload = {}): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  sendAmplitudeData('updateListColumn');\n\n  const {\n    lists: { columns, columns_by_id, column_id_map },\n  } = getState();\n\n  if (payload.type && payload.type === 'DND' && columns[columnID].type !== payload.type) {\n    const first_phone_col = Object.values(columns).filter(\n      (i: any) => i.uid !== columnID && i.type === 'PHONE NUMBER',\n    )[0];\n    payload['customization'] = {\n      tracked_column: first_phone_col ? first_phone_col['id'] : null,\n    };\n  }\n\n  const col_obj = {\n    ...columns[columnID],\n    ...payload,\n  };\n\n  col_obj['name'] = col_obj['label'].toLowerCase();\n\n  const updated_columns = { ...columns, [columnID]: col_obj };\n\n  dispatch(\n    setColumns({\n      columns_by_id,\n      column_id_map,\n      columns: updated_columns,\n    }),\n  );\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n};\n\nexport const updateColumnType = (columnID: string, type: string): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  const {\n    lists: { columns, columns_by_id, column_id_map },\n  } = getState();\n\n  sendAmplitudeData('updateListColumn');\n\n  const payload = { type };\n\n  if (['SELECT', 'MULTI SELECT'].includes(type)) {\n    payload['options'] = columns[columnID].options || [];\n  }\n\n  if (type === 'DND') {\n    const first_phone_col = Object.values(columns).filter(\n      (i: any) => i.uid !== columnID && i.type === 'PHONE NUMBER',\n    )[0];\n\n    payload['customization'] = {\n      tracked_column: first_phone_col ? first_phone_col['id'] : null,\n    };\n  }\n\n  const col_obj = {\n    ...columns[columnID],\n    ...payload,\n  };\n\n  const updated_columns = { ...columns, [columnID]: col_obj };\n\n  dispatch(\n    setColumns({\n      columns_by_id,\n      column_id_map,\n      columns: updated_columns,\n    }),\n  );\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n};\n\nexport const updateColumnCustomization = (columnID: string, customization: {}): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  sendAmplitudeData('updateListColumn');\n\n  const {\n    lists: { columns, columns_by_id, column_id_map },\n  } = getState();\n\n  const col_obj = {\n    ...columns[columnID],\n    customization,\n  };\n\n  const updated_columns = { ...columns, [columnID]: col_obj };\n\n  dispatch(\n    setColumns({\n      columns_by_id,\n      column_id_map,\n      columns: updated_columns,\n    }),\n  );\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n};\n\nexport const createRow = (): AppThunk => async (dispatch, getState) => {\n  sendAmplitudeData('createListRow');\n\n  const {\n    lists: { selected_list, meta },\n  } = getState();\n\n  const row_uid = uuid();\n\n  const new_row = {\n    uid: row_uid,\n    columns: {},\n    table_id: selected_list,\n    id: null,\n  };\n\n  dispatch(\n    setRows({\n      data: { [row_uid]: new_row },\n      by_id: [row_uid],\n      meta: { ...meta, count_total: meta.count_total + 1 },\n    }),\n  );\n\n  dispatch(addRowsPendingInsert({ row_ids: [row_uid] }));\n  dispatch(syncRows());\n};\n\nexport const selectRows = (row_indices, mode = 'index'): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { rows_by_id },\n  } = getState();\n\n  sendAmplitudeData('selectListRows');\n\n  let selected_rows = [];\n\n  if ((mode = 'id')) {\n    selected_rows = row_indices;\n  } else {\n    selected_rows = row_indices.map((row_index: number) => rows_by_id[row_index]);\n  }\n  dispatch(setSelectedRows(selected_rows));\n};\n\nexport const clearRows = (): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { selected_rows, rows, meta },\n  } = getState();\n  if (selected_rows.length === 0) return;\n\n  sendAmplitudeData('clearListRows');\n\n  const updated_rows = {};\n\n  selected_rows.forEach((row_id: string) => {\n    updated_rows[row_id] = { ...rows[row_id], columns: {} };\n  });\n\n  dispatch(\n    setRows({\n      data: updated_rows,\n      by_id: [],\n      meta,\n    }),\n  );\n\n  dispatch(addRowsPendingUpdate(selected_rows));\n  dispatch(setSelectedRows([]));\n  dispatch(syncRows());\n};\n\nexport const deleteRows = (): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { selected_rows, meta },\n  } = getState();\n  if (selected_rows.length === 0) return;\n\n  sendAmplitudeData('clearListRows');\n\n  dispatch(removeRowsByID(selected_rows));\n  dispatch(addRowsPendingDelete(selected_rows));\n  dispatch(setSelectedRows([]));\n  dispatch(\n    setRows({\n      by_id: [],\n      data: {},\n      meta: { ...meta, count_total: meta.count_total - selected_rows.length },\n    }),\n  );\n  dispatch(syncRows());\n};\n\nexport const addFilter = (): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { filters, filters_by_id, columns, columns_by_id },\n  } = getState();\n\n  sendAmplitudeData('addListFilter');\n\n  if (columns_by_id.length === 0) return;\n  const first_col = columns[columns_by_id[0]];\n\n  const filter_uid = uuid();\n\n  let operator = 'contains';\n  let subOperator = null;\n  if (['SELECT', 'MULTI SELECT'].includes(first_col.type)) {\n    operator = 'isAnyOf';\n  }\n  if (first_col.type === 'DATE') {\n    operator = 'dateEqual';\n    subOperator = 'exact date';\n  }\n  if (first_col.type === 'NUMBER') {\n    operator = 'equals';\n  }\n\n  const filter_obj = {\n    uid: filter_uid,\n    columnID: first_col['uid'],\n    operator,\n    subOperator,\n    value: '',\n    name: first_col['name'],\n  };\n\n  if (filters_by_id.length > 0) filter_obj['conjunction'] = 'and';\n  if (filters_by_id.length > 1) {\n    filter_obj['conjunction'] = filters[filters_by_id[1]]['conjunction'];\n  }\n\n  const updated_filters = { ...filters, [filter_uid]: filter_obj };\n  const updated_filters_by_id = [...filters_by_id, filter_uid];\n\n  dispatch(\n    setFilterData({\n      data: updated_filters,\n      by_id: updated_filters_by_id,\n    }),\n  );\n\n  dispatch(applyFilter());\n};\n\nexport const updateFilter = (filter_uid: string, payload: object): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  const {\n    lists: { filters, filters_by_id, columns },\n  } = getState();\n\n  sendAmplitudeData('updateListFilter');\n\n  const filter = filters[filter_uid];\n  const updated_filter = { ...filter, ...payload };\n\n  if (filter.columnID !== updated_filter.columnID) {\n    const column = columns[updated_filter.columnID];\n    const allowed_operator = Object.values(available_operators).find((i: any) =>\n      i.column_types.includes(column.type),\n    );\n\n    updated_filter['operator'] = allowed_operator['key'];\n    if (column.type === 'DATE') updated_filter['subOperator'] = 'exact date';\n    else updated_filter['subOperator'] = null;\n\n    updated_filter['operator'] = allowed_operator['key'];\n    if (column.type === 'DND') updated_filter['value'] = true;\n  }\n\n  const updated_filters = { ...filters, [filter_uid]: updated_filter };\n\n  if (filter.cunjunction !== updated_filter.conjunction) {\n    filters_by_id.forEach((i: string, index: number) => {\n      if (index > 1) {\n        updated_filters[i] = {\n          ...updated_filters[i],\n          conjunction: updated_filter['conjunction'],\n        };\n      }\n    });\n  }\n\n  dispatch(\n    setFilterData({\n      data: updated_filters,\n      by_id: filters_by_id,\n    }),\n  );\n\n  dispatch(applyFilter());\n};\n\nexport const deleteFilter = (filter_uid: string): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { filters, filters_by_id },\n  } = getState();\n\n  sendAmplitudeData('removeListFilter');\n\n  const updated_filters_by_id = filters_by_id.filter((i: string) => i !== filter_uid);\n  const updated_filters = updated_filters_by_id.reduce((acc, i, index) => {\n    const filter_item = { ...filters[i] };\n    if (index === 0 && filter_item.conjunction) delete filter_item.conjunction;\n    return { ...acc, [i]: filter_item };\n  }, {});\n\n  dispatch(\n    setFilterData({\n      data: updated_filters,\n      by_id: updated_filters_by_id,\n    }),\n  );\n\n  dispatch(applyFilter());\n};\n\nexport const applyFilter = (): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { selected_list },\n  } = getState();\n  dispatch(resetRows());\n  dispatch(fetchRows({ list: selected_list, page: 1 }));\n};\n\nexport const addSort = (): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { sorts, sorts_by_id, columns_by_id, columns },\n  } = getState();\n\n  sendAmplitudeData('addListSort');\n\n  const sorted_columns = Object.values(sorts).reduce((acc: string[], i: any) => {\n    if (acc.includes(i.columnID)) return acc;\n    return [...acc, i.columnID];\n  }, []);\n\n  const available_columns = columns_by_id.filter((i: string) => !sorted_columns.includes(i));\n\n  if (columns_by_id.length === 0) return;\n  if (available_columns.length === 0) return;\n\n  const first_col = columns[available_columns[0]];\n  const sort_uid = uuid();\n\n  const sort_item = {\n    uid: sort_uid,\n    columnID: first_col['uid'],\n    name: first_col['name'],\n    order: 'ASC',\n  };\n\n  const updated_sorts = {\n    ...sorts,\n    [sort_uid]: sort_item,\n  };\n  const updated_sorts_by_id = [...sorts_by_id, sort_uid];\n\n  dispatch(\n    setSortData({\n      data: updated_sorts,\n      by_id: updated_sorts_by_id,\n    }),\n  );\n\n  dispatch(applySorts());\n};\n\nexport const updateSort = (sort_uid: string, payload: object): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  sendAmplitudeData('updateListSort');\n\n  const {\n    lists: { sorts, sorts_by_id },\n  } = getState();\n\n  const sort_item = sorts[sort_uid];\n  const updated_sort_item = { ...sort_item, ...payload };\n\n  const updated_sorts = { ...sorts, [sort_uid]: updated_sort_item };\n\n  dispatch(\n    setSortData({\n      data: updated_sorts,\n      by_id: sorts_by_id,\n    }),\n  );\n\n  dispatch(applySorts());\n};\n\nexport const deleteSort = (sort_uid: string): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { sorts, sorts_by_id },\n  } = getState();\n\n  sendAmplitudeData('deleteListSort');\n\n  const updated_sorts_by_id = sorts_by_id.filter((i: string) => i !== sort_uid);\n  const updated_sorts = updated_sorts_by_id.reduce((acc, i) => ({ ...acc, [i]: sorts[i] }), {});\n\n  dispatch(\n    setSortData({\n      data: updated_sorts,\n      by_id: updated_sorts_by_id,\n    }),\n  );\n\n  dispatch(applySorts());\n};\n\nexport const applySorts = (): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { selected_list },\n  } = getState();\n  dispatch(resetRows());\n  dispatch(fetchRows({ list: selected_list, page: 1 }));\n};\n\nexport const applySearch = (): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { selected_list },\n  } = getState();\n  dispatch(resetRows());\n  dispatch(fetchRows({ list: selected_list, page: 1 }));\n};\n\nexport const deleteList = (list_id: string): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { lists_by_id, lists, trash, trash_by_id, favorites },\n  } = getState();\n  sendAmplitudeData('deleteList');\n\n  dispatch(resetSelectedList());\n\n  const by_id = lists_by_id.filter((i: string) => i !== list_id);\n  const data = by_id.reduce((acc, i) => ({ ...acc, [i]: lists[i] }), {});\n\n  const updated_favorites = favorites.filter((i: string) => i !== list_id);\n  const updated_trash_by_id = [...trash_by_id, list_id];\n  const updated_trash = { ...trash, [list_id]: lists[list_id] };\n\n  dispatch(setLists({ data, by_id }));\n  dispatch(setFavorites(updated_favorites));\n  dispatch(setTrash({ data: updated_trash, by_id: updated_trash_by_id }));\n\n  try {\n    await client('tables/trash', {\n      method: 'PATCH',\n      data: {\n        id: list_id,\n        is_trash: true,\n      },\n    });\n  } catch (e) {}\n};\n\nexport const restoreList = (trash_list_id: string): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { lists_by_id, lists, trash, trash_by_id },\n  } = getState();\n\n  sendAmplitudeData('restoreList');\n\n  const by_id = [...lists_by_id, trash_list_id];\n  const data = { ...lists, [trash_list_id]: trash[trash_list_id] };\n\n  const updated_trash_by_id = trash_by_id.filter((id: string) => id !== trash_list_id);\n  const updated_trash = updated_trash_by_id.reduce((acc, i) => ({ ...acc, [i]: trash[i] }), {});\n\n  dispatch(setLists({ data, by_id }));\n  dispatch(setTrash({ data: updated_trash, by_id: updated_trash_by_id }));\n\n  try {\n    await client('tables/trash', {\n      method: 'PATCH',\n      data: {\n        id: trash_list_id,\n        is_trash: false,\n      },\n    });\n    dispatch(fetchListFavorites());\n  } catch (e) {}\n};\n\nexport const deleteListPermanently = (trash_list_id: string): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  const {\n    lists: { trash, trash_by_id },\n  } = getState();\n  sendAmplitudeData('deleteListPermanently');\n\n  const updated_trash_by_id = trash_by_id.filter((id: string) => id !== trash_list_id);\n  const updated_trash = updated_trash_by_id.reduce((acc, i) => ({ ...acc, [i]: trash[i] }), {});\n\n  dispatch(setTrash({ data: updated_trash, by_id: updated_trash_by_id }));\n\n  try {\n    await client('tables/delete', {\n      method: 'DELETE',\n      data: {\n        id: trash_list_id,\n      },\n    });\n  } catch (e) {}\n};\n\nexport const deleteTrashPermanently = (): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { trash_by_id },\n  } = getState();\n\n  sendAmplitudeData('deleteListPermanently');\n\n  const client_calls = trash_by_id.map((id: string) =>\n    client('tables/delete', {\n      method: 'DELETE',\n      data: {\n        id,\n      },\n    }),\n  );\n\n  const updated_trash_by_id = [];\n  const updated_trash = {};\n  try {\n    await Promise.all(client_calls);\n    dispatch(setFavoritesPendingMark([]));\n    dispatch(setTrash({ data: updated_trash, by_id: updated_trash_by_id }));\n    return true;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const deleteSmartList = (smart_list_id: string): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { smart_lists_by_id, smart_lists },\n  } = getState();\n  dispatch(resetSelectedList());\n\n  sendAmplitudeData('deleteSmartList');\n\n  const by_id = smart_lists_by_id.filter((i: string) => i !== smart_list_id);\n  const data = by_id.reduce((acc, i) => ({ ...acc, [i]: smart_lists[i] }), {});\n  dispatch(setSmartLists({ data, by_id }));\n\n  try {\n    await client('smart_lists/delete', {\n      method: 'DELETE',\n      data: {\n        id: smart_list_id,\n      },\n    });\n  } catch (e) {}\n};\n\nexport const addSelectOption = (\n  columnID: string,\n  value: string,\n  color?: string,\n): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { columns, columns_by_id, column_id_map },\n  } = getState();\n\n  sendAmplitudeData('addListColumnSelectOption');\n\n  const column = columns[columnID];\n  const options = column.options || [];\n  const option_id = options.length + 1;\n\n  const new_option = {\n    id: option_id,\n    name: value,\n    type: 'option',\n    is_deleted: false,\n    color: color || generateRandomSelectColor(),\n  };\n\n  const updated_options = [...options, new_option];\n  const updated_column = { ...column, options: updated_options };\n\n  dispatch(\n    setColumns({\n      columns: { ...columns, [columnID]: updated_column },\n      columns_by_id,\n      column_id_map,\n    }),\n  );\n\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n\n  return new_option;\n};\n\nexport const updateSelectOption = (\n  columnID: string,\n  option_id: string,\n  payload: string,\n): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { columns, columns_by_id, column_id_map },\n  } = getState();\n\n  sendAmplitudeData('updateListColumnSelectOption');\n\n  const column = columns[columnID];\n  const option_index = column.options.findIndex((option: any) => option.id === option_id);\n  const option = column.options[option_index];\n  const updated_option = { ...option, ...payload };\n  const updated_options = [...column.options];\n  updated_options[option_index] = updated_option;\n  const updated_column = { ...column, options: updated_options };\n\n  dispatch(\n    setColumns({\n      columns: { ...columns, [columnID]: updated_column },\n      columns_by_id,\n      column_id_map,\n    }),\n  );\n  dispatch(setListPendingUpdate(true));\n  dispatch(syncList());\n  return updated_options;\n};\n\nexport const getRowByIndex = (row_index: string): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { rows, rows_by_id },\n  } = getState();\n  const row_id = rows_by_id[row_index];\n  return rows[row_id];\n};\n\nexport const createSmartList = (smart_list_name: string): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  sendAmplitudeData('createSmartList');\n\n  const {\n    lists: {\n      filters,\n      filters_by_id,\n      selected_list,\n      column_id_map,\n      smart_lists,\n      smart_lists_by_id,\n      columns,\n    },\n  } = getState();\n\n  const filter_payload = generateFilterPayload(filters, filters_by_id, column_id_map, columns);\n  const payload = {\n    table_id: selected_list,\n    filters: filter_payload,\n    name: smart_list_name,\n  };\n\n  try {\n    const {\n      data: { smart_list },\n    } = await client('smart_lists/create', {\n      method: 'POST',\n      data: payload,\n    });\n\n    const data = {\n      ...smart_lists,\n      [smart_list.id]: { ...smart_list, list_id: selected_list },\n    };\n    const by_id = [...smart_lists_by_id, smart_list.id];\n    dispatch(setSmartLists({ data, by_id }));\n    return smart_list;\n  } catch (e) {\n    console.log(e.message);\n    return null;\n  }\n};\n\nexport const updateSmartListFilters = (smart_list_id: string): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  sendAmplitudeData('updateSmartListFilters');\n\n  const {\n    lists: { filters, filters_by_id, column_id_map, columns },\n  } = getState();\n\n  const payload = {\n    filters: generateFilterPayload(filters, filters_by_id, column_id_map, columns),\n  };\n  dispatch(updateSmartList(smart_list_id, payload));\n};\n\nexport const clearFilters = (): AppThunk => async dispatch => {\n  await dispatch(\n    setFilterData({\n      data: {},\n      by_id: [],\n    }),\n  );\n  dispatch(applyFilter());\n};\n\nexport const fetchSmartLists = (): AppThunk => async dispatch => {\n  dispatch(setSmartListsLoading({ is_loading: true }));\n  try {\n    const {\n      data: { smart_lists },\n    } = await client('smart_lists/all', { method: 'GET' });\n    const data = {};\n    const by_id: [] = [];\n    smart_lists.forEach((i: any) => {\n      const { smart_id: id, smart_lists_name: name, table_id: list_id, filters } = i;\n      data[id] = { id, name: name || 'Untitled', list_id, filters };\n      by_id.push(id);\n    });\n    dispatch(setSmartLists({ data, by_id }));\n    dispatch(setSmartListsLoading({ is_loading: false }));\n    return data;\n  } catch (e) {\n    dispatch(setSmartListsLoading({ is_loading: false }));\n    return null;\n  }\n};\n\nexport const fetchListFavorites = (): AppThunk => async dispatch => {\n  dispatch(setFavoritesLoading({ is_loading: true }));\n  try {\n    const {\n      data: { table },\n    } = await client('tables/favourites', { method: 'GET' });\n    const favorites = table.map((i: any) => i.id);\n    dispatch(setFavorites(favorites));\n    dispatch(setFavoritesLoading({ is_loading: false }));\n    return favorites;\n  } catch (e) {\n    dispatch(setFavoritesLoading({ is_loading: false }));\n    return null;\n  }\n};\n\nexport const markListFavorite = (list_id: string): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { favorites, favorites_pending_mark },\n  } = getState();\n\n  sendAmplitudeData('markListFavorite');\n\n  const updated_favorites = [...favorites, list_id];\n  const updated_favorites_pending_mark = [...favorites_pending_mark, list_id];\n\n  dispatch(setFavorites(updated_favorites));\n  dispatch(setFavoritesPendingMark(updated_favorites_pending_mark));\n  dispatch(syncLists());\n};\n\nexport const unMarkListFavorite = (list_id: string): AppThunk => async (dispatch, getState) => {\n  const {\n    lists: { favorites, favorites_pending_unmark },\n  } = getState();\n\n  sendAmplitudeData('unMarkListFavorite');\n\n  const updated_favorites = favorites.filter((id: string) => id !== list_id);\n  const updated_favorites_pending_unmark = [...favorites_pending_unmark, list_id];\n\n  dispatch(setFavorites(updated_favorites));\n  dispatch(setFavoritesPendingUnmark(updated_favorites_pending_unmark));\n  dispatch(syncLists());\n};\n\nexport const fetchListTrash = (): AppThunk => async dispatch => {\n  dispatch(setTrashLoading({ is_loading: true }));\n  try {\n    const {\n      data: { table },\n    } = await client('tables/trash', { method: 'GET' });\n\n    const data = {};\n    const by_id = [];\n\n    table.forEach((i: any) => {\n      data[i.id] = i;\n      by_id.push(i.id);\n    });\n\n    dispatch(setTrash({ data, by_id }));\n    dispatch(setTrashLoading({ is_loading: false }));\n    return favorites;\n  } catch (e) {\n    dispatch(setTrashLoading({ is_loading: false }));\n    return null;\n  }\n};\n\nexport const updateSearchQuery = (value: string): AppThunk => async dispatch => {\n  dispatch(setSearchQuery(value));\n  dispatch(applySearch());\n};\n\nexport const fetchInitialContactList = (): AppThunk => async dispatch => {\n  try {\n    const {\n      data: { table },\n    } = await client('table/type/contact', { method: 'GET' });\n    dispatch(setInitialList(table.id));\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const enrichColumnData = (tracked_column: string): AppThunk => async (\n  dispatch,\n  getState,\n) => {\n  const {\n    lists: { selected_list, selected_smart_list, columns },\n  } = getState();\n\n  sendAmplitudeData('enrichColumnData');\n\n  try {\n    const already_enriched: boolean = !!Object.values(columns).find(\n      (i: any) => i.type === 'DND' && i.customization.tracked_column === tracked_column,\n    );\n\n    if (!already_enriched) {\n      await dispatch(\n        createColumn({\n          name: 'is_dnd',\n          label: 'On DND',\n          type: 'DND',\n          customization: {\n            tracked_column: tracked_column,\n          },\n        }),\n      );\n    }\n\n    await client('lookups/queue', {\n      method: 'POST',\n      data: {\n        tracked_column,\n        table_id: !selected_smart_list ? selected_list : null,\n        smart_list_id: selected_smart_list ? selected_smart_list : null,\n      },\n    });\n\n    await wait(2000);\n    dispatch(resetRows());\n    dispatch(fetchRows({ list: selected_list, page: 1 }));\n    return true;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const requestGoogleSheetsAuth = (resourceName: string): AppThunk => async () => {\n  const response = await client('lists/resource/google-sheets/auth/request', {\n    method: 'GET',\n    params: {\n      name: resourceName,\n    },\n  });\n  return response.data['auth_url'];\n};\n\nexport const fetchGSheetSpreadSheets = (resourceID: string): AppThunk => async () => {\n  const response = await client(`lists/resource/google-sheets/sheets/${resourceID}`, {\n    method: 'GET',\n  });\n  return response.data;\n};\n\nexport const fetchGSheetMetadata = (\n  resourceID: string,\n  spreadsheetID: string,\n): AppThunk => async () => {\n  const response = await client('lists/resource/google-sheets/schema', {\n    method: 'POST',\n    data: {\n      resource: resourceID,\n      spreadsheet: spreadsheetID,\n    },\n  });\n  return response.data;\n};\n\nexport const queueResourceImport = (\n  payload: {\n    name: string;\n    source: string;\n    sub_source: string;\n    mapping: any[];\n  },\n  resourceType: string = 'google-sheets',\n): AppThunk => async dispatch => {\n  const response = await client(`lists/resource/${resourceType}/import`, {\n    method: 'POST',\n    data: payload,\n  });\n  dispatch(addList(response.data));\n  return response.data;\n};\n\nexport const queueAppImport = (\n  payload: {\n    name: string;\n    source: string;\n    sub_source: string | null;\n    mapping: any[];\n  },\n  resourceType: string = 'shopify',\n): AppThunk => async dispatch => {\n  const response = await client('', {\n    url: buildAppsURL(`/${resourceType}/endpoints/import`),\n    method: 'POST',\n    data: payload,\n  });\n  dispatch(addList(response.data));\n  return response.data;\n};\n\nexport * from './thunks';\n"]},"metadata":{},"sourceType":"module"}