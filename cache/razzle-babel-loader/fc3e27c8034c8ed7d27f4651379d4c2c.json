{"ast":null,"code":"const _excluded = [\"url\", \"icon\", \"value\", \"target\", \"inputType\", \"isInvalid\", \"tooltipLabel\", \"errorMessage\", \"isPreviewFocusable\"];\nvar _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/tables/components/table/table.components/TableCellClickable.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport { Box, Editable, EditablePreview, EditableInput, IconButton, Tooltip } from '@chakra-ui/core';\nconst Container = styled(Box)`\n  &:hover {\n    .button {\n      opacity: 1;\n    }\n  }\n`;\nexport const TableCellClickable = props => {\n  const {\n    url,\n    icon,\n    value,\n    target,\n    inputType,\n    isInvalid,\n    tooltipLabel,\n    errorMessage,\n    isPreviewFocusable\n  } = props,\n        rest = _objectWithoutProperties(props, _excluded);\n\n  const inputBorderStyle = isInvalid ? {\n    _focus: {\n      boxShadow: 'none',\n      borderWidth: '2px',\n      borderColor: 'red.500'\n    }\n  } : {};\n  return __jsx(Container, {\n    height: \"100%\",\n    position: \"relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, __jsx(Editable, _extends({\n    value: value,\n    height: \"100%\",\n    placeholder: isPreviewFocusable ? 'Click to edit' : '',\n    isPreviewFocusable: isPreviewFocusable\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), ({\n    isEditing\n  }) => __jsx(React.Fragment, null, __jsx(EditablePreview, {\n    marginX: \"0\",\n    height: \"100%\",\n    display: \"block\",\n    padding: \"0.5rem\",\n    backgroundColor: isPreviewFocusable ? 'rgba(61,80,223,0.06)' : 'transparent',\n    border: isPreviewFocusable ? '2px solid #2034c5' : 'none',\n    _hover: isPreviewFocusable ? {\n      cursor: 'pointer'\n    } : {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }), __jsx(EditableInput //@ts-ignore\n  , _extends({\n    type: inputType,\n    marginX: \"0\",\n    padding: \"0.5rem\",\n    lineHeight: \"17px\",\n    borderRadius: \"5px\",\n    _active: {\n      boxShadow: 'none',\n      borderWidth: '2px',\n      borderColor: '#2034c5'\n    },\n    _focus: {\n      boxShadow: 'none',\n      borderWidth: '2px',\n      borderColor: '#2034c5'\n    }\n  }, inputBorderStyle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  })), !isEditing && value && icon && tooltipLabel && !isInvalid && __jsx(Tooltip, {\n    placement: \"top\",\n    fontSize: \"0.75rem\",\n    label: tooltipLabel,\n    \"aria-label\": tooltipLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 15\n    }\n  }, __jsx(IconButton, {\n    as: \"a\",\n    size: \"xs\" //@ts-ignore\n    ,\n    href: url,\n    icon: icon,\n    opacity: 0,\n    zIndex: 100,\n    top: \"0.5rem\",\n    right: \"0.5rem\" //@ts-ignore\n    ,\n    target: target,\n    \"aria-label\": \"link\",\n    className: \"button\",\n    position: \"absolute\",\n    transition: \"all 0.2s\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  })))));\n};","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/authenticated-app/tables/components/table/table.components/TableCellClickable.tsx"],"names":["React","styled","Box","Editable","EditablePreview","EditableInput","IconButton","Tooltip","Container","TableCellClickable","props","url","icon","value","target","inputType","isInvalid","tooltipLabel","errorMessage","isPreviewFocusable","rest","inputBorderStyle","_focus","boxShadow","borderWidth","borderColor","isEditing","cursor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\nimport {\n  Box,\n  Editable,\n  EditablePreview,\n  EditableInput,\n  IconButton,\n  EditableProps,\n  IconButtonProps,\n  Tooltip,\n} from '@chakra-ui/core';\n\nconst Container = styled(Box)`\n  &:hover {\n    .button {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const TableCellClickable = (\n  props: Omit<EditableProps, 'children'> & {\n    url?: string;\n    target?: string;\n    inputType?: string;\n    isInvalid?: boolean;\n    tooltipLabel?: string;\n    errorMessage?: string;\n    icon?: IconButtonProps['icon'];\n  }\n) => {\n  const {\n    url,\n    icon,\n    value,\n    target,\n    inputType,\n    isInvalid,\n    tooltipLabel,\n    errorMessage,\n    isPreviewFocusable,\n    ...rest\n  } = props;\n  const inputBorderStyle = isInvalid\n    ? {\n        _focus: {\n          boxShadow: 'none',\n          borderWidth: '2px',\n          borderColor: 'red.500',\n        },\n      }\n    : {};\n\n  return (\n    <Container height=\"100%\" position=\"relative\">\n      <Editable\n        value={value}\n        height=\"100%\"\n        placeholder={isPreviewFocusable ? 'Click to edit' : ''}\n        isPreviewFocusable={isPreviewFocusable}\n        {...rest}\n      >\n        {({ isEditing }: { isEditing: boolean }) => (\n          <>\n            <EditablePreview\n              marginX=\"0\"\n              height=\"100%\"\n              display=\"block\"\n              padding=\"0.5rem\"\n              backgroundColor={\n                isPreviewFocusable ? 'rgba(61,80,223,0.06)' : 'transparent'\n              }\n              border={isPreviewFocusable ? '2px solid #2034c5' : 'none'}\n              _hover={\n                isPreviewFocusable\n                  ? {\n                      cursor: 'pointer',\n                    }\n                  : {}\n              }\n            />\n            <EditableInput\n              //@ts-ignore\n              type={inputType}\n              marginX=\"0\"\n              padding=\"0.5rem\"\n              lineHeight=\"17px\"\n              borderRadius=\"5px\"\n              _active={{\n                boxShadow: 'none',\n                borderWidth: '2px',\n                borderColor: '#2034c5',\n              }}\n              _focus={{\n                boxShadow: 'none',\n                borderWidth: '2px',\n                borderColor: '#2034c5',\n              }}\n              {...inputBorderStyle}\n            />\n            {!isEditing && value && icon && tooltipLabel && !isInvalid && (\n              <Tooltip\n                placement=\"top\"\n                fontSize=\"0.75rem\"\n                label={tooltipLabel}\n                aria-label={tooltipLabel}\n              >\n                <IconButton\n                  as=\"a\"\n                  size=\"xs\"\n                  //@ts-ignore\n                  href={url}\n                  icon={icon}\n                  opacity={0}\n                  zIndex={100}\n                  top=\"0.5rem\"\n                  right=\"0.5rem\"\n                  //@ts-ignore\n                  target={target}\n                  aria-label=\"link\"\n                  className=\"button\"\n                  position=\"absolute\"\n                  transition=\"all 0.2s\"\n                />\n              </Tooltip>\n            )}\n          </>\n        )}\n      </Editable>\n    </Container>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}