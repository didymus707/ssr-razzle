{"ast":null,"code":"var _jsxFileName = \"/Users/public1/Documents/Projects/ssr-razzle/src/app/components/PreloadedStateProvider/index.tsx\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Heading, Image, Text } from '@chakra-ui/core';\nimport Cookie from 'js-cookie';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { clearState, loadState } from '../../../utils';\nimport { fetchSupportedChannels } from '../../authenticated-app/channels';\nimport { fetchAudiences, fetchDataModels, fetchListFavorites, fetchLists, fetchListTrash, fetchResources, fetchSegments, fetchSmartLists } from '../../authenticated-app/lists';\nimport { fetchBankAccounts, fetchPaymentSetup, fetchWallet } from '../../authenticated-app/payments';\nimport { fetchAPIKeys, fetchCards, fetchOrganisationMembers, fetchOrganizations, fetchSubscription, fetchSubscriptionPlans, fetchTeams } from '../../authenticated-app/settings';\nimport { fetchTemplateCategories, fetchTemplates } from '../../authenticated-app/marketing/templates';\nimport { authLoading, fetchProfile } from '../../unauthenticated-app/authentication';\nimport { Button } from '../Button';\nimport { FullPageSpinner } from '../FullPageSpinner';\nexport const connector = connect(state => ({\n  profile: state.auth.profile,\n  isLoading: state.auth.loading\n}), {\n  fetchTeams,\n  fetchLists,\n  fetchCards,\n  fetchWallet,\n  authLoading,\n  fetchProfile,\n  fetchTemplates,\n  fetchListTrash,\n  fetchSmartLists,\n  fetchBankAccounts,\n  fetchListFavorites,\n  fetchOrganizations,\n  fetchSupportedChannels,\n  fetchOrganisationMembers,\n  fetchSubscription,\n  fetchTemplateCategories,\n  fetchSubscriptionPlans,\n  fetchPaymentSetup,\n  fetchAudiences,\n  fetchAPIKeys,\n  fetchResources,\n  fetchDataModels,\n  fetchSegments\n});\nexport function ProviderComponent(props) {\n  const {\n    children,\n    isLoading,\n    fetchTeams,\n    fetchCards,\n    fetchLists,\n    fetchWallet,\n    authLoading,\n    fetchProfile,\n    fetchListTrash,\n    fetchTemplates,\n    fetchSmartLists,\n    fetchBankAccounts,\n    fetchListFavorites,\n    fetchOrganizations,\n    fetchSupportedChannels,\n    fetchOrganisationMembers,\n    fetchSubscription,\n    fetchTemplateCategories,\n    fetchSubscriptionPlans,\n    fetchPaymentSetup,\n    fetchAudiences,\n    fetchAPIKeys,\n    fetchResources,\n    fetchDataModels,\n    fetchSegments\n  } = props;\n  const [error, setError] = React.useState(false);\n  const state = loadState();\n  const router_location = useLocation();\n  React.useEffect(() => {\n    const auth_period = Cookie.get('auth_period');\n    const auth_valid = sessionStorage.getItem('auth_valid');\n    if (!auth_period) fetchData();else if (auth_period && auth_valid) {\n      fetchData();\n    } else {\n      clearState();\n      Cookie.remove('auth_period');\n      sessionStorage.removeItem('auth_valid');\n      window.location.replace('/');\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const fetchData = async () => {\n    if (!!loadState()) {\n      authLoading(true);\n\n      try {\n        // @ts-ignore\n        const {\n          organisations\n        } = await fetchOrganizations(); // if no profile, use the profile of the last organization\n\n        const organisation_id = state !== null && state !== void 0 && state.profile ? state === null || state === void 0 ? void 0 : state.profile.organisation_id : organisations[organisations.length - 1].id;\n        const promiseFn = [{\n          fn: fetchTemplates\n        }, {\n          fn: fetchBankAccounts\n        }, {\n          fn: fetchCards\n        }, {\n          fn: fetchLists\n        }, {\n          fn: fetchAudiences\n        }, {\n          fn: fetchSmartLists\n        }, {\n          fn: fetchListFavorites\n        }, {\n          fn: fetchListTrash\n        }, {\n          fn: fetchSubscription,\n          params: organisation_id\n        }, {\n          fn: fetchTeams,\n          params: organisation_id\n        }, {\n          fn: fetchProfile,\n          params: organisation_id,\n          isPromise: true\n        }, {\n          fn: fetchWallet,\n          params: organisation_id\n        }, {\n          fn: fetchSubscriptionPlans\n        }, {\n          fn: fetchSupportedChannels,\n          isPromise: true\n        }, {\n          fn: fetchOrganisationMembers,\n          params: organisation_id\n        }, {\n          fn: fetchTemplateCategories\n        }, {\n          fn: fetchAPIKeys\n        }, {\n          fn: fetchResources\n        }, {\n          fn: fetchDataModels\n        }, {\n          fn: fetchSegments\n        }];\n\n        if (router_location.pathname === '/s/payments/onboarding') {\n          promiseFn.push({\n            fn: fetchPaymentSetup,\n            params: organisation_id,\n            isPromise: true\n          });\n        }\n\n        await Promise.all(promiseFn.map(({\n          fn,\n          params,\n          isPromise\n        }) => isPromise ? fn(params).catch(e => console.log(e)) : fn(params)));\n        setError(false);\n      } catch (e) {\n        console.log(e);\n      }\n\n      authLoading(false);\n    }\n  };\n\n  if (isLoading) {\n    return __jsx(FullPageSpinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 12\n      }\n    });\n  }\n\n  if (error && !isLoading) {\n    return __jsx(Flex, {\n      height: \"100vh\",\n      textAlign: \"center\",\n      alignItems: \"center\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 7\n      }\n    }, __jsx(Box, {\n      width: \"100px\",\n      marginBottom: \"0.5rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }\n    }, __jsx(Image, {\n      src: \"/images/sad.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }\n    })), __jsx(Heading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }\n    }, \"oops!\"), __jsx(Text, {\n      marginBottom: \"0.5rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }\n    }, \"An error occurred \", __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 29\n      }\n    }), \"while setting up your account.\"), __jsx(Button, {\n      variantColor: \"blue\",\n      onClick: fetchData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }\n    }, \"Try again\"));\n  }\n\n  return __jsx(React.Fragment, null, children);\n}\nexport const PreloadedStateProvider = connector(ProviderComponent);","map":{"version":3,"sources":["/Users/public1/Documents/Projects/ssr-razzle/src/app/components/PreloadedStateProvider/index.tsx"],"names":["Box","Flex","Heading","Image","Text","Cookie","React","connect","useLocation","clearState","loadState","fetchSupportedChannels","fetchAudiences","fetchDataModels","fetchListFavorites","fetchLists","fetchListTrash","fetchResources","fetchSegments","fetchSmartLists","fetchBankAccounts","fetchPaymentSetup","fetchWallet","fetchAPIKeys","fetchCards","fetchOrganisationMembers","fetchOrganizations","fetchSubscription","fetchSubscriptionPlans","fetchTeams","fetchTemplateCategories","fetchTemplates","authLoading","fetchProfile","Button","FullPageSpinner","connector","state","profile","auth","isLoading","loading","ProviderComponent","props","children","error","setError","useState","router_location","useEffect","auth_period","get","auth_valid","sessionStorage","getItem","fetchData","remove","removeItem","window","location","replace","organisations","organisation_id","length","id","promiseFn","fn","params","isPromise","pathname","push","Promise","all","map","catch","e","console","log","PreloadedStateProvider"],"mappings":"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","sourcesContent":["import { Box, Flex, Heading, Image, Text } from '@chakra-ui/core';\nimport Cookie from 'js-cookie';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { RootState } from '../../../root';\nimport { clearState, loadState } from '../../../utils';\nimport { fetchSupportedChannels } from '../../authenticated-app/channels';\nimport {\n  fetchAudiences,\n  fetchDataModels,\n  fetchListFavorites,\n  fetchLists,\n  fetchListTrash,\n  fetchResources,\n  fetchSegments,\n  fetchSmartLists,\n} from '../../authenticated-app/lists';\nimport {\n  fetchBankAccounts,\n  fetchPaymentSetup,\n  fetchWallet,\n} from '../../authenticated-app/payments';\nimport {\n  fetchAPIKeys,\n  fetchCards,\n  fetchOrganisationMembers,\n  fetchOrganizations,\n  fetchSubscription,\n  fetchSubscriptionPlans,\n  fetchTeams,\n} from '../../authenticated-app/settings';\nimport {\n  fetchTemplateCategories,\n  fetchTemplates,\n} from '../../authenticated-app/marketing/templates';\nimport { authLoading, fetchProfile } from '../../unauthenticated-app/authentication';\nimport { Button } from '../Button';\nimport { FullPageSpinner } from '../FullPageSpinner';\nimport { Props } from './types';\n\nexport const connector = connect(\n  (state: RootState) => ({\n    profile: state.auth.profile,\n    isLoading: state.auth.loading,\n  }),\n  {\n    fetchTeams,\n    fetchLists,\n    fetchCards,\n    fetchWallet,\n    authLoading,\n    fetchProfile,\n    fetchTemplates,\n    fetchListTrash,\n    fetchSmartLists,\n    fetchBankAccounts,\n    fetchListFavorites,\n    fetchOrganizations,\n    fetchSupportedChannels,\n    fetchOrganisationMembers,\n    fetchSubscription,\n    fetchTemplateCategories,\n    fetchSubscriptionPlans,\n    fetchPaymentSetup,\n    fetchAudiences,\n    fetchAPIKeys,\n    fetchResources,\n    fetchDataModels,\n    fetchSegments,\n  },\n);\n\nexport function ProviderComponent(props: Props) {\n  const {\n    children,\n    isLoading,\n    fetchTeams,\n    fetchCards,\n    fetchLists,\n    fetchWallet,\n    authLoading,\n    fetchProfile,\n    fetchListTrash,\n    fetchTemplates,\n    fetchSmartLists,\n    fetchBankAccounts,\n    fetchListFavorites,\n    fetchOrganizations,\n    fetchSupportedChannels,\n    fetchOrganisationMembers,\n    fetchSubscription,\n    fetchTemplateCategories,\n    fetchSubscriptionPlans,\n    fetchPaymentSetup,\n    fetchAudiences,\n    fetchAPIKeys,\n    fetchResources,\n    fetchDataModels,\n    fetchSegments,\n  } = props;\n  const [error, setError] = React.useState<boolean>(false);\n\n  const state = loadState();\n\n  const router_location = useLocation();\n\n  React.useEffect(() => {\n    const auth_period = Cookie.get('auth_period');\n    const auth_valid = sessionStorage.getItem('auth_valid');\n    if (!auth_period) fetchData();\n    else if (auth_period && auth_valid) {\n      fetchData();\n    } else {\n      clearState();\n      Cookie.remove('auth_period');\n      sessionStorage.removeItem('auth_valid');\n      window.location.replace('/');\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const fetchData = async () => {\n    if (!!loadState()) {\n      authLoading(true);\n      try {\n        // @ts-ignore\n        const { organisations } = await fetchOrganizations();\n        // if no profile, use the profile of the last organization\n        const organisation_id = state?.profile\n          ? state?.profile.organisation_id\n          : organisations[organisations.length - 1].id;\n\n        const promiseFn: {\n          fn: any;\n          params?: any;\n          isPromise?: boolean;\n        }[] = [\n          { fn: fetchTemplates },\n          { fn: fetchBankAccounts },\n          { fn: fetchCards },\n          { fn: fetchLists },\n          { fn: fetchAudiences },\n          { fn: fetchSmartLists },\n          { fn: fetchListFavorites },\n          { fn: fetchListTrash },\n          { fn: fetchSubscription, params: organisation_id },\n          { fn: fetchTeams, params: organisation_id },\n          { fn: fetchProfile, params: organisation_id, isPromise: true },\n          { fn: fetchWallet, params: organisation_id },\n          { fn: fetchSubscriptionPlans },\n          { fn: fetchSupportedChannels, isPromise: true },\n          { fn: fetchOrganisationMembers, params: organisation_id },\n          { fn: fetchTemplateCategories },\n          { fn: fetchAPIKeys },\n          { fn: fetchResources },\n          { fn: fetchDataModels },\n          { fn: fetchSegments },\n        ];\n\n        if (router_location.pathname === '/s/payments/onboarding') {\n          promiseFn.push({ fn: fetchPaymentSetup, params: organisation_id, isPromise: true });\n        }\n\n        await Promise.all(\n          promiseFn.map(({ fn, params, isPromise }) =>\n            isPromise ? fn(params).catch((e: any) => console.log(e)) : fn(params),\n          ),\n        );\n\n        setError(false);\n      } catch (e) {\n        console.log(e);\n      }\n      authLoading(false);\n    }\n  };\n\n  if (isLoading) {\n    return <FullPageSpinner />;\n  }\n\n  if (error && !isLoading) {\n    return (\n      <Flex\n        height=\"100vh\"\n        textAlign=\"center\"\n        alignItems=\"center\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n      >\n        <Box width=\"100px\" marginBottom=\"0.5rem\">\n          <Image src=\"/images/sad.png\" />\n        </Box>\n        <Heading>oops!</Heading>\n        <Text marginBottom=\"0.5rem\">\n          An error occurred <br />\n          while setting up your account.\n        </Text>\n        <Button variantColor=\"blue\" onClick={fetchData}>\n          Try again\n        </Button>\n      </Flex>\n    );\n  }\n\n  return <>{children}</>;\n}\n\nexport const PreloadedStateProvider = connector(ProviderComponent);\n"]},"metadata":{},"sourceType":"module"}